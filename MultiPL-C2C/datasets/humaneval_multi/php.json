{
  "HumanEval_88_sort_array": "<?php\nfunction sort_array($array) {\n    return empty($array) ? [] : (function() use($array) {\n        $is_even = ($array[0] + $array[count($array) - 1]) % 2 === 0;\n        sort($array);\n        return $is_even ? array_reverse($array) : $array;\n    })();\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_107_even_odd_palindrome": "<?php\nfunction even_odd_palindrome($n) {\n    $is_palindrome=function($n) {\n        return strval($n) === strrev(strval($n));\n    };\n\n    $even_palindrome_count = 0;\n    $odd_palindrome_count = 0;\n\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 === 1 && $is_palindrome($i)) {\n            $odd_palindrome_count += 1;\n        } elseif ($i % 2 === 0 && $is_palindrome($i)) {\n            $even_palindrome_count += 1;\n        }\n    }\n\n    return [$even_palindrome_count, $odd_palindrome_count];\n}\nfunction candidate(...$args) {\n    return even_odd_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(123) !== array(8, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== array(4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== array(6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(25) !== array(5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19) !== array(4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_78_hex_key": "<?php\nfunction hex_key($num) {\n    $primes = ['2', '3', '5', '7', 'B', 'D'];\n    $total = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $primes)) {\n            $total += 1;\n        }\n    }\n    return $total;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_18_how_many_times": "<?php\nfunction how_many_times($string, $substring) {\n    $times = 0;\n\n    for ($i = 0; $i <= strlen($string) - strlen($substring); $i++) {\n        if (substr($string, $i, strlen($substring)) == $substring) {\n            $times += 1;\n        }\n    }\n\n    return $times;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_141_file_name_check": "<?php\nfunction file_name_check($file_name) {\n    $suf = ['txt', 'exe', 'dll'];\n    $lst = explode('.', $file_name);\n    if (count($lst) != 2) {\n        return 'No';\n    }\n    if (!in_array($lst[1], $suf)) {\n        return 'No';\n    }\n    if (strlen($lst[0]) == 0) {\n        return 'No';\n    }\n    if (!ctype_alpha($lst[0][0])) {\n        return 'No';\n    }\n    $t = preg_match_all('/\\d/', $lst[0]);\n    if ($t > 3) {\n        return 'No';\n    }\n    return 'Yes';\n}\nfunction candidate(...$args) {\n    return file_name_check(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"example.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1example.dll\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"s1sdf3.asd\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K.dll\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"MY16FILE3.exe\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"His12FILE94.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_Y.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"?aREYA.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"/this_is_valid.dll\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.wow\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.txtexe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#this2_i4s_5valid.ten\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"@this1_is6_valid.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_12valid.6exe4.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"all.exe.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I563_No.exe\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Is3youfault.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"no_one#knows.dll\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1I563_Yes3.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I563_Yes3.txtt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"final..txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"final132\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_f4indsartal132.\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"s.\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_102_choose_num": "<?php\nfunction choose_num($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x == $y) {\n        return -1;\n    }\n    return $y - 1;\n}\nfunction candidate(...$args) {\n    return choose_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(12, 15) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13, 12) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(33, 12354) !== 12354) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5234, 5233) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 29) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 7) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(546, 546) !== 546) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_84_solve": "<?php\nfunction solve($N) {\n    return decbin(array_sum(str_split($N)));\n}\nfunction candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1000) !== \"1\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(150) !== \"110\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(147) !== \"1100\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(333) !== \"1001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(963) !== \"10010\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_73_smallest_change": "<?php\nfunction smallest_change($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\nfunction candidate(...$args) {\n    return smallest_change(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 5, 4, 7, 9, 6)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 3, 2, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 4, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 1, 1, 3)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_51_remove_vowels": "<?php\nfunction remove_vowels($text) {\n    return preg_replace(\"/[aeiou]/i\", \"\", $text);\n}\nfunction candidate(...$args) {\n    return remove_vowels(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\\nghijklm\") !== \"bcdf\\nghjklm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"fedcba\") !== \"fdcb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"acBAA\") !== \"cB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"EcBOO\") !== \"cB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ybcd\") !== \"ybcd\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_35_max_element": "<?php\nfunction max_element($l) {\n    $m = $l[0];\n    foreach ($l as $e) {\n        if ($e > $m) {\n            $m = $e;\n        }\n    }\n    return $m;\n}\nfunction candidate(...$args) {\n    return max_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)) !== 124) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_89_encrypt": "<?php\nfunction encrypt($s) {\n    $d = 'abcdefghijklmnopqrstuvwxyz';\n    $out = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if (strpos($d, $c) !== false) {\n            $out .= $d[(strpos($d, $c)+4) % 26];\n        } else {\n            $out .= $c;\n        }\n    }\n    return $out;\n}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_41_car_race_collision": "<?php\nfunction car_race_collision($n) {\n    return $n**2;\n}\nfunction candidate(...$args) {\n    return car_race_collision(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 100) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_10_make_palindrome": "<?php\nfunction make_palindrome($string) {\n    if (!$string) {\n        return '';\n    }\n\n    $beginning_of_suffix = 0;\n\n    while (substr($string, $beginning_of_suffix) != strrev(substr($string, $beginning_of_suffix))) {\n        $beginning_of_suffix++;\n    }\n\n    return $string . strrev(substr($string, 0, $beginning_of_suffix));\n}\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_44_change_base": "<?php\nfunction change_base($x, $base) {\n    $ret = \"\";\n    while ($x > 0) {\n        $ret = strval($x % $base) . $ret;\n        $x = intdiv($x, $base);\n    }\n    return $ret;\n}\nfunction candidate(...$args) {\n    return change_base(...$args);\n}\n\nfunction test(): void {\n    if (candidate(8, 3) !== \"22\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 3) !== \"100\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(234, 2) !== \"11101010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(16, 2) !== \"10000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(8, 2) !== \"1000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 2) !== \"111\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== \"2\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 4) !== \"3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5) !== \"4\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 6) !== \"5\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 7) !== \"6\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 8) !== \"7\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_47_median": "<?php\nfunction median($l) {\n    sort($l);\n    if (count($l) % 2 == 1) {\n        return $l[count($l) / 2];\n    } else {\n        return ($l[count($l) / 2 - 1] + $l[count($l) / 2]) / 2.0;\n    }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_155_even_odd_count": "<?php\nfunction even_odd_count($num) {\n    $even_count = 0;\n    $odd_count = 0;\n    foreach (str_split(abs($num)) as $i) {\n        if ($i % 2 == 0) {\n            $even_count += 1;\n        } else {\n            $odd_count += 1;\n        }\n    }\n    return [$even_count, $odd_count];\n}\nfunction candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_139_special_factorial": "<?php\nfunction special_factorial($n) {\n    $fact_i = 1;\n    $special_fact = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact_i *= $i;\n        $special_fact *= $fact_i;\n    }\n    return $special_fact;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_71_triangle_area": "<?php\nfunction triangle_area($a, $b, $c) {\n    if ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) {\n        return -1;\n    }\n    $s = ($a + $b + $c)/2;\n    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    $area = round($area, 2);\n    return $area;\n}\nfunction candidate(...$args) {\n    return triangle_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== 6.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 5) !== 8.18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 2) !== 1.73) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 3) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 5, 7) !== 16.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 3) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1, 1) !== 0.43) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_14_all_prefixes": "<?php\nfunction all_prefixes($string) {\n    $result = [];\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $result[] = substr($string, 0, $i+1);\n    }\n\n    return $result;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_0_has_close_elements": "<?php\nfunction has_close_elements($numbers, $threshold) {\n    foreach ($numbers as $idx => $elem) {\n        foreach ($numbers as $idx2 => $elem2) {\n            if ($idx != $idx2) {\n                $distance = abs($elem - $elem2);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\nfunction candidate(...$args) {\n    return has_close_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.95) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.8) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 1.0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 0.5) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_12_longest": "<?php\nfunction longest($strings) {\n    if (!$strings) {\n        return null;\n    }\n\n    $maxlen = max(array_map('strlen', $strings));\n    foreach ($strings as $s) {\n        if (strlen($s) == $maxlen) {\n            return $s;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_4_mean_absolute_deviation": "<?php\nfunction mean_absolute_deviation($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    return array_sum(array_map(function($x) use ($mean) { return abs($x - $mean); }, $numbers)) / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_69_search": "<?php\nfunction search($lst) {\n    $frq = array_fill(0, max($lst) + 1, 0);\n    foreach ($lst as $i) {\n        $frq[$i]++;\n    }\n\n    $ans = -1;\n    for ($i = 1; $i < count($frq); $i++) {\n        if ($frq[$i] >= $i) {\n            $ans = $i;\n        }\n    }\n\n    return $ans;\n}\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8, 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_122_add_elements": "<?php\nfunction add_elements($arr, $k) {\n    return array_sum(array_filter(array_slice($arr, 0, $k), function($elem) {\n        return strlen(strval($elem)) <= 2;\n    }));\n}\nfunction candidate(...$args) {\n    return add_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111, 121, 3, 4000, 5, 6), 2) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) !== 125) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1), 1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_20_find_closest_elements": "<?php\nfunction find_closest_elements($numbers) {\n    $closest_pair = null;\n    $distance = null;\n\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = 0; $j < count($numbers); $j++) {\n            if ($i != $j) {\n                if ($distance === null) {\n                    $distance = abs($numbers[$i] - $numbers[$j]);\n                    $closest_pair = [$numbers[$i], $numbers[$j]];\n                } else {\n                    $new_distance = abs($numbers[$i] - $numbers[$j]);\n                    if ($new_distance < $distance) {\n                        $distance = $new_distance;\n                        $closest_pair = [$numbers[$i], $numbers[$j]];\n                    }\n                }\n            }\n        }\n    }\n\n    sort($closest_pair);\n    return $closest_pair;\n}\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_142_sum_squares": "<?php\nfunction sum_squares($lst) {\n    $result =[];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 === 0) {\n            $result[] = $lst[$i]**2;\n        } elseif ($i % 4 === 0 && $i % 3 !== 0) {\n            $result[] = $lst[$i]**3;\n        } else {\n            $result[] = $lst[$i];\n        }\n    }\n    return array_sum($result);\n}\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_25_factorize": "<?php\nfunction factorize($n) {\n    $fact = [];\n    $i = 2;\n    while ($i <= intval(sqrt($n) + 1)) {\n        if ($n % $i === 0) {\n            $fact[] = $i;\n            $n /= $i;\n        } else {\n            $i += 1;\n        }\n    }\n\n    if ($n > 1) {\n        $fact[] = $n;\n    }\n    return $fact;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_146_specialFilter": "<?php\nfunction specialFilter($nums) {\n    $count = 0;\n    foreach($nums as $num) {\n        if ($num > 10) {\n            $odd_digits = [1, 3, 5, 7, 9];\n            $number_as_string = strval($num);\n            if (in_array(intval($number_as_string[0]), $odd_digits) && in_array(intval($number_as_string[-1]), $odd_digits)) {\n                $count += 1;\n            }\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return specialFilter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, -2, 1, -5)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15, -73, 14, -15)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(33, -2, -3, 45, 21, 109)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(43, -12, 93, 125, 121, 109)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(71, -2, -33, 75, 21, 19)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_152_compare": "<?php\nfunction compare($game, $guess) {\n    return array_map(function($x, $y) { return abs($x - $y); }, $game, $guess);\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_123_get_odd_collatz": "<?php\nfunction get_odd_collatz($n) {\n    if ($n%2==0) {\n        $odd_collatz = [];\n    } else {\n        $odd_collatz = [$n];\n    }\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n/2;\n        } else {\n            $n = $n*3 + 1;\n        }\n        if ($n%2 == 1) {\n            array_push($odd_collatz, intval($n));\n        }\n    }\n    sort($odd_collatz);\n    return $odd_collatz;\n}\nfunction candidate(...$args) {\n    return get_odd_collatz(...$args);\n}\n\nfunction test(): void {\n    if (candidate(14) !== array(1, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== array(1, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_96_count_up_to": "<?php\nfunction count_up_to($n) {\n    $primes = [];\n\n    for ($i = 2; $i < $n; $i++) {\n        $is_prime = true;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j === 0) {\n                $is_prime = false;\n                break;\n            }\n        }\n        if ($is_prime) {\n            $primes[] = $i;\n        }\n    }\n\n    return $primes;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_132_is_nested": "<?php\nfunction is_nested($string) {\n    $opening_bracket_index = [];\n    $closing_bracket_index = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($opening_bracket_index, $i);\n        } else {\n            array_push($closing_bracket_index, $i);\n        }\n    }\n    $closing_bracket_index = array_reverse($closing_bracket_index);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closing_bracket_index);\n    foreach ($opening_bracket_index as $idx) {\n        if ($i < $l && $idx < $closing_bracket_index[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_45_triangle_area": "<?php\nfunction triangle_area($a, $h) {\n    return $a * $h / 2.0;\n}\nfunction candidate(...$args) {\n    return triangle_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 3) !== 7.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2) !== 2.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 8) !== 40.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_150_x_or_y": "<?php\nfunction x_or_y($n, $x, $y) {\n    if ($n == 1) {\n        return $y;\n    }\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return $y;\n            break;\n        }\n    }\n    return $x;\n}\nfunction candidate(...$args) {\n    return x_or_y(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7, 34, 12) !== 34) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 8, 5) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 33, 5212) !== 33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1259, 3, 52) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7919, -1, 12) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3609, 1245, 583) !== 583) { throw new Exception(\"Test failed!\"); }\n    if (candidate(91, 56, 129) !== 129) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 34, 1234) !== 1234) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 0) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_154_cycpattern_check": "<?php\nfunction cycpattern_check($a, $b) {\n    $l = strlen($b);\n    $pat = $b . $b;\n    for ($i = 0; $i < strlen($a) - $l + 1; $i++) {\n        for ($j = 0; $j < $l + 1; $j++) {\n            if (substr($a, $i, $l) == substr($pat, $j, $l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return cycpattern_check(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xyzw\", \"xyw\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"yello\", \"ell\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"whattup\", \"ptut\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"efef\", \"fee\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abab\", \"aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"winemtt\", \"tinem\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_3_below_zero": "<?php\nfunction below_zero($operations) {\n    $balance = 0;\n\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\nfunction candidate(...$args) {\n    return below_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, -3, 1, 2, -3)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, -4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -2, 2, -2, 5, -5, 4, -4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_140_fix_spaces": "<?php\nfunction fix_spaces($text) {\n    $new_text = \"\";\n    $i = 0;\n    $start = $end = 0;\n    while ($i < strlen($text)) {\n        if ($text[$i] == \" \") {\n            $end += 1;\n        } else {\n            if ($end - $start > 2) {\n                $new_text .= \"-\".$text[$i];\n            } elseif ($end - $start > 0) {\n                $new_text .= str_repeat(\"_\", $end - $start).$text[$i];\n            } else {\n                $new_text .= $text[$i];\n            }\n            $start = $end = $i+1;\n        }\n        $i+=1;\n    }\n    if ($end - $start > 2) {\n        $new_text .= \"-\";\n    } elseif ($end - $start > 0) {\n        $new_text .= \"_\";\n    }\n    return $new_text;\n}\nfunction candidate(...$args) {\n    return fix_spaces(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Example\") !== \"Example\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mudasir Hanif \") !== \"Mudasir_Hanif_\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Yellow Yellow  Dirty  Fellow\") !== \"Yellow_Yellow__Dirty__Fellow\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Exa   mple\") !== \"Exa-mple\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"   Exa 1 2 2 mple\") !== \"-Exa_1_2_2_mple\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_9_rolling_max": "<?php\nfunction rolling_max($numbers) {\n    $running_max = null;\n    $result = [];\n\n    foreach ($numbers as $n) {\n        if ($running_max === null) {\n            $running_max = $n;\n        } else {\n            $running_max = max($running_max, $n);\n        }\n\n        $result[] = $running_max;\n    }\n\n    return $result;\n}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_72_will_it_fly": "<?php\nfunction will_it_fly($q, $w) {\n    if (array_sum($q) > $w) {\n        return false;\n    }\n\n    $i = 0;\n    $j = count($q)-1;\n    while ($i<$j) {\n        if ($q[$i] != $q[$j]) {\n            return false;\n        }\n        $i+=1;\n        $j-=1;\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return will_it_fly(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 2, 3), 9) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), 5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3), 5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 3), 1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5), 5) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_138_is_equal_to_sum_even": "<?php\nfunction is_equal_to_sum_even($n) {\n    return $n%2 == 0 && $n >= 8;\n}\nfunction candidate(...$args) {\n    return is_equal_to_sum_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_143_words_in_sentence": "<?php\nfunction words_in_sentence($sentence) {\n    $new_lst = [];\n    foreach(explode(\" \", $sentence) as $word) {\n        $flg = 0;\n        if (strlen($word) == 1) {\n            $flg = 1;\n        }\n        for ($i = 2; $i < strlen($word); $i++) {\n            if (strlen($word)%$i == 0) {\n                $flg = 1;\n            }\n        }\n        if ($flg == 0 || strlen($word) == 2) {\n            array_push($new_lst, $word);\n        }\n    }\n    return join(\" \", $new_lst);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_42_incr_list": "<?php\nfunction incr_list($l) {\n    return array_map(function($e) { return $e + 1; }, $l);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_70_strange_sort_list": "<?php\nfunction strange_sort_list($lst) {\n    $res = [];\n    $switch = true;\n    while ($lst) {\n        $res[] = $switch ? min($lst) : max($lst);\n        unset($lst[array_search(end($res), $lst)]);\n        $switch = !$switch;\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_24_largest_divisor": "<?php\nfunction largest_divisor($n) {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_46_fib4": "<?php\nfunction fib4($n) {\n    $results = [0, 0, 2, 0];\n    if ($n < 4) {\n        return $results[$n];\n    }\n\n    for ($i = 4; $i <= $n; $i++) {\n        array_push($results, $results[count($results)-1] + $results[count($results)-2] + $results[count($results)-3] + $results[count($results)-4]);\n        array_shift($results);\n    }\n\n    return $results[count($results)-1];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_98_count_upper": "<?php\nfunction count_upper($s) {\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (strpos(\"AEIOU\", $s[$i]) !== false) {\n            $count += 1;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_upper(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"aBCdEf\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdefg\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dBBE\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"B\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"U\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"EEEE\") !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_1_separate_paren_groups": "<?php\nfunction separate_paren_groups($paren_string) {\n    $result = [];\n    $current_string = [];\n    $current_depth = 0;\n\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $c = $paren_string[$i];\n        if ($c === '(') {\n            $current_depth += 1;\n            $current_string[] = $c;\n        } elseif ($c === ')') {\n            $current_depth -= 1;\n            $current_string[] = $c;\n\n            if ($current_depth === 0) {\n                $result[] = implode($current_string);\n                $current_string = [];\n            }\n        }\n    }\n\n    return $result;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_67_fruit_distribution": "<?php\nfunction fruit_distribution($s, $n) {\n    $lis = [];\n    foreach (explode(' ', $s) as $i) {\n        if (is_numeric($i)) {\n            array_push($lis, intval($i));\n        }\n    }\n    return $n - array_sum($lis);\n}\nfunction candidate(...$args) {\n    return fruit_distribution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"5 apples and 6 oranges\", 19) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5 apples and 6 oranges\", 21) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0 apples and 1 oranges\", 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1 apples and 0 oranges\", 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2 apples and 3 oranges\", 100) !== 95) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2 apples and 3 oranges\", 5) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1 apples and 100 oranges\", 120) !== 19) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_61_correct_bracketing": "<?php\nfunction correct_bracketing($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] === \"(\") {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return False;\n        }\n    }\n    return $depth === 0;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_63_fibfib": "<?php\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_62_derivative": "<?php\nfunction derivative($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $i * $xs[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_13_greatest_common_divisor": "<?php\nfunction greatest_common_divisor($a, $b) {\n    while ($b) {\n        [$a, $b] = [$b, $a % $b];\n    }\n    return $a;\n}\nfunction candidate(...$args) {\n    return greatest_common_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 7) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(49, 14) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(144, 60) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_81_numerical_letter_grade": "<?php\nfunction numerical_letter_grade($grades) {\n    $letter_grade = [];\n    foreach ($grades as $gpa) {\n        if ($gpa == 4.0) {\n            $letter_grade[] = \"A+\";\n        } elseif ($gpa > 3.7) {\n            $letter_grade[] = \"A\";\n        } elseif ($gpa > 3.3) {\n            $letter_grade[] = \"A-\";\n        } elseif ($gpa > 3.0) {\n            $letter_grade[] = \"B+\";\n        } elseif ($gpa > 2.7) {\n            $letter_grade[] = \"B\";\n        } elseif ($gpa > 2.3) {\n            $letter_grade[] = \"B-\";\n        } elseif ($gpa > 2.0) {\n            $letter_grade[] = \"C+\";\n        } elseif ($gpa > 1.7) {\n            $letter_grade[] = \"C\";\n        } elseif ($gpa > 1.3) {\n            $letter_grade[] = \"C-\";\n        } elseif ($gpa > 1.0) {\n            $letter_grade[] = \"D+\";\n        } elseif ($gpa > 0.7) {\n            $letter_grade[] = \"D\";\n        } elseif ($gpa > 0.0) {\n            $letter_grade[] = \"D-\";\n        } else {\n            $letter_grade[] = \"E\";\n        }\n    }\n    return $letter_grade;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_31_is_prime": "<?php\nfunction is_prime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($k = 2; $k < $n; $k++) {\n        if ($n % $k == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return is_prime(...$args);\n}\n\nfunction test(): void {\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(101) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13441) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(61) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(85) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(255379) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_147_get_max_triples": "<?php\nfunction get_max_triples($n) {\n    $A = array_map(function($i) { return $i*$i - $i + 1; }, range(1, $n));\n    $ans = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i+1; $j < $n; $j++) {\n            for ($k = $j+1; $k < $n; $k++) {\n                if (($A[$i]+$A[$j]+$A[$k])%3 == 0) {\n                    $ans[] = [$A[$i], $A[$j], $A[$k]];\n                }\n            }\n        }\n    }\n    return count($ans);\n}\nfunction candidate(...$args) {\n    return get_max_triples(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 36) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 53361) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_131_digits": "<?php\nfunction digits($n) {\n    $product = 1;\n    $odd_count = 0;\n    foreach(str_split($n) as $digit) {\n        $int_digit = intval($digit);\n        if ($int_digit%2 == 1) {\n            $product= $product*$int_digit;\n            $odd_count+=1;\n        }\n    }\n    if ($odd_count ==0) {\n        return 0;\n    } else {\n        return $product;\n    }\n}\nfunction candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765) !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543) !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_15_string_sequence": "<?php\nfunction string_sequence($n) {\n    return implode(' ', range(0, $n));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_95_check_dict_case": "<?php\nfunction check_dict_case($dict) {\n    if (count($dict) == 0) {\n        return false;\n    } else {\n        $state = \"start\";\n        foreach ($dict as $key => $value) {\n            if (!is_string($key)) {\n                $state = \"mixed\";\n                break;\n            }\n            if ($state == \"start\") {\n                if (ctype_upper($key)) {\n                    $state = \"upper\";\n                } elseif (ctype_lower($key)) {\n                    $state = \"lower\";\n                } else {\n                    break;\n                }\n            } elseif (($state == \"upper\" && !ctype_upper($key)) || ($state == \"lower\" && !ctype_lower($key))) {\n                $state = \"mixed\";\n                break;\n            } else {\n                continue;\n            }\n        }\n        return $state == \"upper\" || $state == \"lower\";\n    }\n}\nfunction candidate(...$args) {\n    return check_dict_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"p\" => \"pineapple\", \"b\" => \"banana\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_110_exchange": "<?php\nfunction exchange($lst1, $lst2) {\n  $odd = 0;\n  $even = 0;\n  foreach ($lst1 as $i) {\n    if ($i%2 == 1) {\n      $odd += 1;\n    }\n  }\n  foreach ($lst2 as $i) {\n    if ($i%2 == 0) {\n      $even += 1;\n    }\n  }\n  if ($even >= $odd) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\nfunction candidate(...$args) {\n    return exchange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4), array(1, 2, 3, 4)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(1, 5, 3, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(2, 1, 4, 3)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 7, 3), array(2, 6, 4)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 7, 3), array(2, 6, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 6, 1, 8, 9), array(3, 5, 5, 1, 1, 1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 200), array(200, 200)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_82_prime_length": "<?php\nfunction prime_length($string) {\n    $l = strlen($string);\n    if ($l == 0 || $l == 1) {\n        return false;\n    }\n    for ($i = 2; $i < $l; $i++) {\n        if ($l % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return prime_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdcba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"kittens\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"orange\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"wow\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"world\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"MadaM\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Wow\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"HI\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gogo\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaaaaaaaaaaaaa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Madam\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"M\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_125_split_words": "<?php\nfunction split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(' ', str_replace(',', ' ', $txt));\n    } else {\n        return count(array_filter(str_split($txt), function($i) {\n            return ctype_lower($i) && ord($i) % 2 == 0;\n        }));\n    }\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_27_flip_case": "<?php\nfunction flip_case($string) {\n    return strtolower($string) ^ strtoupper($string) ^ $string;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_126_is_sorted": "<?php\nfunction is_sorted($lst) {\n    $count_digit = array_fill_keys($lst, 0);\n    foreach ($lst as $i) {\n        $count_digit[$i]++;\n    }\n    if (in_array(true, array_map(function($i) use ($count_digit) {\n        return $count_digit[$i] > 2;\n    }, $lst))) {\n        return false;\n    }\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_36_fizz_buzz": "<?php\nfunction fizz_buzz($n) {\n    $ns = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 === 0 || $i % 13 === 0) {\n            $ns[] = $i;\n        }\n    }\n    $s = implode('', array_map('strval', $ns));\n    $ans = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ans += ($s[$i] === '7');\n    }\n    return $ans;\n}\nfunction candidate(...$args) {\n    return fizz_buzz(...$args);\n}\n\nfunction test(): void {\n    if (candidate(50) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(78) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(79) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(200) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4000) !== 192) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10000) !== 639) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100000) !== 8026) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_21_rescale_to_unit": "<?php\nfunction rescale_to_unit($numbers) {\n    $min_number = min($numbers);\n    $max_number = max($numbers);\n    return array_map(function($x) use ($min_number, $max_number) {\n        return ($x - $min_number) / ($max_number - $min_number);\n    }, $numbers);\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_49_modp": "<?php\nfunction modp($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = (2 * $ret) % $p;\n    }\n    return $ret;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_28_concatenate": "<?php\nfunction concatenate($strings) {\n    return implode($strings);\n}\nfunction candidate(...$args) {\n    return concatenate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"xyz\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\", \"w\", \"k\")) !== \"xyzwk\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_60_sum_to_n": "<?php\nfunction sum_to_n($n) {\n    return array_sum(range(0, $n));\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_91_is_bored": "<?php\nfunction is_bored($S) {\n    $sentences = preg_split('/[.?!]\\s*/', $S);\n    return count(array_filter($sentences, function($sentence) {\n        return substr($sentence, 0, 2) == 'I ';\n    }));\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_87_get_row": "<?php\nfunction get_row($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $v) {\n            if ($v === $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        if ($a[0] === $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $coords;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_97_multiply": "<?php\nfunction multiply($a, $b) {\n    return abs($a % 10) * abs($b % 10);\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_8_sum_product": "<?php\nfunction sum_product($numbers) {\n    $sum_value = 0;\n    $prod_value = 1;\n\n    foreach($numbers as $n) {\n        $sum_value += $n;\n        $prod_value *= $n;\n    }\n    return [$sum_value, $prod_value];\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_137_compare_one": "<?php\nfunction compare_one($a, $b) {\n    $temp_a = $a;\n    $temp_b = $b;\n    if (is_string($temp_a)) $temp_a = str_replace(',', '.', $temp_a);\n    if (is_string($temp_b)) $temp_b = str_replace(',', '.', $temp_b);\n    if (floatval($temp_a) == floatval($temp_b)) return null;\n    return floatval($temp_a) > floatval($temp_b) ? $a : $b;\n}\nfunction candidate(...$args) {\n    return compare_one(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 2) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2.5) !== 2.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 6) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, \"2,3\") !== \"2,3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5,1\", \"6\") !== \"6\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"2\") !== \"2\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", 1) !== null) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_40_triples_sum_to_zero": "<?php\nfunction triples_sum_to_zero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return triples_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 5, -1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 9, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 5, -100)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 3, 5, -100)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_129_minPath": "<?php\nfunction minPath($grid, $k) {\n    $n = count($grid);\n    $val = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n\n                $val = min($temp);\n            }\n        }\n    }\n\n    $ans = [];\n    for ($i = 0; $i < $k; $i++) {\n        if ($i % 2 == 0) {\n            $ans[] = 1;\n        } else {\n            $ans[] = $val;\n        }\n    }\n    return $ans;\n}\nfunction candidate(...$args) {\n    return minPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3) !== array(1, 2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12), array(13, 14, 15, 16)), 4) !== array(1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 4, 13, 10), array(5, 7, 12, 1), array(3, 16, 11, 15), array(8, 14, 9, 2)), 7) !== array(1, 10, 1, 10, 1, 10, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(8, 14, 9, 2), array(6, 4, 13, 15), array(5, 7, 1, 12), array(3, 10, 11, 16)), 5) !== array(1, 7, 1, 7, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(11, 8, 7, 2), array(5, 16, 14, 4), array(9, 3, 15, 6), array(12, 13, 10, 1)), 9) !== array(1, 6, 1, 6, 1, 6, 1, 6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(12, 13, 10, 1), array(9, 3, 15, 6), array(5, 16, 14, 4), array(11, 8, 7, 2)), 12) !== array(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 7, 4), array(3, 1, 5), array(6, 8, 9)), 8) !== array(1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 1, 5), array(3, 8, 9), array(2, 7, 4)), 8) !== array(1, 5, 1, 5, 1, 5, 1, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2), array(3, 4)), 10) !== array(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 3), array(3, 2)), 10) !== array(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_83_starts_one_ends": "<?php\nfunction starts_one_ends($n) {\n    if ($n == 1) return 1;\n    return 18 * pow(10, $n - 2);\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_157_right_angle_triangle": "<?php\nfunction right_angle_triangle($a, $b, $c) {\n    return $a*$a == $b*$b + $c*$c || $b*$b == $a*$a + $c*$c || $c*$c == $a*$a + $b*$b;\n}\nfunction candidate(...$args) {\n    return right_angle_triangle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_56_correct_bracketing": "<?php\nfunction correct_bracketing($brackets) {\n    $depth = 0;\n    foreach (str_split($brackets) as $b) {\n        if ($b == \"<\") {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return False;\n        }\n    }\n    return $depth == 0;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_148_bf": "<?php\nfunction bf($planet1, $planet2) {\n    $planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $planet_names) || !in_array($planet2, $planet_names) || $planet1 == $planet2) {\n        return [];\n    }\n    $planet1_index = array_search($planet1, $planet_names);\n    $planet2_index = array_search($planet2, $planet_names);\n    if ($planet1_index < $planet2_index) {\n        return array_slice($planet_names, $planet1_index + 1, $planet2_index - $planet1_index - 1);\n    } else {\n        return array_slice($planet_names, $planet2_index + 1, $planet1_index - $planet2_index - 1);\n    }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_90_next_smallest": "<?php\nfunction next_smallest($lst) {\n    $lst = array_unique($lst);\n    sort($lst);\n    return count($lst) < 2 ? null : $lst[1];\n}\nfunction candidate(...$args) {\n    return next_smallest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 1, 4, 3, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 0)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-35, 34, 12, -45)) !== -35) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_48_is_palindrome": "<?php\nfunction is_palindrome($text) {\n    for ($i = 0; $i < strlen($text); $i++) {\n        if ($text[$i] != $text[strlen($text) - 1 - $i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_85_add": "<?php\nfunction add($lst) {\n  $sum = 0;\n  for ($i = 1; $i < count($lst); $i += 2) {\n    if ($lst[$i] % 2 == 0) {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\nfunction candidate(...$args) {\n    return add(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 88)) !== 88) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7, 2, 122)) !== 122) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 0, 6, 7)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 4, 6, 8)) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_130_tri": "<?php\nfunction tri($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $my_tri = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $my_tri[] = $i / 2 + 1;\n        } else {\n            $my_tri[] = $my_tri[$i - 1] + $my_tri[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $my_tri;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_52_below_threshold": "<?php\nfunction below_threshold($l, $t) {\n    foreach ($l as $e) {\n        if ($e >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return below_threshold(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 10), 100) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 21) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 22) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 8, 4, 10), 11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 8, 4, 10), 10) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_92_any_int": "<?php\nfunction any_int($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_118_get_closest_vowel": "<?php\nfunction get_closest_vowel($word) {\n    if (strlen($word) < 3) {\n        return \"\";\n    }\n\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'];\n    for ($i = strlen($word)-2; $i > 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            if (!in_array($word[$i+1], $vowels) && !in_array($word[$i-1], $vowels)) {\n                return $word[$i];\n            }\n        }\n    }\n    return \"\";\n}\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_114_minSubArraySum": "<?php\nfunction minSubArraySum($nums) {\n    $max_sum = 0;\n    $s = 0;\n    foreach ($nums as $num) {\n        $s += -$num;\n        if ($s < 0) {\n            $s = 0;\n        }\n        $max_sum = max($s, $max_sum);\n    }\n    if ($max_sum == 0) {\n        $max_sum = max(array_map(function($i) {return -$i;}, $nums));\n    }\n    $min_sum = -$max_sum;\n    return $min_sum;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7)) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_80_is_happy": "<?php\nfunction is_happy($s) {\n  if (strlen($s) < 3) {\n    return false;\n  }\n\n  for ($i = 0; $i < strlen($s) - 2; $i++) {\n    if ($s[$i] == $s[$i+1] || $s[$i+1] == $s[$i+2] || $s[$i] == $s[$i+2]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_68_pluck": "<?php\nfunction pluck($arr) {\n  if(count($arr) == 0) return [];\n  $evens = array_filter($arr, function($x) { return $x%2 == 0; });\n  if($evens == []) return [];\n  return [min($evens), array_search(min($evens), $arr)];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_153_Strongest_Extension": "<?php\nfunction Strongest_Extension($class_name, $extensions) {\n    $strong = $extensions[0];\n    $my_val = strlen(preg_replace('/[^A-Z]/', '', $extensions[0])) - strlen(preg_replace('/[^a-z]/', '', $extensions[0]));\n    foreach ($extensions as $s) {\n        $val = strlen(preg_replace('/[^A-Z]/', '', $s)) - strlen(preg_replace('/[^a-z]/', '', $s));\n        if ($val > $my_val) {\n            $strong = $s;\n            $my_val = $val;\n        }\n    }\n    $ans = $class_name . \".\" . $strong;\n    return $ans;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_117_select_words": "<?php\nfunction select_words($s, $n) {\n    $result = [];\n    foreach (explode(\" \", $s) as $word) {\n        $n_consonants = 0;\n        foreach (str_split($word) as $c) {\n            if (!in_array(strtolower($c), [\"a\",\"e\",\"i\",\"o\",\"u\"])) {\n                $n_consonants += 1;\n            }\n        }\n        if ($n_consonants == $n) {\n            array_push($result, $word);\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_100_make_a_pile": "<?php\nfunction make_a_pile($n) {\n    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $n + 2*$i;\n    }\n    return $pile;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_112_reverse_delete": "<?php\nfunction reverse_delete($s, $c) {\n    $s = str_replace(str_split($c), '', $s);\n    return [$s, strrev($s) == $s];\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_17_parse_music": "<?php\nfunction parse_music($music_string) {\n    $note_map = ['o' => 4, 'o|' => 2, '.|' => 1];\n    return array_filter(array_map(function($x) use ($note_map) {\n        return $note_map[$x];\n    }, explode(' ', $music_string)));\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_53_add": "<?php\nfunction add($x, $y) {\n    return $x + $y;\n}\nfunction candidate(...$args) {\n    return add(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0, 1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 0) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 7) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 5) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_66_digitSum": "<?php\nfunction digitSum($s) {\n    if ($s == \"\") return 0;\n    return array_sum(array_map(function ($char) {\n        return ord($char) * ctype_upper($char);\n    }, str_split($s)));\n}\nfunction candidate(...$args) {\n    return digitSum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abAB\") !== 131) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcCd\") !== 67) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"helloE\") !== 69) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"woArBld\") !== 131) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aAaaaXa\") !== 153) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\" How are yOu?\") !== 151) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You arE Very Smart\") !== 327) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_5_intersperse": "<?php\nfunction intersperse($numbers, $delimeter) {\n    if (empty($numbers)) {\n        return [];\n    }\n\n    $result = [];\n\n    foreach ($numbers as $n) {\n        $result[] = $n;\n        $result[] = $delimeter;\n    }\n\n    array_pop($result);\n\n    return $result;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_76_is_simple_power": "<?php\nfunction is_simple_power($x, $n) {\n    if ($n == 1) {\n        return $x == 1;\n    }\n    $power = 1;\n    while ($power < $x) {\n        $power = $power * $n;\n    }\n    return $power == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_79_decimal_to_binary": "<?php\nfunction decimal_to_binary($decimal) {\n    return \"db\".decbin($decimal).\"db\";\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_93_encode": "<?php\nfunction encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $vowels_replace = array_combine(str_split($vowels), array_map(function($i) { return chr(ord($i) + 2); }, str_split($vowels)));\n    $message = strtolower($message) ^ strtoupper($message) ^ $message;\n    return strtr($message, $vowels_replace);\n}\nfunction candidate(...$args) {\n    return encode(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"TEST\") !== \"tgst\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mudasir\") !== \"mWDCSKR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YES\") !== \"ygs\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"This is a message\") !== \"tHKS KS C MGSSCGG\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I DoNt KnOw WhAt tO WrItE\") !== \"k dQnT kNqW wHcT Tq wRkTg\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_120_maximum": "<?php\nfunction maximum($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    sort($arr);\n    return array_slice($arr, -$k);\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_65_circular_shift": "<?php\nfunction circular_shift($x, $shift) {\n    $s = strval($x);\n    if ($shift > strlen($s)) {\n        return strrev($s);\n    } else {\n        return substr($s, strlen($s) - $shift) . substr($s, 0, strlen($s) - $shift);\n    }\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_106_f": "<?php\nfunction f($n) {\n    $ret = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i%2 == 0) {\n            $x = 1;\n            for ($j = 1; $j <= $i; $j++) $x *= $j;\n            $ret[] = $x;\n        } else {\n            $x = 0;\n            for ($j = 1; $j <= $i; $j++) $x += $j;\n            $ret[] = $x;\n        }\n    }\n    return $ret;\n}\nfunction candidate(...$args) {\n    return f(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== array(1, 2, 6, 24, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(1, 2, 6, 24, 15, 720, 28)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== array(1, 2, 6)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_159_eat": "<?php\nfunction eat($number, $need, $remaining) {\n    if($need <= $remaining) {\n        return [$number + $need, $remaining - $need];\n    } else {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_74_total_match": "<?php\nfunction total_match($lst1, $lst2) {\n    $l1 = array_reduce($lst1, function($acc, $st) {\n        return $acc + strlen($st);\n    }, 0);\n    $l2 = array_reduce($lst2, function($acc, $st) {\n        return $acc + strlen($st);\n    }, 0);\n\n    return $l1 <= $l2 ? $lst1 : $lst2;\n}\nfunction candidate(...$args) {\n    return total_match(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hi\", \"hi\")) !== array(\"hi\", \"hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hi\", \"hi\", \"admin\", \"project\")) !== array(\"hi\", \"admin\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"4\"), array(\"1\", \"2\", \"3\", \"4\", \"5\")) !== array(\"4\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"Hi\")) !== array(\"hI\", \"Hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hi\")) !== array(\"hI\", \"hi\", \"hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hii\")) !== array(\"hi\", \"admin\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), array(\"this\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\"), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_162_string_to_md5": "<?php\nfunction string_to_md5($text) {\n    return $text ? md5($text) : null;\n}\nfunction candidate(...$args) {\n    return string_to_md5(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== \"3e25960a79dbc69b674cd4ec67a72c62\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A B C\") !== \"0ef78513b0cb8cef12743f5aeb35f888\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"password\") !== \"5f4dcc3b5aa765d61d8327deb882cf99\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_124_valid_date": "<?php\nfunction valid_date($date) {\n    try {\n        $date = trim($date);\n        list($month, $day, $year) = explode('-', $date);\n        $month = (int)$month;\n        $day = (int)$day;\n        $year = (int)$year;\n        if ($month < 1 || $month > 12) {\n            return false;\n        }\n        if (in_array($month, [1,3,5,7,8,10,12]) && ($day < 1 || $day > 31)) {\n            return false;\n        }\n        if (in_array($month, [4,6,9,11]) && ($day < 1 || $day > 30)) {\n            return false;\n        }\n        if ($month == 2 && ($day < 1 || $day > 29)) {\n            return false;\n        }\n    } catch (Exception $e) {\n        return false;\n    }\n\n    return true;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_113_odd_count": "<?php\nfunction odd_count($lst) {\n    $res = [];\n    foreach ($lst as $arr) {\n        $n = array_sum(array_map(function($d) { return (int)$d%2==1; }, str_split($arr)));\n        $res[] = \"the number of odd elements \" . $n . \"n the str\". $n .\"ng \". $n .\" of the \". $n .\"nput.\";\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return odd_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"1234567\")) !== array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"3\", \"11111111\")) !== array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"271\", \"137\", \"314\")) !== array(\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_121_solution": "<?php\nfunction solution($lst) {\n    return array_sum(array_filter($lst, function($x, $idx) {\n        return $idx%2==0 && $x%2==1;\n    }, ARRAY_FILTER_USE_BOTH));\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_64_vowels_count": "<?php\nfunction vowels_count($s) {\n    $vowels = \"aeiouAEIOU\";\n    $n_vowels = count(array_filter(str_split($s), function($c) use ($vowels) {\n        return strpos($vowels, $c) !== false;\n    }));\n    if (substr($s, -1) === 'y' || substr($s, -1) === 'Y') {\n        $n_vowels++;\n    }\n    return $n_vowels;\n}\nfunction candidate(...$args) {\n    return vowels_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcde\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Alone\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"key\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bye\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"keY\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bYe\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ACEDY\") !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_43_pairs_sum_to_zero": "<?php\nfunction pairs_sum_to_zero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_55_fib": "<?php\nfunction fib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_127_intersection": "<?php\nfunction intersection($interval1, $interval2) {\n    $is_prime=function($num) {\n        if ($num == 1 || $num == 0) {\n            return false;\n        }\n        if ($num == 2) {\n            return true;\n        }\n        for ($i = 2; $i < $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    if ($length > 0 && $is_prime($length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_134_check_if_last_char_is_a_letter": "<?php\nfunction check_if_last_char_is_a_letter($txt) {\n    $check = explode(' ', $txt);\n    $check = end($check);\n    return (strlen($check) == 1 && (ord(strtolower($check)) >= 97 && ord(strtolower($check)) <= 122));\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_104_unique_digits": "<?php\nfunction unique_digits($x) {\n    $odd_digit_elements = [];\n    foreach($x as $i) {\n        if (preg_match('/^[13579]+$/', $i)) {\n            $odd_digit_elements[] = $i;\n        }\n    }\n    sort($odd_digit_elements);\n    return $odd_digit_elements;\n}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_108_count_nums": "<?php\nfunction count_nums($arr) {\n    $digits_sum = function($n) {\n        $neg = 1;\n        if ($n < 0) {\n            $n = -1 * $n;\n            $neg = -1;\n        }\n        $n = array_map('intval', str_split($n));\n        $n[0] = $n[0] * $neg;\n        return array_sum($n);\n    };\n    return count(array_filter(array_map($digits_sum, $arr), function($x) { return $x > 0; }));\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_163_generate_integers": "<?php\nfunction generate_integers($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 === 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return generate_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 10) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(132, 2) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17, 89) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_136_largest_smallest_integers": "<?php\nfunction largest_smallest_integers($lst) {\n    $smallest = array_filter($lst, function($x) { return $x < 0; });\n    $largest = array_filter($lst, function($x) { return $x > 0; });\n    return [max($smallest) ?: null, min($largest) ?: null];\n}\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_161_solve": "<?php\nfunction solve($s) {\n    $flg = 0;\n    $idx = 0;\n    $new_str = str_split($s);\n    foreach ($new_str as &$i) {\n        if (ctype_alpha($i)) {\n            $i = ctype_upper($i) ? strtolower($i) : strtoupper($i);\n            $flg = 1;\n        }\n        $idx += 1;\n    }\n    $s = implode($new_str);\n    if ($flg == 0) {\n        return strrev($s);\n    }\n    return $s;\n}\nfunction candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AsDf\") !== \"aSdF\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1234\") !== \"4321\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"AB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#a@C\") !== \"#A@c\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#AsdfW^45\") !== \"#aSDFw^45\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#6@2\") !== \"2@6#\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#$a^D\") !== \"#$A^d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#ccc\") !== \"#CCC\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_156_int_to_mini_roman": "<?php\nfunction int_to_mini_roman($number) {\n    $num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    $sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n    $i = 12;\n    $res = '';\n    while ($number) {\n        $div = intdiv($number, $num[$i]);\n        $number %= $num[$i];\n        while ($div) {\n            $res .= $sym[$i];\n            $div--;\n        }\n        $i--;\n    }\n    return strtolower($res);\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_158_find_max": "<?php\nfunction find_max($words) {\n    usort($words, function($a, $b) {\n        return (count(array_unique(str_split($b))) <=> count(array_unique(str_split($a)))) ?: strcmp($a, $b);\n    });\n\n    return $words[0];\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_11_string_xor": "<?php\nfunction string_xor($a, $b) {\n    $xor = function($i, $j) {\n        return $i === $j ? '0' : '1';\n    };\n\n    return join('', array_map($xor, str_split($a), str_split($b)));\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_111_histogram": "<?php\nfunction histogram($test) {\n    $dict1=[];\n    $list1=explode(\" \", $test);\n    $t=0;\n\n    foreach ($list1 as $i) {\n        if (substr_count($test, $i) > $t && $i != '') {\n            $t = substr_count($test, $i);\n        }\n    }\n    if ($t > 0) {\n        foreach ($list1 as $i) {\n            if (substr_count($test, $i) == $t) {\n                $dict1[$i] = $t;\n            }\n        }\n    }\n    return $dict1;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_75_is_multiply_prime": "<?php\nfunction is_multiply_prime($a) {\n    $is_prime=function($n) {\n        for ($j = 2; $j < $n; $j++) {\n            if ($n % $j == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    for ($i = 2; $i < 101; $i++) {\n        if (!$is_prime($i)) {\n            continue;\n        }\n        for ($j = 2; $j < 101; $j++) {\n            if (!$is_prime($j)) {\n                continue;\n            }\n            for ($k = 2; $k < 101; $k++) {\n                if (!$is_prime($k)) {\n                    continue;\n                }\n                if ($i*$j*$k == $a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return is_multiply_prime(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(125) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(105) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(126) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(729) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(891) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1001) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_135_can_arrange": "<?php\nfunction can_arrange($arr) {\n    $ind = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i-1]) {\n            $ind = $i;\n        }\n    }\n    return $ind;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_109_move_one_ball": "<?php\nfunction move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sorted_array = $arr;\n    sort($sorted_array);\n\n    $min_value = min($arr);\n    $min_index = array_search($min_value, $arr);\n    $my_arr = array_merge(array_slice($arr, $min_index), array_slice($arr, 0, $min_index));\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($my_arr[$i] != $sorted_array[$i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_144_simplify": "<?php\nfunction simplify($x, $n) {\n    list($a, $b) = explode(\"/\", $x);\n    list($c, $d) = explode(\"/\", $n);\n    $numerator = $a * $c;\n    $denom = $b * $d;\n    if ($numerator / $denom == floor($numerator / $denom)) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_6_parse_nested_parens": "<?php\nfunction parse_nested_parens($paren_string) {\n    $parse_paren_group = function($s) {\n        $depth = 0;\n        $max_depth = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] === '(') {\n                $depth += 1;\n                $max_depth = max($depth, $max_depth);\n            } else {\n                $depth -= 1;\n            }\n        }\n\n        return $max_depth;\n    };\n\n    return array_map($parse_paren_group, array_filter(explode(' ', $paren_string)));\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_145_order_by_points": "<?php\nfunction order_by_points($nums) {\n    $digits_sum = function($n) {\n        $neg = 1;\n        if ($n < 0) {\n            $n = -1 * $n;\n            $neg = -1;\n        }\n        $n = array_map('intval', str_split($n));\n        $n[0] = $n[0] * $neg;\n        return array_sum($n);\n    };\n    usort($nums, function($a, $b) use ($digits_sum) {\n        return $digits_sum($a) - $digits_sum($b);\n    });\n    return $nums;\n}\nfunction candidate(...$args) {\n    return order_by_points(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1, -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !== array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_128_prod_signs": "<?php\nfunction prod_signs($arr) {\n    if (empty($arr)) return null;\n    $prod = in_array(0, $arr) ? 0 : pow(-1, count(array_filter($arr, function($x) { return $x < 0; })));\n    return $prod * array_sum(array_map('abs', $arr));\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_94_skjkasdkd": "<?php\nfunction skjkasdkd($lst) {\n    $isPrime = function($n) {\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    $maxx = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] > $maxx && $isPrime($lst[$i])) {\n            $maxx = $lst[$i];\n        }\n    }\n    $result = array_sum(str_split(strval($maxx)));\n    return $result;\n}\nfunction candidate(...$args) {\n    return skjkasdkd(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) !== 25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 81, 12, 3, 1, 21)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 8, 1, 2, 1, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8191)) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8191, 123456, 127, 7)) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(127, 97, 8192)) !== 10) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_22_filter_integers": "<?php\nfunction filter_integers($values) {\n    return array_values(array_filter($values, function($x) {\n        return is_int($x);\n    }));\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_2_truncate_number": "<?php\nfunction truncate_number($number) {\n    return fmod($number, 1.0);\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_59_largest_prime_factor": "<?php\nfunction largest_prime_factor($n) {\n    $is_prime=function($k) {\n        if ($k < 2) {\n            return false;\n        }\n        for ($i = 2; $i < $k; $i++) {\n            if ($k % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    $largest = 1;\n    for ($j = 2; $j <= $n; $j++) {\n        if ($n % $j == 0 && $is_prime($j)) {\n            $largest = max($largest, $j);\n        }\n    }\n    return $largest;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_19_sort_numbers": "<?php\nfunction sort_numbers($numbers) {\n    $value_map = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    ];\n    $arr = array_filter(explode(' ', $numbers));\n    usort($arr, function($a, $b) use ($value_map) {\n        return $value_map[$a] - $value_map[$b];\n    });\n    return implode(' ', $arr);\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !== \"zero one two three four five six\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_7_filter_by_substring": "<?php\nfunction filter_by_substring($strings, $substring) {\n    return array_values(array_filter($strings, function($x) use ($substring) {\n        return strpos($x, $substring) !== false;\n    }));\n}\nfunction candidate(...$args) {\n    return filter_by_substring(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xx\") !== array(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"grunt\", \"trumpet\", \"prune\", \"gruesome\"), \"run\") !== array(\"grunt\", \"prune\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_77_iscube": "<?php\nfunction iscube($a) {\n    $a = abs($a);\n    return pow(round(pow($a, 1/3)), 3) == $a;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_119_match_parens": "<?php\nfunction match_parens($lst) {\n    $check = function($s) {\n        $val = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] == '(') {\n                $val += 1;\n            } else {\n                $val -= 1;\n            }\n            if ($val < 0) {\n                return false;\n            }\n        }\n        return $val == 0;\n    };\n\n    $S1 = $lst[0] . $lst[1];\n    $S2 = $lst[1] . $lst[0];\n    return $check($S1) || $check($S2) ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_30_get_positive": "<?php\nfunction get_positive($l) {\n    $result = array();\n    foreach ($l as $e) {\n        if ($e > 0) {\n            $result[] = $e;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_149_sorted_list_sum": "<?php\nfunction sorted_list_sum($lst) {\n    sort($lst);\n    $new_lst = [];\n    foreach ($lst as $i) {\n        if (strlen($i)%2 == 0) {\n            $new_lst[] = $i;\n        }\n    }\n    usort($new_lst, function($a, $b) {\n        return strlen($a) - strlen($b);\n    });\n    return $new_lst;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_105_by_length": "<?php\nfunction by_length($arr) {\n    $dic = [\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    ];\n    rsort($arr);\n    $new_arr = [];\n    foreach ($arr as $var) {\n        if (array_key_exists($var, $dic)) {\n            $new_arr[] = $dic[$var];\n        }\n    }\n    return $new_arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_29_filter_by_prefix": "<?php\nfunction filter_by_prefix($strings, $prefix) {\n    $result = [];\n    foreach ($strings as $x) {\n        if (strpos($x, $prefix) === 0) {\n            $result[] = $x;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_86_anti_shuffle": "<?php\nfunction anti_shuffle($s) {\n    $words = explode(' ', $s);\n    $sorted_words = array_map(function($i) {\n        $chars = str_split($i);\n        sort($chars);\n        return implode($chars);\n    }, $words);\n    return implode(' ', $sorted_words);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_34_unique": "<?php\nfunction unique($l) {\n    $unique = array_unique($l);\n    sort($unique);\n    return $unique;\n}\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_39_prime_fib": "<?php\nfunction prime_fib($n) {\n    $is_prime=function($p) {\n        if ($p < 2) {\n            return False;\n        }\n        for ($k = 2; $k < min(intval(sqrt($p)) + 1, $p - 1); $k++) {\n            if ($p % $k == 0) {\n                return False;\n            }\n        }\n        return True;\n    };\n    $f = [0, 1];\n    while (True) {\n        $f[] = $f[count($f) - 1] + $f[count($f) - 2];\n        if ($is_prime($f[count($f) - 1])) {\n            $n -= 1;\n        }\n        if ($n == 0) {\n            return $f[count($f) - 1];\n        }\n    }\n}\nfunction candidate(...$args) {\n    return prime_fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 233) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 1597) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28657) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 514229) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 433494437) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_58_common": "<?php\nfunction common($l1, $l2) {\n    $ret = array();\n    foreach ($l1 as $e1) {\n        foreach ($l2 as $e2) {\n            if ($e1 == $e2) {\n                $ret[] = $e1;\n            }\n        }\n    }\n    $ret = array_unique($ret);\n    sort($ret);\n    return $ret;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "HumanEval_54_same_chars": "<?php\nfunction same_chars($s0, $s1) {\n    return array_diff(str_split($s0), str_split($s1)) == array_diff(str_split($s1), str_split($s0));\n}\nfunction candidate(...$args) {\n    return same_chars(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\", \"dddddddabc\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dddddddabc\", \"abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eabcd\", \"dddddddabc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\", \"dddddddabcf\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\", \"aaccc\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
}