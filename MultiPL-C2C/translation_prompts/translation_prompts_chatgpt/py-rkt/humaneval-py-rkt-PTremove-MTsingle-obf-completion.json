[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"()\") #t 0.001)\n    (check-within (candidate \"(()())\") #t 0.001)\n    (check-within (candidate \"()()(()())()\") #t 0.001)\n    (check-within (candidate \"()()((()()())())(()()(()))\") #t 0.001)\n    (check-within (candidate \"((()())))\") #f 0.001)\n    (check-within (candidate \")(()\") #f 0.001)\n    (check-within (candidate \"(\") #f 0.001)\n    (check-within (candidate \"((((\") #f 0.001)\n    (check-within (candidate \")\") #f 0.001)\n    (check-within (candidate \"(()\") #f 0.001)\n    (check-within (candidate \"()()(()())())(()\") #f 0.001)\n    (check-within (candidate \"()()(()())()))()\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> bool:\n    VAR_1 = 0\n    for VAR_2 in VAR_0:\n        if (VAR_2 == '('):\n            VAR_1 += 1\n        else:\n            VAR_1 -= 1\n        if (VAR_1 < 0):\n            return False\n    return (VAR_1 == 0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 5 3) 7.5 0.001)\n    (check-within (candidate 2 2) 2.0 0.001)\n    (check-within (candidate 10 8) 40.0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> float:\n    return ((VAR_0 * VAR_1) / 2.0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 4) 288 0.001)\n    (check-within (candidate 5) 34560 0.001)\n    (check-within (candidate 7) 125411328000 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    VAR_1 = 1\n    VAR_2 = 1\n    for VAR_3 in range(1, (VAR_0 + 1)):\n        VAR_1 *= VAR_3\n        VAR_2 *= VAR_1\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 2 4 1 3 5 7)) (list #f 1) 0.001)\n    (check-within (candidate (list 2 4 1 3 5 7 0)) (list #f 1) 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 -2)) (list -2 1) 0.001)\n    (check-within (candidate (list 4 5 3 6 2 7 -7)) (list -7 2) 0.001)\n    (check-within (candidate (list 7 3 8 4 9 2 5 -9)) (list -9 2) 0.001)\n    (check-within (candidate (list )) (list #f #f) 0.001)\n    (check-within (candidate (list 0)) (list #f #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6)) (list -1 #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6 0)) (list -1 #f) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 1)) (list -3 1) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\nfrom typing import Tuple\nfrom typing import Optional\n\ndef FUNC_0(VAR_0: List[int]) -> Tuple[(Optional[int], Optional[int])]:\n    VAR_1 = list(filter((lambda VAR_2: (VAR_2 < 0)), VAR_0))\n    VAR_3 = list(filter((lambda VAR_2: (VAR_2 > 0)), VAR_0))\n    return ((max(VAR_1) if VAR_1 else None), (min(VAR_3) if VAR_3 else None))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 3 4 5 1 2)) #t 0.001)\n    (check-within (candidate (list 3 5 10 1 2)) #t 0.001)\n    (check-within (candidate (list 4 3 1 2)) #f 0.001)\n    (check-within (candidate (list 3 5 4 1 2)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> bool:\n    if (len(VAR_0) == 0):\n        return True\n    VAR_1 = sorted(VAR_0)\n    VAR_2 = []\n    VAR_3 = min(VAR_0)\n    VAR_4 = VAR_0.index(VAR_3)\n    VAR_2 = (VAR_0[VAR_4:] + VAR_0[0:VAR_4])\n    for VAR_5 in range(len(VAR_0)):\n        if (VAR_2[VAR_5] != VAR_1[VAR_5]):\n            return False\n    return True\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 5) 5 0.001)\n    (check-within (candidate 54) 5 0.001)\n    (check-within (candidate 120) 1 0.001)\n    (check-within (candidate 5014) 5 0.001)\n    (check-within (candidate 98765) 315 0.001)\n    (check-within (candidate 5576543) 2625 0.001)\n    (check-within (candidate 2468) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    VAR_1 = 1\n    VAR_2 = 0\n    for VAR_3 in str(VAR_0):\n        VAR_4 = int(VAR_3)\n        if ((VAR_4 % 2) == 1):\n            VAR_1 = (VAR_1 * VAR_4)\n            VAR_2 += 1\n    if (VAR_2 == 0):\n        return 0\n    else:\n        return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 28 0.001)\n    (check-within (candidate 10) 104 0.001)\n    (check-within (candidate 12) 386 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    VAR_1 = [0, 0, 2, 0]\n    if (VAR_0 < 4):\n        return VAR_1[VAR_0]\n    for VAR_2 in range(4, (VAR_0 + 1)):\n        VAR_1.append((((VAR_1[(- 1)] + VAR_1[(- 2)]) + VAR_1[(- 3)]) + VAR_1[(- 4)]))\n        VAR_1.pop(0)\n    return VAR_1[(- 1)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 3)) (list 1 2 3) 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 123 1 -10)) (list -10 3 -5 2 -3 3 5 0 9 1 123) 0.001)\n    (check-within (candidate (list 5 8 -12 4 23 2 3 11 12 -10)) (list -12 8 3 4 5 2 12 11 23 -10) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    VAR_1 = VAR_0[::2]\n    VAR_2 = VAR_0[1::2]\n    VAR_1.sort()\n    VAR_3 = []\n    for (VAR_4, VAR_5) in zip(VAR_1, VAR_2):\n        VAR_3.extend([VAR_4, VAR_5])\n    if (len(VAR_1) > len(VAR_2)):\n        VAR_3.append(VAR_1[(- 1)])\n    return VAR_3\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11) 0.001)\n    (check-within (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n\n    def FUNC_1(VAR_1):\n        VAR_2 = 1\n        if (VAR_1 < 0):\n            (VAR_1, VAR_2) = (((- 1) * VAR_1), (- 1))\n        VAR_1 = [int(VAR_3) for VAR_3 in str(VAR_1)]\n        VAR_1[0] = (VAR_1[0] * VAR_2)\n        return sum(VAR_1)\n    return sorted(VAR_0, key=FUNC_1)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"a\") #f 0.001)\n    (check-within (candidate \"aa\") #f 0.001)\n    (check-within (candidate \"abcd\") #t 0.001)\n    (check-within (candidate \"aabb\") #f 0.001)\n    (check-within (candidate \"adb\") #t 0.001)\n    (check-within (candidate \"xyy\") #f 0.001)\n    (check-within (candidate \"iopaxpoi\") #t 0.001)\n    (check-within (candidate \"iopaxioi\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str) -> bool:\n    if (len(VAR_0) < 3):\n        return False\n    for VAR_1 in range((len(VAR_0) - 2)):\n        if ((VAR_0[VAR_1] == VAR_0[(VAR_1 + 1)]) or (VAR_0[(VAR_1 + 1)] == VAR_0[(VAR_1 + 2)]) or (VAR_0[VAR_1] == VAR_0[(VAR_1 + 2)])):\n            return False\n    return True\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 100 2) \"001\" 0.001)\n    (check-within (candidate 12 2) \"12\" 0.001)\n    (check-within (candidate 97 8) \"79\" 0.001)\n    (check-within (candidate 12 1) \"21\" 0.001)\n    (check-within (candidate 11 101) \"11\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> str:\n    VAR_2 = str(VAR_0)\n    if (VAR_1 > len(VAR_2)):\n        return VAR_2[::(- 1)]\n    else:\n        return (VAR_2[(len(VAR_2) - VAR_1):] + VAR_2[:(len(VAR_2) - VAR_1)])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6 0.001)\n    (check-within (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nimport math\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[List[int]], VAR_1: int) -> int:\n    return sum([math.ceil((sum(VAR_2) / VAR_1)) for VAR_2 in VAR_0])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[float], VAR_1: float) -> bool:\n    for (VAR_2, VAR_3) in enumerate(VAR_0):\n        for (VAR_4, VAR_5) in enumerate(VAR_0):\n            if (VAR_2 != VAR_4):\n                VAR_6 = abs((VAR_3 - VAR_5))\n                if (VAR_6 < VAR_1):\n                    return True\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 4.0 3 1.7 2 3.5)) (list \"A+\" \"B\" \"C-\" \"C\" \"A-\") 0.001)\n    (check-within (candidate (list 1.2)) (list \"D+\") 0.001)\n    (check-within (candidate (list 0.5)) (list \"D-\") 0.001)\n    (check-within (candidate (list 0.0)) (list \"E\") 0.001)\n    (check-within (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list \"D\" \"D-\" \"C-\" \"B\" \"B+\") 0.001)\n    (check-within (candidate (list 0.0 0.7)) (list \"E\" \"D-\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[float]) -> List[str]:\n    VAR_1 = []\n    for VAR_2 in VAR_0:\n        if (VAR_2 == 4.0):\n            VAR_1.append('A+')\n        elif (VAR_2 > 3.7):\n            VAR_1.append('A')\n        elif (VAR_2 > 3.3):\n            VAR_1.append('A-')\n        elif (VAR_2 > 3.0):\n            VAR_1.append('B+')\n        elif (VAR_2 > 2.7):\n            VAR_1.append('B')\n        elif (VAR_2 > 2.3):\n            VAR_1.append('B-')\n        elif (VAR_2 > 2.0):\n            VAR_1.append('C+')\n        elif (VAR_2 > 1.7):\n            VAR_1.append('C')\n        elif (VAR_2 > 1.3):\n            VAR_1.append('C-')\n        elif (VAR_2 > 1.0):\n            VAR_1.append('D+')\n        elif (VAR_2 > 0.7):\n            VAR_1.append('D')\n        elif (VAR_2 > 0.0):\n            VAR_1.append('D-')\n        else:\n            VAR_1.append('E')\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 7 34 12) 34 0.001)\n    (check-within (candidate 15 8 5) 5 0.001)\n    (check-within (candidate 3 33 5212) 33 0.001)\n    (check-within (candidate 1259 3 52) 3 0.001)\n    (check-within (candidate 7919 -1 12) -1 0.001)\n    (check-within (candidate 3609 1245 583) 583 0.001)\n    (check-within (candidate 91 56 129) 129 0.001)\n    (check-within (candidate 6 34 1234) 1234 0.001)\n    (check-within (candidate 1 2 0) 0 0.001)\n    (check-within (candidate 2 2 0) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int, VAR_2: int) -> int:\n    if (VAR_0 == 1):\n        return VAR_2\n    for VAR_3 in range(2, VAR_0):\n        if ((VAR_0 % VAR_3) == 0):\n            return VAR_2\n            break\n    else:\n        return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 5 -2 1 -5)) 0 0.001)\n    (check-within (candidate (list 15 -73 14 -15)) 1 0.001)\n    (check-within (candidate (list 33 -2 -3 45 21 109)) 2 0.001)\n    (check-within (candidate (list 43 -12 93 125 121 109)) 4 0.001)\n    (check-within (candidate (list 71 -2 -33 75 21 19)) 3 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list )) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    VAR_1 = 0\n    for VAR_2 in VAR_0:\n        if (VAR_2 > 10):\n            VAR_3 = (1, 3, 5, 7, 9)\n            VAR_4 = str(VAR_2)\n            if ((int(VAR_4[0]) in VAR_3) and (int(VAR_4[(- 1)]) in VAR_3)):\n                VAR_1 += 1\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"o o o o\") (list 4 4 4 4) 0.001)\n    (check-within (candidate \".| .| .| .|\") (list 1 1 1 1) 0.001)\n    (check-within (candidate \"o| o| .| .| o o o o\") (list 2 2 1 1 4 4 4 4) 0.001)\n    (check-within (candidate \"o| .| o| .| o o| o o|\") (list 2 1 2 1 4 2 4 2) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str) -> List[int]:\n    VAR_1 = {'o': 4, 'o|': 2, '.|': 1}\n    return [VAR_1[VAR_2] for VAR_2 in VAR_0.split(' ') if VAR_2]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Hello world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello,world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello world,!\") (list \"Hello\" \"world,!\") 0.001)\n    (check-within (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\" \"!\") 0.001)\n    (check-within (candidate \"abcdef\") 3 0.001)\n    (check-within (candidate \"aaabb\") 2 0.001)\n    (check-within (candidate \"aaaBb\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\nfrom typing import Union\n\ndef FUNC_0(VAR_0: str) -> Union[(List[str], int)]:\n    if (' ' in VAR_0):\n        return VAR_0.split()\n    elif (',' in VAR_0):\n        return VAR_0.replace(',', ' ').split()\n    else:\n        return len([VAR_1 for VAR_1 in VAR_0 if (VAR_1.islower() and ((ord(VAR_1) % 2) == 0))])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abcde\") 5 0.001)\n    (check-within (candidate \"abcdecadeCADE\") 5 0.001)\n    (check-within (candidate \"aaaaAAAAaaaa\") 1 0.001)\n    (check-within (candidate \"Jerry jERRY JeRRRY\") 5 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> int:\n    return len(set(VAR_0.lower()))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Jupiter\" \"Neptune\") (list \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Mercury\") (list \"Venus\") 0.001)\n    (check-within (candidate \"Mercury\" \"Uranus\") (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\") 0.001)\n    (check-within (candidate \"Neptune\" \"Venus\") (list \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Mars\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Jupiter\" \"Makemake\") (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef FUNC_0(VAR_0: str, VAR_1: str) -> Tuple[(str, ...)]:\n    VAR_2 = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if ((VAR_0 not in VAR_2) or (VAR_1 not in VAR_2) or (VAR_0 == VAR_1)):\n        return ()\n    VAR_3 = VAR_2.index(VAR_0)\n    VAR_4 = VAR_2.index(VAR_1)\n    if (VAR_3 < VAR_4):\n        return VAR_2[(VAR_3 + 1):VAR_4]\n    else:\n        return VAR_2[(VAR_4 + 1):VAR_3]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abAB\") 131 0.001)\n    (check-within (candidate \"abcCd\") 67 0.001)\n    (check-within (candidate \"helloE\") 69 0.001)\n    (check-within (candidate \"woArBld\") 131 0.001)\n    (check-within (candidate \"aAaaaXa\") 153 0.001)\n    (check-within (candidate \" How are yOu?\") 151 0.001)\n    (check-within (candidate \"You arE Very Smart\") 327 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> int:\n    if (VAR_0 == ''):\n        return 0\n    return sum(((ord(VAR_1) if VAR_1.isupper() else 0) for VAR_1 in VAR_0))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 1 4 9)) 14 0.001)\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1)) 9 0.001)\n    (check-within (candidate (list -1 -1 -1 -1 -1 -1 -1 -1 -1)) -3 0.001)\n    (check-within (candidate (list 0)) 0 0.001)\n    (check-within (candidate (list -1 -5 2 -1 -5)) -126 0.001)\n    (check-within (candidate (list -56 -99 1 0 -2)) 3030 0.001)\n    (check-within (candidate (list -1 0 0 0 0 0 0 0 -1)) 0 0.001)\n    (check-within (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37)) -14196 0.001)\n    (check-within (candidate (list -1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10)) -1448 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    VAR_1 = []\n    for VAR_2 in range(len(VAR_0)):\n        if ((VAR_2 % 3) == 0):\n            VAR_1.append((VAR_0[VAR_2] ** 2))\n        elif (((VAR_2 % 4) == 0) and ((VAR_2 % 3) != 0)):\n            VAR_1.append((VAR_0[VAR_2] ** 3))\n        else:\n            VAR_1.append(VAR_0[VAR_2])\n    return sum(VAR_1)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 5) (list 2 3) 0.001)\n    (check-within (candidate 6) (list 2 3 5) 0.001)\n    (check-within (candidate 7) (list 2 3 5) 0.001)\n    (check-within (candidate 10) (list 2 3 5 7) 0.001)\n    (check-within (candidate 0) (list ) 0.001)\n    (check-within (candidate 22) (list 2 3 5 7 11 13 17 19) 0.001)\n    (check-within (candidate 1) (list ) 0.001)\n    (check-within (candidate 18) (list 2 3 5 7 11 13 17) 0.001)\n    (check-within (candidate 47) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43) 0.001)\n    (check-within (candidate 101) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: int) -> List[int]:\n    VAR_1 = []\n    for VAR_2 in range(2, VAR_0):\n        VAR_3 = True\n        for VAR_4 in range(2, VAR_2):\n            if ((VAR_2 % VAR_4) == 0):\n                VAR_3 = False\n                break\n        if VAR_3:\n            VAR_1.append(VAR_2)\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 3.0 5.0 7.0)) 84 0.001)\n    (check-within (candidate (list 1.4 4.2 0.0)) 29 0.001)\n    (check-within (candidate (list -2.4 1.0 1.0)) 6 0.001)\n    (check-within (candidate (list 100.0 1.0 15.0 2.0)) 10230 0.001)\n    (check-within (candidate (list 10000.0 10000.0)) 200000000 0.001)\n    (check-within (candidate (list -1.4 4.6 6.3)) 75 0.001)\n    (check-within (candidate (list -1.4 17.9 18.9 19.9)) 1086 0.001)\n    (check-within (candidate (list 0.0)) 0 0.001)\n    (check-within (candidate (list -1.0)) 1 0.001)\n    (check-within (candidate (list -1.0 1.0 0.0)) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[float]) -> int:\n    import math\n    VAR_1 = 0\n    for VAR_2 in VAR_0:\n        VAR_1 += (math.ceil(VAR_2) ** 2)\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    return sorted(list(set(VAR_0)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 10) 55 0.001)\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 8) 21 0.001)\n    (check-within (candidate 11) 89 0.001)\n    (check-within (candidate 12) 144 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    if (VAR_0 == 0):\n        return 0\n    if (VAR_0 == 1):\n        return 1\n    return (FUNC_0((VAR_0 - 1)) + FUNC_0((VAR_0 - 2)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 50) 0 0.001)\n    (check-within (candidate 78) 2 0.001)\n    (check-within (candidate 79) 3 0.001)\n    (check-within (candidate 100) 3 0.001)\n    (check-within (candidate 200) 6 0.001)\n    (check-within (candidate 4000) 192 0.001)\n    (check-within (candidate 10000) 639 0.001)\n    (check-within (candidate 100000) 8026 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    VAR_1 = []\n    for VAR_2 in range(VAR_0):\n        if (((VAR_2 % 11) == 0) or ((VAR_2 % 13) == 0)):\n            VAR_1.append(VAR_2)\n    VAR_3 = ''.join(list(map(str, VAR_1)))\n    VAR_4 = 0\n    for VAR_5 in VAR_3:\n        VAR_4 += (VAR_5 == '7')\n    return VAR_4\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\" 0.001)\n    (check-within (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\" 0.001)\n    (check-within (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\" 0.001)\n    (check-within (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\" 0.001)\n    (check-within (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\" 0.001)\n    (check-within (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\" 0.001)\n    (check-within (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\" 0.001)\n    (check-within (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\" 0.001)\n    (check-within (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str, VAR_1: List[str]) -> str:\n    VAR_2 = VAR_1[0]\n    VAR_3 = (len([VAR_4 for VAR_4 in VAR_1[0] if (VAR_4.isalpha() and VAR_4.isupper())]) - len([VAR_4 for VAR_4 in VAR_1[0] if (VAR_4.isalpha() and VAR_4.islower())]))\n    for VAR_5 in VAR_1:\n        VAR_6 = (len([VAR_4 for VAR_4 in VAR_5 if (VAR_4.isalpha() and VAR_4.isupper())]) - len([VAR_4 for VAR_4 in VAR_5 if (VAR_4.isalpha() and VAR_4.islower())]))\n        if (VAR_6 > VAR_3):\n            VAR_2 = VAR_5\n            VAR_3 = VAR_6\n    VAR_7 = ((VAR_0 + '.') + VAR_2)\n    return VAR_7\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0) 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List, Tuple\n\ndef FUNC_0(VAR_0: List[float]) -> Tuple[(float, float)]:\n    VAR_1 = None\n    VAR_2 = None\n    for (VAR_3, VAR_4) in enumerate(VAR_0):\n        for (VAR_5, VAR_6) in enumerate(VAR_0):\n            if (VAR_3 != VAR_5):\n                if (VAR_2 is None):\n                    VAR_2 = abs((VAR_4 - VAR_6))\n                    VAR_1 = tuple(sorted([VAR_4, VAR_6]))\n                else:\n                    VAR_7 = abs((VAR_4 - VAR_6))\n                    if (VAR_7 < VAR_2):\n                        VAR_2 = VAR_7\n                        VAR_1 = tuple(sorted([VAR_4, VAR_6]))\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"03-11-2000\") #t 0.001)\n    (check-within (candidate \"15-01-2012\") #f 0.001)\n    (check-within (candidate \"04-0-2040\") #f 0.001)\n    (check-within (candidate \"06-04-2020\") #t 0.001)\n    (check-within (candidate \"01-01-2007\") #t 0.001)\n    (check-within (candidate \"03-32-2011\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"04-31-3000\") #f 0.001)\n    (check-within (candidate \"06-06-2005\") #t 0.001)\n    (check-within (candidate \"21-31-2000\") #f 0.001)\n    (check-within (candidate \"04-12-2003\") #t 0.001)\n    (check-within (candidate \"04122003\") #f 0.001)\n    (check-within (candidate \"20030412\") #f 0.001)\n    (check-within (candidate \"2003-04\") #f 0.001)\n    (check-within (candidate \"2003-04-12\") #f 0.001)\n    (check-within (candidate \"04-2003\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> bool:\n    try:\n        VAR_0 = VAR_0.strip()\n        (VAR_1, VAR_2, VAR_3) = VAR_0.split('-')\n        (VAR_1, VAR_2, VAR_3) = (int(VAR_1), int(VAR_2), int(VAR_3))\n        if ((VAR_1 < 1) or (VAR_1 > 12)):\n            return False\n        if (((VAR_1 in [1, 3, 5, 7, 8, 10, 12]) and (VAR_2 < 1)) or (VAR_2 > 31)):\n            return False\n        if (((VAR_1 in [4, 6, 9, 11]) and (VAR_2 < 1)) or (VAR_2 > 30)):\n            return False\n        if (((VAR_1 == 2) and (VAR_2 < 1)) or (VAR_2 > 29)):\n            return False\n    except:\n        return False\n    return True\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 0 1) 1 0.001)\n    (check-within (candidate 1 0) 1 0.001)\n    (check-within (candidate 2 3) 5 0.001)\n    (check-within (candidate 5 7) 12 0.001)\n    (check-within (candidate 7 5) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> int:\n    return (VAR_0 + VAR_1)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -1)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #t 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 1 2 5 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 9 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -100)) #f 0.001)\n    (check-within (candidate (list 100 3 5 -100)) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> bool:\n    for VAR_1 in range(len(VAR_0)):\n        for VAR_2 in range((VAR_1 + 1), len(VAR_0)):\n            for VAR_3 in range((VAR_2 + 1), len(VAR_0)):\n                if (((VAR_0[VAR_1] + VAR_0[VAR_2]) + VAR_0[VAR_3]) == 0):\n                    return True\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 3) 1 0.001)\n    (check-within (candidate 7) 1 0.001)\n    (check-within (candidate 10) 5 0.001)\n    (check-within (candidate 100) 50 0.001)\n    (check-within (candidate 49) 7 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    for VAR_1 in reversed(range(VAR_0)):\n        if ((VAR_0 % VAR_1) == 0):\n            return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"three\") \"three\" 0.001)\n    (check-within (candidate \"three five nine\") \"three five nine\" 0.001)\n    (check-within (candidate \"five zero four seven nine eight\") \"zero four five seven eight nine\" 0.001)\n    (check-within (candidate \"six five four three two one zero\") \"zero one two three four five six\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str) -> str:\n    VAR_1 = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted([VAR_2 for VAR_2 in VAR_0.split(' ') if VAR_2], key=(lambda VAR_2: VAR_1[VAR_2])))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 3 5 4 7 9 6)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 3 2 2)) 1 0.001)\n    (check-within (candidate (list 1 4 2)) 1 0.001)\n    (check-within (candidate (list 1 4 4 2)) 1 0.001)\n    (check-within (candidate (list 1 2 3 2 1)) 0 0.001)\n    (check-within (candidate (list 3 1 1 3)) 0 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    VAR_1 = 0\n    for VAR_2 in range((len(VAR_0) // 2)):\n        if (VAR_0[VAR_2] != VAR_0[((len(VAR_0) - VAR_2) - 1)]):\n            VAR_1 += 1\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 4 10) 100) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 5) #f 0.001)\n    (check-within (candidate (list 1 20 4 10) 21) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 22) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 11) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 10) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int], VAR_1: int) -> bool:\n    for VAR_2 in VAR_0:\n        if (VAR_2 >= VAR_1):\n            return False\n    return True\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 2 -4)) -9 0.001)\n    (check-within (candidate (list 0 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 3 -1 1)) -10 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 2 4 1 2 -1 -1 9)) 20 0.001)\n    (check-within (candidate (list -1 1 -1 1)) 4 0.001)\n    (check-within (candidate (list -1 1 1 1)) -4 0.001)\n    (check-within (candidate (list -1 1 1 0)) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\nfrom typing import Optional\n\ndef FUNC_0(VAR_0: List[int]) -> Optional[int]:\n    if (not VAR_0):\n        return None\n    VAR_1 = (0 if (0 in VAR_0) else ((- 1) ** len(list(filter((lambda VAR_2: (VAR_2 < 0)), VAR_0)))))\n    return (VAR_1 * sum([abs(VAR_3) for VAR_3 in VAR_0]))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 3 5) 3 0.001)\n    (check-within (candidate 1101 101) 2 0.001)\n    (check-within (candidate 0 101) 1 0.001)\n    (check-within (candidate 3 11) 8 0.001)\n    (check-within (candidate 100 101) 1 0.001)\n    (check-within (candidate 30 5) 4 0.001)\n    (check-within (candidate 31 5) 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> int:\n    VAR_2 = 1\n    for VAR_3 in range(VAR_0):\n        VAR_2 = ((2 * VAR_2) % VAR_1)\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"aBCdEf\") 1 0.001)\n    (check-within (candidate \"abcdefg\") 0 0.001)\n    (check-within (candidate \"dBBE\") 0 0.001)\n    (check-within (candidate \"B\") 0 0.001)\n    (check-within (candidate \"U\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"EEEE\") 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> int:\n    VAR_1 = 0\n    for VAR_2 in range(0, len(VAR_0), 2):\n        if (VAR_0[VAR_2] in 'AEIOU'):\n            VAR_1 += 1\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 148 412) 16 0.001)\n    (check-within (candidate 19 28) 72 0.001)\n    (check-within (candidate 2020 1851) 0 0.001)\n    (check-within (candidate 14 -15) 20 0.001)\n    (check-within (candidate 76 67) 42 0.001)\n    (check-within (candidate 17 27) 49 0.001)\n    (check-within (candidate 0 1) 0 0.001)\n    (check-within (candidate 0 0) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> int:\n    return (abs((VAR_0 % 10)) * abs((VAR_1 % 10)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 15 33 1422 1)) (list 1 15 33) 0.001)\n    (check-within (candidate (list 152 323 1422 10)) (list ) 0.001)\n    (check-within (candidate (list 12345 2033 111 151)) (list 111 151) 0.001)\n    (check-within (candidate (list 135 103 31)) (list 31 135) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    VAR_1 = []\n    for VAR_2 in VAR_0:\n        if all((((int(VAR_3) % 2) == 1) for VAR_3 in str(VAR_2))):\n            VAR_1.append(VAR_2)\n    return sorted(VAR_1)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 3 2 3) 9) #t 0.001)\n    (check-within (candidate (list 1 2) 5) #f 0.001)\n    (check-within (candidate (list 3) 5) #t 0.001)\n    (check-within (candidate (list 3 2 3) 1) #f 0.001)\n    (check-within (candidate (list 1 2 3) 6) #f 0.001)\n    (check-within (candidate (list 5) 5) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int], VAR_1: int) -> bool:\n    if (sum(VAR_0) > VAR_1):\n        return False\n    (VAR_2, VAR_3) = (0, (len(VAR_0) - 1))\n    while (VAR_2 < VAR_3):\n        if (VAR_0[VAR_2] != VAR_0[VAR_3]):\n            return False\n        VAR_2 += 1\n        VAR_3 -= 1\n    return True\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 5) #f 0.001)\n    (check-within (candidate 30) #t 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 125) #t 0.001)\n    (check-within (candidate 105) #t 0.001)\n    (check-within (candidate 126) #f 0.001)\n    (check-within (candidate 729) #f 0.001)\n    (check-within (candidate 891) #f 0.001)\n    (check-within (candidate 1001) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> bool:\n\n    def FUNC_1(VAR_1):\n        for VAR_2 in range(2, VAR_1):\n            if ((VAR_1 % VAR_2) == 0):\n                return False\n        return True\n    for VAR_3 in range(2, 101):\n        if (not FUNC_1(VAR_3)):\n            continue\n        for VAR_4 in range(2, 101):\n            if (not FUNC_1(VAR_4)):\n                continue\n            for VAR_5 in range(2, 101):\n                if (not FUNC_1(VAR_5)):\n                    continue\n                if (((VAR_3 * VAR_4) * VAR_5) == VAR_0):\n                    return True\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list -3 -4 5) 3) (list -4 -3 5) 0.001)\n    (check-within (candidate (list 4 -4 4) 2) (list 4 4) 0.001)\n    (check-within (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2) 0.001)\n    (check-within (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123) 0.001)\n    (check-within (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20) 0.001)\n    (check-within (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15) 0.001)\n    (check-within (candidate (list -1 0 2 5 3 -10) 2) (list 3 5) 0.001)\n    (check-within (candidate (list 1 0 5 -7) 1) (list 5) 0.001)\n    (check-within (candidate (list 4 -4) 2) (list -4 4) 0.001)\n    (check-within (candidate (list -10 10) 2) (list -10 10) 0.001)\n    (check-within (candidate (list 1 2 3 -23 243 -400 0) 0) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int], VAR_1: int) -> List[int]:\n    if (VAR_1 == 0):\n        return []\n    VAR_0.sort()\n    VAR_2 = VAR_0[(- VAR_1):]\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list \"(()())\" \"((()))\" \"()\" \"((())()())\") 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list \"()\" \"(())\" \"((()))\" \"(((())))\") 0.001)\n    (check-within (candidate \"(()(())((())))\") (list \"(()(())((())))\") 0.001)\n    (check-within (candidate \"( ) (( )) (( )( ))\") (list \"()\" \"(())\" \"(()())\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str) -> List[str]:\n    VAR_1 = []\n    VAR_2 = []\n    VAR_3 = 0\n    for VAR_4 in VAR_0:\n        if (VAR_4 == '('):\n            VAR_3 += 1\n            VAR_2.append(VAR_4)\n        elif (VAR_4 == ')'):\n            VAR_3 -= 1\n            VAR_2.append(VAR_4)\n            if (VAR_3 == 0):\n                VAR_1.append(''.join(VAR_2))\n                VAR_2.clear()\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9) 0.001)\n    (check-within (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List, Any\n\ndef FUNC_0(VAR_0: List[Any]) -> List[int]:\n    return [VAR_1 for VAR_1 in VAR_0 if isinstance(VAR_1, int)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3)) 10 0.001)\n    (check-within (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1)) 25 0.001)\n    (check-within (candidate (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3)) 13 0.001)\n    (check-within (candidate (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6)) 11 0.001)\n    (check-within (candidate (list 0 81 12 3 1 21)) 3 0.001)\n    (check-within (candidate (list 0 8 1 2 1 7)) 7 0.001)\n    (check-within (candidate (list 8191)) 19 0.001)\n    (check-within (candidate (list 8191 123456 127 7)) 19 0.001)\n    (check-within (candidate (list 127 97 8192)) 10 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n\n    def FUNC_1(VAR_1):\n        for VAR_2 in range(2, (int((VAR_1 ** 0.5)) + 1)):\n            if ((VAR_1 % VAR_2) == 0):\n                return False\n        return True\n    VAR_3 = 0\n    VAR_4 = 0\n    while (VAR_4 < len(VAR_0)):\n        if ((VAR_0[VAR_4] > VAR_3) and FUNC_1(VAR_0[VAR_4])):\n            VAR_3 = VAR_0[VAR_4]\n        VAR_4 += 1\n    VAR_5 = sum((int(VAR_6) for VAR_6 in str(VAR_3)))\n    return VAR_5\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list ) (list )) (list ) 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\")) (list \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\")) (list \"4\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"Hi\")) (list \"hI\" \"Hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\")) (list \"hI\" \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hii\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list ) (list \"this\")) (list ) 0.001)\n    (check-within (candidate (list \"this\") (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str], VAR_1: List[str]) -> List[str]:\n    VAR_2 = 0\n    for VAR_3 in VAR_0:\n        VAR_2 += len(VAR_3)\n    VAR_4 = 0\n    for VAR_3 in VAR_1:\n        VAR_4 += len(VAR_3)\n    if (VAR_2 <= VAR_4):\n        return VAR_0\n    else:\n        return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\" 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"A B C\") \"0ef78513b0cb8cef12743f5aeb35f888\" 0.001)\n    (check-within (candidate \"password\") \"5f4dcc3b5aa765d61d8327deb882cf99\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Optional\n\ndef FUNC_0(VAR_0: str) -> Optional[str]:\n    import hashlib\n    return (hashlib.md5(VAR_0.encode('ascii')).hexdigest() if VAR_0 else None)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 2) 4 0.001)\n    (check-within (candidate 3) 9 0.001)\n    (check-within (candidate 4) 16 0.001)\n    (check-within (candidate 8) 64 0.001)\n    (check-within (candidate 10) 100 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    return (VAR_0 ** 2)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 16 2) #t 0.001)\n    (check-within (candidate 143214 16) #f 0.001)\n    (check-within (candidate 4 2) #t 0.001)\n    (check-within (candidate 9 3) #t 0.001)\n    (check-within (candidate 16 4) #t 0.001)\n    (check-within (candidate 24 2) #f 0.001)\n    (check-within (candidate 128 4) #f 0.001)\n    (check-within (candidate 12 6) #f 0.001)\n    (check-within (candidate 1 1) #t 0.001)\n    (check-within (candidate 1 12) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> bool:\n    if (VAR_1 == 1):\n        return (VAR_0 == 1)\n    VAR_2 = 1\n    while (VAR_2 < VAR_0):\n        VAR_2 = (VAR_2 * VAR_1)\n    return (VAR_2 == VAR_0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"TEST\") \"tgst\" 0.001)\n    (check-within (candidate \"Mudasir\") \"mWDCSKR\" 0.001)\n    (check-within (candidate \"YES\") \"ygs\" 0.001)\n    (check-within (candidate \"This is a VAR_0\") \"tHKS KS C MGSSCGG\" 0.001)\n    (check-within (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    VAR_1 = 'aeiouAEIOU'\n    VAR_2 = dict([(VAR_3, chr((ord(VAR_3) + 2))) for VAR_3 in VAR_1])\n    VAR_0 = VAR_0.swapcase()\n    return ''.join([(VAR_2[VAR_3] if (VAR_3 in VAR_1) else VAR_3) for VAR_3 in VAR_0])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 4 3 2) 0.001)\n    (check-within (candidate (list 5 2 5 2 3 3 9 0 123)) (list 6 3 6 3 4 4 10 1 124) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    return [(VAR_1 + 1) for VAR_1 in VAR_0]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hello!\") \"hELLO!\" 0.001)\n    (check-within (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    return VAR_0.swapcase()\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"abcde\") 2 0.001)\n    (check-within (candidate \"Alone\") 3 0.001)\n    (check-within (candidate \"key\") 2 0.001)\n    (check-within (candidate \"bye\") 1 0.001)\n    (check-within (candidate \"keY\") 2 0.001)\n    (check-within (candidate \"bYe\") 1 0.001)\n    (check-within (candidate \"ACEDY\") 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> int:\n    VAR_1 = 'aeiouAEIOU'\n    VAR_2 = sum(((VAR_3 in VAR_1) for VAR_3 in VAR_0))\n    if ((VAR_0[(- 1)] == 'y') or (VAR_0[(- 1)] == 'Y')):\n        VAR_2 += 1\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list \"aa\" \"a\" \"aaa\")) (list \"aa\") 0.001)\n    (check-within (candidate (list \"school\" \"AI\" \"asdf\" \"b\")) (list \"AI\" \"asdf\" \"school\") 0.001)\n    (check-within (candidate (list \"d\" \"b\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"d\" \"dcba\" \"abcd\" \"a\")) (list \"abcd\" \"dcba\") 0.001)\n    (check-within (candidate (list \"AI\" \"ai\" \"au\")) (list \"AI\" \"ai\" \"au\") 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"b\" \"c\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"aaaa\" \"bbbb\" \"dd\" \"cc\")) (list \"cc\" \"dd\" \"aaaa\" \"bbbb\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str]) -> List[str]:\n    VAR_0.sort()\n    VAR_1 = []\n    for VAR_2 in VAR_0:\n        if ((len(VAR_2) % 2) == 0):\n            VAR_1.append(VAR_2)\n    return sorted(VAR_1, key=len)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Hi, my name is John\") (list \"Hi\" \"my\" \"name\" \"is\" \"John\") 0.001)\n    (check-within (candidate \"One, two, three, four, five, six\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"Hi, my name\") (list \"Hi\" \"my\" \"name\") 0.001)\n    (check-within (candidate \"One,, two, three, four, five, six,\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"ahmed     , gamal\") (list \"ahmed\" \"gamal\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str) -> List[str]:\n    if (not VAR_0):\n        return []\n    VAR_1 = []\n    for VAR_2 in VAR_0:\n        if (VAR_2 == ','):\n            VAR_1.append(' ')\n        else:\n            VAR_1.append(VAR_2)\n    VAR_1 = ''.join(VAR_1)\n    return VAR_1.split()\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 123) (list 8 13) 0.001)\n    (check-within (candidate 12) (list 4 6) 0.001)\n    (check-within (candidate 3) (list 1 2) 0.001)\n    (check-within (candidate 63) (list 6 8) 0.001)\n    (check-within (candidate 25) (list 5 6) 0.001)\n    (check-within (candidate 19) (list 4 6) 0.001)\n    (check-within (candidate 9) (list 4 5) 0.001)\n    (check-within (candidate 1) (list 0 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef FUNC_0(VAR_0: int) -> Tuple[(int, int)]:\n\n    def FUNC_1(VAR_1):\n        return (str(VAR_1) == str(VAR_1)[::(- 1)])\n    VAR_2 = 0\n    VAR_3 = 0\n    for VAR_4 in range(1, (VAR_0 + 1)):\n        if (((VAR_4 % 2) == 1) and FUNC_1(VAR_4)):\n            VAR_3 += 1\n        elif (((VAR_4 % 2) == 0) and FUNC_1(VAR_4)):\n            VAR_2 += 1\n    return (VAR_2, VAR_3)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 3 4 5) 6.0 0.001)\n    (check-within (candidate 1 2 10) -1 0.001)\n    (check-within (candidate 4 8 5) 8.18 0.001)\n    (check-within (candidate 2 2 2) 1.73 0.001)\n    (check-within (candidate 1 2 3) -1 0.001)\n    (check-within (candidate 10 5 7) 16.25 0.001)\n    (check-within (candidate 2 6 3) -1 0.001)\n    (check-within (candidate 1 1 1) 0.43 0.001)\n    (check-within (candidate 2 2 10) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int, VAR_2: int) -> float:\n    if (((VAR_0 + VAR_1) <= VAR_2) or ((VAR_0 + VAR_2) <= VAR_1) or ((VAR_1 + VAR_2) <= VAR_0)):\n        return (- 1)\n    VAR_3 = (((VAR_0 + VAR_1) + VAR_2) / 2)\n    VAR_4 = ((((VAR_3 * (VAR_3 - VAR_0)) * (VAR_3 - VAR_1)) * (VAR_3 - VAR_2)) ** 0.5)\n    VAR_4 = round(VAR_4, 2)\n    return VAR_4\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"))) #t 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\"))) #f 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f 0.001)\n    (check-within (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"))) #f 0.001)\n    (check-within (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\"))) #t 0.001)\n    (check-within (candidate #hash((\"fruit\" .  \"Orange\") (\"taste\" .  \"Sweet\"))) #t 0.001)\n    (check-within (candidate #hash()) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Dict\n\ndef FUNC_0(VAR_0: Dict[(str, str)]) -> bool:\n    if (len(VAR_0.keys()) == 0):\n        return False\n    else:\n        VAR_1 = 'start'\n        for VAR_2 in VAR_0.keys():\n            if (isinstance(VAR_2, str) == False):\n                VAR_1 = 'mixed'\n                break\n            if (VAR_1 == 'start'):\n                if VAR_2.isupper():\n                    VAR_1 = 'upper'\n                elif VAR_2.islower():\n                    VAR_1 = 'lower'\n                else:\n                    break\n            elif (((VAR_1 == 'upper') and (not VAR_2.isupper())) or ((VAR_1 == 'lower') and (not VAR_2.islower()))):\n                VAR_1 = 'mixed'\n                break\n            else:\n                continue\n        return ((VAR_1 == 'upper') or (VAR_1 == 'lower'))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 3) (list 1 3 2 8) 0.001)\n    (check-within (candidate 4) (list 1 3 2 8 3) 0.001)\n    (check-within (candidate 5) (list 1 3 2 8 3 15) 0.001)\n    (check-within (candidate 6) (list 1 3 2 8 3 15 4) 0.001)\n    (check-within (candidate 7) (list 1 3 2 8 3 15 4 24) 0.001)\n    (check-within (candidate 8) (list 1 3 2 8 3 15 4 24 5) 0.001)\n    (check-within (candidate 9) (list 1 3 2 8 3 15 4 24 5 35) 0.001)\n    (check-within (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11) 0.001)\n    (check-within (candidate 0) (list 1) 0.001)\n    (check-within (candidate 1) (list 1 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: int) -> List[int]:\n    if (VAR_0 == 0):\n        return [1]\n    VAR_1 = [1, 3]\n    for VAR_2 in range(2, (VAR_0 + 1)):\n        if ((VAR_2 % 2) == 0):\n            VAR_1.append(((VAR_2 / 2) + 1))\n        else:\n            VAR_1.append(((VAR_1[(VAR_2 - 1)] + VAR_1[(VAR_2 - 2)]) + ((VAR_2 + 3) / 2)))\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 3 1 2 4 5)) 3 0.001)\n    (check-within (candidate (list -10 4 6 1000 10 20)) 8.0 0.001)\n    (check-within (candidate (list 5)) 5 0.001)\n    (check-within (candidate (list 6 5)) 5.5 0.001)\n    (check-within (candidate (list 8 1 3 9 9 2 7)) 7 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> float:\n    VAR_0 = sorted(VAR_0)\n    if ((len(VAR_0) % 2) == 1):\n        return VAR_0[(len(VAR_0) // 2)]\n    else:\n        return ((VAR_0[((len(VAR_0) // 2) - 1)] + VAR_0[(len(VAR_0) // 2)]) / 2.0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 8 3) \"22\" 0.001)\n    (check-within (candidate 9 3) \"100\" 0.001)\n    (check-within (candidate 234 2) \"11101010\" 0.001)\n    (check-within (candidate 16 2) \"10000\" 0.001)\n    (check-within (candidate 8 2) \"1000\" 0.001)\n    (check-within (candidate 7 2) \"111\" 0.001)\n    (check-within (candidate 2 3) \"2\" 0.001)\n    (check-within (candidate 3 4) \"3\" 0.001)\n    (check-within (candidate 4 5) \"4\" 0.001)\n    (check-within (candidate 5 6) \"5\" 0.001)\n    (check-within (candidate 6 7) \"6\" 0.001)\n    (check-within (candidate 7 8) \"7\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> str:\n    VAR_2 = ''\n    while (VAR_0 > 0):\n        VAR_2 = (str((VAR_0 % VAR_1)) + VAR_2)\n        VAR_0 //= VAR_1\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list \"VAR_2\" \"y\" \"z\")) \"VAR_2\" 0.001)\n    (check-within (candidate (list \"VAR_2\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\")) \"zzzz\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List, Optional\n\ndef FUNC_0(VAR_0: List[str]) -> Optional[str]:\n    if (not VAR_0):\n        return None\n    VAR_1 = max((len(VAR_2) for VAR_2 in VAR_0))\n    for VAR_3 in VAR_0:\n        if (len(VAR_3) == VAR_1):\n            return VAR_3\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5) 0.001)\n    (check-within (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3) 0.001)\n    (check-within (candidate (list 1 0 2 3 4)) (list 0 1 2 4 3) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4 3 3 5 5 5 7 77) 0.001)\n    (check-within (candidate (list 3 6 44 12 32 5)) (list 32 3 5 6 12 44) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    return sorted(sorted(VAR_0), key=(lambda VAR_1: bin(VAR_1)[2:].count('1')))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653) 0.001)\n    (check-within (candidate (list 5 3 2 8) (list 3 2)) (list 2 3) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int], VAR_1: List[int]) -> List[int]:\n    VAR_2 = set()\n    for VAR_3 in VAR_0:\n        for VAR_4 in VAR_1:\n            if (VAR_3 == VAR_4):\n                VAR_2.add(VAR_3)\n    return sorted(list(VAR_2))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"xyzw\" \"xyw\") #f 0.001)\n    (check-within (candidate \"yello\" \"ell\") #t 0.001)\n    (check-within (candidate \"whattup\" \"ptut\") #f 0.001)\n    (check-within (candidate \"efef\" \"fee\") #t 0.001)\n    (check-within (candidate \"abab\" \"aabb\") #f 0.001)\n    (check-within (candidate \"winemtt\" \"tinem\") #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str, VAR_1: str) -> bool:\n    VAR_2 = len(VAR_1)\n    VAR_3 = (VAR_1 + VAR_1)\n    for VAR_4 in range(((len(VAR_0) - VAR_2) + 1)):\n        for VAR_5 in range((VAR_2 + 1)):\n            if (VAR_0[VAR_4:(VAR_4 + VAR_2)] == VAR_3[VAR_5:(VAR_5 + VAR_2)]):\n                return True\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 2 3 4 1 2 4)) 1 0.001)\n    (check-within (candidate (list -1 -2 -3)) -6 0.001)\n    (check-within (candidate (list -1 -2 -3 2 -10)) -14 0.001)\n    (check-within (candidate (list -9999999999999999)) -9999999999999999 0.001)\n    (check-within (candidate (list 0 10 20 1000000)) 0 0.001)\n    (check-within (candidate (list -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 100 -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 10 11 13 8 3 4)) 3 0.001)\n    (check-within (candidate (list 100 -33 32 -1 0 -2)) -33 0.001)\n    (check-within (candidate (list -10)) -10 0.001)\n    (check-within (candidate (list 7)) 7 0.001)\n    (check-within (candidate (list 1 -1)) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    VAR_1 = 0\n    VAR_2 = 0\n    for VAR_3 in VAR_0:\n        VAR_2 += (- VAR_3)\n        if (VAR_2 < 0):\n            VAR_2 = 0\n        VAR_1 = max(VAR_2, VAR_1)\n    if (VAR_1 == 0):\n        VAR_1 = max(((- VAR_4) for VAR_4 in VAR_0))\n    VAR_5 = (- VAR_1)\n    return VAR_5\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5)) (list 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3 4 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0) 0.001)\n    (check-within (candidate (list 2 1)) (list 1 2) 0.001)\n    (check-within (candidate (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87) 0.001)\n    (check-within (candidate (list 21 14 23 11)) (list 23 21 14 11) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    return ([] if (len(VAR_0) == 0) else sorted(VAR_0, reverse=(((VAR_0[0] + VAR_0[(- 1)]) % 2) == 0)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1) (\"d\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"r VAR_3 g\") #hash((\"r\" .  1) (\"VAR_3\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"b b b b a\") #hash((\"b\" .  4)) 0.001)\n    (check-within (candidate \"r VAR_3 g\") #hash((\"r\" .  1) (\"VAR_3\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"\") #hash() 0.001)\n    (check-within (candidate \"a\") #hash((\"a\" .  1)) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Dict\n\ndef FUNC_0(VAR_0: str) -> Dict[(str, int)]:\n    VAR_1 = {}\n    VAR_2 = VAR_0.split(' ')\n    VAR_3 = 0\n    for VAR_4 in VAR_2:\n        if ((VAR_2.count(VAR_4) > VAR_3) and (VAR_4 != '')):\n            VAR_3 = VAR_2.count(VAR_4)\n    if (VAR_3 > 0):\n        for VAR_4 in VAR_2:\n            if (VAR_2.count(VAR_4) == VAR_3):\n                VAR_1[VAR_4] = VAR_3\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 14) (list 1 5 7 11 13 17) 0.001)\n    (check-within (candidate 5) (list 1 5) 0.001)\n    (check-within (candidate 12) (list 1 3 5) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: int) -> List[int]:\n    if ((VAR_0 % 2) == 0):\n        VAR_1 = []\n    else:\n        VAR_1 = [VAR_0]\n    while (VAR_0 > 1):\n        if ((VAR_0 % 2) == 0):\n            VAR_0 = (VAR_0 / 2)\n        else:\n            VAR_0 = ((VAR_0 * 3) + 1)\n        if ((VAR_0 % 2) == 1):\n            VAR_1.append(int(VAR_0))\n    return sorted(VAR_1)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 3 1 2 4 5)) (list 1 4 12 20) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 6) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 2 2) 0.001)\n    (check-within (candidate (list 3 2 1 0 4)) (list 2 2 0 16) 0.001)\n    (check-within (candidate (list 1)) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    return [(VAR_1 * VAR_2) for (VAR_1, VAR_2) in enumerate(VAR_0)][1:]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 1) 0 0.001)\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 24 0.001)\n    (check-within (candidate 10) 81 0.001)\n    (check-within (candidate 12) 274 0.001)\n    (check-within (candidate 14) 927 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    if (VAR_0 == 0):\n        return 0\n    if (VAR_0 == 1):\n        return 0\n    if (VAR_0 == 2):\n        return 1\n    return ((FUNC_0((VAR_0 - 1)) + FUNC_0((VAR_0 - 2))) + FUNC_0((VAR_0 - 3)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 3.5) 0.5 0.001)\n    (check-within (candidate 1.25) 0.25 0.001)\n    (check-within (candidate 123.0) 0.0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: float) -> float:\n    return (VAR_0 % 1.0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 3)) 3 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    VAR_1 = VAR_0[0]\n    for VAR_2 in VAR_0:\n        if (VAR_2 > VAR_1):\n            VAR_1 = VAR_2\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"10\") 10 0.001)\n    (check-within (candidate \"14.5\") 15 0.001)\n    (check-within (candidate \"-15.5\") -16 0.001)\n    (check-within (candidate \"15.3\") 15 0.001)\n    (check-within (candidate \"0\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> int:\n    from math import floor, ceil\n    if (VAR_0.count('.') == 1):\n        while (VAR_0[(- 1)] == '0'):\n            VAR_0 = VAR_0[:(- 1)]\n    VAR_1 = float(VAR_0)\n    if (VAR_0[(- 2):] == '.5'):\n        if (VAR_1 > 0):\n            VAR_2 = ceil(VAR_1)\n        else:\n            VAR_2 = floor(VAR_1)\n    elif (len(VAR_0) > 0):\n        VAR_2 = int(round(VAR_1))\n    else:\n        VAR_2 = 0\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 1) 2 0.001)\n    (check-within (candidate 2) 3 0.001)\n    (check-within (candidate 3) 5 0.001)\n    (check-within (candidate 4) 13 0.001)\n    (check-within (candidate 5) 89 0.001)\n    (check-within (candidate 6) 233 0.001)\n    (check-within (candidate 7) 1597 0.001)\n    (check-within (candidate 8) 28657 0.001)\n    (check-within (candidate 9) 514229 0.001)\n    (check-within (candidate 10) 433494437 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    import math\n\n    def FUNC_1(VAR_1):\n        if (VAR_1 < 2):\n            return False\n        for VAR_2 in range(2, min((int(math.sqrt(VAR_1)) + 1), (VAR_1 - 1))):\n            if ((VAR_1 % VAR_2) == 0):\n                return False\n        return True\n    VAR_3 = [0, 1]\n    while True:\n        VAR_3.append((VAR_3[(- 1)] + VAR_3[(- 2)]))\n        if FUNC_1(VAR_3[(- 1)]):\n            VAR_0 -= 1\n        if (VAR_0 == 0):\n            return VAR_3[(- 1)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) (list 0 1) 0.001)\n    (check-within (candidate (list 1 1 1)) (list 3 1) 0.001)\n    (check-within (candidate (list 100 0)) (list 100 0) 0.001)\n    (check-within (candidate (list 3 5 7)) (list 15 105) 0.001)\n    (check-within (candidate (list 10)) (list 10 10) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List, Tuple\n\ndef FUNC_0(VAR_0: List[int]) -> Tuple[(int, int)]:\n    VAR_1 = 0\n    VAR_2 = 1\n    for VAR_3 in VAR_0:\n        VAR_1 += VAR_3\n        VAR_2 *= VAR_3\n    return (VAR_1, VAR_2)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Mary had a little lamb\" 4) (list \"little\") 0.001)\n    (check-within (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\") 0.001)\n    (check-within (candidate \"simple white space\" 2) (list ) 0.001)\n    (check-within (candidate \"Hello world\" 4) (list \"world\") 0.001)\n    (check-within (candidate \"Uncle sam\" 3) (list \"Uncle\") 0.001)\n    (check-within (candidate \"\" 4) (list ) 0.001)\n    (check-within (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str, VAR_1: int) -> List[str]:\n    VAR_2 = []\n    for VAR_3 in VAR_0.split():\n        VAR_4 = 0\n        for VAR_5 in range(0, len(VAR_3)):\n            if (VAR_3[VAR_5].lower() not in ['a', 'e', 'i', 'o', 'u']):\n                VAR_4 += 1\n        if (VAR_4 == VAR_1):\n            VAR_2.append(VAR_3)\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4 0.001)\n    (check-within (candidate (list 111 121 3 4000 5 6) 2) 0 0.001)\n    (check-within (candidate (list 11 21 3 90 5 6 7 8 9) 4) 125 0.001)\n    (check-within (candidate (list 111 21 3 4000 5 6 7 8 9) 4) 24 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int], VAR_1: int) -> int:\n    return sum((VAR_2 for VAR_2 in VAR_0[:VAR_1] if (len(str(VAR_2)) <= 2)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 5 6 10) (list 11 4) 0.001)\n    (check-within (candidate 4 8 9) (list 12 1) 0.001)\n    (check-within (candidate 1 10 10) (list 11 0) 0.001)\n    (check-within (candidate 2 11 5) (list 7 0) 0.001)\n    (check-within (candidate 4 5 7) (list 9 2) 0.001)\n    (check-within (candidate 4 5 1) (list 5 0) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: int, VAR_1: int, VAR_2: int) -> List[int]:\n    if (VAR_1 <= VAR_2):\n        return [(VAR_0 + VAR_1), (VAR_2 - VAR_1)]\n    else:\n        return [(VAR_0 + VAR_2), 0]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list \"1234567\")) (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\") 0.001)\n    (check-within (candidate (list \"3\" \"11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\") 0.001)\n    (check-within (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str]) -> List[str]:\n    VAR_1 = []\n    for VAR_2 in VAR_0:\n        VAR_3 = sum((((int(VAR_4) % 2) == 1) for VAR_4 in VAR_2))\n        VAR_1.append((((((((('the number of odd elements ' + str(VAR_3)) + 'n the str') + str(VAR_3)) + 'ng ') + str(VAR_3)) + ' of the ') + str(VAR_3)) + 'nput.'))\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 3 4 5)) 2 0.001)\n    (check-within (candidate (list 5 1 4 3 2)) 2 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list 1 1 1 1 0)) 1 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list -35 34 12 -45)) -35 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\nfrom typing import Optional\n\ndef FUNC_0(VAR_0: List[int]) -> Optional[int]:\n    VAR_0 = sorted(set(VAR_0))\n    return (None if (len(VAR_0) < 2) else VAR_0[1])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)) 0.001)\n    (check-within (candidate (list ) 1) (list ) 0.001)\n    (check-within (candidate (list (list 1)) 2) (list ) 0.001)\n    (check-within (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list 2 2)) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\nfrom typing import Tuple\n\ndef FUNC_0(VAR_0: List[List[int]], VAR_1: int) -> List[Tuple[(int, int)]]:\n    VAR_2 = [(VAR_3, VAR_4) for VAR_3 in range(len(VAR_0)) for VAR_4 in range(len(VAR_0[VAR_3])) if (VAR_0[VAR_3][VAR_4] == VAR_1)]\n    return sorted(sorted(VAR_2, key=(lambda VAR_1: VAR_1[1]), reverse=True), key=(lambda VAR_1: VAR_1[0]))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str], VAR_1: str) -> List[str]:\n    return [VAR_2 for VAR_2 in VAR_0 if VAR_2.startswith(VAR_1)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 12 15) 14 0.001)\n    (check-within (candidate 13 12) -1 0.001)\n    (check-within (candidate 33 12354) 12354 0.001)\n    (check-within (candidate 5234 5233) -1 0.001)\n    (check-within (candidate 6 29) 28 0.001)\n    (check-within (candidate 27 10) -1 0.001)\n    (check-within (candidate 7 7) -1 0.001)\n    (check-within (candidate 546 546) 546 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> int:\n    if (VAR_0 > VAR_1):\n        return (- 1)\n    if ((VAR_1 % 2) == 0):\n        return VAR_1\n    if (VAR_0 == VAR_1):\n        return (- 1)\n    return (VAR_1 - 1)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Hello\") #t 0.001)\n    (check-within (candidate \"abcdcba\") #t 0.001)\n    (check-within (candidate \"kittens\") #t 0.001)\n    (check-within (candidate \"orange\") #f 0.001)\n    (check-within (candidate \"wow\") #t 0.001)\n    (check-within (candidate \"world\") #t 0.001)\n    (check-within (candidate \"MadaM\") #t 0.001)\n    (check-within (candidate \"Wow\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"HI\") #t 0.001)\n    (check-within (candidate \"go\") #t 0.001)\n    (check-within (candidate \"gogo\") #f 0.001)\n    (check-within (candidate \"aaaaaaaaaaaaaaa\") #f 0.001)\n    (check-within (candidate \"Madam\") #t 0.001)\n    (check-within (candidate \"M\") #f 0.001)\n    (check-within (candidate \"0\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> bool:\n    VAR_1 = len(VAR_0)\n    if ((VAR_1 == 0) or (VAR_1 == 1)):\n        return False\n    for VAR_2 in range(2, VAR_1):\n        if ((VAR_1 % VAR_2) == 0):\n            return False\n    return True\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 6) 21 0.001)\n    (check-within (candidate 11) 66 0.001)\n    (check-within (candidate 30) 465 0.001)\n    (check-within (candidate 100) 5050 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    return sum(range((VAR_0 + 1)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Example\") \"Example\" 0.001)\n    (check-within (candidate \"Mudasir Hanif \") \"Mudasir_Hanif_\" 0.001)\n    (check-within (candidate \"Yellow Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\" 0.001)\n    (check-within (candidate \"Exa   mple\") \"Exa-mple\" 0.001)\n    (check-within (candidate \"   Exa 1 2 2 mple\") \"-Exa_1_2_2_mple\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    VAR_1 = ''\n    VAR_2 = 0\n    (VAR_3, VAR_4) = (0, 0)\n    while (VAR_2 < len(VAR_0)):\n        if (VAR_0[VAR_2] == ' '):\n            VAR_4 += 1\n        else:\n            if ((VAR_4 - VAR_3) > 2):\n                VAR_1 += ('-' + VAR_0[VAR_2])\n            elif ((VAR_4 - VAR_3) > 0):\n                VAR_1 += (('_' * (VAR_4 - VAR_3)) + VAR_0[VAR_2])\n            else:\n                VAR_1 += VAR_0[VAR_2]\n            (VAR_3, VAR_4) = ((VAR_2 + 1), (VAR_2 + 1))\n        VAR_2 += 1\n    if ((VAR_4 - VAR_3) > 2):\n        VAR_1 += '-'\n    elif ((VAR_4 - VAR_3) > 0):\n        VAR_1 += '_'\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 1)) (list 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List, Tuple\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    VAR_1 = None\n    VAR_2 = []\n    for VAR_3 in VAR_0:\n        if (VAR_1 is None):\n            VAR_1 = VAR_3\n        else:\n            VAR_1 = max(VAR_1, VAR_3)\n        VAR_2.append(VAR_1)\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"This is a test\") \"is\" 0.001)\n    (check-within (candidate \"lets go for swimming\") \"go for\" 0.001)\n    (check-within (candidate \"there is no place available here\") \"there is no place\" 0.001)\n    (check-within (candidate \"Hi I am Hussein\") \"Hi am Hussein\" 0.001)\n    (check-within (candidate \"go for it\") \"go for it\" 0.001)\n    (check-within (candidate \"here\") \"\" 0.001)\n    (check-within (candidate \"here is\") \"is\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    VAR_1 = []\n    for VAR_2 in VAR_0.split():\n        VAR_3 = 0\n        if (len(VAR_2) == 1):\n            VAR_3 = 1\n        for VAR_4 in range(2, len(VAR_2)):\n            if ((len(VAR_2) % VAR_4) == 0):\n                VAR_3 = 1\n        if ((VAR_3 == 0) or (len(VAR_2) == 2)):\n            VAR_1.append(VAR_2)\n    return ' '.join(VAR_1)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_160_do_algebra",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_160_do_algebra.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37 0.001)\n    (check-within (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9 0.001)\n    (check-within (candidate (list \"//\" \"*\") (list 7 3 4)) 8 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str], VAR_1: List[int]) -> int:\n    VAR_2 = str(VAR_1[0])\n    for (VAR_3, VAR_4) in zip(VAR_0, VAR_1[1:]):\n        VAR_2 += (VAR_3 + str(VAR_4))\n    return eval(VAR_2)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"yogurt\") \"u\" 0.001)\n    (check-within (candidate \"full\") \"u\" 0.001)\n    (check-within (candidate \"easy\") \"\" 0.001)\n    (check-within (candidate \"eAsy\") \"\" 0.001)\n    (check-within (candidate \"ali\") \"\" 0.001)\n    (check-within (candidate \"bad\") \"a\" 0.001)\n    (check-within (candidate \"most\") \"o\" 0.001)\n    (check-within (candidate \"ab\") \"\" 0.001)\n    (check-within (candidate \"ba\") \"\" 0.001)\n    (check-within (candidate \"quick\") \"\" 0.001)\n    (check-within (candidate \"anime\") \"VAR_2\" 0.001)\n    (check-within (candidate \"Asia\") \"\" 0.001)\n    (check-within (candidate \"Above\") \"o\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    if (len(VAR_0) < 3):\n        return ''\n    VAR_1 = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'}\n    for VAR_2 in range((len(VAR_0) - 2), 0, (- 1)):\n        if (VAR_0[VAR_2] in VAR_1):\n            if ((VAR_0[(VAR_2 + 1)] not in VAR_1) and (VAR_0[(VAR_2 - 1)] not in VAR_1)):\n                return VAR_0[VAR_2]\n    return ''\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3) 0.001)\n    (check-within (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0) 0.001)\n    (check-within (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6) 0.001)\n    (check-within (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int], VAR_1: List[int]) -> List[int]:\n    return [abs((VAR_2 - VAR_3)) for (VAR_2, VAR_3) in zip(VAR_0, VAR_1)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    import collections\n    VAR_1 = collections.Counter(VAR_0)\n    return [VAR_2 for VAR_2 in VAR_0 if (VAR_1[VAR_2] <= 1)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabc\") #t 0.001)\n    (check-within (candidate \"dddddddabc\" \"abcd\") #t 0.001)\n    (check-within (candidate \"eabcd\" \"dddddddabc\") #f 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabcf\") #f 0.001)\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f 0.001)\n    (check-within (candidate \"aabb\" \"aaccc\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str, VAR_1: str) -> bool:\n    return (set(VAR_0) == set(VAR_1))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3) 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4) 0.001)\n    (check-within (candidate \"(()(())((())))\") (list 4) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str) -> List[int]:\n\n    def FUNC_1(VAR_1):\n        VAR_2 = 0\n        VAR_3 = 0\n        for VAR_4 in VAR_1:\n            if (VAR_4 == '('):\n                VAR_2 += 1\n                VAR_3 = max(VAR_2, VAR_3)\n            else:\n                VAR_2 -= 1\n        return VAR_3\n    return [FUNC_1(VAR_5) for VAR_5 in VAR_0.split(' ') if VAR_5]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 7) (list 0 1) 0.001)\n    (check-within (candidate -78) (list 1 1) 0.001)\n    (check-within (candidate 3452) (list 2 2) 0.001)\n    (check-within (candidate 346211) (list 3 3) 0.001)\n    (check-within (candidate -345821) (list 3 3) 0.001)\n    (check-within (candidate -2) (list 1 0) 0.001)\n    (check-within (candidate -45347) (list 2 3) 0.001)\n    (check-within (candidate 0) (list 1 0) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef FUNC_0(VAR_0: int) -> Tuple[(int, int)]:\n    VAR_1 = 0\n    VAR_2 = 0\n    for VAR_3 in str(abs(VAR_0)):\n        if ((int(VAR_3) % 2) == 0):\n            VAR_1 += 1\n        else:\n            VAR_2 += 1\n    return (VAR_1, VAR_2)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"5 apples and 6 oranges\" 19) 8 0.001)\n    (check-within (candidate \"5 apples and 6 oranges\" 21) 10 0.001)\n    (check-within (candidate \"0 apples and 1 oranges\" 3) 2 0.001)\n    (check-within (candidate \"1 apples and 0 oranges\" 3) 2 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 100) 95 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 5) 0 0.001)\n    (check-within (candidate \"1 apples and 100 oranges\" 120) 19 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str, VAR_1: int) -> int:\n    VAR_2 = list()\n    for VAR_3 in VAR_0.split(' '):\n        if VAR_3.isdigit():\n            VAR_2.append(int(VAR_3))\n    return (VAR_1 - sum(VAR_2))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"111000\" \"101010\") \"010010\" 0.001)\n    (check-within (candidate \"1\" \"1\") \"0\" 0.001)\n    (check-within (candidate \"0101\" \"0000\") \"0101\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str, VAR_1: str) -> str:\n\n    def FUNC_1(VAR_2, VAR_3):\n        if (VAR_2 == VAR_3):\n            return '0'\n        else:\n            return '1'\n    return ''.join((FUNC_1(VAR_4, VAR_5) for (VAR_4, VAR_5) in zip(VAR_0, VAR_1)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"x\") 1 0.001)\n    (check-within (candidate \"asdasnakj\") 9 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> int:\n    return len(VAR_0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 0) \"0\" 0.001)\n    (check-within (candidate 3) \"0 1 2 3\" 0.001)\n    (check-within (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> str:\n    return ' '.join([str(VAR_1) for VAR_1 in range((VAR_0 + 1))])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"example.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"1example.dll\") \"No\" 0.001)\n    (check-within (candidate \"s1sdf3.asd\") \"No\" 0.001)\n    (check-within (candidate \"K.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"MY16FILE3.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"His12FILE94.exe\") \"No\" 0.001)\n    (check-within (candidate \"_Y.txt\") \"No\" 0.001)\n    (check-within (candidate \"?aREYA.exe\") \"No\" 0.001)\n    (check-within (candidate \"/this_is_valid.dll\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.wow\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"this_is_valid.txtexe\") \"No\" 0.001)\n    (check-within (candidate \"#this2_i4s_5valid.ten\") \"No\" 0.001)\n    (check-within (candidate \"@this1_is6_valid.exe\") \"No\" 0.001)\n    (check-within (candidate \"this_is_12valid.6exe4.txt\") \"No\" 0.001)\n    (check-within (candidate \"all.exe.txt\") \"No\" 0.001)\n    (check-within (candidate \"I563_No.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"Is3youfault.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"no_one#knows.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"1I563_Yes3.exe\") \"No\" 0.001)\n    (check-within (candidate \"I563_Yes3.txtt\") \"No\" 0.001)\n    (check-within (candidate \"final..txt\") \"No\" 0.001)\n    (check-within (candidate \"final132\") \"No\" 0.001)\n    (check-within (candidate \"_f4indsartal132.\") \"No\" 0.001)\n    (check-within (candidate \".txt\") \"No\" 0.001)\n    (check-within (candidate \"s.\") \"No\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    VAR_1 = ['txt', 'exe', 'dll']\n    VAR_2 = VAR_0.split(sep='.')\n    if (len(VAR_2) != 2):\n        return 'No'\n    if (not (VAR_2[1] in VAR_1)):\n        return 'No'\n    if (len(VAR_2[0]) == 0):\n        return 'No'\n    if (not VAR_2[0][0].isalpha()):\n        return 'No'\n    VAR_3 = len([VAR_4 for VAR_4 in VAR_2[0] if VAR_4.isdigit()])\n    if (VAR_3 > 3):\n        return 'No'\n    return 'Yes'\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 4 3 5)) 3 0.001)\n    (check-within (candidate (list 1 2 4 5)) -1 0.001)\n    (check-within (candidate (list 1 4 2 5 6 7 8 9 10)) 2 0.001)\n    (check-within (candidate (list 4 8 5 7 3)) 4 0.001)\n    (check-within (candidate (list )) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    VAR_1 = (- 1)\n    VAR_2 = 1\n    while (VAR_2 < len(VAR_0)):\n        if (VAR_0[VAR_2] < VAR_0[(VAR_2 - 1)]):\n            VAR_1 = VAR_2\n        VAR_2 += 1\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 4 88)) 88 0.001)\n    (check-within (candidate (list 4 5 6 7 2 122)) 122 0.001)\n    (check-within (candidate (list 4 0 6 7)) 0 0.001)\n    (check-within (candidate (list 4 4 6 8)) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    return sum([VAR_0[VAR_1] for VAR_1 in range(1, len(VAR_0), 2) if ((VAR_0[VAR_1] % 2) == 0)])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list ) 7) (list ) 0.001)\n    (check-within (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2) 0.001)\n    (check-within (candidate (list 2 2 2) 2) (list 2 2 2 2 2) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int], VAR_1: int) -> List[int]:\n    if (not VAR_0):\n        return []\n    VAR_2 = []\n    for VAR_3 in VAR_0[:(- 1)]:\n        VAR_2.append(VAR_3)\n        VAR_2.append(VAR_1)\n    VAR_2.append(VAR_0[(- 1)])\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list \"()(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \")\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(())\" \"())())\")) \"No\" 0.001)\n    (check-within (candidate (list \")())\" \"(()()(\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"(())))\" \"(()())((\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"()\" \"())\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(\" \"()))()\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"((((\" \"((())\")) \"No\" 0.001)\n    (check-within (candidate (list \")(()\" \"(()(\")) \"No\" 0.001)\n    (check-within (candidate (list \")(\" \")(\")) \"No\" 0.001)\n    (check-within (candidate (list \"(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \"(\")) \"Yes\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str]) -> str:\n\n    def FUNC_1(VAR_1):\n        VAR_2 = 0\n        for VAR_3 in VAR_1:\n            if (VAR_3 == '('):\n                VAR_2 = (VAR_2 + 1)\n            else:\n                VAR_2 = (VAR_2 - 1)\n            if (VAR_2 < 0):\n                return False\n        return (True if (VAR_2 == 0) else False)\n    VAR_4 = (VAR_0[0] + VAR_0[1])\n    VAR_5 = (VAR_0[1] + VAR_0[0])\n    return ('Yes' if (FUNC_1(VAR_4) or FUNC_1(VAR_5)) else 'No')\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 2 3 1) #t 0.001)\n    (check-within (candidate 2.5 2 3) #f 0.001)\n    (check-within (candidate 1.5 5 3.5) #f 0.001)\n    (check-within (candidate 2 6 2) #f 0.001)\n    (check-within (candidate 4 2 2) #t 0.001)\n    (check-within (candidate 2.2 2.2 2.2) #f 0.001)\n    (check-within (candidate -4 6 2) #t 0.001)\n    (check-within (candidate 2 1 1) #t 0.001)\n    (check-within (candidate 3 4 7) #t 0.001)\n    (check-within (candidate 3.0 4 7) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: float, VAR_1: float, VAR_2: float) -> bool:\n    if (isinstance(VAR_0, int) and isinstance(VAR_1, int) and isinstance(VAR_2, int)):\n        if (((VAR_0 + VAR_1) == VAR_2) or ((VAR_0 + VAR_2) == VAR_1) or ((VAR_1 + VAR_2) == VAR_0)):\n            return True\n        return False\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str], VAR_1: str) -> List[str]:\n    return [VAR_2 for VAR_2 in VAR_0 if (VAR_1 in VAR_2)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list \"name\" \"of\" \"string\")) \"string\" 0.001)\n    (check-within (candidate (list \"name\" \"enam\" \"game\")) \"enam\" 0.001)\n    (check-within (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\" 0.001)\n    (check-within (candidate (list \"abc\" \"cba\")) \"abc\" 0.001)\n    (check-within (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\" 0.001)\n    (check-within (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\" 0.001)\n    (check-within (candidate (list \"b\")) \"b\" 0.001)\n    (check-within (candidate (list \"play\" \"play\" \"play\")) \"play\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str]) -> str:\n    return sorted(VAR_0, key=(lambda VAR_1: ((- len(set(VAR_1))), VAR_1)))[0]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 2 10) (list 2 4 6 8) 0.001)\n    (check-within (candidate 10 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 132 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 17 89) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> List[int]:\n    VAR_2 = max(2, min(VAR_0, VAR_1))\n    VAR_3 = min(8, max(VAR_0, VAR_1))\n    return [VAR_4 for VAR_4 in range(VAR_2, (VAR_3 + 1)) if ((VAR_4 % 2) == 0)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 3 4) (list 1 2 3 4)) \"YES\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 1 5 3 4)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 2 1 4 3)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 4)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 3)) \"NO\" 0.001)\n    (check-within (candidate (list 3 2 6 1 8 9) (list 3 5 5 1 1 1)) \"NO\" 0.001)\n    (check-within (candidate (list 100 200) (list 200 200)) \"YES\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int], VAR_1: List[int]) -> str:\n    VAR_2 = 0\n    VAR_3 = 0\n    for VAR_4 in VAR_0:\n        if ((VAR_4 % 2) == 1):\n            VAR_2 += 1\n    for VAR_4 in VAR_1:\n        if ((VAR_4 % 2) == 0):\n            VAR_3 += 1\n    if (VAR_3 >= VAR_2):\n        return 'YES'\n    return 'NO'\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 19) \"xix\" 0.001)\n    (check-within (candidate 152) \"clii\" 0.001)\n    (check-within (candidate 251) \"ccli\" 0.001)\n    (check-within (candidate 426) \"cdxxvi\" 0.001)\n    (check-within (candidate 500) \"d\" 0.001)\n    (check-within (candidate 1) \"VAR_3\" 0.001)\n    (check-within (candidate 4) \"iv\" 0.001)\n    (check-within (candidate 43) \"xliii\" 0.001)\n    (check-within (candidate 90) \"xc\" 0.001)\n    (check-within (candidate 94) \"xciv\" 0.001)\n    (check-within (candidate 532) \"dxxxii\" 0.001)\n    (check-within (candidate 900) \"cm\" 0.001)\n    (check-within (candidate 994) \"cmxciv\" 0.001)\n    (check-within (candidate 1000) \"m\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> str:\n    VAR_1 = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    VAR_2 = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\n    VAR_3 = 12\n    VAR_4 = ''\n    while VAR_0:\n        VAR_5 = (VAR_0 // VAR_1[VAR_3])\n        VAR_0 %= VAR_1[VAR_3]\n        while VAR_5:\n            VAR_4 += VAR_2[VAR_3]\n            VAR_5 -= 1\n        VAR_3 -= 1\n    return VAR_4.lower()\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 11) #f 0.001)\n    (check-within (candidate 12) #t 0.001)\n    (check-within (candidate 13) #f 0.001)\n    (check-within (candidate 16) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> bool:\n    return (((VAR_0 % 2) == 0) and (VAR_0 >= 8))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 0) \"db0db\" 0.001)\n    (check-within (candidate 32) \"db100000db\" 0.001)\n    (check-within (candidate 103) \"db1100111db\" 0.001)\n    (check-within (candidate 15) \"db1111db\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> str:\n    return (('db' + bin(VAR_0)[2:]) + 'db')\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 5 6 3 4 8 9 2)) (list 2 6 3 4 8 9 5) 0.001)\n    (check-within (candidate (list 5 8 3 4 6 9 2)) (list 2 8 3 4 6 9 5) 0.001)\n    (check-within (candidate (list 5 6 9 4 8 3 2)) (list 2 6 9 4 8 3 5) 0.001)\n    (check-within (candidate (list 5 6 3 4 8 9 2 1)) (list 2 6 3 4 8 9 5 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    VAR_0 = list(VAR_0)\n    VAR_0[::3] = sorted(VAR_0[::3])\n    return VAR_0\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/6\" \"2/1\") #f 0.001)\n    (check-within (candidate \"5/1\" \"3/1\") #t 0.001)\n    (check-within (candidate \"7/10\" \"10/2\") #f 0.001)\n    (check-within (candidate \"2/10\" \"50/10\") #t 0.001)\n    (check-within (candidate \"7/2\" \"4/2\") #t 0.001)\n    (check-within (candidate \"11/6\" \"6/1\") #t 0.001)\n    (check-within (candidate \"2/3\" \"5/2\") #f 0.001)\n    (check-within (candidate \"5/2\" \"3/5\") #f 0.001)\n    (check-within (candidate \"2/4\" \"8/4\") #t 0.001)\n    (check-within (candidate \"2/4\" \"4/2\") #t 0.001)\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/5\" \"1/5\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str, VAR_1: str) -> bool:\n    (VAR_2, VAR_3) = VAR_0.split('/')\n    (VAR_4, VAR_5) = VAR_1.split('/')\n    VAR_6 = (int(VAR_2) * int(VAR_4))\n    VAR_7 = (int(VAR_3) * int(VAR_5))\n    if ((VAR_6 / VAR_7) == int((VAR_6 / VAR_7))):\n        return True\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"AsDf\") \"aSdF\" 0.001)\n    (check-within (candidate \"1234\") \"4321\" 0.001)\n    (check-within (candidate \"ab\") \"AB\" 0.001)\n    (check-within (candidate \"#a@C\") \"#A@c\" 0.001)\n    (check-within (candidate \"#AsdfW^45\") \"#aSDFw^45\" 0.001)\n    (check-within (candidate \"#6@2\") \"2@6#\" 0.001)\n    (check-within (candidate \"#$a^D\") \"#$A^d\" 0.001)\n    (check-within (candidate \"#ccc\") \"#CCC\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    VAR_1 = 0\n    VAR_2 = 0\n    VAR_3 = list(VAR_0)\n    for VAR_4 in VAR_0:\n        if VAR_4.isalpha():\n            VAR_3[VAR_2] = VAR_4.swapcase()\n            VAR_1 = 1\n        VAR_2 += 1\n    VAR_0 = ''\n    for VAR_4 in VAR_3:\n        VAR_0 += VAR_4\n    if (VAR_1 == 0):\n        return VAR_0[len(VAR_0)::(- 1)]\n    return VAR_0\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 3 4 5) #t 0.001)\n    (check-within (candidate 1 2 3) #f 0.001)\n    (check-within (candidate 10 6 8) #t 0.001)\n    (check-within (candidate 2 2 2) #f 0.001)\n    (check-within (candidate 7 24 25) #t 0.001)\n    (check-within (candidate 10 5 7) #f 0.001)\n    (check-within (candidate 5 12 13) #t 0.001)\n    (check-within (candidate 15 8 17) #t 0.001)\n    (check-within (candidate 48 55 73) #t 0.001)\n    (check-within (candidate 1 1 1) #f 0.001)\n    (check-within (candidate 2 2 10) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int, VAR_2: int) -> bool:\n    return (((VAR_0 * VAR_0) == ((VAR_1 * VAR_1) + (VAR_2 * VAR_2))) or ((VAR_1 * VAR_1) == ((VAR_0 * VAR_0) + (VAR_2 * VAR_2))) or ((VAR_2 * VAR_2) == ((VAR_0 * VAR_0) + (VAR_1 * VAR_1))))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1 VAR_2)\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 5.0 4.0)) 25 0.001)\n    (check-within (candidate (list 0.1 0.2 0.3)) 0 0.001)\n    (check-within (candidate (list -10.0 -20.0 -30.0)) 0 0.001)\n    (check-within (candidate (list -1.0 -2.0 8.0)) 0 0.001)\n    (check-within (candidate (list 0.2 3.0 5.0)) 34 0.001)\n    (check-within (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[float]) -> int:\n    return sum([(VAR_1 ** 2) for VAR_1 in VAR_0 if ((VAR_1 > 0) and ((VAR_1 % 2) != 0) and ('.' not in str(VAR_1)))])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 1 2) 2 0.001)\n    (check-within (candidate 1 2.5) 2.5 0.001)\n    (check-within (candidate 2 3) 3 0.001)\n    (check-within (candidate 5 6) 6 0.001)\n    (check-within (candidate 1 \"2,3\") \"2,3\" 0.001)\n    (check-within (candidate \"5,1\" \"6\") \"6\" 0.001)\n    (check-within (candidate \"1\" \"2\") \"2\" 0.001)\n    (check-within (candidate \"1\" 1) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Union\n\ndef FUNC_0(VAR_0: Union[(int, float, str)], VAR_1: Union[(int, float, str)]) -> Union[(int, float, str, None)]:\n    (VAR_2, VAR_3) = (VAR_0, VAR_1)\n    if isinstance(VAR_2, str):\n        VAR_2 = VAR_2.replace(',', '.')\n    if isinstance(VAR_3, str):\n        VAR_3 = VAR_3.replace(',', '.')\n    if (float(VAR_2) == float(VAR_3)):\n        return None\n    return (VAR_0 if (float(VAR_2) > float(VAR_3)) else VAR_1)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 2 -3 1 2 -3)) #f 0.001)\n    (check-within (candidate (list 1 2 -4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t 0.001)\n    (check-within (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> bool:\n    VAR_1 = 0\n    for VAR_2 in VAR_0:\n        VAR_1 += VAR_2\n        if (VAR_1 < 0):\n            return True\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_103_rounded_avg",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_103_rounded_avg.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 1 5) \"0b11\" 0.001)\n    (check-within (candidate 7 13) \"0b1010\" 0.001)\n    (check-within (candidate 964 977) \"0b1111001010\" 0.001)\n    (check-within (candidate 996 997) \"0b1111100100\" 0.001)\n    (check-within (candidate 560 851) \"0b1011000010\" 0.001)\n    (check-within (candidate 185 546) \"0b101101110\" 0.001)\n    (check-within (candidate 362 496) \"0b110101101\" 0.001)\n    (check-within (candidate 350 902) \"0b1001110010\" 0.001)\n    (check-within (candidate 197 233) \"0b11010111\" 0.001)\n    (check-within (candidate 7 5) -1 0.001)\n    (check-within (candidate 5 1) -1 0.001)\n    (check-within (candidate 5 5) \"0b101\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Union\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> Union[(str, int)]:\n    if (VAR_1 < VAR_0):\n        return (- 1)\n    VAR_2 = 0\n    for VAR_3 in range(VAR_0, (VAR_1 + 1)):\n        VAR_2 += VAR_3\n    return bin(round((VAR_2 / ((VAR_1 - VAR_0) + 1))))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 3 7) 1 0.001)\n    (check-within (candidate 10 15) 5 0.001)\n    (check-within (candidate 49 14) 7 0.001)\n    (check-within (candidate 144 60) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int, VAR_1: int) -> int:\n    while VAR_1:\n        (VAR_0, VAR_1) = (VAR_1, (VAR_0 % VAR_1))\n    return VAR_0\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 5) (list 1 2 6 24 15) 0.001)\n    (check-within (candidate 7) (list 1 2 6 24 15 720 28) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n    (check-within (candidate 3) (list 1 2 6) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: int) -> List[int]:\n    VAR_1 = []\n    for VAR_2 in range(1, (VAR_0 + 1)):\n        if ((VAR_2 % 2) == 0):\n            VAR_3 = 1\n            for VAR_4 in range(1, (VAR_2 + 1)):\n                VAR_3 *= VAR_4\n            VAR_1 += [VAR_3]\n        else:\n            VAR_3 = 0\n            for VAR_4 in range(1, (VAR_2 + 1)):\n                VAR_3 += VAR_4\n            VAR_1 += [VAR_3]\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 4 10)) #t 0.001)\n    (check-within (candidate (list 1 2 4 20)) #t 0.001)\n    (check-within (candidate (list 1 20 4 10)) #f 0.001)\n    (check-within (candidate (list 4 1 0 -10)) #t 0.001)\n    (check-within (candidate (list 4 1 1 0)) #t 0.001)\n    (check-within (candidate (list 1 2 3 2 5 60)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 60)) #t 0.001)\n    (check-within (candidate (list 9 9 9 9)) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> bool:\n    if ((VAR_0 == sorted(VAR_0)) or (VAR_0 == sorted(VAR_0, reverse=True))):\n        return True\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\") 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -1 55)) (list \"One\") 0.001)\n    (check-within (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\") 0.001)\n    (check-within (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[str]:\n    VAR_1 = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    VAR_2 = sorted(VAR_0, reverse=True)\n    VAR_3 = []\n    for VAR_4 in VAR_2:\n        try:\n            VAR_3.append(VAR_1[VAR_4])\n        except:\n            pass\n    return VAR_3\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"abcdef\nghijklm\") \"bcdf\nghjklm\" 0.001)\n    (check-within (candidate \"fedcba\") \"fdcb\" 0.001)\n    (check-within (candidate \"eeeee\") \"\" 0.001)\n    (check-within (candidate \"acBAA\") \"cB\" 0.001)\n    (check-within (candidate \"EcBOO\") \"cB\" 0.001)\n    (check-within (candidate \"ybcd\") \"ybcd\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    return ''.join([VAR_1 for VAR_1 in VAR_0 if (VAR_1.lower() not in ['a', 'e', 'i', 'o', 'u'])])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"apple\") #f 0.001)\n    (check-within (candidate \"apple pi e\") #t 0.001)\n    (check-within (candidate \"eeeee\") #f 0.001)\n    (check-within (candidate \"A\") #t 0.001)\n    (check-within (candidate \"Pumpkin pie \") #f 0.001)\n    (check-within (candidate \"Pumpkin pie 1\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"eeeee e \") #f 0.001)\n    (check-within (candidate \"apple pie\") #f 0.001)\n    (check-within (candidate \"apple pi e \") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> bool:\n    VAR_1 = VAR_0.split(' ')[(- 1)]\n    return (True if ((len(VAR_1) == 1) and (97 <= ord(VAR_1.lower()) <= 122)) else False)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 1) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate -1) #t 0.001)\n    (check-within (candidate 64) #t 0.001)\n    (check-within (candidate 180) #f 0.001)\n    (check-within (candidate 1000) #t 0.001)\n    (check-within (candidate 0) #t 0.001)\n    (check-within (candidate 1729) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> bool:\n    VAR_0 = abs(VAR_0)\n    return ((int(round((VAR_0 ** (1.0 / 3)))) ** 3) == VAR_0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"abcde\" \"ae\") (list \"bcd\" #f) 0.001)\n    (check-within (candidate \"abcdef\" \"b\") (list \"acdef\" #f) 0.001)\n    (check-within (candidate \"abcdedcba\" \"ab\") (list \"cdedc\" #t) 0.001)\n    (check-within (candidate \"dwik\" \"w\") (list \"dik\" #f) 0.001)\n    (check-within (candidate \"a\" \"a\") (list \"\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"v\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"vabba\" \"v\") (list \"abba\" #t) 0.001)\n    (check-within (candidate \"mamma\" \"mia\") (list \"\" #t) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef FUNC_0(VAR_0: str, VAR_1: str) -> Tuple[(str, bool)]:\n    VAR_0 = ''.join([VAR_2 for VAR_2 in VAR_0 if (VAR_2 not in VAR_1)])\n    return (VAR_0, (VAR_0[::(- 1)] == VAR_0))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1.0 2.0)) 0.5 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0)) 1.0 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[float]) -> float:\n    VAR_1 = (sum(VAR_0) / len(VAR_0))\n    return (sum((abs((VAR_2 - VAR_1)) for VAR_2 in VAR_0)) / len(VAR_0))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"<>\") #t 0.001)\n    (check-within (candidate \"<<><>>\") #t 0.001)\n    (check-within (candidate \"<><><<><>><>\") #t 0.001)\n    (check-within (candidate \"<><><<<><><>><>><<><><<>>>\") #t 0.001)\n    (check-within (candidate \"<<<><>>>>\") #f 0.001)\n    (check-within (candidate \"><<>\") #f 0.001)\n    (check-within (candidate \"<\") #f 0.001)\n    (check-within (candidate \"<<<<\") #f 0.001)\n    (check-within (candidate \">\") #f 0.001)\n    (check-within (candidate \"<<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>><<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>>><>\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> bool:\n    VAR_1 = 0\n    for VAR_2 in VAR_0:\n        if (VAR_2 == '<'):\n            VAR_1 += 1\n        else:\n            VAR_1 -= 1\n        if (VAR_1 < 0):\n            return False\n    return (VAR_1 == 0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 2.0 49.9)) (list 0.0 1.0) 0.001)\n    (check-within (candidate (list 100.0 49.9)) (list 1.0 0.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0) 0.001)\n    (check-within (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n    (check-within (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[float]) -> List[float]:\n    VAR_1 = min(VAR_0)\n    VAR_2 = max(VAR_0)\n    return [((VAR_3 - VAR_1) / (VAR_2 - VAR_1)) for VAR_3 in VAR_0]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2) (list 2 3)) \"NO\" 0.001)\n    (check-within (candidate (list -1 1) (list 0 4)) \"NO\" 0.001)\n    (check-within (candidate (list -3 -1) (list -5 5)) \"YES\" 0.001)\n    (check-within (candidate (list -2 2) (list -4 0)) \"YES\" 0.001)\n    (check-within (candidate (list -11 2) (list -1 -1)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 3 5)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 1 2)) \"NO\" 0.001)\n    (check-within (candidate (list -2 -2) (list -3 -2)) \"NO\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef FUNC_0(VAR_0: Tuple[(int, int)], VAR_1: Tuple[(int, int)]) -> str:\n\n    def FUNC_1(VAR_2):\n        if ((VAR_2 == 1) or (VAR_2 == 0)):\n            return False\n        if (VAR_2 == 2):\n            return True\n        for VAR_3 in range(2, VAR_2):\n            if ((VAR_2 % VAR_3) == 0):\n                return False\n        return True\n    VAR_4 = max(VAR_0[0], VAR_1[0])\n    VAR_5 = min(VAR_0[1], VAR_1[1])\n    VAR_6 = (VAR_5 - VAR_4)\n    if ((VAR_6 > 0) and FUNC_1(VAR_6)):\n        return 'YES'\n    return 'NO'\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"AB\") 1 0.001)\n    (check-within (candidate \"1077E\") 2 0.001)\n    (check-within (candidate \"ABED1A33\") 4 0.001)\n    (check-within (candidate \"2020\") 2 0.001)\n    (check-within (candidate \"123456789ABCDEF0\") 6 0.001)\n    (check-within (candidate \"112233445566778899AABBCCDDEEFF00\") 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> int:\n    VAR_1 = ('2', '3', '5', '7', 'B', 'D')\n    VAR_2 = 0\n    for VAR_3 in range(0, len(VAR_0)):\n        if (VAR_0[VAR_3] in VAR_1):\n            VAR_2 += 1\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 2 3 4)) (list 1 4 2 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7) 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7) 0.001)\n    (check-within (candidate (list 5 5 5 5)) (list 5 5 5 5) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5) 0.001)\n    (check-within (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2) 0.001)\n    (check-within (candidate (list 111111)) (list 111111) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    (VAR_1, VAR_2) = ([], True)\n    while VAR_0:\n        VAR_1.append((min(VAR_0) if VAR_2 else max(VAR_0)))\n        VAR_0.remove(VAR_1[(- 1)])\n        VAR_2 = (not VAR_2)\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Hello world\") 0 0.001)\n    (check-within (candidate \"Is the sky blue?\") 0 0.001)\n    (check-within (candidate \"I love It !\") 1 0.001)\n    (check-within (candidate \"bIt\") 0 0.001)\n    (check-within (candidate \"I feel good today. I will be productive. will kill It\") 2 0.001)\n    (check-within (candidate \"You and I are going for a walk\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> int:\n    import re\n    VAR_1 = re.split('[.?!]\\\\s*', VAR_0)\n    return sum(((VAR_2[0:2] == 'I ') for VAR_2 in VAR_1))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\") 0.001)\n    (check-within (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: str) -> List[str]:\n    VAR_1 = []\n    for VAR_2 in range(len(VAR_0)):\n        VAR_1.append(VAR_0[:(VAR_2 + 1)])\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\" \"x\") 0 0.001)\n    (check-within (candidate \"xyxyxyx\" \"x\") 4 0.001)\n    (check-within (candidate \"cacacacac\" \"cac\") 4 0.001)\n    (check-within (candidate \"john doe\" \"john\") 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str, VAR_1: str) -> int:\n    VAR_2 = 0\n    for VAR_3 in range(((len(VAR_0) - len(VAR_1)) + 1)):\n        if (VAR_0[VAR_3:(VAR_3 + len(VAR_1))] == VAR_1):\n            VAR_2 += 1\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 5 8 7 1)) 12 0.001)\n    (check-within (candidate (list 3 3 3 3 3)) 9 0.001)\n    (check-within (candidate (list 30 13 24 321)) 0 0.001)\n    (check-within (candidate (list 5 9)) 5 0.001)\n    (check-within (candidate (list 2 4 8)) 0 0.001)\n    (check-within (candidate (list 30 13 23 32)) 23 0.001)\n    (check-within (candidate (list 3 13 2 9)) 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    return sum([VAR_2 for (VAR_1, VAR_2) in enumerate(VAR_0) if (((VAR_1 % 2) == 0) and ((VAR_2 % 2) == 1))])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 5)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 7)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n    (check-within (candidate (list 1)) #t 0.001)\n    (check-within (candidate (list 3 2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 2 2 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 3 3 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 2 3 3 4)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4)) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> bool:\n    VAR_1 = dict([(VAR_2, 0) for VAR_2 in VAR_0])\n    for VAR_2 in VAR_0:\n        VAR_1[VAR_2] += 1\n    if any(((VAR_1[VAR_2] > 2) for VAR_2 in VAR_0)):\n        return False\n    if all(((VAR_0[(VAR_2 - 1)] <= VAR_0[VAR_2]) for VAR_2 in range(1, len(VAR_0)))):\n        return True\n    else:\n        return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 5 5 5 5 1)) 1 0.001)\n    (check-within (candidate (list 4 1 4 1 4 4)) 4 0.001)\n    (check-within (candidate (list 3 3)) -1 0.001)\n    (check-within (candidate (list 8 8 8 8 8 8 8 8)) 8 0.001)\n    (check-within (candidate (list 2 3 3 2 2)) 2 0.001)\n    (check-within (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1)) 1 0.001)\n    (check-within (candidate (list 3 2 8 2)) 2 0.001)\n    (check-within (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1 0.001)\n    (check-within (candidate (list 8 8 3 6 5 6 4)) -1 0.001)\n    (check-within (candidate (list 6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1 0.001)\n    (check-within (candidate (list 1 9 10 1 3)) 1 0.001)\n    (check-within (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10)) 5 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4 0.001)\n    (check-within (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2 0.001)\n    (check-within (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1 0.001)\n    (check-within (candidate (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4 0.001)\n    (check-within (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7)) 4 0.001)\n    (check-within (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1)) 2 0.001)\n    (check-within (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8)) -1 0.001)\n    (check-within (candidate (list 10)) -1 0.001)\n    (check-within (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2 0.001)\n    (check-within (candidate (list 5 4 10 2 1 1 10 3 6 1 8)) 1 0.001)\n    (check-within (candidate (list 7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1 0.001)\n    (check-within (candidate (list 3 10 10 9 2)) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n    VAR_1 = ([0] * (max(VAR_0) + 1))\n    for VAR_2 in VAR_0:\n        VAR_1[VAR_2] += 1\n    VAR_3 = (- 1)\n    for VAR_2 in range(1, len(VAR_1)):\n        if (VAR_1[VAR_2] >= VAR_2):\n            VAR_3 = VAR_2\n    return VAR_3\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 4 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5 0 3 0 4 2)) (list 0 1) 0.001)\n    (check-within (candidate (list 1 2 3 0 5 3)) (list 0 3) 0.001)\n    (check-within (candidate (list 5 4 8 4 8)) (list 4 1) 0.001)\n    (check-within (candidate (list 7 6 7 1)) (list 6 1) 0.001)\n    (check-within (candidate (list 7 9 7 1)) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    if (len(VAR_0) == 0):\n        return []\n    VAR_1 = list(filter((lambda VAR_2: ((VAR_2 % 2) == 0)), VAR_0))\n    if (VAR_1 == []):\n        return []\n    return [min(VAR_1), VAR_0.index(min(VAR_1))]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 5 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 30)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 31)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 30)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 31)) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> bool:\n    for (VAR_1, VAR_2) in enumerate(VAR_0):\n        for VAR_3 in range((VAR_1 + 1), len(VAR_0)):\n            if ((VAR_2 + VAR_0[VAR_3]) == 0):\n                return True\n    return False\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"x\") \"x\" 0.001)\n    (check-within (candidate \"xyz\") \"xyzyx\" 0.001)\n    (check-within (candidate \"xyx\") \"xyx\" 0.001)\n    (check-within (candidate \"jerry\") \"jerryrrej\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    if (not VAR_0):\n        return ''\n    VAR_1 = 0\n    while (VAR_0[VAR_1:] != VAR_0[VAR_1:][::(- 1)]):\n        VAR_1 += 1\n    return (VAR_0 + VAR_0[:VAR_1][::(- 1)])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 2) 18 0.001)\n    (check-within (candidate 3) 180 0.001)\n    (check-within (candidate 4) 1800 0.001)\n    (check-within (candidate 5) 18000 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    if (VAR_0 == 1):\n        return 1\n    return (18 * (10 ** (VAR_0 - 2)))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list -1 -2 4 5 6)) (list 4 5 6) 0.001)\n    (check-within (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1) 0.001)\n    (check-within (candidate (list -1 -2)) (list ) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> List[int]:\n    return [VAR_1 for VAR_1 in VAR_0 if (VAR_1 > 0)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) \"\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"xyz\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[str]) -> str:\n    return ''.join(VAR_0)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"[[]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]][[[[[]\") #f 0.001)\n    (check-within (candidate \"[][]\") #f 0.001)\n    (check-within (candidate \"[]\") #f 0.001)\n    (check-within (candidate \"[[[[]]]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]]]]]\") #f 0.001)\n    (check-within (candidate \"[][][[]]\") #t 0.001)\n    (check-within (candidate \"[[]\") #f 0.001)\n    (check-within (candidate \"[]]\") #f 0.001)\n    (check-within (candidate \"[[]][[\") #t 0.001)\n    (check-within (candidate \"[[][]]\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"[[[[[[[[\") #f 0.001)\n    (check-within (candidate \"]]]]]]]]\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> bool:\n    VAR_1 = []\n    VAR_2 = []\n    for VAR_3 in range(len(VAR_0)):\n        if (VAR_0[VAR_3] == '['):\n            VAR_1.append(VAR_3)\n        else:\n            VAR_2.append(VAR_3)\n    VAR_2.reverse()\n    VAR_4 = 0\n    VAR_3 = 0\n    VAR_5 = len(VAR_2)\n    for VAR_6 in VAR_1:\n        if ((VAR_3 < VAR_5) and (VAR_6 < VAR_2[VAR_3])):\n            VAR_4 += 1\n            VAR_3 += 1\n    return (VAR_4 >= 2)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"\") #t 0.001)\n    (check-within (candidate \"aba\") #t 0.001)\n    (check-within (candidate \"aaaaa\") #t 0.001)\n    (check-within (candidate \"zbcd\") #f 0.001)\n    (check-within (candidate \"xywyx\") #t 0.001)\n    (check-within (candidate \"xywyz\") #f 0.001)\n    (check-within (candidate \"xywzx\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> bool:\n    for VAR_1 in range(len(VAR_0)):\n        if (VAR_0[VAR_1] != VAR_0[((len(VAR_0) - 1) - VAR_1)]):\n            return False\n    return True\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list -1 -2 0)) 0 0.001)\n    (check-within (candidate (list 1 1 2 -2 3 4 5)) 6 0.001)\n    (check-within (candidate (list 1 6 9 -6 0 1 5)) 5 0.001)\n    (check-within (candidate (list 1 100 98 -7 1 -1)) 4 0.001)\n    (check-within (candidate (list 12 23 34 -45 -56 0)) 5 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[int]) -> int:\n\n    def FUNC_1(VAR_1):\n        VAR_2 = 1\n        if (VAR_1 < 0):\n            (VAR_1, VAR_2) = (((- 1) * VAR_1), (- 1))\n        VAR_1 = [int(VAR_3) for VAR_3 in str(VAR_1)]\n        VAR_1[0] = (VAR_1[0] * VAR_2)\n        return sum(VAR_1)\n    return len(list(filter((lambda VAR_4: (VAR_4 > 0)), [FUNC_1(VAR_5) for VAR_5 in VAR_0])))\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 2) (list 2) 0.001)\n    (check-within (candidate 4) (list 2 2) 0.001)\n    (check-within (candidate 8) (list 2 2 2) 0.001)\n    (check-within (candidate 57) (list 3 19) 0.001)\n    (check-within (candidate 3249) (list 3 3 19 19) 0.001)\n    (check-within (candidate 185193) (list 3 3 3 19 19 19) 0.001)\n    (check-within (candidate 20577) (list 3 19 19 19) 0.001)\n    (check-within (candidate 18) (list 2 3 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: int) -> List[int]:\n    import math\n    VAR_1 = []\n    VAR_2 = 2\n    while (VAR_2 <= int((math.sqrt(VAR_0) + 1))):\n        if ((VAR_0 % VAR_2) == 0):\n            VAR_1.append(VAR_2)\n            VAR_0 //= VAR_2\n        else:\n            VAR_2 += 1\n    if (VAR_0 > 1):\n        VAR_1.append(VAR_0)\n    return VAR_1\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 15) 5 0.001)\n    (check-within (candidate 27) 3 0.001)\n    (check-within (candidate 63) 7 0.001)\n    (check-within (candidate 330) 11 0.001)\n    (check-within (candidate 13195) 29 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n\n    def FUNC_1(VAR_1):\n        if (VAR_1 < 2):\n            return False\n        for VAR_2 in range(2, (VAR_1 - 1)):\n            if ((VAR_1 % VAR_2) == 0):\n                return False\n        return True\n    VAR_3 = 1\n    for VAR_4 in range(2, (VAR_0 + 1)):\n        if (((VAR_0 % VAR_4) == 0) and FUNC_1(VAR_4)):\n            VAR_3 = max(VAR_3, VAR_4)\n    return VAR_3\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 5) 1 0.001)\n    (check-within (candidate 6) 4 0.001)\n    (check-within (candidate 10) 36 0.001)\n    (check-within (candidate 100) 53361 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> int:\n    VAR_1 = [(((VAR_2 * VAR_2) - VAR_2) + 1) for VAR_2 in range(1, (VAR_0 + 1))]\n    VAR_3 = []\n    for VAR_2 in range(VAR_0):\n        for VAR_4 in range((VAR_2 + 1), VAR_0):\n            for VAR_5 in range((VAR_4 + 1), VAR_0):\n                if ((((VAR_1[VAR_2] + VAR_1[VAR_4]) + VAR_1[VAR_5]) % 3) == 0):\n                    VAR_3 += [(VAR_1[VAR_2], VAR_1[VAR_4], VAR_1[VAR_5])]\n    return len(VAR_3)\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"Hi\") \"Hi\" 0.001)\n    (check-within (candidate \"hello\") \"ehllo\" 0.001)\n    (check-within (candidate \"number\") \"bemnru\" 0.001)\n    (check-within (candidate \"abcd\") \"abcd\" 0.001)\n    (check-within (candidate \"Hello World!!!\") \"Hello !!!Wdlor\" 0.001)\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hi. My name is Mister Robot. How are you?\") \".Hi My aemn is Meirst .Rboot How aer ?ouy\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    return ' '.join([''.join(sorted(list(VAR_1))) for VAR_1 in VAR_0.split(' ')])\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 1000) \"1\" 0.001)\n    (check-within (candidate 150) \"110\" 0.001)\n    (check-within (candidate 147) \"1100\" 0.001)\n    (check-within (candidate 333) \"1001\" 0.001)\n    (check-within (candidate 963) \"10010\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> str:\n    return bin(sum((int(VAR_1) for VAR_1 in str(VAR_0))))[2:]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)\n    (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)\n    (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)\n    (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)\n    (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)\n    (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)\n    (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: List[List[int]], VAR_1: int) -> List[int]:\n    VAR_2 = len(VAR_0)\n    VAR_3 = ((VAR_2 * VAR_2) + 1)\n    for VAR_4 in range(VAR_2):\n        for VAR_5 in range(VAR_2):\n            if (VAR_0[VAR_4][VAR_5] == 1):\n                VAR_6 = []\n                if (VAR_4 != 0):\n                    VAR_6.append(VAR_0[(VAR_4 - 1)][VAR_5])\n                if (VAR_5 != 0):\n                    VAR_6.append(VAR_0[VAR_4][(VAR_5 - 1)])\n                if (VAR_4 != (VAR_2 - 1)):\n                    VAR_6.append(VAR_0[(VAR_4 + 1)][VAR_5])\n                if (VAR_5 != (VAR_2 - 1)):\n                    VAR_6.append(VAR_0[VAR_4][(VAR_5 + 1)])\n                VAR_3 = min(VAR_6)\n    VAR_7 = []\n    for VAR_4 in range(VAR_1):\n        if ((VAR_4 % 2) == 0):\n            VAR_7.append(1)\n        else:\n            VAR_7.append(VAR_3)\n    return VAR_7\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0 VAR_1)\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate \"hi\") \"lm\" 0.001)\n    (check-within (candidate \"asdfghjkl\") \"ewhjklnop\" 0.001)\n    (check-within (candidate \"gf\") \"kj\" 0.001)\n    (check-within (candidate \"et\") \"ix\" 0.001)\n    (check-within (candidate \"faewfawefaewg\") \"jeiajeaijeiak\" 0.001)\n    (check-within (candidate \"hellomyfriend\") \"lippsqcjvmirh\" 0.001)\n    (check-within (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" 0.001)\n    (check-within (candidate \"a\") \"e\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: str) -> str:\n    VAR_1 = 'abcdefghijklmnopqrstuvwxyz'\n    VAR_2 = ''\n    for VAR_3 in VAR_0:\n        if (VAR_3 in VAR_1):\n            VAR_2 += VAR_1[((VAR_1.index(VAR_3) + (2 * 2)) % 26)]\n        else:\n            VAR_2 += VAR_3\n    return VAR_2\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 3) (list 3 5 7) 0.001)\n    (check-within (candidate 4) (list 4 6 8 10) 0.001)\n    (check-within (candidate 5) (list 5 7 9 11 13) 0.001)\n    (check-within (candidate 6) (list 6 8 10 12 14 16) 0.001)\n    (check-within (candidate 8) (list 8 10 12 14 16 18 20 22) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\nfrom typing import List\n\ndef FUNC_0(VAR_0: int) -> List[int]:\n    return [(VAR_0 + (2 * VAR_1)) for VAR_1 in range(VAR_0)]\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "rkt",
    "prompt": "#lang racket\n\n(define (FUNC_0 VAR_0)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate FUNC_0))\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 101) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 13441) #t 0.001)\n    (check-within (candidate 61) #t 0.001)\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 1) #f 0.001)\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 17) #t 0.001)\n    (check-within (candidate 85) #f 0.001)\n    (check-within (candidate 77) #f 0.001)\n    (check-within (candidate 255379) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Python code to Racket code. Please translate the following Python code to Racket?\n\n### Python version\n\ndef FUNC_0(VAR_0: int) -> bool:\n    if (VAR_0 < 2):\n        return False\n    for VAR_1 in range(2, (VAR_0 - 1)):\n        if ((VAR_0 % VAR_1) == 0):\n            return False\n    return True\n\n### Racket version\n\n#lang racket\n\n(define (FUNC_0 VAR_0)\n"
  }
]