[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (correct_bracketing brackets)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"()\") #t 0.001)\n    (check-within (candidate \"(()())\") #t 0.001)\n    (check-within (candidate \"()()(()())()\") #t 0.001)\n    (check-within (candidate \"()()((()()())())(()()(()))\") #t 0.001)\n    (check-within (candidate \"((()())))\") #f 0.001)\n    (check-within (candidate \")(()\") #f 0.001)\n    (check-within (candidate \"(\") #f 0.001)\n    (check-within (candidate \"((((\") #f 0.001)\n    (check-within (candidate \")\") #f 0.001)\n    (check-within (candidate \"(()\") #f 0.001)\n    (check-within (candidate \"()()(()())())(()\") #f 0.001)\n    (check-within (candidate \"()()(()())()))()\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n### Explanation\n\nThe code is an implementation of checking whether a string of parentheses is correctly bracketed. It takes a string of parentheses `brackets` as input and returns a boolean.\n\ndepth = 0\nThe function initializes a variable `depth` to 0 to keep track of the depth of the parentheses.\n\nfor b in brackets:\nThe function iterates through each character `b` in the input string `brackets`.\n\nif b == \"(\":\n    depth += 1\nIf the character is an opening parenthesis `'('`, the function increments the `depth` variable.\n\nelse:\n    depth -= 1\nIf the character is a closing parenthesis `')'`, the function decrements the `depth` variable.\n\nif depth < 0:\n    return False\nIf the `depth` variable becomes negative at any point, it means that there are more closing parentheses than opening parentheses, so the function returns `False`.\n\nreturn depth == 0\nFinally, the function returns `True` if the `depth` variable is 0 (which means that the number of opening and closing parentheses are equal), and `False` otherwise.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (triangle_area a h)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 5 3) 7.5 0.001)\n    (check-within (candidate 2 2) 2.0 0.001)\n    (check-within (candidate 10 8) 40.0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef triangle_area(a: int, h: int) -> float:\n    return a * h / 2.0\n\n### Explanation\n\nThe code is an implementation of a function `triangle_area` which takes the base `a` and height `h` of a triangle and returns its area.\n\nreturn a * h / 2.0\nThe function simply multiplies the base `a` and height `h` of the triangle and divides the result by 2 to get the area.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (triangle_area a h)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (special_factorial n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate special_factorial))\n    (check-within (candidate 4) 288 0.001)\n    (check-within (candidate 5) 34560 0.001)\n    (check-within (candidate 7) 125411328000 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef special_factorial(n: int) -> int:\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n### Explanation\n\nThe code is an implementation of a function `special_factorial` which takes an integer `n` as input and returns the special factorial of `n`. The special factorial of `n` is defined as the product of the factorials of the first `n` positive integers.\n\nfact_i = 1\nspecial_fact = 1\nThe function initializes two variables `fact_i` and `special_fact` to 1.\n\nfor i in range(1, n+1):\nThe function iterates through each integer `i` from 1 to `n` (inclusive).\n\nfact_i *= i\nThe function multiplies the current value of `fact_i` by `i`.\n\nspecial_fact *= fact_i\nThe function multiplies the current value of `special_fact` by the updated value of `fact_i`.\n\nreturn special_fact\nThe function returns the final value of `special_fact`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (special_factorial n)\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (largest_smallest_integers lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n    (check-within (candidate (list 2 4 1 3 5 7)) (list #f 1) 0.001)\n    (check-within (candidate (list 2 4 1 3 5 7 0)) (list #f 1) 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 -2)) (list -2 1) 0.001)\n    (check-within (candidate (list 4 5 3 6 2 7 -7)) (list -7 2) 0.001)\n    (check-within (candidate (list 7 3 8 4 9 2 5 -9)) (list -9 2) 0.001)\n    (check-within (candidate (list )) (list #f #f) 0.001)\n    (check-within (candidate (list 0)) (list #f #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6)) (list -1 #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6 0)) (list -1 #f) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 1)) (list -3 1) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\nfrom typing import Tuple\nfrom typing import Optional\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n### Explanation\n\nThe code is an implementation of finding the largest negative and smallest positive integers in a list of integers. It takes a list of integers `lst` as input and returns a tuple of two integers: the largest negative integer and the smallest positive integer. If there are no negative or positive integers in the list, the function returns `None` for the corresponding value.\n\nsmallest = list(filter(lambda x: x < 0, lst))\nlargest = list(filter(lambda x: x > 0, lst))\nThe function first creates two lists: `smallest` containing all negative integers in the input list, and `largest` containing all positive integers in the input list. This is done using the `filter` function and a lambda function to check if each element is negative or positive.\n\nreturn (max(smallest) if smallest else None, min(largest) if largest else None)\nThe function then returns a tuple of the largest element in the `smallest` list (if it is not empty), and the smallest element in the `largest` list (if it is not empty). If either list is empty, the function returns `None` for the corresponding value.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_smallest_integers lst)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (move_one_ball arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_one_ball))\n    (check-within (candidate (list 3 4 5 1 2)) #t 0.001)\n    (check-within (candidate (list 3 5 10 1 2)) #t 0.001)\n    (check-within (candidate (list 4 3 1 2)) #f 0.001)\n    (check-within (candidate (list 3 5 4 1 2)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\n### Explanation\n\nThe code is an implementation of a function `move_one_ball` which takes a list of integers and returns a boolean indicating whether it is possible to move one ball from one position to another in the list to make it sorted in non-descending order.\n\nif len(arr)==0:\n  return True\nIf the input list is empty, the function returns `True`.\n\nsorted_array=sorted(arr)\nThe function first sorts the input list in ascending order and stores it in a new list `sorted_array`.\n\nmy_arr=[]\nmin_value=min(arr)\nmin_index=arr.index(min_value)\nmy_arr=arr[min_index:]+arr[0:min_index]\nThe function then finds the minimum value in the input list and its index. It then creates a new list `my_arr` by concatenating the sublist of the input list starting from the minimum value to the end of the list, with the sublist of the input list starting from the beginning of the list to the index of the minimum value.\n\nfor i in range(len(arr)):\n  if my_arr[i]!=sorted_array[i]:\n    return False\nFinally, the function iterates through both the `my_arr` and `sorted_array` lists and checks if the elements at each index are equal. If they are not, it returns `False`. Otherwise, it returns `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (move_one_ball arr)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (digits n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n    (check-within (candidate 5) 5 0.001)\n    (check-within (candidate 54) 5 0.001)\n    (check-within (candidate 120) 1 0.001)\n    (check-within (candidate 5014) 5 0.001)\n    (check-within (candidate 98765) 315 0.001)\n    (check-within (candidate 5576543) 2625 0.001)\n    (check-within (candidate 2468) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef digits(n: int) -> int:\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n### Explanation\n\nThe code is an implementation of a function `digits` that takes an integer `n` and returns the product of all the odd digits in `n`. If there are no odd digits in `n`, the function returns 0.\n\nproduct = 1\nodd_count = 0\nThe function initializes the `product` variable to 1 to store the product of all the odd digits in `n`. The variable `odd_count` is initialized to 0 to keep track of the number of odd digits in `n`.\n\nfor digit in str(n):\nThe function iterates through each digit in the string representation of `n`.\n\nint_digit = int(digit)\nif int_digit%2 == 1:\n    product= product*int_digit\n    odd_count+=1\nIf the digit is odd, the function multiplies it to the `product` variable and increments the `odd_count` variable.\n\nif odd_count ==0:\n    return 0\nelse:\n    return product\nFinally, the function checks if there are any odd digits in `n`. If there are none, it returns 0. Otherwise, it returns the `product` variable containing the product of all the odd digits in `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (digits n)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fib4 n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 28 0.001)\n    (check-within (candidate 10) 104 0.001)\n    (check-within (candidate 12) 386 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef fib4(n: int) -> int:\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n### Explanation\n\nThe code is an implementation of a function `fib4` which calculates the nth number in the Fibonacci-like sequence defined by the recurrence relation `f(n) = f(n-1) + f(n-2) + f(n-3) + f(n-4)` with initial values `f(0) = f(1) = f(2) = 0` and `f(3) = 2`. It takes an integer `n` as input and returns the nth number in the sequence as an integer.\n\nresults = [0, 0, 2, 0]\nThe function initializes a list `results` with the initial values of the sequence.\n\nif n < 4:\n    return results[n]\nIf `n` is less than 4, the function returns the corresponding initial value from the `results` list.\n\nfor _ in range(4, n + 1):\n    results.append(results[-1] + results[-2] + results[-3] + results[-4])\n    results.pop(0)\nIf `n` is greater than or equal to 4, the function iterates from 4 to `n` and calculates each subsequent value in the sequence using the recurrence relation. The `results` list is updated by appending the new value and removing the oldest value.\n\nreturn results[-1]\nFinally, the function returns the last value in the `results` list, which is the nth number in the sequence.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fib4 n)\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_even l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_even))\n    (check-within (candidate (list 1 2 3)) (list 1 2 3) 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 123 1 -10)) (list -10 3 -5 2 -3 3 5 0 9 1 123) 0.001)\n    (check-within (candidate (list 5 8 -12 4 23 2 3 11 12 -10)) (list -12 8 3 4 5 2 12 11 23 -10) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers such that even-indexed elements are sorted in non-descending order, and odd-indexed elements are sorted in non-ascending order. It takes a list of integers `l` as input and returns a sorted list of integers.\n\nevens = l[::2]\nodds = l[1::2]\nThe function first separates the even-indexed elements and odd-indexed elements into two separate lists `evens` and `odds`.\n\nevens.sort()\nThe function then sorts the `evens` list in non-descending order.\n\nans = []\nfor e, o in zip(evens, odds):\n    ans.extend([e, o])\nThe function then iterates through the `evens` and `odds` lists in parallel using the `zip` function, and appends the corresponding elements to the `ans` list.\n\nif len(evens) > len(odds):\n    ans.append(evens[-1])\nFinally, if the `evens` list is longer than the `odds` list, the function appends the last element of the `evens` list to the `ans` list.\n\nreturn ans\nThe function returns the `ans` list containing the sorted elements.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_even l)\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (order_by_points nums)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-within (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11) 0.001)\n    (check-within (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\n### Explanation\n\nThe code is an implementation of sorting a list of integers by the sum of their digits. It takes a list of integers `nums` as input and returns a sorted list of integers.\n\ndef digits_sum(n):\n    neg = 1\n    if n < 0: n, neg = -1 * n, -1 \n    n = [int(i) for i in str(n)]\n    n[0] = n[0] * neg\n    return sum(n)\nThe function first defines a helper function `digits_sum` that takes an integer `n` and returns the sum of its digits. If the integer is negative, the function multiplies the first digit by -1 to preserve the sign.\n\nreturn sorted(nums, key=digits_sum)\nThe function then sorts the input list using the `sorted` function, with the `key` parameter set to the `digits_sum` function. This sorts the list by the sum of the digits of each integer in the list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (order_by_points nums)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_happy s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n    (check-within (candidate \"a\") #f 0.001)\n    (check-within (candidate \"aa\") #f 0.001)\n    (check-within (candidate \"abcd\") #t 0.001)\n    (check-within (candidate \"aabb\") #f 0.001)\n    (check-within (candidate \"adb\") #t 0.001)\n    (check-within (candidate \"xyy\") #f 0.001)\n    (check-within (candidate \"iopaxpoi\") #t 0.001)\n    (check-within (candidate \"iopaxioi\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef is_happy(s: str) -> bool:\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n### Explanation\n\nThe code is an implementation of a function `is_happy` which takes a string and returns a boolean indicating whether the string is \"happy\". A string is considered happy if no three consecutive characters are the same.\n\nif len(s) < 3:\n  return False\nThe function first checks if the length of the input string is less than 3. If it is, it returns `False` because a string with less than 3 characters cannot have three consecutive characters.\n\nfor i in range(len(s) - 2):\nThe function then iterates through the string using a for-loop, checking each group of three consecutive characters.\n\nif s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n    return False\nIf any of the three consecutive characters are the same, the function returns `False`.\n\nreturn True\nIf the function has iterated through the entire string without finding three consecutive characters that are the same, it returns `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_happy s)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (circular_shift x shift)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n    (check-within (candidate 100 2) \"001\" 0.001)\n    (check-within (candidate 12 2) \"12\" 0.001)\n    (check-within (candidate 97 8) \"79\" 0.001)\n    (check-within (candidate 12 1) \"21\" 0.001)\n    (check-within (candidate 11 101) \"11\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n### Explanation\n\nThe code is an implementation of a function `circular_shift` which takes an integer `x` and a number of positions to shift `shift` and returns the resulting string after circularly shifting the digits of `x` by `shift` positions.\n\ns = str(x)\nThe function first converts the integer `x` to a string `s`.\n\nif shift > len(s):\n    return s[::-1]\nIf the shift is greater than the length of the string, the function returns the reversed string.\n\nelse:\n    return s[len(s) - shift:] + s[:len(s) - shift]\nOtherwise, the function returns the string obtained by concatenating the last `shift` characters of the string with the first `len(s) - shift` characters of the string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (circular_shift x shift)\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (max_fill grid capacity)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n    (check-within (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6 0.001)\n    (check-within (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nimport math\nfrom typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n### Explanation\n\nThe code is an implementation of calculating the maximum number of times a container can be filled with a given capacity, given a 2D grid of integers representing the amount of liquid in each container. It takes a list of lists `grid` and an integer `capacity` as input and returns an integer.\n\nsum([math.ceil(sum(arr)/capacity) for arr in grid])\nThe function first iterates through each list `arr` in the `grid` list and calculates the total amount of liquid in that list using the `sum` function. It then divides this total by the `capacity` and rounds up to the nearest integer using the `math.ceil` function. This gives the number of times the container needs to be filled to empty the liquid in that list. The function then sums up these values to get the total number of times the container needs to be filled to empty all the liquid in the `grid`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (max_fill grid capacity)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (has_close_elements numbers threshold)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate has_close_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\n### Explanation\n\nThe code is an implementation of a function `has_close_elements` which takes a list of numbers and a threshold value and returns `True` if there are any two elements in the list whose absolute difference is less than the threshold value.\n\nfor idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nThe function iterates through each element in the input list using a nested loop. For each pair of elements, it calculates the absolute difference between them and checks if it is less than the threshold value. If it is, the function returns `True`.\n\nreturn False\nIf the function has not returned `True` by the end of the loop, it means that there are no two elements in the list whose absolute difference is less than the threshold value, so the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (has_close_elements numbers threshold)\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (numerical_letter_grade grades)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numerical_letter_grade))\n    (check-within (candidate (list 4.0 3 1.7 2 3.5)) (list \"A+\" \"B\" \"C-\" \"C\" \"A-\") 0.001)\n    (check-within (candidate (list 1.2)) (list \"D+\") 0.001)\n    (check-within (candidate (list 0.5)) (list \"D-\") 0.001)\n    (check-within (candidate (list 0.0)) (list \"E\") 0.001)\n    (check-within (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list \"D\" \"D-\" \"C-\" \"B\" \"B+\") 0.001)\n    (check-within (candidate (list 0.0 0.7)) (list \"E\" \"D-\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n### Explanation\n\nThe code is an implementation of a function `numerical_letter_grade` which takes a list of numerical grades and returns a list of letter grades.\n\nletter_grade = []\nThe function initializes an empty list `letter_grade` to store the letter grades.\n\nfor gpa in grades:\nThe function iterates through each numerical grade `gpa` in the input list `grades`.\n\nif gpa == 4.0:\n    letter_grade.append(\"A+\")\nelif gpa > 3.7:\n    letter_grade.append(\"A\")\nelif gpa > 3.3:\n    letter_grade.append(\"A-\")\nelif gpa > 3.0:\n    letter_grade.append(\"B+\")\nelif gpa > 2.7:\n    letter_grade.append(\"B\")\nelif gpa > 2.3:\n    letter_grade.append(\"B-\")\nelif gpa > 2.0:\n    letter_grade.append(\"C+\")\nelif gpa > 1.7:\n    letter_grade.append(\"C\")\nelif gpa > 1.3:\n    letter_grade.append(\"C-\")\nelif gpa > 1.0:\n    letter_grade.append(\"D+\")\nelif gpa > 0.7:\n    letter_grade.append(\"D\")\nelif gpa > 0.0:\n    letter_grade.append(\"D-\")\nelse:\n    letter_grade.append(\"E\")\nThe function then checks each numerical grade `gpa` and appends the corresponding letter grade to the `letter_grade` list.\n\nreturn letter_grade\nThe function returns the `letter_grade` list containing the letter grades.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (numerical_letter_grade grades)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (x_or_y n x y)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate x_or_y))\n    (check-within (candidate 7 34 12) 34 0.001)\n    (check-within (candidate 15 8 5) 5 0.001)\n    (check-within (candidate 3 33 5212) 33 0.001)\n    (check-within (candidate 1259 3 52) 3 0.001)\n    (check-within (candidate 7919 -1 12) -1 0.001)\n    (check-within (candidate 3609 1245 583) 583 0.001)\n    (check-within (candidate 91 56 129) 129 0.001)\n    (check-within (candidate 6 34 1234) 1234 0.001)\n    (check-within (candidate 1 2 0) 0 0.001)\n    (check-within (candidate 2 2 0) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\n### Explanation\n\nThe code is an implementation of a function `x_or_y` that takes three integers `n`, `x`, and `y` as input and returns an integer. If `n` is a prime number, the function returns `x`, otherwise, it returns `y`.\n\nif n == 1:\n    return y\nThe function first checks if `n` is equal to 1. If it is, it returns `y`.\n\nfor i in range(2, n):\n    if n % i == 0:\n        return y\n        break\nelse:\n    return x\nIf `n` is not equal to 1, the function loops through all integers from 2 to `n-1`. If `n` is divisible by any of these integers, it means that `n` is not a prime number, so the function returns `y`. If the loop completes without finding a divisor of `n`, it means that `n` is a prime number, so the function returns `x`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (x_or_y n x y)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (specialFilter nums)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate specialFilter))\n    (check-within (candidate (list 5 -2 1 -5)) 0 0.001)\n    (check-within (candidate (list 15 -73 14 -15)) 1 0.001)\n    (check-within (candidate (list 33 -2 -3 45 21 109)) 2 0.001)\n    (check-within (candidate (list 43 -12 93 125 121 109)) 4 0.001)\n    (check-within (candidate (list 71 -2 -33 75 21 19)) 3 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list )) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count\n\n### Explanation\n\nThe code is an implementation of a function `specialFilter` that takes a list of integers and returns the count of integers that are greater than 10 and have odd digits at both the first and last positions.\n\ncount = 0\nThe function initializes a counter variable `count` to keep track of the number of integers that meet the criteria.\n\nfor num in nums:\nThe function iterates through each integer `num` in the input list `nums`.\n\nif num > 10:\n    odd_digits = (1, 3, 5, 7, 9)\n    number_as_string = str(num)\n    if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n        count += 1\nIf the integer is greater than 10, the function converts it to a string and checks if the first and last digits are odd. If they are, it increments the `count` variable.\n\nreturn count\nThe function returns the `count` variable containing the number of integers that meet the criteria.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (specialFilter nums)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (parse_music music_string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_music))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"o o o o\") (list 4 4 4 4) 0.001)\n    (check-within (candidate \".| .| .| .|\") (list 1 1 1 1) 0.001)\n    (check-within (candidate \"o| o| .| .| o o o o\") (list 2 2 1 1 4 4 4 4) 0.001)\n    (check-within (candidate \"o| .| o| .| o o| o o|\") (list 2 1 2 1 4 2 4 2) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\n### Explanation\n\nThe code is an implementation of a function `parse_music` which takes a string of music notes and returns a list of integers representing the duration of each note. The input string consists of space-separated notes, where each note is represented by a string of characters.\n\nnote_map = {'o': 4, 'o|': 2, '.|': 1}\nThe function first defines a dictionary `note_map` which maps each note string to its duration.\n\nreturn [note_map[x] for x in music_string.split(' ') if x]\nThe function then splits the input string into a list of note strings using the `split` method. It then iterates through each note string, looks up its duration in the `note_map` dictionary, and appends it to the result list. The `if x` condition filters out any empty strings that may result from consecutive spaces in the input string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (parse_music music_string)\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (split_words txt)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n    (check-within (candidate \"Hello world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello,world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello world,!\") (list \"Hello\" \"world,!\") 0.001)\n    (check-within (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\" \"!\") 0.001)\n    (check-within (candidate \"abcdef\") 3 0.001)\n    (check-within (candidate \"aaabb\") 2 0.001)\n    (check-within (candidate \"aaaBb\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\n### Explanation\n\nThe code is an implementation of{{{TOFILL}}}\n\n### Racket version\n\n#lang racket\n\n;; \n(define (split_words txt)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (count_distinct_characters string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_distinct_characters))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abcde\") 5 0.001)\n    (check-within (candidate \"abcdecadeCADE\") 5 0.001)\n    (check-within (candidate \"aaaaAAAAaaaa\") 1 0.001)\n    (check-within (candidate \"Jerry jERRY JeRRRY\") 5 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n### Explanation\n\nThe code is an implementation of counting the number of distinct characters in a string. It takes a string `string` as input and returns an integer representing the number of distinct characters in the string.\n\nreturn len(set(string.lower()))\nThe function first converts the input string to lowercase using the `lower` method. It then converts the string to a set using the `set` function, which removes duplicates. Finally, it returns the length of the set, which is the number of distinct characters in the string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_distinct_characters string)\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (bf planet1 planet2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bf))\n    (check-within (candidate \"Jupiter\" \"Neptune\") (list \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Mercury\") (list \"Venus\") 0.001)\n    (check-within (candidate \"Mercury\" \"Uranus\") (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\") 0.001)\n    (check-within (candidate \"Neptune\" \"Venus\") (list \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Mars\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Jupiter\" \"Makemake\") (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n### Explanation\n\nThe code is an implementation of a function `bf` that takes two planet names and returns a tuple of the names of the planets that lie between them in the solar system. The function takes two strings `planet1` and `planet2` as input and returns a tuple of strings.\n\nplanet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nThe function first defines a tuple `planet_names` containing the names of the planets in the solar system.\n\nif planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n    return ()\nThe function checks if either of the input planet names is not in the `planet_names` tuple or if the two planet names are the same. If either of these conditions is true, the function returns an empty tuple.\n\nplanet1_index = planet_names.index(planet1)\nplanet2_index = planet_names.index(planet2)\nThe function then finds the indices of the two input planet names in the `planet_names` tuple.\n\nif planet1_index < planet2_index:\n    return (planet_names[planet1_index + 1: planet2_index])\nelse:\n    return (planet_names[planet2_index + 1 : planet1_index])\nFinally, the function checks if the index of `planet1` is less than the index of `planet2`. If it is, the function returns a slice of the `planet_names` tuple containing the planets between `planet1` and `planet2`. If it is not, the function returns a slice of the `planet_names` tuple containing the planets between `planet2` and `planet1`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (bf planet1 planet2)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (digitSum s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abAB\") 131 0.001)\n    (check-within (candidate \"abcCd\") 67 0.001)\n    (check-within (candidate \"helloE\") 69 0.001)\n    (check-within (candidate \"woArBld\") 131 0.001)\n    (check-within (candidate \"aAaaaXa\") 153 0.001)\n    (check-within (candidate \" How are yOu?\") 151 0.001)\n    (check-within (candidate \"You arE Very Smart\") 327 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef digitSum(s: str) -> int:\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\n### Explanation\n\nThe code is an implementation of a function `digitSum` which takes a string `s` and returns the sum of the ASCII values of all uppercase letters in the string.\n\nif s == \"\": return 0\nThe function first checks if the input string is empty. If it is, it returns 0.\n\nreturn sum(ord(char) if char.isupper() else 0 for char in s)\nThe function then uses a generator expression to iterate through each character `char` in the input string `s`. If the character is an uppercase letter, it adds its ASCII value to the sum. Otherwise, it adds 0 to the sum. The `sum` function then returns the total sum of all the ASCII values of uppercase letters in the string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (digitSum s)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sum_squares lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 1 4 9)) 14 0.001)\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1)) 9 0.001)\n    (check-within (candidate (list -1 -1 -1 -1 -1 -1 -1 -1 -1)) -3 0.001)\n    (check-within (candidate (list 0)) 0 0.001)\n    (check-within (candidate (list -1 -5 2 -1 -5)) -126 0.001)\n    (check-within (candidate (list -56 -99 1 0 -2)) 3030 0.001)\n    (check-within (candidate (list -1 0 0 0 0 0 0 0 -1)) 0 0.001)\n    (check-within (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37)) -14196 0.001)\n    (check-within (candidate (list -1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10)) -1448 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\n### Explanation\n\nThe code is an implementation of a function `sum_squares` which takes a list of integers and returns the sum of the squares of every third element and the cubes of every fourth element. The function takes a list of integers `lst` as input and returns an integer.\n\nresult =[]\nThe function initializes an empty list `result` to store the squares and cubes of the elements in the input list.\n\nfor i in range(len(lst)):\nThe function iterates through each index `i` in the input list.\n\nif i %3 == 0:\n    result.append(lst[i]**2)\nIf the index is a multiple of 3, the function appends the square of the element at that index to the `result` list.\n\nelif i % 4 == 0 and i%3 != 0:\n    result.append(lst[i]**3)\nIf the index is a multiple of 4 but not a multiple of 3, the function appends the cube of the element at that index to the `result` list.\n\nelse:\n    result.append(lst[i])\nIf the index is not a multiple of 3 or 4, the function appends the element at that index to the `result` list.\n\nreturn sum(result)\nFinally, the function returns the sum of the elements in the `result` list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (count_up_to n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_up_to))\n    (check-within (candidate 5) (list 2 3) 0.001)\n    (check-within (candidate 6) (list 2 3 5) 0.001)\n    (check-within (candidate 7) (list 2 3 5) 0.001)\n    (check-within (candidate 10) (list 2 3 5 7) 0.001)\n    (check-within (candidate 0) (list ) 0.001)\n    (check-within (candidate 22) (list 2 3 5 7 11 13 17 19) 0.001)\n    (check-within (candidate 1) (list ) 0.001)\n    (check-within (candidate 18) (list 2 3 5 7 11 13 17) 0.001)\n    (check-within (candidate 47) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43) 0.001)\n    (check-within (candidate 101) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n### Explanation\n\nThe code is an implementation of finding all prime numbers up to a given integer `n`. It takes an integer `n` as input and returns a list of prime numbers.\n\nprimes = []\nThe function initializes an empty list `primes` to store the prime numbers.\n\nfor i in range(2, n):\nThe function iterates through all integers between 2 and `n` (exclusive).\n\nis_prime = True\nThe variable `is_prime` is initialized to `True` to assume that the current integer is prime.\n\nfor j in range(2, i):\n    if i % j == 0:\n        is_prime = False\n        break\nThe function then checks if the current integer is divisible by any integer between 2 and itself (exclusive). If it is, the `is_prime` variable is set to `False` and the loop is broken.\n\nif is_prime:\n    primes.append(i)\nIf the `is_prime` variable is still `True` after the loop, it means that the current integer is prime, so it is appended to the `primes` list.\n\nreturn primes\nFinally, the function returns the `primes` list containing all prime numbers up to `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_up_to n)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sum_squares lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 3.0 5.0 7.0)) 84 0.001)\n    (check-within (candidate (list 1.4 4.2 0.0)) 29 0.001)\n    (check-within (candidate (list -2.4 1.0 1.0)) 6 0.001)\n    (check-within (candidate (list 100.0 1.0 15.0 2.0)) 10230 0.001)\n    (check-within (candidate (list 10000.0 10000.0)) 200000000 0.001)\n    (check-within (candidate (list -1.4 4.6 6.3)) 75 0.001)\n    (check-within (candidate (list -1.4 17.9 18.9 19.9)) 1086 0.001)\n    (check-within (candidate (list 0.0)) 0 0.001)\n    (check-within (candidate (list -1.0)) 1 0.001)\n    (check-within (candidate (list -1.0 1.0 0.0)) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n### Explanation\n\nThe code is an implementation of a function `sum_squares` which takes a list of floats and returns the sum of the squares of the ceiling of each float.\n\nimport math\nThe function first imports the `math` module to use the `ceil` function.\n\nsquared = 0\nThe variable `squared` is initialized to 0 to store the sum of the squares of the ceiling of each float.\n\nfor i in lst:\n    squared += math.ceil(i)**2\nThe function iterates through each float `i` in the input list `lst`. It uses the `ceil` function to round up each float to the nearest integer, then squares the result and adds it to the `squared` variable.\n\nreturn squared\nThe function returns the `squared` variable containing the sum of the squares of the ceiling of each float.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (unique l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-within (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n\n### Explanation\n\nThe code is an implementation of finding the unique elements in a list of integers. It takes a list of integers `l` as input and returns a sorted list of unique integers.\n\nreturn sorted(list(set(l)))\nThe function first converts the input list to a set to remove duplicates, then converts it back to a list and sorts it.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (unique l)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fib n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-within (candidate 10) 55 0.001)\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 8) 21 0.001)\n    (check-within (candidate 11) 89 0.001)\n    (check-within (candidate 12) 144 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef fib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n### Explanation\n\nThe code is an implementation of the Fibonacci sequence. It takes an integer `n` as input and returns the `n`th Fibonacci number.\n\nif n == 0:\n    return 0\nThe function first checks if `n` is 0. If it is, it returns 0 (the first Fibonacci number).\n\nif n == 1:\n    return 1\nThe function then checks if `n` is 1. If it is, it returns 1 (the second Fibonacci number).\n\nreturn fib(n - 1) + fib(n - 2)\nFinally, if `n` is neither 0 nor 1, the function returns the sum of the `n-1`th and `n-2`th Fibonacci numbers.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fib n)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fizz_buzz n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n    (check-within (candidate 50) 0 0.001)\n    (check-within (candidate 78) 2 0.001)\n    (check-within (candidate 79) 3 0.001)\n    (check-within (candidate 100) 3 0.001)\n    (check-within (candidate 200) 6 0.001)\n    (check-within (candidate 4000) 192 0.001)\n    (check-within (candidate 10000) 639 0.001)\n    (check-within (candidate 100000) 8026 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef fizz_buzz(n: int) -> int:\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n### Explanation\n\nThe code is an implementation of the FizzBuzz problem. It takes an integer `n` as input and returns the number of times the digit 7 appears in the concatenation of all numbers between 0 and `n` that are divisible by 11 or 13.\n\nns = []\nThe function first initializes an empty list `ns` to store the numbers that are divisible by 11 or 13.\n\nfor i in range(n):\nThe function then iterates through all numbers between 0 and `n` (exclusive).\n\nif i % 11 == 0 or i % 13 == 0:\n    ns.append(i)\nIf the number is divisible by 11 or 13, it is appended to the `ns` list.\n\ns = ''.join(list(map(str, ns)))\nThe function then joins the `ns` list into a string `s`.\n\nans = 0\nfor c in s:\n    ans += (c == '7')\nFinally, the function iterates through each character in the string `s` and increments the `ans` variable if the character is `'7'`. The function then returns the `ans` variable.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fizz_buzz n)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (Strongest_Extension class_name extensions)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-within (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\" 0.001)\n    (check-within (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\" 0.001)\n    (check-within (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\" 0.001)\n    (check-within (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\" 0.001)\n    (check-within (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\" 0.001)\n    (check-within (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\" 0.001)\n    (check-within (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\" 0.001)\n    (check-within (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\" 0.001)\n    (check-within (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n### Explanation\n\nThe code is an implementation of a function `Strongest_Extension` which takes a class name and a list of extensions and returns the strongest extension. The strength of an extension is determined by the difference between the number of uppercase letters and the number of lowercase letters in the extension.\n\nstrong = extensions[0]\nmy_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\nThe function first initializes the `strong` variable to the first extension in the list and calculates its strength using the difference between the number of uppercase letters and the number of lowercase letters.\n\nfor s in extensions:\n    val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n    if val > my_val:\n        strong = s\n        my_val = val\nThe function then iterates through the remaining extensions in the list and calculates their strength. If an extension has a greater strength than the current strongest extension, it replaces the current strongest extension.\n\nans = class_name + \".\" + strong\nFinally, the function concatenates the class name and the strongest extension with a period and returns the result.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (Strongest_Extension class_name extensions)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (find_closest_elements numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0) 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\n### Explanation\n\nThe code is an implementation of finding the closest pair of numbers in a list of floating-point numbers. It takes a list of floating-point numbers `numbers` as input and returns a tuple containing the two closest numbers.\n\nclosest_pair = None\ndistance = None\nThe function initializes two variables `closest_pair` and `distance` to `None`.\n\nfor idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            if distance is None:\n                distance = abs(elem - elem2)\n                closest_pair = tuple(sorted([elem, elem2]))\n            else:\n                new_distance = abs(elem - elem2)\n                if new_distance < distance:\n                    distance = new_distance\n                    closest_pair = tuple(sorted([elem, elem2]))\nThe function iterates through each pair of elements in the list and calculates the absolute difference between them. If the distance between the pair is less than the current `distance`, the function updates the `distance` and `closest_pair` variables.\n\nreturn closest_pair\nFinally, the function returns the `closest_pair` tuple containing the two closest numbers.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (find_closest_elements numbers)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (valid_date date)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n    (check-within (candidate \"03-11-2000\") #t 0.001)\n    (check-within (candidate \"15-01-2012\") #f 0.001)\n    (check-within (candidate \"04-0-2040\") #f 0.001)\n    (check-within (candidate \"06-04-2020\") #t 0.001)\n    (check-within (candidate \"01-01-2007\") #t 0.001)\n    (check-within (candidate \"03-32-2011\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"04-31-3000\") #f 0.001)\n    (check-within (candidate \"06-06-2005\") #t 0.001)\n    (check-within (candidate \"21-31-2000\") #f 0.001)\n    (check-within (candidate \"04-12-2003\") #t 0.001)\n    (check-within (candidate \"04122003\") #f 0.001)\n    (check-within (candidate \"20030412\") #f 0.001)\n    (check-within (candidate \"2003-04\") #f 0.001)\n    (check-within (candidate \"2003-04-12\") #f 0.001)\n    (check-within (candidate \"04-2003\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef valid_date(date: str) -> bool:\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n### Explanation\n\nThe code is an implementation of a function `valid_date` which takes a string representing a date in the format `MM-DD-YYYY` and returns a boolean indicating whether the date is valid.\n\ntry:\n    date = date.strip()\n    month, day, year = date.split('-')\n    month, day, year = int(month), int(day), int(year)\nThe function first tries to split the input string into three parts: month, day, and year. It also strips any leading or trailing whitespace from the input string. If the input string is not in the correct format, a `ValueError` will be raised and the function will return `False`.\n\nif month < 1 or month > 12:\n    return False\nif month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n    return False\nif month in [4,6,9,11] and day < 1 or day > 30:\n    return False\nif month == 2 and day < 1 or day > 29:\n    return False\nThe function then checks if the month is valid (between 1 and 12). It also checks if the day is valid for the given month. If the month is one of the months with 31 days, the day must be between 1 and 31. If the month is one of the months with 30 days, the day must be between 1 and 30. If the month is February, the day must be between 1 and 29 (since we are not checking for leap years). If any of these conditions are not met, the function returns `False`.\n\nexcept:\n    return False\nIf any errors occur during the try block, the function catches the error and returns `False`.\n\nreturn True\nIf the input date is valid, the function returns `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (valid_date date)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (add x y)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate 0 1) 1 0.001)\n    (check-within (candidate 1 0) 1 0.001)\n    (check-within (candidate 2 3) 5 0.001)\n    (check-within (candidate 5 7) 12 0.001)\n    (check-within (candidate 7 5) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef add(x: int, y: int) -> int:\n    return x + y\n\n### Explanation\n\nThe code is an implementation of a function `add` which takes two integers as input and returns their sum. The function is defined using the `def` keyword, followed by the function name `add`, and the input parameters `x` and `y`. The return type of the function is specified using the `->` syntax, followed by the return type `int`.\n\nreturn x + y\nThe function simply returns the sum of the input integers `x` and `y`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (add x y)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (triples_sum_to_zero l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -1)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #t 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 1 2 5 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 9 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -100)) #f 0.001)\n    (check-within (candidate (list 100 3 5 -100)) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n### Explanation\n\nThe code is an implementation of a function `triples_sum_to_zero` which takes a list of integers and returns a boolean indicating whether there exists a triple of integers in the list that sum to zero.\n\nfor i in range(len(l)):\n    for j in range(i + 1, len(l)):\n        for k in range(j + 1, len(l)):\nThe function uses three nested loops to iterate through all possible triples of integers in the list.\n\nif l[i] + l[j] + l[k] == 0:\n    return True\nIf the sum of the current triple is zero, the function returns `True`.\n\nreturn False\nIf no triple is found that sums to zero, the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (triples_sum_to_zero l)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (largest_divisor n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-within (candidate 3) 1 0.001)\n    (check-within (candidate 7) 1 0.001)\n    (check-within (candidate 10) 5 0.001)\n    (check-within (candidate 100) 50 0.001)\n    (check-within (candidate 49) 7 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n### Explanation\n\nThe code is an implementation of finding the largest divisor of a given integer `n`. It takes an integer `n` as input and returns an integer.\n\nfor i in reversed(range(n)):\nThe function iterates through all integers from `n-1` down to `0` using the `reversed` function.\n\nif n % i == 0:\n    return i\nFor each integer `i`, the function checks if `n` is divisible by `i`. If it is, it returns `i` as the largest divisor of `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_divisor n)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_numbers numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"three\") \"three\" 0.001)\n    (check-within (candidate \"three five nine\") \"three five nine\" 0.001)\n    (check-within (candidate \"five zero four seven nine eight\") \"zero four five seven eight nine\" 0.001)\n    (check-within (candidate \"six five four three two one zero\") \"zero one two three four five six\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n### Explanation\n\nThe code is an implementation of sorting a string of numbers in English words. It takes a string of space-separated English words representing numbers and returns a string of space-separated English words representing the sorted numbers.\n\nvalue_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\nThe function first defines a dictionary `value_map` that maps English words to their corresponding numerical values.\n\nreturn ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\nThe function then splits the input string into a list of words using the `split` method. It filters out any empty strings using a list comprehension. It then sorts the list of words using the `sorted` function, with the `key` parameter set to a lambda function that maps each word to its corresponding numerical value using the `value_map` dictionary. Finally, it joins the sorted list of words back into a string using the `join` method.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_numbers numbers)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (smallest_change arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate smallest_change))\n    (check-within (candidate (list 1 2 3 5 4 7 9 6)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 3 2 2)) 1 0.001)\n    (check-within (candidate (list 1 4 2)) 1 0.001)\n    (check-within (candidate (list 1 4 4 2)) 1 0.001)\n    (check-within (candidate (list 1 2 3 2 1)) 0 0.001)\n    (check-within (candidate (list 3 1 1 3)) 0 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\n### Explanation\n\nThe code is an implementation of finding the smallest number of changes required to make a list of integers a palindrome. It takes a list of integers `arr` as input and returns an integer representing the smallest number of changes required to make `arr` a palindrome.\n\nans = 0\nThe function initializes a variable `ans` to 0 to keep track of the number of changes required.\n\nfor i in range(len(arr) // 2):\nThe function iterates through half of the list (rounded down if the length of the list is odd).\n\nif arr[i] != arr[len(arr) - i - 1]:\n    ans += 1\nIf the element at index `i` is not equal to the element at index `len(arr) - i - 1`, the function increments the `ans` variable.\n\nreturn ans\nThe function returns the `ans` variable, which represents the smallest number of changes required to make `arr` a palindrome.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (smallest_change arr)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (below_threshold l t)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_threshold))\n    (check-within (candidate (list 1 2 4 10) 100) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 5) #f 0.001)\n    (check-within (candidate (list 1 20 4 10) 21) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 22) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 11) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 10) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n### Explanation\n\nThe code is an implementation of checking if all elements in a list are below a given threshold. It takes a list of integers `l` and an integer threshold `t` as input and returns a boolean.\n\nfor e in l:\n    if e >= t:\n        return False\nThe function iterates through each element `e` in the input list `l`. If the element is greater than or equal to the threshold `t`, the function returns `False`.\n\nreturn True\nIf the function has not yet returned `False`, it means that all elements in the list are below the threshold, so the function returns `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (below_threshold l t)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (prod_signs arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prod_signs))\n    (check-within (candidate (list 1 2 2 -4)) -9 0.001)\n    (check-within (candidate (list 0 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 3 -1 1)) -10 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 2 4 1 2 -1 -1 9)) 20 0.001)\n    (check-within (candidate (list -1 1 -1 1)) 4 0.001)\n    (check-within (candidate (list -1 1 1 1)) -4 0.001)\n    (check-within (candidate (list -1 1 1 0)) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\nfrom typing import Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\n### Explanation\n\nThe code is an implementation of a function `prod_signs` which takes a list of integers and returns the product of the signs of the integers multiplied by the absolute value of the integers.\n\nif not arr: return None\nThe function first checks if the input list is empty. If it is, it returns `None`.\n\nprod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\nThe function initializes the `prod` variable to 0 if the input list contains a 0, otherwise it calculates the product of the signs of the integers in the list. This is done by taking the length of a filtered list of negative integers and raising -1 to that power.\n\nreturn prod * sum([abs(i) for i in arr])\nFinally, the function returns the product of the signs of the integers multiplied by the absolute value of the integers.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prod_signs arr)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (modp n p)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n    (check-within (candidate 3 5) 3 0.001)\n    (check-within (candidate 1101 101) 2 0.001)\n    (check-within (candidate 0 101) 1 0.001)\n    (check-within (candidate 3 11) 8 0.001)\n    (check-within (candidate 100 101) 1 0.001)\n    (check-within (candidate 30 5) 4 0.001)\n    (check-within (candidate 31 5) 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\n### Explanation\n\nThe code is an implementation of a function `modp` which calculates the value of `(2^n) % p` for given integers `n` and `p`. It takes two integers `n` and `p` as input and returns an integer.\n\nret = 1\nThe function initializes a variable `ret` to 1.\n\nfor i in range(n):\nThe function iterates through the range of integers from 0 to `n-1`.\n\nret = (2 * ret) % p\nFor each iteration, the function multiplies `ret` by 2 and takes the result modulo `p`. This is equivalent to computing `(2^i) % p` for each `i` in the range of integers from 0 to `n-1`.\n\nreturn ret\nThe function returns the final value of `ret`, which is `(2^n) % p`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (modp n p)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (count_upper s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-within (candidate \"aBCdEf\") 1 0.001)\n    (check-within (candidate \"abcdefg\") 0 0.001)\n    (check-within (candidate \"dBBE\") 0 0.001)\n    (check-within (candidate \"B\") 0 0.001)\n    (check-within (candidate \"U\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"EEEE\") 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef count_upper(s: str) -> int:\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\n### Explanation\n\nThe code is an implementation of counting the number of uppercase vowels in a string. It takes a string `s` as input and returns an integer count of the number of uppercase vowels in the string.\n\ncount = 0\nThe function initializes a counter variable `count` to 0.\n\nfor i in range(0,len(s),2):\nThe function iterates through the string `s` in steps of 2.\n\nif s[i] in \"AEIOU\":\n    count += 1\nIf the current character is an uppercase vowel, the function increments the `count` variable.\n\nreturn count\nThe function returns the final value of the `count` variable.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_upper s)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (multiply a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n    (check-within (candidate 148 412) 16 0.001)\n    (check-within (candidate 19 28) 72 0.001)\n    (check-within (candidate 2020 1851) 0 0.001)\n    (check-within (candidate 14 -15) 20 0.001)\n    (check-within (candidate 76 67) 42 0.001)\n    (check-within (candidate 17 27) 49 0.001)\n    (check-within (candidate 0 1) 0 0.001)\n    (check-within (candidate 0 0) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef multiply(a: int, b: int) -> int:\n    return abs(a % 10) * abs(b % 10)\n\n### Explanation\n\nThe code is an implementation of a function `multiply` that takes two integers `a` and `b` as input and returns the product of the last digits of `a` and `b`.\n\nreturn abs(a % 10) * abs(b % 10)\nThe function first takes the absolute value of the last digit of `a` and `b` using the modulo operator `%`. It then multiplies these two values to get the product of the last digits.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (multiply a b)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (unique_digits x)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-within (candidate (list 15 33 1422 1)) (list 1 15 33) 0.001)\n    (check-within (candidate (list 152 323 1422 10)) (list ) 0.001)\n    (check-within (candidate (list 12345 2033 111 151)) (list 111 151) 0.001)\n    (check-within (candidate (list 135 103 31)) (list 31 135) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n### Explanation\n\nThe code is an implementation of a function `unique_digits` which takes a list of integers and returns a sorted list of integers that have only odd digits.\n\nodd_digit_elements = []\nThe function initializes an empty list `odd_digit_elements` to store the integers that have only odd digits.\n\nfor i in x:\nThe function iterates through each integer `i` in the input list `x`.\n\nif all (int(c) % 2 == 1 for c in str(i)):\n    odd_digit_elements.append(i)\nIf all digits in the integer are odd, the function appends the integer to the `odd_digit_elements` list.\n\nreturn sorted(odd_digit_elements)\nFinally, the function returns the `odd_digit_elements` list sorted in ascending order.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (unique_digits x)\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (will_it_fly q w)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate will_it_fly))\n    (check-within (candidate (list 3 2 3) 9) #t 0.001)\n    (check-within (candidate (list 1 2) 5) #f 0.001)\n    (check-within (candidate (list 3) 5) #t 0.001)\n    (check-within (candidate (list 3 2 3) 1) #f 0.001)\n    (check-within (candidate (list 1 2 3) 6) #f 0.001)\n    (check-within (candidate (list 5) 5) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n\n### Explanation\n\nThe code is an implementation of a function `will_it_fly` which takes a list of integers `q` and a weight `w` and returns a boolean indicating whether the sum of the integers in `q` is less than or equal to `w` and whether the integers in `q` are symmetric.\n\nif sum(q) > w:\n    return False\nThe function first checks if the sum of the integers in `q` is greater than `w`. If it is, the function returns `False`.\n\ni, j = 0, len(q)-1\nThe function initializes two pointers `i` and `j` to the beginning and end of the list `q`, respectively.\n\nwhile i<j:\n    if q[i] != q[j]:\n        return False\n    i+=1\n    j-=1\nThe function then iterates through the list `q` using the two pointers `i` and `j`. If the integers at positions `i` and `j` are not equal, the function returns `False`. The pointers are then incremented and decremented, respectively, until they meet in the middle of the list.\n\nreturn True\nIf the function has not returned `False` by this point, it means that the sum of the integers in `q` is less than or equal to `w` and the integers in `q` are symmetric, so the function returns `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (will_it_fly q w)\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_multiply_prime a)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n    (check-within (candidate 5) #f 0.001)\n    (check-within (candidate 30) #t 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 125) #t 0.001)\n    (check-within (candidate 105) #t 0.001)\n    (check-within (candidate 126) #f 0.001)\n    (check-within (candidate 729) #f 0.001)\n    (check-within (candidate 891) #f 0.001)\n    (check-within (candidate 1001) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef is_multiply_prime(a: int) -> bool:\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n### Explanation\n\nThe code is an implementation of a function `is_multiply_prime` which takes an integer `a` and returns `True` if it is the product of three prime numbers between 2 and 100 (inclusive), and `False` otherwise.\n\ndef is_prime(n):\n    for j in range(2,n):\n        if n%j == 0:\n            return False\n    return True\nThe function first defines a helper function `is_prime` that takes a number and returns `True` if it is prime and `False` otherwise. This is done by checking if the number is divisible by any integer between 2 and `n-1`.\n\nfor i in range(2,101):\n    if not is_prime(i): continue\n    for j in range(2,101):\n        if not is_prime(j): continue\n        for k in range(2,101):\n            if not is_prime(k): continue\n            if i*j*k == a: return True\nThe function then loops through all possible combinations of three prime numbers between 2 and 100 (inclusive), and checks if their product is equal to `a`. If it is, the function returns `True`. If no such combination is found, the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_multiply_prime a)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (maximum arr k)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-within (candidate (list -3 -4 5) 3) (list -4 -3 5) 0.001)\n    (check-within (candidate (list 4 -4 4) 2) (list 4 4) 0.001)\n    (check-within (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2) 0.001)\n    (check-within (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123) 0.001)\n    (check-within (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20) 0.001)\n    (check-within (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15) 0.001)\n    (check-within (candidate (list -1 0 2 5 3 -10) 2) (list 3 5) 0.001)\n    (check-within (candidate (list 1 0 5 -7) 1) (list 5) 0.001)\n    (check-within (candidate (list 4 -4) 2) (list -4 4) 0.001)\n    (check-within (candidate (list -10 10) 2) (list -10 10) 0.001)\n    (check-within (candidate (list 1 2 3 -23 243 -400 0) 0) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n### Explanation\n\nThe code is an implementation of finding the `k` largest elements in an array of integers. It takes a list of integers `arr` and an integer `k` as input and returns a list of the `k` largest elements in `arr`.\n\nif k == 0:\n    return []\nIf `k` is 0, the function returns an empty list.\n\narr.sort()\nThe function sorts the input list `arr` in ascending order.\n\nans = arr[-k:]\nThe function then selects the last `k` elements of the sorted list `arr` and assigns them to the variable `ans`.\n\nreturn ans\nFinally, the function returns the list `ans` containing the `k` largest elements of `arr`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (maximum arr k)\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (filter_integers values)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9) 0.001)\n    (check-within (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\n### Explanation\n\nThe code is an implementation of a function `filter_integers` which takes a list of values and returns a list of integers.\n\nreturn [x for x in values if isinstance(x, int)]\nThe function uses a list comprehension to iterate through each element `x` in the input list `values`. If the element is an instance of an integer, it is added to the output list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (filter_integers values)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (skjkasdkd lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n    (check-within (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3)) 10 0.001)\n    (check-within (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1)) 25 0.001)\n    (check-within (candidate (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3)) 13 0.001)\n    (check-within (candidate (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6)) 11 0.001)\n    (check-within (candidate (list 0 81 12 3 1 21)) 3 0.001)\n    (check-within (candidate (list 0 8 1 2 1 7)) 7 0.001)\n    (check-within (candidate (list 8191)) 19 0.001)\n    (check-within (candidate (list 8191 123456 127 7)) 19 0.001)\n    (check-within (candidate (list 127 97 8192)) 10 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef skjkasdkd(lst: List[int]) -> int:\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `skjkasdkd` which takes a list of integers and returns the sum of the digits of the largest prime number in the list.\n\ndef isPrime(n):\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n\n    return True\nThe function first defines a helper function `isPrime` that takes a number and returns `True` if it is a prime number and `False` otherwise. This is done by checking if the number is divisible by any integer between 2 and the square root of the number.\n\nmaxx = 0\ni = 0\nThe function initializes the variables `maxx` and `i` to 0.\n\nwhile i < len(lst):\n    if(lst[i] > maxx and isPrime(lst[i])):\n        maxx = lst[i]\n    i+=1\nThe function iterates through each integer in the input list `lst`. If the integer is greater than the current maximum `maxx` and is a prime number, it updates the value of `maxx` to the integer.\n\nresult = sum(int(digit) for digit in str(maxx))\nFinally, the function converts the largest prime number `maxx` to a string, iterates through each character in the string, converts it back to an integer, and sums the integers to get the result.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (skjkasdkd lst)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (total_match lst1 lst2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate total_match))\n    (check-within (candidate (list ) (list )) (list ) 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\")) (list \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\")) (list \"4\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"Hi\")) (list \"hI\" \"Hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\")) (list \"hI\" \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hii\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list ) (list \"this\")) (list ) 0.001)\n    (check-within (candidate (list \"this\") (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n### Explanation\n\nThe code is an implementation of a function `total_match` which takes two lists of strings and returns the list with the total length of all strings being the smallest.\n\nl1 = 0\nfor st in lst1:\n    l1 += len(st)\nThe function first calculates the total length of all strings in the first list `lst1`.\n\nl2 = 0\nfor st in lst2:\n    l2 += len(st)\nIt then calculates the total length of all strings in the second list `lst2`.\n\nif l1 <= l2:\n    return lst1\nelse:\n    return lst2\nFinally, it compares the two total lengths and returns the list with the smallest total length.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (total_match lst1 lst2)\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (string_to_md5 text)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n    (check-within (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\" 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"A B C\") \"0ef78513b0cb8cef12743f5aeb35f888\" 0.001)\n    (check-within (candidate \"password\") \"5f4dcc3b5aa765d61d8327deb882cf99\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Optional\n\ndef string_to_md5(text: str) -> Optional[str]:\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\n### Explanation\n\nThe code is an implementation of converting a string to its MD5 hash value. It takes a string `text` as input and returns its MD5 hash value as a string. If the input string is empty, it returns `None`.\n\nimport hashlib\nThe function first imports the `hashlib` module, which provides a way to create hash objects.\n\nreturn hashlib.md5(text.encode('ascii')).hexdigest() if text else None\nThe function then checks if the input string `text` is empty. If it is, it returns `None`. Otherwise, it encodes the string as ASCII and passes it to the `md5` function of the `hashlib` module to create an MD5 hash object. The `hexdigest` method is called on the hash object to get the hash value as a string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (string_to_md5 text)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (car_race_collision n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate car_race_collision))\n    (check-within (candidate 2) 4 0.001)\n    (check-within (candidate 3) 9 0.001)\n    (check-within (candidate 4) 16 0.001)\n    (check-within (candidate 8) 64 0.001)\n    (check-within (candidate 10) 100 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef car_race_collision(n: int) -> int:\n    return n**2\n\n### Explanation\n\nThe code is an implementation of a function `car_race_collision` which takes an integer `n` as input and returns the number of collisions that will occur in a car race with `n` cars. The function simply returns the square of `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (car_race_collision n)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_simple_power x n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-within (candidate 16 2) #t 0.001)\n    (check-within (candidate 143214 16) #f 0.001)\n    (check-within (candidate 4 2) #t 0.001)\n    (check-within (candidate 9 3) #t 0.001)\n    (check-within (candidate 16 4) #t 0.001)\n    (check-within (candidate 24 2) #f 0.001)\n    (check-within (candidate 128 4) #f 0.001)\n    (check-within (candidate 12 6) #f 0.001)\n    (check-within (candidate 1 1) #t 0.001)\n    (check-within (candidate 1 12) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x)\n\n### Explanation\n\nThe code is an implementation of a function `is_simple_power` which takes two integers `x` and `n` and returns a boolean indicating whether `x` is a power of `n`. \n\nif (n == 1): \n    return (x == 1) \nThe function first checks if `n` is equal to 1. If it is, the function returns `True` if `x` is also equal to 1, and `False` otherwise. This is because any number raised to the power of 1 is equal to itself.\n\npower = 1\nThe function initializes a variable `power` to 1.\n\nwhile (power < x): \n    power = power * n \nThe function then enters a while loop that multiplies `power` by `n` until `power` is greater than or equal to `x`.\n\nreturn (power == x)\nFinally, the function returns `True` if `power` is equal to `x`, and `False` otherwise. This is because if `x` is a power of `n`, then `power` will eventually become equal to `x` after enough multiplications by `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_simple_power x n)\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (encode message)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-within (candidate \"TEST\") \"tgst\" 0.001)\n    (check-within (candidate \"Mudasir\") \"mWDCSKR\" 0.001)\n    (check-within (candidate \"YES\") \"ygs\" 0.001)\n    (check-within (candidate \"This is a message\") \"tHKS KS C MGSSCGG\" 0.001)\n    (check-within (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\n### Explanation\n\nThe code is an implementation of a function `encode` which takes a string `message` and returns a new string where all vowels are replaced with the next letter in the alphabet (with wraparound). The function also swaps the case of the input string.\n\nvowels = \"aeiouAEIOU\"\nThe function first defines a string `vowels` containing all vowels (both lowercase and uppercase).\n\nvowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\nThe function then creates a dictionary `vowels_replace` where the keys are the vowels and the values are the next letter in the alphabet (with wraparound).\n\nmessage = message.swapcase()\nThe function swaps the case of the input string using the `swapcase` method.\n\nreturn ''.join([vowels_replace[i] if i in vowels else i for i in message])\nFinally, the function iterates through each character in the input string and replaces vowels with the corresponding value in the `vowels_replace` dictionary. It then returns the resulting string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (encode message)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (incr_list l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate incr_list))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 4 3 2) 0.001)\n    (check-within (candidate (list 5 2 5 2 3 3 9 0 123)) (list 6 3 6 3 4 4 10 1 124) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [(e + 1) for e in l]\n\n### Explanation\n\nThe code is an implementation of a function `incr_list` which takes a list of integers and returns a new list with each element incremented by 1.\n\nreturn [(e + 1) for e in l]\nThe function uses a list comprehension to create a new list with each element of the input list `l` incremented by 1.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (incr_list l)\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (flip_case string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hello!\") \"hELLO!\" 0.001)\n    (check-within (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n\n### Explanation\n\nThe code is an implementation of a function `flip_case` which takes a string and returns a new string with the case of each character flipped. Uppercase characters are converted to lowercase and vice versa.\n\nreturn string.swapcase()\nThe function uses the `swapcase` method of the string class to flip the case of each character in the input string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (flip_case string)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (vowels_count s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n    (check-within (candidate \"abcde\") 2 0.001)\n    (check-within (candidate \"Alone\") 3 0.001)\n    (check-within (candidate \"key\") 2 0.001)\n    (check-within (candidate \"bye\") 1 0.001)\n    (check-within (candidate \"keY\") 2 0.001)\n    (check-within (candidate \"bYe\") 1 0.001)\n    (check-within (candidate \"ACEDY\") 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef vowels_count(s: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n### Explanation\n\nThe code is an implementation of counting the number of vowels in a string. It takes a string `s` as input and returns an integer representing the number of vowels in the string.\n\nvowels = \"aeiouAEIOU\"\nThe function first defines a string `vowels` containing all the vowels in the English language (both lowercase and uppercase).\n\nn_vowels = sum(c in vowels for c in s)\nThe function then uses a generator expression to count the number of vowels in the input string `s`. It iterates through each character `c` in the string and checks if it is a vowel by using the `in` operator to check if it is in the `vowels` string. The `sum` function is then used to add up the number of True values (i.e., the number of vowels).\n\nif s[-1] == 'y' or s[-1] == 'Y':\n    n_vowels += 1\nFinally, the function checks if the last character of the input string is `'y'` or `'Y'`. If it is, it adds 1 to the `n_vowels` count.\n\nreturn n_vowels\nThe function returns the `n_vowels` count.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (vowels_count s)\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sorted_list_sum lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sorted_list_sum))\n    (check-within (candidate (list \"aa\" \"a\" \"aaa\")) (list \"aa\") 0.001)\n    (check-within (candidate (list \"school\" \"AI\" \"asdf\" \"b\")) (list \"AI\" \"asdf\" \"school\") 0.001)\n    (check-within (candidate (list \"d\" \"b\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"d\" \"dcba\" \"abcd\" \"a\")) (list \"abcd\" \"dcba\") 0.001)\n    (check-within (candidate (list \"AI\" \"ai\" \"au\")) (list \"AI\" \"ai\" \"au\") 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"b\" \"c\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"aaaa\" \"bbbb\" \"dd\" \"cc\")) (list \"cc\" \"dd\" \"aaaa\" \"bbbb\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\n### Explanation\n\nThe code is an implementation of sorting a list of strings by length. It takes a list of strings `lst` as input and returns a sorted list of strings.\n\nlst.sort()\nThe function first sorts the input list in lexicographic order.\n\nnew_lst = []\nfor i in lst:\n    if len(i)%2 == 0:\n        new_lst.append(i)\nIt then creates a new list `new_lst` containing only the strings with even length.\n\nreturn sorted(new_lst, key=len)\nFinally, it sorts the `new_lst` list by length using the `sorted` function with the `key` parameter set to `len`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sorted_list_sum lst)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (words_string s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_string))\n    (check-within (candidate \"Hi, my name is John\") (list \"Hi\" \"my\" \"name\" \"is\" \"John\") 0.001)\n    (check-within (candidate \"One, two, three, four, five, six\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"Hi, my name\") (list \"Hi\" \"my\" \"name\") 0.001)\n    (check-within (candidate \"One,, two, three, four, five, six,\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"ahmed     , gamal\") (list \"ahmed\" \"gamal\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef words_string(s: str) -> List[str]:\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n### Explanation\n\nThe code is an implementation of a function `words_string` which takes a string of words separated by commas and returns a list of the words.\n\nif not s:\n    return []\nThe function first checks if the input string is empty. If it is, it returns an empty list.\n\ns_list = []\n\nfor letter in s:\n    if letter == ',':\n        s_list.append(' ')\n    else:\n        s_list.append(letter)\nThe function then iterates through each character in the input string. If the character is a comma `','`, it appends a space `' '` to the `s_list` list. Otherwise, it appends the character to the `s_list` list.\n\ns_list = \"\".join(s_list)\nThe function then joins the `s_list` list into a string.\n\nreturn s_list.split()\nFinally, the function splits the string into a list of words using the `split` method.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (words_string s)\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (triangle_area a b c)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 3 4 5) 6.0 0.001)\n    (check-within (candidate 1 2 10) -1 0.001)\n    (check-within (candidate 4 8 5) 8.18 0.001)\n    (check-within (candidate 2 2 2) 1.73 0.001)\n    (check-within (candidate 1 2 3) -1 0.001)\n    (check-within (candidate 10 5 7) 16.25 0.001)\n    (check-within (candidate 2 6 3) -1 0.001)\n    (check-within (candidate 1 1 1) 0.43 0.001)\n    (check-within (candidate 2 2 10) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef triangle_area(a: int, b: int, c: int) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n### Explanation\n\nThe code is an implementation of a function `triangle_area` which takes the lengths of the sides of a triangle and returns the area of the triangle. If the input does not form a valid triangle, the function returns -1.\n\nif a + b <= c or a + c <= b or b + c <= a:\n    return -1 \nThe function first checks if the input forms a valid triangle. If the sum of any two sides is less than or equal to the third side, the input does not form a valid triangle, so the function returns -1.\n\ns = (a + b + c)/2    \narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\narea = round(area, 2)\nIf the input forms a valid triangle, the function calculates the area of the triangle using Heron's formula. The variable `s` is the semiperimeter of the triangle. The area is then rounded to two decimal places.\n\nreturn area\nThe function returns the area of the triangle.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (triangle_area a b c)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (check_dict_case dict)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"))) #t 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\"))) #f 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f 0.001)\n    (check-within (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"))) #f 0.001)\n    (check-within (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\"))) #t 0.001)\n    (check-within (candidate #hash((\"fruit\" .  \"Orange\") (\"taste\" .  \"Sweet\"))) #t 0.001)\n    (check-within (candidate #hash()) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                continue\n        return state == \"upper\" or state == \"lower\"\n\n### Explanation\n\nThe code is an implementation of checking if all keys in a dictionary are in the same case. It takes a dictionary `dict` as input and returns a boolean.\n\nif len(dict.keys()) == 0:\n    return False\nThe function first checks if the input dictionary is empty. If it is, it returns `False`.\n\nelse:\n    state = \"start\"\n    for key in dict.keys():\n        if isinstance(key, str) == False:\n            state = \"mixed\"\n            break\n        if state == \"start\":\n            if key.isupper():\n                state = \"upper\"\n            elif key.islower():\n                state = \"lower\"\n            else:\n                break\n        elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                state = \"mixed\"\n                break\n        else:\n            continue\n    return state == \"upper\" or state == \"lower\"\nOtherwise, the function iterates through each key in the dictionary. It first checks if the key is a string. If it is not, it sets the `state` variable to `\"mixed\"` and breaks out of the loop. If it is a string, it checks the case of the key. If the `state` variable is `\"start\"`, it sets the `state` variable to `\"upper\"` if the key is uppercase, `\"lower\"` if the key is lowercase, and breaks out of the loop otherwise. If the `state` variable is `\"upper\"` or `\"lower\"`, it checks if the case of the current key matches the case of the previous keys. If it does not, it sets the `state` variable to `\"mixed\"` and breaks out of the loop. If it does, it continues to the next key. Finally, the function returns `True` if the `state` variable is `\"upper\"` or `\"lower\"`, and `False` otherwise.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (check_dict_case dict)\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (tri n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-within (candidate 3) (list 1 3 2 8) 0.001)\n    (check-within (candidate 4) (list 1 3 2 8 3) 0.001)\n    (check-within (candidate 5) (list 1 3 2 8 3 15) 0.001)\n    (check-within (candidate 6) (list 1 3 2 8 3 15 4) 0.001)\n    (check-within (candidate 7) (list 1 3 2 8 3 15 4 24) 0.001)\n    (check-within (candidate 8) (list 1 3 2 8 3 15 4 24 5) 0.001)\n    (check-within (candidate 9) (list 1 3 2 8 3 15 4 24 5 35) 0.001)\n    (check-within (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11) 0.001)\n    (check-within (candidate 0) (list 1) 0.001)\n    (check-within (candidate 1) (list 1 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n### Explanation\n\nThe code is an implementation of generating a sequence of numbers called the \"tri\" sequence. It takes an integer `n` as input and returns a list of `n` integers.\n\nif n == 0:\n    return [1]\nIf `n` is 0, the function returns a list containing the number 1.\n\nmy_tri = [1, 3]\nThe function initializes the `my_tri` list with the first two numbers of the sequence.\n\nfor i in range(2, n + 1):\nThe function then iterates through the remaining numbers of the sequence.\n\nif i % 2 == 0:\n    my_tri.append(i / 2 + 1)\nIf `i` is even, the function appends the number `i / 2 + 1` to the `my_tri` list.\n\nelse:\n    my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\nIf `i` is odd, the function appends the sum of the previous two numbers in the sequence, plus `(i + 3) / 2`, to the `my_tri` list.\n\nreturn my_tri\nFinally, the function returns the `my_tri` list containing the `n` numbers of the sequence.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (tri n)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (median l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-within (candidate (list 3 1 2 4 5)) 3 0.001)\n    (check-within (candidate (list -10 4 6 1000 10 20)) 8.0 0.001)\n    (check-within (candidate (list 5)) 5 0.001)\n    (check-within (candidate (list 6 5)) 5.5 0.001)\n    (check-within (candidate (list 8 1 3 9 9 2 7)) 7 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef median(l: List[int]) -> float:\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n### Explanation\n\nThe code is an implementation of finding the median of a list of integers. It takes a list of integers `l` as input and returns the median as a float.\n\nl = sorted(l)\nThe function first sorts the input list `l` in ascending order.\n\nif len(l) % 2 == 1:\n    return l[len(l) // 2]\nIf the length of the list is odd, the function returns the middle element of the sorted list.\n\nelse:\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\nIf the length of the list is even, the function returns the average of the two middle elements of the sorted list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (median l)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (change_base x base)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n    (check-within (candidate 8 3) \"22\" 0.001)\n    (check-within (candidate 9 3) \"100\" 0.001)\n    (check-within (candidate 234 2) \"11101010\" 0.001)\n    (check-within (candidate 16 2) \"10000\" 0.001)\n    (check-within (candidate 8 2) \"1000\" 0.001)\n    (check-within (candidate 7 2) \"111\" 0.001)\n    (check-within (candidate 2 3) \"2\" 0.001)\n    (check-within (candidate 3 4) \"3\" 0.001)\n    (check-within (candidate 4 5) \"4\" 0.001)\n    (check-within (candidate 5 6) \"5\" 0.001)\n    (check-within (candidate 6 7) \"6\" 0.001)\n    (check-within (candidate 7 8) \"7\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef change_base(x: int, base: int) -> str:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n### Explanation\n\nThe code is an implementation of a function `change_base` which takes an integer `x` and a base `base` and returns a string representation of `x` in the given base.\n\nret = \"\"\nThe function initializes an empty string `ret` to store the result.\n\nwhile x > 0:\n    ret = str(x % base) + ret\n    x //= base\nThe function uses a while loop to repeatedly divide `x` by `base` and append the remainder to the `ret` string. The loop continues until `x` is less than or equal to 0.\n\nreturn ret\nThe function returns the resulting string `ret`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (change_base x base)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (longest strings)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longest))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"x\" 0.001)\n    (check-within (candidate (list \"x\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\")) \"zzzz\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n### Explanation\n\nThe code is an implementation of a function `longest` which takes a list of strings and returns the longest string in the list. If the input list is empty, the function returns `None`.\n\nif not strings:\n    return None\nThe function first checks if the input list is empty. If it is, it returns `None`.\n\nmaxlen = max(len(x) for x in strings)\nThe function then calculates the maximum length of all the strings in the input list using the `max` function and a generator expression.\n\nfor s in strings:\n    if len(s) == maxlen:\n        return s\nFinally, the function iterates through the input list and returns the first string that has the maximum length.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (longest strings)\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_array arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5) 0.001)\n    (check-within (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3) 0.001)\n    (check-within (candidate (list 1 0 2 3 4)) (list 0 1 2 4 3) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4 3 3 5 5 5 7 77) 0.001)\n    (check-within (candidate (list 3 6 44 12 32 5)) (list 32 3 5 6 12 44) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers by the number of 1's in their binary representation. It takes a list of integers `arr` as input and returns a sorted list of integers.\n\nreturn sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\nThe function first sorts the input list using the `sorted` function. It then sorts the list again using the `key` parameter to sort by the number of 1's in the binary representation of each integer. The `lambda` function `lambda x: bin(x)[2:].count('1')` takes an integer `x`, converts it to binary using the `bin` function, removes the first two characters (which are `'0b'`), and counts the number of `'1'` characters in the resulting string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_array arr)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (common l1 l2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-within (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653) 0.001)\n    (check-within (candidate (list 5 3 2 8) (list 3 2)) (list 2 3) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n### Explanation\n\nThe code is an implementation of finding the common elements between two lists of integers. It takes two lists of integers `l1` and `l2` as input and returns a sorted list of integers containing the common elements.\n\nret = set()\nThe function first initializes an empty set `ret` to store the common elements.\n\nfor e1 in l1:\n    for e2 in l2:\n        if e1 == e2:\n            ret.add(e1)\nThe function then iterates through each element `e1` in the first list `l1`, and for each element, it iterates through each element `e2` in the second list `l2`. If `e1` is equal to `e2`, it adds `e1` to the `ret` set.\n\nreturn sorted(list(ret))\nFinally, the function returns a sorted list of integers containing the elements in the `ret` set.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (common l1 l2)\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (cycpattern_check a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n    (check-within (candidate \"xyzw\" \"xyw\") #f 0.001)\n    (check-within (candidate \"yello\" \"ell\") #t 0.001)\n    (check-within (candidate \"whattup\" \"ptut\") #f 0.001)\n    (check-within (candidate \"efef\" \"fee\") #t 0.001)\n    (check-within (candidate \"abab\" \"aabb\") #f 0.001)\n    (check-within (candidate \"winemtt\" \"tinem\") #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef cycpattern_check(a: str , b: str) -> bool:\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\n### Explanation\n\nThe code is an implementation of checking if a string `a` contains a cyclic pattern of another string `b`. It takes two strings `a` and `b` as input and returns a boolean.\n\nl = len(b)\npat = b + b\nThe function first calculates the length of the string `b` and creates a new string `pat` by concatenating `b` with itself.\n\nfor i in range(len(a) - l + 1):\nThe function then iterates through all possible starting positions of `b` in `a`.\n\nfor j in range(l + 1):\n    if a[i:i+l] == pat[j:j+l]:\n        return True\nWithin each starting position, the function checks if the substring of `a` of length `l` starting at that position matches any substring of `pat` of length `l`. If there is a match, it means that `a` contains a cyclic pattern of `b`, so the function returns `True`.\n\nreturn False\nIf no cyclic pattern is found, the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (cycpattern_check a b)\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (minSubArraySum nums)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n    (check-within (candidate (list 2 3 4 1 2 4)) 1 0.001)\n    (check-within (candidate (list -1 -2 -3)) -6 0.001)\n    (check-within (candidate (list -1 -2 -3 2 -10)) -14 0.001)\n    (check-within (candidate (list -9999999999999999)) -9999999999999999 0.001)\n    (check-within (candidate (list 0 10 20 1000000)) 0 0.001)\n    (check-within (candidate (list -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 100 -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 10 11 13 8 3 4)) 3 0.001)\n    (check-within (candidate (list 100 -33 32 -1 0 -2)) -33 0.001)\n    (check-within (candidate (list -10)) -10 0.001)\n    (check-within (candidate (list 7)) 7 0.001)\n    (check-within (candidate (list 1 -1)) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\n### Explanation\n\nThe code is an implementation of finding the minimum subarray sum of a given list of integers. It takes a list of integers `nums` as input and returns an integer.\n\nmax_sum = 0\ns = 0\nThe function initializes two variables `max_sum` and `s` to 0.\n\nfor num in nums:\nThe function iterates through each integer `num` in the input list `nums`.\n\ns += -num\nThe function subtracts `num` from `s`.\n\nif (s < 0):\n    s = 0\nIf `s` becomes negative, it is reset to 0.\n\nmax_sum = max(s, max_sum)\nThe function updates the `max_sum` variable to be the maximum of `s` and the current `max_sum`.\n\nif max_sum == 0:\n    max_sum = max(-i for i in nums)\nIf `max_sum` is still 0 after processing all the integers in `nums`, it means that all the integers are negative, so the function sets `max_sum` to the maximum negative integer in `nums`.\n\nmin_sum = -max_sum\nThe function sets `min_sum` to be the negative of `max_sum`.\n\nreturn min_sum\nFinally, the function returns `min_sum`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (minSubArraySum nums)\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (histogram test)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate histogram))\n    (check-within (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1) (\"d\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"b b b b a\") #hash((\"b\" .  4)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"\") #hash() 0.001)\n    (check-within (candidate \"a\") #hash((\"a\" .  1)) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\n### Explanation\n\nThe code is an implementation of a function `histogram` which takes a string and returns a dictionary containing the frequency of the most common word(s) in the string. The function first initializes an empty dictionary `dict1` to store the word frequencies. It then splits the input string into a list of words using the `split` function.\n\nfor i in list1:\n    if(list1.count(i)>t) and i!='':\n        t=list1.count(i)\nThe function then iterates through each word in the list and checks if its frequency is greater than the current maximum frequency `t`. If it is, the maximum frequency is updated to the frequency of the current word.\n\nif t>0:\n    for i in list1:\n        if(list1.count(i)==t):\n            dict1[i]=t\nIf the maximum frequency is greater than 0, the function then iterates through the list again and adds each word with frequency equal to the maximum frequency to the `dict1` dictionary.\n\nreturn dict1\nFinally, the function returns the `dict1` dictionary containing the word frequencies.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (histogram test)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_odd_collatz n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_odd_collatz))\n    (check-within (candidate 14) (list 1 5 7 11 13 17) 0.001)\n    (check-within (candidate 5) (list 1 5) 0.001)\n    (check-within (candidate 12) (list 1 3 5) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n### Explanation\n\nThe code is an implementation of finding the odd numbers in a Collatz sequence starting from a given number `n`. It takes an integer `n` as input and returns a sorted list of odd numbers in the Collatz sequence.\n\nif n%2==0:\n    odd_collatz = [] \nelse:\n    odd_collatz = [n]\nThe function first checks if the input number `n` is even or odd. If it is even, it initializes an empty list `odd_collatz`. If it is odd, it initializes a list `odd_collatz` with the first element `n`.\n\nwhile n > 1:\nThe function then enters a while loop that continues until `n` reaches 1.\n\nif n % 2 == 0:\n    n = n/2\nIf `n` is even, it divides `n` by 2.\n\nelse:\n    n = n*3 + 1\nIf `n` is odd, it multiplies `n` by 3 and adds 1.\n\nif n%2 == 1:\n    odd_collatz.append(int(n))\nIf `n` is odd, it appends it to the `odd_collatz` list.\n\nreturn sorted(odd_collatz)\nFinally, the function returns the sorted `odd_collatz` list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_odd_collatz n)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (derivative xs)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate derivative))\n    (check-within (candidate (list 3 1 2 4 5)) (list 1 4 12 20) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 6) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 2 2) 0.001)\n    (check-within (candidate (list 3 2 1 0 4)) (list 2 2 0 16) 0.001)\n    (check-within (candidate (list 1)) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\n### Explanation\n\nThe code is an implementation of finding the derivative of a polynomial represented as a list of coefficients. It takes a list of integers `xs` as input and returns a list of integers representing the coefficients of the derivative of the polynomial.\n\n[(i * x) for i, x in enumerate(xs)][1:]\nThe function first uses a list comprehension to compute the product of each coefficient with its corresponding power of `x`. The `enumerate` function is used to get the index of each coefficient, which is used as the power of `x`. The resulting list contains the coefficients of the derivative of the polynomial, but shifted one position to the left. The `[1:]` slice is used to remove the first element of the list, which corresponds to the constant term of the derivative.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (derivative xs)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fibfib n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 1) 0 0.001)\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 24 0.001)\n    (check-within (candidate 10) 81 0.001)\n    (check-within (candidate 12) 274 0.001)\n    (check-within (candidate 14) 927 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n### Explanation\n\nThe code is an implementation of a recursive function `fibfib` that calculates the nth number in the Fibonacci-Fibonacci sequence. The function takes an integer `n` as input and returns an integer.\n\nif n == 0:\n    return 0\nif n == 1:\n    return 0\nif n == 2:\n    return 1\nThe function first checks if `n` is 0, 1, or 2. If it is, it returns the corresponding value in the sequence.\n\nreturn fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nIf `n` is greater than 2, the function recursively calls itself with `n-1`, `n-2`, and `n-3` as arguments, and returns the sum of the three results.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fibfib n)\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (truncate_number number)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate truncate_number))\n    (check-within (candidate 3.5) 0.5 0.001)\n    (check-within (candidate 1.25) 0.25 0.001)\n    (check-within (candidate 123.0) 0.0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef truncate_number(number: float) -> float:\n    return number % 1.0\n\n### Explanation\n\nThe code is an implementation of truncating a floating-point number to its fractional part. It takes a floating-point number `number` as input and returns the fractional part of the number.\n\nreturn number % 1.0\nThe function uses the modulo operator `%` to get the remainder of the division of `number` by 1.0. This gives the fractional part of the number, which is returned.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (truncate_number number)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (max_element l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n    (check-within (candidate (list 1 2 3)) 3 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef max_element(l: List[int]) -> int:\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n### Explanation\n\nThe code is an implementation of finding the maximum element in a list of integers. It takes a list of integers `l` as input and returns the maximum element.\n\nm = l[0]\nThe function initializes the variable `m` to the first element of the input list.\n\nfor e in l:\n    if e > m:\n        m = e\nThe function then iterates through each element `e` in the input list. If the current element `e` is greater than the current maximum `m`, the function updates `m` to be equal to `e`.\n\nreturn m\nFinally, the function returns the maximum element `m`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (max_element l)\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (closest_integer value)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-within (candidate \"10\") 10 0.001)\n    (check-within (candidate \"14.5\") 15 0.001)\n    (check-within (candidate \"-15.5\") -16 0.001)\n    (check-within (candidate \"15.3\") 15 0.001)\n    (check-within (candidate \"0\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef closest_integer(value: str) -> int:\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n### Explanation\n\nThe code is an implementation of a function `closest_integer` which takes a string representation of a number and returns the closest integer to that number. The function first checks if the input string contains a decimal point. If it does, it removes any trailing zeros after the decimal point.\n\nnum = float(value)\nThe function then converts the input string to a float.\n\nif value[-2:] == '.5':\n    if num > 0:\n        res = ceil(num)\n    else:\n        res = floor(num)\nIf the input string ends with `.5`, the function checks if the number is positive or negative. If it is positive, it rounds up to the next integer using the `ceil` function. If it is negative, it rounds down to the next integer using the `floor` function.\n\nelif len(value) > 0:\n    res = int(round(num))\nIf the input string does not end with `.5`, the function rounds the number to the nearest integer using the `round` function and converts the result to an integer.\n\nelse:\n    res = 0\nIf the input string is empty, the function returns 0.\n\nreturn res\nThe function returns the result.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (closest_integer value)\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (prime_fib n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n    (check-within (candidate 1) 2 0.001)\n    (check-within (candidate 2) 3 0.001)\n    (check-within (candidate 3) 5 0.001)\n    (check-within (candidate 4) 13 0.001)\n    (check-within (candidate 5) 89 0.001)\n    (check-within (candidate 6) 233 0.001)\n    (check-within (candidate 7) 1597 0.001)\n    (check-within (candidate 8) 28657 0.001)\n    (check-within (candidate 9) 514229 0.001)\n    (check-within (candidate 10) 433494437 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef prime_fib(n: int) -> int:\n    import math\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n### Explanation\n\nThe code is an implementation of finding the nth prime Fibonacci number. It takes an integer `n` as input and returns an integer.\n\ndef is_prime(p):\n    if p < 2:\n        return False\n    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n        if p % k == 0:\n            return False\n    return True\nThe function first defines a helper function `is_prime` that takes a number and returns `True` if it is a prime number and `False` otherwise. This is done by checking if the number is less than 2 (which is not prime), and then checking if it is divisible by any integer between 2 and the square root of the number (inclusive).\n\nf = [0, 1]\nThe function initializes a list `f` with the first two Fibonacci numbers.\n\nwhile True:\n    f.append(f[-1] + f[-2])\n    if is_prime(f[-1]):\n        n -= 1\n    if n == 0:\n        return f[-1]\nThe function then generates the next Fibonacci number by adding the last two numbers in the list. If the new number is prime, it decrements the `n` variable. If `n` reaches 0, it returns the last number in the list, which is the nth prime Fibonacci number.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prime_fib n)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sum_product numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n    (check-within (candidate (list )) (list 0 1) 0.001)\n    (check-within (candidate (list 1 1 1)) (list 3 1) 0.001)\n    (check-within (candidate (list 100 0)) (list 100 0) 0.001)\n    (check-within (candidate (list 3 5 7)) (list 15 105) 0.001)\n    (check-within (candidate (list 10)) (list 10 10) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\n### Explanation\n\nThe code is an implementation of a function `sum_product` which takes a list of integers and returns a tuple containing the sum and product of the integers.\n\nsum_value = 0\nprod_value = 1\nThe function initializes two variables `sum_value` and `prod_value` to 0 and 1 respectively.\n\nfor n in numbers:\nThe function iterates through each integer `n` in the input list `numbers`.\n\nsum_value += n\nprod_value *= n\nFor each integer `n`, the function adds it to the `sum_value` variable and multiplies it to the `prod_value` variable.\n\nreturn sum_value, prod_value\nThe function returns a tuple containing the `sum_value` and `prod_value` variables.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_product numbers)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (select_words s n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-within (candidate \"Mary had a little lamb\" 4) (list \"little\") 0.001)\n    (check-within (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\") 0.001)\n    (check-within (candidate \"simple white space\" 2) (list ) 0.001)\n    (check-within (candidate \"Hello world\" 4) (list \"world\") 0.001)\n    (check-within (candidate \"Uncle sam\" 3) (list \"Uncle\") 0.001)\n    (check-within (candidate \"\" 4) (list ) 0.001)\n    (check-within (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n### Explanation\n\nThe code is an implementation of selecting words from a string that have a certain number of consonants. It takes a string `s` and an integer `n` as input and returns a list of words from the string that have `n` consonants.\n\nresult = []\nThe function initializes an empty list `result` to store the selected words.\n\nfor word in s.split():\nThe function splits the input string into words and iterates through each word.\n\nn_consonants = 0\nThe function initializes a counter `n_consonants` to count the number of consonants in the current word.\n\nfor i in range(0, len(word)):\n    if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n        n_consonants += 1\nThe function iterates through each character in the current word and increments the `n_consonants` counter if the character is a consonant (i.e., not a vowel).\n\nif n_consonants == n:\n    result.append(word)\nIf the number of consonants in the current word is equal to `n`, the function appends the word to the `result` list.\n\nreturn result\nThe function returns the `result` list containing the selected words.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (select_words s n)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (add_elements arr k)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n    (check-within (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4 0.001)\n    (check-within (candidate (list 111 121 3 4000 5 6) 2) 0 0.001)\n    (check-within (candidate (list 11 21 3 90 5 6 7 8 9) 4) 125 0.001)\n    (check-within (candidate (list 111 21 3 4000 5 6 7 8 9) 4) 24 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\n### Explanation\n\nThe code is an implementation of a function `add_elements` which takes a list of integers and an integer `k` and returns the sum of the first `k` elements of the list that have at most two digits.\n\nreturn sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\nThe function first uses a list comprehension to filter the first `k` elements of the input list `arr` that have at most two digits. It then returns the sum of the filtered elements.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (add_elements arr k)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (eat number need remaining)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n    (check-within (candidate 5 6 10) (list 11 4) 0.001)\n    (check-within (candidate 4 8 9) (list 12 1) 0.001)\n    (check-within (candidate 1 10 10) (list 11 0) 0.001)\n    (check-within (candidate 2 11 5) (list 7 0) 0.001)\n    (check-within (candidate 4 5 7) (list 9 2) 0.001)\n    (check-within (candidate 4 5 1) (list 5 0) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\n### Explanation\n\nThe code is an implementation of a function `eat` that takes three integers as input: `number`, `need`, and `remaining`. It returns a list of two integers: the amount of food eaten and the amount of food remaining.\n\nif(need <= remaining):\n    return [ number + need , remaining-need ]\nIf the amount of food needed is less than or equal to the amount of food remaining, the function returns a list containing the sum of `number` and `need` (the amount of food eaten) and the difference between `remaining` and `need` (the amount of food remaining).\n\nelse:\n    return [ number + remaining , 0]\nIf the amount of food needed is greater than the amount of food remaining, the function returns a list containing the sum of `number` and `remaining` (the amount of food eaten) and 0 (since there is no food remaining).\n\n### Racket version\n\n#lang racket\n\n;; \n(define (eat number need remaining)\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (odd_count lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_count))\n    (check-within (candidate (list \"1234567\")) (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\") 0.001)\n    (check-within (candidate (list \"3\" \"11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\") 0.001)\n    (check-within (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\n### Explanation\n\nThe code is an implementation of a function `odd_count` that takes a list of strings and returns a list of strings containing the number of odd digits in each string.\n\nres = []\nThe function initializes an empty list `res` to store the result.\n\nfor arr in lst:\nThe function iterates through each string `arr` in the input list `lst`.\n\nn = sum(int(d)%2==1 for d in arr)\nThe function calculates the number of odd digits in the string `arr` by iterating through each character `d` in the string, converting it to an integer, and checking if it is odd. The `sum` function is used to count the number of odd digits.\n\nres.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\nThe function appends a string to the `res` list containing the number of odd digits in the string `arr`.\n\nreturn res\nThe function returns the `res` list containing the result.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (odd_count lst)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (next_smallest lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest))\n    (check-within (candidate (list 1 2 3 4 5)) 2 0.001)\n    (check-within (candidate (list 5 1 4 3 2)) 2 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list 1 1 1 1 0)) 1 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list -35 34 12 -45)) -35 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\nfrom typing import Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n### Explanation\n\nThe code is an implementation of finding the next smallest element in a list of integers. It takes a list of integers `lst` as input and returns the next smallest element in the list. If there is no next smallest element, it returns `None`.\n\nlst = sorted(set(lst))\nThe function first removes duplicates from the input list by converting it to a set and then back to a list. It then sorts the list in ascending order.\n\nreturn None if len(lst) < 2 else lst[1]\nThe function then checks if the length of the list is less than 2. If it is, it means that there is no next smallest element, so it returns `None`. Otherwise, it returns the second element in the sorted list, which is the next smallest element.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (next_smallest lst)\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_row lst x)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)) 0.001)\n    (check-within (candidate (list ) 1) (list ) 0.001)\n    (check-within (candidate (list (list 1)) 2) (list ) 0.001)\n    (check-within (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list 2 2)) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\nfrom typing import Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\n### Explanation\n\nThe code is an implementation of a function `get_row` which takes a list of lists of integers and an integer `x` and returns a list of tuples representing the coordinates of all occurrences of `x` in the list of lists, sorted by row and then by column.\n\ncoords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\nThe function first creates a list of tuples `coords` containing the coordinates of all occurrences of `x` in the list of lists. This is done using a list comprehension that iterates over all elements of the list of lists and checks if the element is equal to `x`. If it is, the coordinates of the element are added to the `coords` list as a tuple.\n\nreturn sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\nThe function then sorts the `coords` list first by column (in descending order) and then by row (in ascending order) using two `sorted` calls with different `key` functions. The first `sorted` call sorts the list by column, with the `key` function returning the second element of each tuple (the column index). The `reverse` parameter is set to `True` to sort in descending order. The second `sorted` call sorts the list by row, with the `key` function returning the first element of each tuple (the row index).\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_row lst x)\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (filter_by_prefix strings prefix)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n\n### Explanation\n\nThe code is an implementation of filtering a list of strings by prefix. It takes a list of strings `strings` and a prefix string `prefix` as input and returns a list of strings that start with the prefix.\n\nreturn [x for x in strings if x.startswith(prefix)]\nThe function uses a list comprehension to iterate through each string `x` in the input list `strings`. If the string starts with the prefix, it is included in the output list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (filter_by_prefix strings prefix)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (choose_num x y)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n    (check-within (candidate 12 15) 14 0.001)\n    (check-within (candidate 13 12) -1 0.001)\n    (check-within (candidate 33 12354) 12354 0.001)\n    (check-within (candidate 5234 5233) -1 0.001)\n    (check-within (candidate 6 29) 28 0.001)\n    (check-within (candidate 27 10) -1 0.001)\n    (check-within (candidate 7 7) -1 0.001)\n    (check-within (candidate 546 546) 546 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\n### Explanation\n\nThe code is an implementation of a function `choose_num` which takes two integers `x` and `y` and returns an integer based on the following rules:\n\n- If `x` is greater than `y`, return `-1`.\n- If `y` is even, return `y`.\n- If `x` is equal to `y`, return `-1`.\n- Otherwise, return `y - 1`.\n\nif x > y:\n    return -1\nIf `x` is greater than `y`, the function returns `-1`.\n\nif y % 2 == 0:\n    return y\nIf `y` is even, the function returns `y`.\n\nif x == y:\n    return -1\nIf `x` is equal to `y`, the function returns `-1`.\n\nreturn y - 1\nOtherwise, the function returns `y - 1`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (choose_num x y)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (prime_length string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n    (check-within (candidate \"Hello\") #t 0.001)\n    (check-within (candidate \"abcdcba\") #t 0.001)\n    (check-within (candidate \"kittens\") #t 0.001)\n    (check-within (candidate \"orange\") #f 0.001)\n    (check-within (candidate \"wow\") #t 0.001)\n    (check-within (candidate \"world\") #t 0.001)\n    (check-within (candidate \"MadaM\") #t 0.001)\n    (check-within (candidate \"Wow\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"HI\") #t 0.001)\n    (check-within (candidate \"go\") #t 0.001)\n    (check-within (candidate \"gogo\") #f 0.001)\n    (check-within (candidate \"aaaaaaaaaaaaaaa\") #f 0.001)\n    (check-within (candidate \"Madam\") #t 0.001)\n    (check-within (candidate \"M\") #f 0.001)\n    (check-within (candidate \"0\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef prime_length(string: str) -> bool:\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n### Explanation\n\nThe code is an implementation of a function `prime_length` which takes a string and returns `True` if the length of the string is a prime number, and `False` otherwise.\n\nl = len(string)\nThe function first calculates the length of the input string.\n\nif l == 0 or l == 1:\n    return False\nIf the length of the string is 0 or 1, the function returns `False`.\n\nfor i in range(2, l):\n    if l % i == 0:\n        return False\nThe function then iterates through all integers from 2 to the length of the string - 1. If the length of the string is divisible by any of these integers, it means that the length is not a prime number, so the function returns `False`.\n\nreturn True\nIf the function has not returned `False` yet, it means that the length of the string is a prime number, so the function returns `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prime_length string)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sum_to_n n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 6) 21 0.001)\n    (check-within (candidate 11) 66 0.001)\n    (check-within (candidate 30) 465 0.001)\n    (check-within (candidate 100) 5050 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n\n### Explanation\n\nThe code is an implementation of a function `sum_to_n` which takes an integer `n` and returns the sum of all integers from 0 to `n` (inclusive).\n\nreturn sum(range(n + 1))\nThe function uses the `range` function to generate a sequence of integers from 0 to `n` (inclusive), and then uses the `sum` function to add up all the integers in the sequence.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_to_n n)\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fix_spaces text)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n    (check-within (candidate \"Example\") \"Example\" 0.001)\n    (check-within (candidate \"Mudasir Hanif \") \"Mudasir_Hanif_\" 0.001)\n    (check-within (candidate \"Yellow Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\" 0.001)\n    (check-within (candidate \"Exa   mple\") \"Exa-mple\" 0.001)\n    (check-within (candidate \"   Exa 1 2 2 mple\") \"-Exa_1_2_2_mple\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef fix_spaces(text: str) -> str:\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n### Explanation\n\nThe code is an implementation of a function `fix_spaces` which takes a string and replaces spaces with underscores or hyphens depending on the number of consecutive spaces. The function returns the modified string.\n\nnew_text = \"\"\ni = 0\nstart, end = 0, 0\nThe function initializes an empty string `new_text` to store the modified string. It also initializes the variables `i`, `start`, and `end` to 0 to keep track of the current index, the start index of the current group of spaces, and the end index of the current group of spaces, respectively.\n\nwhile i < len(text):\nThe function iterates through each character `c` in the input string `text`.\n\nif text[i] == \" \":\n    end += 1\nIf the character is a space, the function increments the `end` variable to keep track of the number of consecutive spaces.\n\nelse:\n    if end - start > 2:\n        new_text += \"-\"+text[i]\nIf the number of consecutive spaces is greater than 2, the function adds a hyphen followed by the current character to the `new_text` string.\n\n    elif end - start > 0:\n        new_text += \"_\"*(end - start)+text[i]\nIf the number of consecutive spaces is greater than 0 but less than or equal to 2, the function adds underscores to the `new_text` string followed by the current character.\n\n    else:\n        new_text += text[i]\nIf there are no consecutive spaces, the function simply adds the current character to the `new_text` string.\n\n    start, end = i+1, i+1\n    The function then updates the `start` and `end` variables to the current index plus one.\n\ni+=1\nThe function increments the `i` variable to move to the next character in the input string.\n\nif end - start > 2:\n    new_text += \"-\"\nelif end - start > 0:\n    new_text += \"_\"\nFinally, the function checks if there are any remaining consecutive spaces at the end of the input string. If there are, it adds a hyphen or underscores to the `new_text` string depending on the number of consecutive spaces.\n\nreturn new_text\nThe function returns the modified string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fix_spaces text)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (rolling_max numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 1)) (list 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `rolling_max` which takes a list of integers and returns a list of the rolling maximums of the input list. The rolling maximum of a list is the maximum value of a sliding window of fixed size that moves over the list.\n\nrunning_max = None\nresult = []\nThe function initializes the variable `running_max` to `None` to keep track of the maximum value seen so far. It also initializes an empty list `result` to store the rolling maximums.\n\nfor n in numbers:\nThe function iterates through each integer `n` in the input list `numbers`.\n\nif running_max is None:\n    running_max = n\nIf `running_max` is `None`, it means that this is the first integer in the list, so the function sets `running_max` to the current integer.\n\nelse:\n    running_max = max(running_max, n)\nIf `running_max` is not `None`, the function updates it to the maximum of the current integer and the previous maximum.\n\nresult.append(running_max)\nThe function appends the current maximum to the `result` list.\n\nreturn result\nThe function returns the `result` list containing the rolling maximums.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (rolling_max numbers)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (words_in_sentence sentence)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n    (check-within (candidate \"This is a test\") \"is\" 0.001)\n    (check-within (candidate \"lets go for swimming\") \"go for\" 0.001)\n    (check-within (candidate \"there is no place available here\") \"there is no place\" 0.001)\n    (check-within (candidate \"Hi I am Hussein\") \"Hi am Hussein\" 0.001)\n    (check-within (candidate \"go for it\") \"go for it\" 0.001)\n    (check-within (candidate \"here\") \"\" 0.001)\n    (check-within (candidate \"here is\") \"is\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef words_in_sentence(sentence: str) -> str:\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n### Explanation\n\nThe code is an implementation of a function `words_in_sentence` which takes a string of words and returns a string containing only the words that have a prime length or a length of 2.\n\nnew_lst = []\nThe function initializes an empty list `new_lst` to store the words that meet the criteria.\n\nfor word in sentence.split():\nThe function splits the input string `sentence` into a list of words and iterates through each word.\n\nflg = 0\nif len(word) == 1:\n    flg = 1\nThe function first checks if the length of the word is 1. If it is, it sets the `flg` variable to 1.\n\nfor i in range(2, len(word)):\n    if len(word)%i == 0:\n        flg = 1\nThe function then checks if the length of the word is divisible by any integer between 2 and the length of the word. If it is, it sets the `flg` variable to 1.\n\nif flg == 0 or len(word) == 2:\n    new_lst.append(word)\nIf the `flg` variable is still 0 (meaning the length of the word is prime), or if the length of the word is 2, the function appends the word to the `new_lst` list.\n\nreturn \" \".join(new_lst)\nThe function returns a string containing the words in `new_lst`, joined by spaces.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (words_in_sentence sentence)\n"
  },
  {
    "name": "HumanEval_160_do_algebra",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (do_algebra operator operand)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_160_do_algebra.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n    (check-within (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37 0.001)\n    (check-within (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9 0.001)\n    (check-within (candidate (list \"//\" \"*\") (list 7 3 4)) 8 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n### Explanation\n\nThe code is an implementation of a function `do_algebra` which takes two lists: `operator` and `operand`, and returns the result of the algebraic expression formed by combining the elements of the two lists. The function returns an integer.\n\nexpression = str(operand[0])\nThe function first initializes a string `expression` with the first element of the `operand` list.\n\nfor oprt, oprn in zip(operator, operand[1:]):\n    expression+= oprt + str(oprn)\nThe function then iterates through the `operator` and `operand` lists using the `zip` function. It concatenates each operator and operand to the `expression` string.\n\nreturn eval(expression)\nFinally, the function evaluates the `expression` string using the built-in `eval` function and returns the result as an integer.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (do_algebra operator operand)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_closest_vowel word)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n    (check-within (candidate \"yogurt\") \"u\" 0.001)\n    (check-within (candidate \"full\") \"u\" 0.001)\n    (check-within (candidate \"easy\") \"\" 0.001)\n    (check-within (candidate \"eAsy\") \"\" 0.001)\n    (check-within (candidate \"ali\") \"\" 0.001)\n    (check-within (candidate \"bad\") \"a\" 0.001)\n    (check-within (candidate \"most\") \"o\" 0.001)\n    (check-within (candidate \"ab\") \"\" 0.001)\n    (check-within (candidate \"ba\") \"\" 0.001)\n    (check-within (candidate \"quick\") \"\" 0.001)\n    (check-within (candidate \"anime\") \"i\" 0.001)\n    (check-within (candidate \"Asia\") \"\" 0.001)\n    (check-within (candidate \"Above\") \"o\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef get_closest_vowel(word: str) -> str:\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\n### Explanation\n\nThe code is an implementation of finding the closest vowel in a string. It takes a string `word` as input and returns the closest vowel to the center of the string.\n\nif len(word) < 3:\n    return \"\"\nThe function first checks if the input string is less than 3 characters long. If it is, it returns an empty string.\n\nvowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\nThe function initializes a set `vowels` containing all the vowels (both uppercase and lowercase).\n\nfor i in range(len(word)-2, 0, -1):\nThe function then iterates through the string `word` starting from the second-to-last character and moving towards the center of the string.\n\nif word[i] in vowels:\n    if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n        return word[i]\nIf the current character is a vowel, the function checks if the characters immediately before and after it are not vowels. If this condition is true, the function returns the current character.\n\nreturn \"\"\nIf no vowel is found, the function returns an empty string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_closest_vowel word)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (compare game guess)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n    (check-within (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3) 0.001)\n    (check-within (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0) 0.001)\n    (check-within (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6) 0.001)\n    (check-within (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef compare(game: List[int],guess: List[int]) -> List[int]:\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n### Explanation\n\nThe code is an implementation of a function `compare` that takes two lists of integers `game` and `guess` and returns a list of the absolute differences between the corresponding elements of the two lists.\n\nreturn [abs(x-y) for x,y in zip(game,guess)]\nThe function uses a list comprehension to iterate over the corresponding elements of the two input lists using the `zip` function. For each pair of elements, it calculates the absolute difference between them using the `abs` function and appends the result to a new list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (compare game guess)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (remove_duplicates numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\n### Explanation\n\nThe code is an implementation of removing duplicates from a list of integers. It takes a list of integers `numbers` as input and returns a new list of integers with duplicates removed.\n\nimport collections\nThe function first imports the `collections` module.\n\nc = collections.Counter(numbers)\nThe function then creates a `Counter` object `c` from the input list `numbers`. The `Counter` object counts the number of occurrences of each element in the list.\n\nreturn [n for n in numbers if c[n] <= 1]\nFinally, the function returns a list comprehension that iterates over the input list `numbers` and only includes elements that have a count of 1 or less in the `Counter` object `c`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (remove_duplicates numbers)\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (same_chars s0 s1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate same_chars))\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabc\") #t 0.001)\n    (check-within (candidate \"dddddddabc\" \"abcd\") #t 0.001)\n    (check-within (candidate \"eabcd\" \"dddddddabc\") #f 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabcf\") #f 0.001)\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f 0.001)\n    (check-within (candidate \"aabb\" \"aaccc\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n\n### Explanation\n\nThe code is an implementation of a function `same_chars` which takes two strings and returns `True` if they contain the same characters (regardless of order), and `False` otherwise.\n\nreturn set(s0) == set(s1)\nThe function first converts the input strings `s0` and `s1` into sets of characters using the `set` function. It then compares the two sets using the `==` operator, which returns `True` if they are equal (i.e., contain the same elements), and `False` otherwise.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (same_chars s0 s1)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (parse_nested_parens paren_string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3) 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4) 0.001)\n    (check-within (candidate \"(()(())((())))\") (list 4) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n### Explanation\n\nThe code is an implementation of a function `parse_nested_parens` which takes a string of nested parentheses and returns a list of integers representing the maximum depth of each group of parentheses.\n\ndef parse_paren_group(s):\n    depth = 0\n    max_depth = 0\n    for c in s:\n        if c == '(':\n            depth += 1\n            max_depth = max(depth, max_depth)\n        else:\n            depth -= 1\n\n    return max_depth\nThe function first defines a helper function `parse_paren_group` that takes a string of parentheses and returns the maximum depth of the group. It does this by iterating through each character in the string and keeping track of the current depth. The maximum depth is updated whenever the current depth exceeds the current maximum depth.\n\nreturn [parse_paren_group(x) for x in paren_string.split(' ') if x]\nThe function then splits the input string into groups of parentheses using the space character as a delimiter. It then applies the `parse_paren_group` function to each group of parentheses and returns a list of the maximum depths.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (parse_nested_parens paren_string)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (even_odd_count num)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-within (candidate 7) (list 0 1) 0.001)\n    (check-within (candidate -78) (list 1 1) 0.001)\n    (check-within (candidate 3452) (list 2 2) 0.001)\n    (check-within (candidate 346211) (list 3 3) 0.001)\n    (check-within (candidate -345821) (list 3 3) 0.001)\n    (check-within (candidate -2) (list 1 0) 0.001)\n    (check-within (candidate -45347) (list 2 3) 0.001)\n    (check-within (candidate 0) (list 1 0) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Tuple \n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\n### Explanation\n\nThe code is an implementation of counting the number of even and odd digits in an integer. It takes an integer `num` as input and returns a tuple of two integers: even digit count and odd digit count.\n\nfor i in str(abs(num)):\nThe function first converts the input integer to a string and iterates through each character `i` in the string.\n\nif int(i)%2==0:\n    even_count +=1\nIf the character is an even digit, the function increments the `even_count` variable.\n\nelse:\n    odd_count +=1\nIf the character is an odd digit, the function increments the `odd_count` variable.\n\nreturn (even_count, odd_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (even_odd_count num)\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fruit_distribution s n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n    (check-within (candidate \"5 apples and 6 oranges\" 19) 8 0.001)\n    (check-within (candidate \"5 apples and 6 oranges\" 21) 10 0.001)\n    (check-within (candidate \"0 apples and 1 oranges\" 3) 2 0.001)\n    (check-within (candidate \"1 apples and 0 oranges\" 3) 2 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 100) 95 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 5) 0 0.001)\n    (check-within (candidate \"1 apples and 100 oranges\" 120) 19 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef fruit_distribution(s: str, n: int) -> int:\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\n### Explanation\n\nThe code is an implementation of a function `fruit_distribution` which takes a string `s` and an integer `n` as input and returns the number of fruits that need to be added to the basket to reach the target number `n`. The input string `s` contains the current number of fruits in the basket, separated by spaces.\n\nlis = list()\nThe function initializes an empty list `lis` to store the current number of fruits in the basket.\n\nfor i in s.split(' '):\nThe function splits the input string `s` into a list of strings using the space character as the delimiter, and iterates through each string `i` in the resulting list.\n\nif i.isdigit():\n    lis.append(int(i))\nIf the string `i` is a digit, the function converts it to an integer and appends it to the `lis` list.\n\nreturn n - sum(lis)\nFinally, the function returns the difference between the target number `n` and the sum of the integers in the `lis` list, which represents the number of fruits that need to be added to the basket to reach the target number.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fruit_distribution s n)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (string_xor a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n    (check-within (candidate \"111000\" \"101010\") \"010010\" 0.001)\n    (check-within (candidate \"1\" \"1\") \"0\" 0.001)\n    (check-within (candidate \"0101\" \"0000\") \"0101\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\n### Explanation\n\nThe code is an implementation of a function `string_xor` which takes two binary strings of equal length and returns their XOR.\n\ndef xor(i, j):\n    if i == j:\n        return '0'\n    else:\n        return '1'\nThe function first defines a helper function `xor` that takes two characters `i` and `j` and returns `'0'` if they are equal and `'1'` otherwise.\n\nreturn ''.join(xor(x, y) for x, y in zip(a, b))\nThe function then uses the `zip` function to iterate over the corresponding characters of the two input strings `a` and `b`. For each pair of characters, it applies the `xor` function and concatenates the result to a new string. Finally, it returns the resulting string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (string_xor a b)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (strlen string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"x\") 1 0.001)\n    (check-within (candidate \"asdasnakj\") 9 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef strlen(string: str) -> int:\n    return len(string)\n\n### Explanation\n\nThe code is an implementation of a function `strlen` which takes a string as input and returns its length.\n\nreturn len(string)\nThe function simply returns the length of the input string using the `len` function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (strlen string)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (string_sequence n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-within (candidate 0) \"0\" 0.001)\n    (check-within (candidate 3) \"0 1 2 3\" 0.001)\n    (check-within (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n\n### Explanation\n\nThe code is an implementation of a function `string_sequence` which takes an integer `n` and returns a string containing the sequence of integers from 0 to `n`, separated by spaces.\n\nreturn ' '.join([str(x) for x in range(n + 1)])\nThe function first creates a list of integers from 0 to `n` using a list comprehension. It then converts each integer to a string using the `str` function and joins the list of strings using the `join` method with a space separator.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (string_sequence n)\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (file_name_check file_name)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-within (candidate \"example.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"1example.dll\") \"No\" 0.001)\n    (check-within (candidate \"s1sdf3.asd\") \"No\" 0.001)\n    (check-within (candidate \"K.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"MY16FILE3.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"His12FILE94.exe\") \"No\" 0.001)\n    (check-within (candidate \"_Y.txt\") \"No\" 0.001)\n    (check-within (candidate \"?aREYA.exe\") \"No\" 0.001)\n    (check-within (candidate \"/this_is_valid.dll\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.wow\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"this_is_valid.txtexe\") \"No\" 0.001)\n    (check-within (candidate \"#this2_i4s_5valid.ten\") \"No\" 0.001)\n    (check-within (candidate \"@this1_is6_valid.exe\") \"No\" 0.001)\n    (check-within (candidate \"this_is_12valid.6exe4.txt\") \"No\" 0.001)\n    (check-within (candidate \"all.exe.txt\") \"No\" 0.001)\n    (check-within (candidate \"I563_No.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"Is3youfault.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"no_one#knows.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"1I563_Yes3.exe\") \"No\" 0.001)\n    (check-within (candidate \"I563_Yes3.txtt\") \"No\" 0.001)\n    (check-within (candidate \"final..txt\") \"No\" 0.001)\n    (check-within (candidate \"final132\") \"No\" 0.001)\n    (check-within (candidate \"_f4indsartal132.\") \"No\" 0.001)\n    (check-within (candidate \".txt\") \"No\" 0.001)\n    (check-within (candidate \"s.\") \"No\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef file_name_check(file_name: str) -> str:\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n\n### Explanation\n\nThe code is an implementation of a function `file_name_check` which takes a string `file_name` and returns `'Yes'` if it is a valid file name, and `'No'` otherwise.\n\nsuf = ['txt', 'exe', 'dll']\nThe function first defines a list `suf` containing valid file extensions.\n\nlst = file_name.split(sep='.')\nThe function then splits the input string into two parts: the file name and the file extension.\n\nif len(lst) != 2:\n    return 'No'\nIf the input string does not contain exactly one period, the function returns `'No'`.\n\nif not lst[1] in suf:\n    return 'No'\nIf the file extension is not in the list of valid file extensions, the function returns `'No'`.\n\nif len(lst[0]) == 0:\n    return 'No'\nIf the file name is empty, the function returns `'No'`.\n\nif not lst[0][0].isalpha():\n    return 'No'\nIf the first character of the file name is not a letter, the function returns `'No'`.\n\nt = len([x for x in lst[0] if x.isdigit()])\nif t > 3:\n    return 'No'\nThe function then counts the number of digits in the file name and returns `'No'` if there are more than 3 digits.\n\nreturn 'Yes'\nIf all the above conditions are satisfied, the function returns `'Yes'`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (file_name_check file_name)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (can_arrange arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate can_arrange))\n    (check-within (candidate (list 1 2 4 3 5)) 3 0.001)\n    (check-within (candidate (list 1 2 4 5)) -1 0.001)\n    (check-within (candidate (list 1 4 2 5 6 7 8 9 10)) 2 0.001)\n    (check-within (candidate (list 4 8 5 7 3)) 4 0.001)\n    (check-within (candidate (list )) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n### Explanation\n\nThe code is an implementation of a function `can_arrange` which takes a list of integers and returns the index of the first element that violates the condition that the list is non-decreasing. If the list is already non-decreasing, the function returns -1.\n\nind=-1\ni=1\nThe function initializes the variable `ind` to -1, which will be used to store the index of the first element that violates the non-decreasing condition. It also initializes the variable `i` to 1, which will be used to iterate through the list.\n\nwhile i<len(arr):\nThe function iterates through the list using a while loop.\n\nif arr[i]<arr[i-1]:\n    ind=i\nIf the current element is less than the previous element, it means that the non-decreasing condition has been violated. The function sets the `ind` variable to the index of the current element.\n\ni+=1\nThe function increments the `i` variable to move to the next element in the list.\n\nreturn ind\nFinally, the function returns the `ind` variable, which will be -1 if the list is already non-decreasing, or the index of the first element that violates the non-decreasing condition.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (can_arrange arr)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (add lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate (list 4 88)) 88 0.001)\n    (check-within (candidate (list 4 5 6 7 2 122)) 122 0.001)\n    (check-within (candidate (list 4 0 6 7)) 0 0.001)\n    (check-within (candidate (list 4 4 6 8)) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n### Explanation\n\nThe code is an implementation of a function `add` which takes a list of integers and returns the sum of the even-indexed elements that are even.\n\nreturn sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\nThe function uses a list comprehension to create a list of even-indexed elements that are even, and then returns the sum of that list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (add lst)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (intersperse numbers delimeter)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n    (check-within (candidate (list ) 7) (list ) 0.001)\n    (check-within (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2) 0.001)\n    (check-within (candidate (list 2 2 2) 2) (list 2 2 2 2 2) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `intersperse` which takes a list of integers and a delimiter integer and returns a new list with the delimiter interspersed between each pair of adjacent integers in the original list.\n\nif not numbers:\n    return []\nThe function first checks if the input list is empty. If it is, it returns an empty list.\n\nresult = []\nThe function initializes an empty list `result` to store the interspersed list.\n\nfor n in numbers[:-1]:\n    result.append(n)\n    result.append(delimeter)\nThe function iterates through each integer `n` in the input list `numbers`, except for the last one. For each integer, it appends the integer to the `result` list, followed by the delimiter.\n\nresult.append(numbers[-1])\nFinally, the function appends the last integer in the input list to the `result` list.\n\nreturn result\nThe function returns the `result` list containing the interspersed list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (intersperse numbers delimeter)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (match_parens lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n    (check-within (candidate (list \"()(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \")\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(())\" \"())())\")) \"No\" 0.001)\n    (check-within (candidate (list \")())\" \"(()()(\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"(())))\" \"(()())((\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"()\" \"())\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(\" \"()))()\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"((((\" \"((())\")) \"No\" 0.001)\n    (check-within (candidate (list \")(()\" \"(()(\")) \"No\" 0.001)\n    (check-within (candidate (list \")(\" \")(\")) \"No\" 0.001)\n    (check-within (candidate (list \"(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \"(\")) \"Yes\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n### Explanation\n\nThe code is an implementation of a function `match_parens` which takes a list of two strings and returns 'Yes' if the two strings can be concatenated to form a string of balanced parentheses, and 'No' otherwise.\n\ndef check(s):\n    val = 0\n    for i in s:\n        if i == '(':\n            val = val + 1\n        else:\n            val = val - 1\n        if val < 0:\n            return False\n    return True if val == 0 else False\nThe function first defines a helper function `check` that takes a string and returns `True` if the string contains balanced parentheses and `False` otherwise. This is done by iterating through the string and keeping track of the number of opening and closing parentheses seen so far. If the number of closing parentheses seen so far is greater than the number of opening parentheses, the function returns `False`. If the number of opening and closing parentheses is equal at the end of the string, the function returns `True`, otherwise, it returns `False`.\n\nS1 = lst[0] + lst[1]\nS2 = lst[1] + lst[0]\nThe function concatenates the two input strings in two different orders: `lst[0] + lst[1]` and `lst[1] + lst[0]`.\n\nreturn 'Yes' if check(S1) or check(S2) else 'No'\nThe function returns 'Yes' if either of the concatenated strings contains balanced parentheses, and 'No' otherwise.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (match_parens lst)\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (any_int x y z)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate any_int))\n    (check-within (candidate 2 3 1) #t 0.001)\n    (check-within (candidate 2.5 2 3) #f 0.001)\n    (check-within (candidate 1.5 5 3.5) #f 0.001)\n    (check-within (candidate 2 6 2) #f 0.001)\n    (check-within (candidate 4 2 2) #t 0.001)\n    (check-within (candidate 2.2 2.2 2.2) #f 0.001)\n    (check-within (candidate -4 6 2) #t 0.001)\n    (check-within (candidate 2 1 1) #t 0.001)\n    (check-within (candidate 3 4 7) #t 0.001)\n    (check-within (candidate 3.0 4 7) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\n### Explanation\n\nThe code is an implementation of a function `any_int` which takes three numbers as input and returns a boolean indicating whether any two of the numbers add up to the third number. The function returns `True` if any two of the numbers add up to the third number, and `False` otherwise.\n\nif isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\nThe function first checks if all three input numbers are integers using the `isinstance` function.\n\nif (x+y==z) or (x+z==y) or (y+z==x):\nIf all three input numbers are integers, the function checks if any two of the numbers add up to the third number. If any two of the numbers add up to the third number, the function returns `True`.\n\nreturn False\nIf all three input numbers are not integers or if no two of the numbers add up to the third number, the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (any_int x y z)\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (filter_by_substring strings substring)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\n### Explanation\n\nThe code is an implementation of filtering a list of strings by a given substring. It takes a list of strings `strings` and a substring `substring` as input and returns a list of strings that contain the substring.\n\nreturn [x for x in strings if substring in x]\nThe function uses a list comprehension to iterate through each string `x` in the input list `strings`. If the substring `substring` is found in the string `x`, the string is included in the output list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (filter_by_substring strings substring)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (find_max words)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-within (candidate (list \"name\" \"of\" \"string\")) \"string\" 0.001)\n    (check-within (candidate (list \"name\" \"enam\" \"game\")) \"enam\" 0.001)\n    (check-within (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\" 0.001)\n    (check-within (candidate (list \"abc\" \"cba\")) \"abc\" 0.001)\n    (check-within (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\" 0.001)\n    (check-within (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\" 0.001)\n    (check-within (candidate (list \"b\")) \"b\" 0.001)\n    (check-within (candidate (list \"play\" \"play\" \"play\")) \"play\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef find_max(words: List[str]) -> str:\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n\n### Explanation\n\nThe code is an implementation of finding the longest word in a list of words that has the fewest unique characters. It takes a list of strings `words` as input and returns the longest string in the list that has the fewest unique characters.\n\nsorted(words, key = lambda x: (-len(set(x)), x))[0]\nThe function first sorts the list of words using the `sorted` function. The `key` parameter is set to a lambda function that returns a tuple of two values: the negative length of the set of characters in the word (to sort by fewest unique characters first), and the word itself (to break ties by alphabetical order).\n\nThe `[0]` at the end of the line returns the first (i.e., longest) word in the sorted list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (find_max words)\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (generate_integers a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate generate_integers))\n    (check-within (candidate 2 10) (list 2 4 6 8) 0.001)\n    (check-within (candidate 10 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 132 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 17 89) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n\n### Explanation\n\nThe code is an implementation of generating a list of even integers between two integers `a` and `b`. It takes two integers `a` and `b` as input and returns a list of even integers between `a` and `b` (inclusive).\n\nlower = max(2, min(a, b))\nupper = min(8, max(a, b))\nThe function first sets the lower and upper bounds for the range of integers to generate. The lower bound is the maximum of 2 and the minimum of `a` and `b`. The upper bound is the minimum of 8 and the maximum of `a` and `b`.\n\nreturn [i for i in range(lower, upper+1) if i % 2 == 0]\nThe function then generates a list of even integers between the lower and upper bounds using a list comprehension. The list comprehension iterates over the range of integers between the lower and upper bounds, and only includes even integers in the resulting list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (generate_integers a b)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (exchange lst1 lst2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate exchange))\n    (check-within (candidate (list 1 2 3 4) (list 1 2 3 4)) \"YES\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 1 5 3 4)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 2 1 4 3)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 4)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 3)) \"NO\" 0.001)\n    (check-within (candidate (list 3 2 6 1 8 9) (list 3 5 5 1 1 1)) \"NO\" 0.001)\n    (check-within (candidate (list 100 200) (list 200 200)) \"YES\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n\n### Explanation\n\nThe code is an implementation of a function `exchange` that takes two lists of integers and returns a string \"YES\" if it is possible to exchange one odd element from the first list with one even element from the second list such that the sum of the elements in both lists is equal, and \"NO\" otherwise.\n\nodd = 0\neven = 0\nThe function first initializes two counters `odd` and `even` to 0 to count the number of odd and even elements in the two lists.\n\nfor i in lst1:\n    if i%2 == 1:\n        odd += 1\nThe function then iterates through each element `i` in the first list `lst1`, and increments the `odd` counter if the element is odd.\n\nfor i in lst2:\n    if i%2 == 0:\n        even += 1\nSimilarly, the function iterates through each element `i` in the second list `lst2`, and increments the `even` counter if the element is even.\n\nif even >= odd:\n    return \"YES\"\nIf the number of even elements in the second list is greater than or equal to the number of odd elements in the first list, the function returns \"YES\".\n\nreturn \"NO\"\nOtherwise, the function returns \"NO\".\n\n### Racket version\n\n#lang racket\n\n;; \n(define (exchange lst1 lst2)\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (int_to_mini_roman number)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n    (check-within (candidate 19) \"xix\" 0.001)\n    (check-within (candidate 152) \"clii\" 0.001)\n    (check-within (candidate 251) \"ccli\" 0.001)\n    (check-within (candidate 426) \"cdxxvi\" 0.001)\n    (check-within (candidate 500) \"d\" 0.001)\n    (check-within (candidate 1) \"i\" 0.001)\n    (check-within (candidate 4) \"iv\" 0.001)\n    (check-within (candidate 43) \"xliii\" 0.001)\n    (check-within (candidate 90) \"xc\" 0.001)\n    (check-within (candidate 94) \"xciv\" 0.001)\n    (check-within (candidate 532) \"dxxxii\" 0.001)\n    (check-within (candidate 900) \"cm\" 0.001)\n    (check-within (candidate 994) \"cmxciv\" 0.001)\n    (check-within (candidate 1000) \"m\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef int_to_mini_roman(number: int) -> str:\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n### Explanation\n\nThe code is an implementation of converting an integer to a mini Roman numeral. It takes an integer `number` as input and returns a string representing the mini Roman numeral.\n\nnum = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000] \nsym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \nThe function first defines two lists `num` and `sym` which represent the values and symbols of the mini Roman numerals.\n\ni = 12\nres = ''\nThe variable `i` is initialized to 12, which is the index of the largest value in the `num` list. The variable `res` is initialized to an empty string to store the result.\n\nwhile number: \n    div = number // num[i] \n    number %= num[i] \n    while div: \n        res += sym[i] \n        div -= 1\n    i -= 1\nThe function then enters a while loop that continues as long as `number` is non-zero. It first calculates the quotient and remainder of `number` divided by the value at index `i` in the `num` list. It then enters another while loop that appends the symbol at index `i` in the `sym` list to the `res` string `div` times. It then decrements `div` until it reaches 0. Finally, it decrements `i` and continues the outer while loop.\n\nreturn res.lower()\nThe function returns the `res` string in lowercase.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (int_to_mini_roman number)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_equal_to_sum_even n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 11) #f 0.001)\n    (check-within (candidate 12) #t 0.001)\n    (check-within (candidate 13) #f 0.001)\n    (check-within (candidate 16) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef is_equal_to_sum_even(n: int) -> bool:\n    return n%2 == 0 and n >= 8\n\n### Explanation\n\nThe code is an implementation of a function `is_equal_to_sum_even` which takes an integer `n` and returns a boolean indicating whether `n` is even and greater than or equal to 8.\n\nreturn n%2 == 0 and n >= 8\nThe function returns `True` if `n` is even and greater than or equal to 8, and `False` otherwise.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_equal_to_sum_even n)\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (decimal_to_binary decimal)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-within (candidate 0) \"db0db\" 0.001)\n    (check-within (candidate 32) \"db100000db\" 0.001)\n    (check-within (candidate 103) \"db1100111db\" 0.001)\n    (check-within (candidate 15) \"db1111db\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef decimal_to_binary(decimal: int) -> str:\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n### Explanation\n\nThe code is an implementation of a function `decimal_to_binary` which takes an integer `decimal` and returns a string representing the binary equivalent of the decimal number in assembly language format.\n\nreturn \"db\" + bin(decimal)[2:] + \"db\"\nThe function first converts the decimal number to binary using the built-in `bin` function. The `bin` function returns a string starting with the prefix `0b`, so the `[2:]` slice is used to remove the prefix. The function then concatenates the string `\"db\"` to the binary string and returns the result.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (decimal_to_binary decimal)\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_third l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_third))\n    (check-within (candidate (list 5 6 3 4 8 9 2)) (list 2 6 3 4 8 9 5) 0.001)\n    (check-within (candidate (list 5 8 3 4 6 9 2)) (list 2 8 3 4 6 9 5) 0.001)\n    (check-within (candidate (list 5 6 9 4 8 3 2)) (list 2 6 9 4 8 3 5) 0.001)\n    (check-within (candidate (list 5 6 3 4 8 9 2 1)) (list 2 6 3 4 8 9 5 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\n### Explanation\n\nThe code is an implementation of sorting a list of integers in groups of three. It takes a list of integers `l` as input and returns a sorted list of integers.\n\nl = list(l)\nThe function first converts the input list to a mutable list.\n\nl[::3] = sorted(l[::3])\nThe function then sorts every third element of the list using the `sorted` function and slice assignment.\n\nreturn l\nFinally, the function returns the sorted list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_third l)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (simplify x n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/6\" \"2/1\") #f 0.001)\n    (check-within (candidate \"5/1\" \"3/1\") #t 0.001)\n    (check-within (candidate \"7/10\" \"10/2\") #f 0.001)\n    (check-within (candidate \"2/10\" \"50/10\") #t 0.001)\n    (check-within (candidate \"7/2\" \"4/2\") #t 0.001)\n    (check-within (candidate \"11/6\" \"6/1\") #t 0.001)\n    (check-within (candidate \"2/3\" \"5/2\") #f 0.001)\n    (check-within (candidate \"5/2\" \"3/5\") #f 0.001)\n    (check-within (candidate \"2/4\" \"8/4\") #t 0.001)\n    (check-within (candidate \"2/4\" \"4/2\") #t 0.001)\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/5\" \"1/5\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef simplify(x: str, n: str) -> bool:\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\n### Explanation\n\nThe code is an implementation of a function `simplify` which takes two strings representing fractions and returns a boolean indicating whether the first fraction can be simplified to the second fraction.\n\na, b = x.split(\"/\")\nc, d = n.split(\"/\")\nThe function first splits the input strings `x` and `n` into their numerator and denominator components.\n\nnumerator = int(a) * int(c)\ndenom = int(b) * int(d)\nThe function then calculates the numerator and denominator of the simplified fraction by multiplying the numerators and denominators of the two fractions.\n\nif (numerator/denom == int(numerator/denom)):\n    return True\nThe function then checks if the simplified fraction is an integer (i.e. if the numerator is divisible by the denominator). If it is, it returns `True`, indicating that the first fraction can be simplified to the second fraction. Otherwise, it returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (simplify x n)\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (solve s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate \"AsDf\") \"aSdF\" 0.001)\n    (check-within (candidate \"1234\") \"4321\" 0.001)\n    (check-within (candidate \"ab\") \"AB\" 0.001)\n    (check-within (candidate \"#a@C\") \"#A@c\" 0.001)\n    (check-within (candidate \"#AsdfW^45\") \"#aSDFw^45\" 0.001)\n    (check-within (candidate \"#6@2\") \"2@6#\" 0.001)\n    (check-within (candidate \"#$a^D\") \"#$A^d\" 0.001)\n    (check-within (candidate \"#ccc\") \"#CCC\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef solve(s: str) -> str:\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n### Explanation\n\nThe code is an implementation of a function `solve` which takes a string `s` as input and returns a modified string. If the input string contains at least one alphabetic character, the function returns the string with all alphabetic characters swapped in case. If the input string does not contain any alphabetic characters, the function returns the reverse of the input string.\n\nflg = 0\nidx = 0\nnew_str = list(s)\nThe function initializes a flag `flg` to 0 to keep track of whether the input string contains any alphabetic characters. It also initializes an index `idx` to 0 to keep track of the current index in the input string. The variable `new_str` is initialized as a list of characters from the input string.\n\nfor i in s:\nThe function iterates through each character `i` in the input string `s`.\n\nif i.isalpha():\n    new_str[idx] = i.swapcase()\n    flg = 1\nIf the character is an alphabetic character, the function swaps the case of the character and stores it in the corresponding index of `new_str`. It also sets the `flg` variable to 1 to indicate that the input string contains at least one alphabetic character.\n\nidx += 1\nThe function increments the `idx` variable to move to the next index in the input string.\n\ns = \"\"\nfor i in new_str:\n    s += i\nThe function then joins the characters in `new_str` into a string and stores it in the `s` variable.\n\nif flg == 0:\n    return s[len(s)::-1]\nIf the `flg` variable is 0, it means that the input string does not contain any alphabetic characters, so the function returns the reverse of the input string.\n\nreturn s\nOtherwise, the function returns the modified string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solve s)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (right_angle_triangle a b c)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n    (check-within (candidate 3 4 5) #t 0.001)\n    (check-within (candidate 1 2 3) #f 0.001)\n    (check-within (candidate 10 6 8) #t 0.001)\n    (check-within (candidate 2 2 2) #f 0.001)\n    (check-within (candidate 7 24 25) #t 0.001)\n    (check-within (candidate 10 5 7) #f 0.001)\n    (check-within (candidate 5 12 13) #t 0.001)\n    (check-within (candidate 15 8 17) #t 0.001)\n    (check-within (candidate 48 55 73) #t 0.001)\n    (check-within (candidate 1 1 1) #f 0.001)\n    (check-within (candidate 2 2 10) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n### Explanation\n\nThe code is an implementation of a function `right_angle_triangle` which takes three integers `a`, `b`, and `c` as input and returns `True` if they form a right-angled triangle, and `False` otherwise.\n\nreturn a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\nThe function checks if any of the three conditions for a right-angled triangle are met. A right-angled triangle satisfies the Pythagorean theorem, which states that the square of the length of the hypotenuse (the longest side) is equal to the sum of the squares of the lengths of the other two sides. Therefore, the function checks if `a*a` is equal to `b*b + c*c`, or if `b*b` is equal to `a*a + c*c`, or if `c*c` is equal to `a*a + b*b`. If any of these conditions are met, the function returns `True`. Otherwise, it returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (right_angle_triangle a b c)\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (double_the_difference lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 5.0 4.0)) 25 0.001)\n    (check-within (candidate (list 0.1 0.2 0.3)) 0 0.001)\n    (check-within (candidate (list -10.0 -20.0 -30.0)) 0 0.001)\n    (check-within (candidate (list -1.0 -2.0 8.0)) 0 0.001)\n    (check-within (candidate (list 0.2 3.0 5.0)) 34 0.001)\n    (check-within (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef double_the_difference(lst: List[float]) -> int:\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n### Explanation\n\nThe code is an implementation of a function `double_the_difference` which takes a list of floats and returns the sum of the squares of all positive odd integers in the list.\n\nreturn sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\nThe function first filters the list to only include positive odd integers that do not contain a decimal point. It then squares each integer and returns the sum of the squares.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (double_the_difference lst)\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (compare_one a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare_one))\n    (check-within (candidate 1 2) 2 0.001)\n    (check-within (candidate 1 2.5) 2.5 0.001)\n    (check-within (candidate 2 3) 3 0.001)\n    (check-within (candidate 5 6) 6 0.001)\n    (check-within (candidate 1 \"2,3\") \"2,3\" 0.001)\n    (check-within (candidate \"5,1\" \"6\") \"6\" 0.001)\n    (check-within (candidate \"1\" \"2\") \"2\" 0.001)\n    (check-within (candidate \"1\" 1) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b\n\n### Explanation\n\nThe code is an implementation of{{{TOFILL}}}\n\n### Racket version\n\n#lang racket\n\n;; \n(define (compare_one a b)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (below_zero operations)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 2 -3 1 2 -3)) #f 0.001)\n    (check-within (candidate (list 1 2 -4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t 0.001)\n    (check-within (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\n### Explanation\n\nThe code is an implementation of a function `below_zero` which takes a list of integers representing financial operations and returns a boolean indicating whether the balance goes below zero at any point.\n\nbalance = 0\nThe function initializes a variable `balance` to 0 to keep track of the current balance.\n\nfor op in operations:\nThe function iterates through each operation `op` in the input list `operations`.\n\nbalance += op\nThe function adds the operation to the `balance` variable.\n\nif balance < 0:\n    return True\nIf the `balance` variable goes below 0, the function returns `True`.\n\nreturn False\nIf the `balance` variable never goes below 0, the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (below_zero operations)\n"
  },
  {
    "name": "HumanEval_103_rounded_avg",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (rounded_avg n m)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_103_rounded_avg.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n    (check-within (candidate 1 5) \"0b11\" 0.001)\n    (check-within (candidate 7 13) \"0b1010\" 0.001)\n    (check-within (candidate 964 977) \"0b1111001010\" 0.001)\n    (check-within (candidate 996 997) \"0b1111100100\" 0.001)\n    (check-within (candidate 560 851) \"0b1011000010\" 0.001)\n    (check-within (candidate 185 546) \"0b101101110\" 0.001)\n    (check-within (candidate 362 496) \"0b110101101\" 0.001)\n    (check-within (candidate 350 902) \"0b1001110010\" 0.001)\n    (check-within (candidate 197 233) \"0b11010111\" 0.001)\n    (check-within (candidate 7 5) -1 0.001)\n    (check-within (candidate 5 1) -1 0.001)\n    (check-within (candidate 5 5) \"0b101\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n### Explanation\n\nThe code is an implementation of{{{TOFILL}}}\n\n### Racket version\n\n#lang racket\n\n;; \n(define (rounded_avg n m)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (greatest_common_divisor a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-within (candidate 3 7) 1 0.001)\n    (check-within (candidate 10 15) 5 0.001)\n    (check-within (candidate 49 14) 7 0.001)\n    (check-within (candidate 144 60) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n### Explanation\n\nThe code is an implementation of the Euclidean algorithm for finding the greatest common divisor (GCD) of two integers. It takes two integers `a` and `b` as input and returns their GCD as an integer.\n\nwhile b:\n    a, b = b, a % b\nThe function uses a while loop to repeatedly apply the Euclidean algorithm until the remainder `b` becomes 0. In each iteration, it updates `a` to be `b` and `b` to be the remainder of `a` divided by `b`.\n\nreturn a\nOnce the loop terminates, the function returns the final value of `a`, which is the GCD of the original `a` and `b`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (greatest_common_divisor a b)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (f n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 5) (list 1 2 6 24 15) 0.001)\n    (check-within (candidate 7) (list 1 2 6 24 15 720 28) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n    (check-within (candidate 3) (list 1 2 6) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef f(n: int) -> List[int]:\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n### Explanation\n\nThe code is an implementation of a function `f` that takes an integer `n` as input and returns a list of integers. The function loops through all integers between 1 and `n` (inclusive) and calculates a value for each integer based on whether it is even or odd.\n\nret = []\nThe function initializes an empty list `ret` to store the calculated values.\n\nfor i in range(1,n+1):\nThe function loops through all integers between 1 and `n` (inclusive).\n\nif i%2 == 0:\n    x = 1\n    for j in range(1,i+1): x *= j\n    ret += [x]\nIf the integer is even, the function calculates the factorial of the integer and appends it to the `ret` list.\n\nelse:\n    x = 0\n    for j in range(1,i+1): x += j\n    ret += [x]\nIf the integer is odd, the function calculates the sum of all integers between 1 and the integer (inclusive) and appends it to the `ret` list.\n\nreturn ret\nFinally, the function returns the `ret` list containing the calculated values.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (f n)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (monotonic l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-within (candidate (list 1 2 4 10)) #t 0.001)\n    (check-within (candidate (list 1 2 4 20)) #t 0.001)\n    (check-within (candidate (list 1 20 4 10)) #f 0.001)\n    (check-within (candidate (list 4 1 0 -10)) #t 0.001)\n    (check-within (candidate (list 4 1 1 0)) #t 0.001)\n    (check-within (candidate (list 1 2 3 2 5 60)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 60)) #t 0.001)\n    (check-within (candidate (list 9 9 9 9)) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list of integers is monotonic. It takes a list of integers `l` as input and returns a boolean.\n\nif l == sorted(l) or l == sorted(l, reverse=True):\n    return True\nThe function first checks if the list is sorted in non-descending order or sorted in non-ascending order. If either of these conditions is true, the function returns `True`. Otherwise, it returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (monotonic l)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (by_length arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-within (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\") 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -1 55)) (list \"One\") 0.001)\n    (check-within (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\") 0.001)\n    (check-within (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\n### Explanation\n\nThe code is an implementation of a function `by_length` which takes a list of integers and returns a list of strings representing the length of each integer in the input list.\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\nThe function first creates a dictionary `dic` where the keys are the integers 1-9 and the values are the corresponding string representations of the length of the integer.\n\nsorted_arr = sorted(arr, reverse=True)\nThe function then sorts the input list in descending order.\n\nnew_arr = []\nfor var in sorted_arr:\n    try:\n        new_arr.append(dic[var])\n    except:\n        pass\nThe function then iterates through the sorted list and tries to append the corresponding string representation of the length of each integer to the `new_arr` list. If the integer is not in the `dic` dictionary, the function does nothing.\n\nreturn new_arr\nFinally, the function returns the `new_arr` list containing the string representations of the lengths of the integers in the input list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (by_length arr)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (remove_vowels text)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"abcdef\nghijklm\") \"bcdf\nghjklm\" 0.001)\n    (check-within (candidate \"fedcba\") \"fdcb\" 0.001)\n    (check-within (candidate \"eeeee\") \"\" 0.001)\n    (check-within (candidate \"acBAA\") \"cB\" 0.001)\n    (check-within (candidate \"EcBOO\") \"cB\" 0.001)\n    (check-within (candidate \"ybcd\") \"ybcd\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef remove_vowels(text: str) -> str:\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\n### Explanation\n\nThe code is an implementation of a function `remove_vowels` which takes a string and returns a new string with all vowels removed.\n\n[s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]]\nThe function uses a list comprehension to iterate through each character `s` in the input string `text`. If the lowercase version of the character is not a vowel, it is included in the list. The list is then joined into a string using the `join` method.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (remove_vowels text)\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (check_if_last_char_is_a_letter txt)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_if_last_char_is_a_letter))\n    (check-within (candidate \"apple\") #f 0.001)\n    (check-within (candidate \"apple pi e\") #t 0.001)\n    (check-within (candidate \"eeeee\") #f 0.001)\n    (check-within (candidate \"A\") #t 0.001)\n    (check-within (candidate \"Pumpkin pie \") #f 0.001)\n    (check-within (candidate \"Pumpkin pie 1\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"eeeee e \") #f 0.001)\n    (check-within (candidate \"apple pie\") #f 0.001)\n    (check-within (candidate \"apple pi e \") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\n### Explanation\n\nThe code is an implementation of a function `check_if_last_char_is_a_letter` which takes a string and returns a boolean indicating whether the last character of the string is a letter.\n\ncheck = txt.split(' ')[-1]\nThe function first splits the input string `txt` into a list of words using the space character as a delimiter. It then selects the last word in the list using the `[-1]` index.\n\nreturn True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\nThe function then checks if the length of the last word is 1 and if its ASCII code falls within the range of lowercase letters (97 to 122). If both conditions are true, the function returns `True`, otherwise it returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (check_if_last_char_is_a_letter txt)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (iscube a)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate iscube))\n    (check-within (candidate 1) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate -1) #t 0.001)\n    (check-within (candidate 64) #t 0.001)\n    (check-within (candidate 180) #f 0.001)\n    (check-within (candidate 1000) #t 0.001)\n    (check-within (candidate 0) #t 0.001)\n    (check-within (candidate 1729) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef iscube(a: int) -> bool:\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n### Explanation\n\nThe code is an implementation of a function `iscube` which takes an integer `a` and returns `True` if it is a perfect cube, and `False` otherwise.\n\na = abs(a)\nThe function first takes the absolute value of the input integer `a`.\n\nint(round(a ** (1. / 3))) ** 3 == a\nThe function then calculates the cube root of `a` using the formula `a ** (1. / 3)`. It rounds the result to the nearest integer using the `round` function, and then raises the result to the third power using the `**` operator. If the result is equal to the original input integer `a`, then `a` is a perfect cube, and the function returns `True`. Otherwise, it returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (iscube a)\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (reverse_delete s c)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_delete))\n    (check-within (candidate \"abcde\" \"ae\") (list \"bcd\" #f) 0.001)\n    (check-within (candidate \"abcdef\" \"b\") (list \"acdef\" #f) 0.001)\n    (check-within (candidate \"abcdedcba\" \"ab\") (list \"cdedc\" #t) 0.001)\n    (check-within (candidate \"dwik\" \"w\") (list \"dik\" #f) 0.001)\n    (check-within (candidate \"a\" \"a\") (list \"\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"v\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"vabba\" \"v\") (list \"abba\" #t) 0.001)\n    (check-within (candidate \"mamma\" \"mia\") (list \"\" #t) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Tuple\n\ndef reverse_delete(s: str,c: str) -> Tuple[str, bool]:\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n### Explanation\n\nThe code is an implementation of a function `reverse_delete` which takes two strings as input: a string `s` and a string `c`. The function removes all characters in `c` from `s` and returns a tuple containing the resulting string and a boolean indicating whether the resulting string is a palindrome.\n\ns = ''.join([char for char in s if char not in c])\nThe function first removes all characters in `c` from `s` by creating a new string that only contains characters from `s` that are not in `c`.\n\nreturn (s,s[::-1] == s)\nThe function then returns a tuple containing the resulting string `s` and a boolean indicating whether the resulting string is a palindrome. This is done by checking if the reversed string is equal to the original string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (reverse_delete s c)\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (mean_absolute_deviation numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n    (check-within (candidate (list 1.0 2.0)) 0.5 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0)) 1.0 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n### Explanation\n\nThe code is an implementation of calculating the mean absolute deviation of a list of numbers. It takes a list of floats `numbers` as input and returns a float.\n\nmean = sum(numbers) / len(numbers)\nThe function first calculates the mean of the input list by summing the numbers and dividing by the length of the list.\n\nreturn sum(abs(x - mean) for x in numbers) / len(numbers)\nIt then calculates the mean absolute deviation by subtracting the mean from each number, taking the absolute value of the result, summing the absolute values, and dividing by the length of the list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (mean_absolute_deviation numbers)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (correct_bracketing brackets)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"<>\") #t 0.001)\n    (check-within (candidate \"<<><>>\") #t 0.001)\n    (check-within (candidate \"<><><<><>><>\") #t 0.001)\n    (check-within (candidate \"<><><<<><><>><>><<><><<>>>\") #t 0.001)\n    (check-within (candidate \"<<<><>>>>\") #f 0.001)\n    (check-within (candidate \"><<>\") #f 0.001)\n    (check-within (candidate \"<\") #f 0.001)\n    (check-within (candidate \"<<<<\") #f 0.001)\n    (check-within (candidate \">\") #f 0.001)\n    (check-within (candidate \"<<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>><<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>>><>\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n### Explanation\n\nThe code is an implementation of checking whether a string of brackets is correctly balanced. It takes a string of brackets `brackets` as input and returns a boolean indicating whether the brackets are balanced.\n\ndepth = 0\nThe function initializes a variable `depth` to 0 to keep track of the depth of the current bracket.\n\nfor b in brackets:\nThe function iterates through each character `b` in the input string `brackets`.\n\nif b == \"<\":\n    depth += 1\nIf the character is an opening bracket `\"<\"`, the function increments the `depth` variable.\n\nelse:\n    depth -= 1\nIf the character is a closing bracket `\">\"`, the function decrements the `depth` variable.\n\nif depth < 0:\n    return False\nIf the `depth` variable becomes negative, it means that there are more closing brackets than opening brackets, so the function returns `False`.\n\nreturn depth == 0\nFinally, the function checks if the `depth` variable is 0, which means that all opening brackets have been closed, and returns `True` if so, and `False` otherwise.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (rescale_to_unit numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-within (candidate (list 2.0 49.9)) (list 0.0 1.0) 0.001)\n    (check-within (candidate (list 100.0 49.9)) (list 1.0 0.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0) 0.001)\n    (check-within (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n    (check-within (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n### Explanation\n\nThe code is an implementation of rescaling a list of numbers to the unit interval [0, 1]. It takes a list of floating-point numbers `numbers` as input and returns a list of rescaled numbers.\n\nmin_number = min(numbers)\nmax_number = max(numbers)\nThe function first finds the minimum and maximum values in the input list.\n\nreturn [(x - min_number) / (max_number - min_number) for x in numbers]\nIt then rescales each number in the input list by subtracting the minimum value and dividing by the range (i.e., the difference between the maximum and minimum values). The rescaled numbers are returned as a list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (rescale_to_unit numbers)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (intersection interval1 interval2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersection))\n    (check-within (candidate (list 1 2) (list 2 3)) \"NO\" 0.001)\n    (check-within (candidate (list -1 1) (list 0 4)) \"NO\" 0.001)\n    (check-within (candidate (list -3 -1) (list -5 5)) \"YES\" 0.001)\n    (check-within (candidate (list -2 2) (list -4 0)) \"YES\" 0.001)\n    (check-within (candidate (list -11 2) (list -1 -1)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 3 5)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 1 2)) \"NO\" 0.001)\n    (check-within (candidate (list -2 -2) (list -3 -2)) \"NO\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import Tuple\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n### Explanation\n\nThe code is an implementation of finding the intersection of two intervals and checking if the length of the intersection is a prime number. It takes two tuples of integers `interval1` and `interval2` as input and returns a string \"YES\" if the length of the intersection is a prime number, and \"NO\" otherwise.\n\ndef is_prime(num):\n    if num == 1 or num == 0:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num%i == 0:\n            return False\n    return True\nThe function first defines a helper function `is_prime` that takes a number and returns `True` if it is a prime number and `False` otherwise. This is done by checking if the number is divisible by any integer between 2 and the number itself.\n\nl = max(interval1[0], interval2[0])\nr = min(interval1[1], interval2[1])\nThe function then finds the left endpoint of the intersection by taking the maximum of the left endpoints of the two intervals, and the right endpoint of the intersection by taking the minimum of the right endpoints of the two intervals.\n\nlength = r - l\nThe function calculates the length of the intersection.\n\nif length > 0 and is_prime(length):\n    return \"YES\"\nIf the length of the intersection is greater than 0 and is a prime number, the function returns \"YES\".\n\nreturn \"NO\"\nOtherwise, the function returns \"NO\".\n\n### Racket version\n\n#lang racket\n\n;; \n(define (intersection interval1 interval2)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (hex_key num)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n    (check-within (candidate \"AB\") 1 0.001)\n    (check-within (candidate \"1077E\") 2 0.001)\n    (check-within (candidate \"ABED1A33\") 4 0.001)\n    (check-within (candidate \"2020\") 2 0.001)\n    (check-within (candidate \"123456789ABCDEF0\") 6 0.001)\n    (check-within (candidate \"112233445566778899AABBCCDDEEFF00\") 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef hex_key(num: str) -> int:\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n### Explanation\n\nThe code is an implementation of a function `hex_key` which takes a hexadecimal string and returns an integer. The integer is the number of prime digits (2, 3, 5, 7) and prime letters (B, D) in the hexadecimal string.\n\nprimes = ('2', '3', '5', '7', 'B', 'D')\nThe function first defines a tuple of prime digits and letters.\n\ntotal = 0\nThe function initializes a counter variable `total` to 0.\n\nfor i in range(0, len(num)):\n    if num[i] in primes:\n        total += 1\nThe function then iterates through each character in the input hexadecimal string. If the character is a prime digit or letter, the function increments the `total` counter.\n\nreturn total\nFinally, the function returns the `total` counter.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (hex_key num)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (strange_sort_list lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-within (candidate (list 1 2 3 4)) (list 1 4 2 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7) 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7) 0.001)\n    (check-within (candidate (list 5 5 5 5)) (list 5 5 5 5) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5) 0.001)\n    (check-within (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2) 0.001)\n    (check-within (candidate (list 111111)) (list 111111) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\n### Explanation\n\nThe code is an implementation of a function `strange_sort_list` which takes a list of integers and returns a new list where the elements are sorted in a strange way. The function first initializes an empty list `res` to store the sorted elements. The variable `switch` is initialized to `True` to keep track of whether the next element to be added to `res` should be the minimum or maximum of the remaining elements.\n\nwhile lst:\nThe function enters a while-loop that continues until the input list `lst` is empty.\n\nres.append(min(lst) if switch else max(lst))\nThe function appends either the minimum or maximum element of `lst` to `res`, depending on the value of `switch`.\n\nlst.remove(res[-1])\nThe function then removes the last element added to `res` from `lst`.\n\nswitch = not switch\nFinally, the function toggles the value of `switch` to alternate between adding the minimum and maximum elements of `lst` to `res`.\n\nreturn res\nThe function returns the sorted list `res`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (strange_sort_list lst)\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_bored S)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-within (candidate \"Hello world\") 0 0.001)\n    (check-within (candidate \"Is the sky blue?\") 0 0.001)\n    (check-within (candidate \"I love It !\") 1 0.001)\n    (check-within (candidate \"bIt\") 0 0.001)\n    (check-within (candidate \"I feel good today. I will be productive. will kill It\") 2 0.001)\n    (check-within (candidate \"You and I are going for a walk\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\n### Explanation\n\nThe code is an implementation of a function `is_bored` which takes a string `S` and returns the number of sentences that start with the string `'I '`.\n\nsentences = re.split(r'[.?!]\\s*', S)\nThe function first splits the input string `S` into sentences using a regular expression that matches any of the characters `.`, `?`, or `!` followed by any number of whitespace characters.\n\nreturn sum(sentence[0:2] == 'I ' for sentence in sentences)\nThe function then iterates over each sentence in the resulting list and checks if the first two characters of the sentence are `'I '`. It returns the sum of the number of sentences that meet this condition.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_bored S)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (all_prefixes string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\") 0.001)\n    (check-within (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `all_prefixes` which takes a string and returns a list of all its prefixes.\n\nresult = []\nThe function initializes an empty list `result` to store the prefixes.\n\nfor i in range(len(string)):\nThe function iterates through each index `i` in the range from 0 to the length of the input string `string`.\n\nresult.append(string[:i+1])\nFor each index `i`, the function appends the substring of `string` from index 0 to index `i+1` to the `result` list.\n\nreturn result\nThe function returns the `result` list containing all the prefixes of the input string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (all_prefixes string)\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (how_many_times string substring)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-within (candidate \"\" \"x\") 0 0.001)\n    (check-within (candidate \"xyxyxyx\" \"x\") 4 0.001)\n    (check-within (candidate \"cacacacac\" \"cac\") 4 0.001)\n    (check-within (candidate \"john doe\" \"john\") 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n### Explanation\n\nThe code is an implementation of counting the number of times a substring appears in a string. It takes two strings as input: `string` and `substring`, and returns an integer representing the number of times `substring` appears in `string`.\n\nfor i in range(len(string) - len(substring) + 1):\nThe function iterates through all possible starting positions of the substring in the string.\n\nif string[i:i+len(substring)] == substring:\n    times += 1\nIf the substring starting at the current position matches the input substring, the function increments the `times` variable.\n\nreturn times\nFinally, the function returns the `times` variable, which represents the number of times the substring appears in the string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (how_many_times string substring)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (solution lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-within (candidate (list 5 8 7 1)) 12 0.001)\n    (check-within (candidate (list 3 3 3 3 3)) 9 0.001)\n    (check-within (candidate (list 30 13 24 321)) 0 0.001)\n    (check-within (candidate (list 5 9)) 5 0.001)\n    (check-within (candidate (list 2 4 8)) 0 0.001)\n    (check-within (candidate (list 30 13 23 32)) 23 0.001)\n    (check-within (candidate (list 3 13 2 9)) 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\n### Explanation\n\nThe code is an implementation of a function `solution` which takes a list of integers and returns the sum of the odd-indexed odd integers in the list.\n\nreturn sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\nThe function first uses a list comprehension to filter the odd-indexed odd integers from the input list. It does this by iterating over the list with `enumerate`, checking if the index is odd (`idx%2==0`) and if the value at that index is odd (`x%2==1`). It then sums the resulting list of integers using the `sum` function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solution lst)\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (search lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n    (check-within (candidate (list 5 5 5 5 1)) 1 0.001)\n    (check-within (candidate (list 4 1 4 1 4 4)) 4 0.001)\n    (check-within (candidate (list 3 3)) -1 0.001)\n    (check-within (candidate (list 8 8 8 8 8 8 8 8)) 8 0.001)\n    (check-within (candidate (list 2 3 3 2 2)) 2 0.001)\n    (check-within (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1)) 1 0.001)\n    (check-within (candidate (list 3 2 8 2)) 2 0.001)\n    (check-within (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1 0.001)\n    (check-within (candidate (list 8 8 3 6 5 6 4)) -1 0.001)\n    (check-within (candidate (list 6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1 0.001)\n    (check-within (candidate (list 1 9 10 1 3)) 1 0.001)\n    (check-within (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10)) 5 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4 0.001)\n    (check-within (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2 0.001)\n    (check-within (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1 0.001)\n    (check-within (candidate (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4 0.001)\n    (check-within (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7)) 4 0.001)\n    (check-within (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1)) 2 0.001)\n    (check-within (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8)) -1 0.001)\n    (check-within (candidate (list 10)) -1 0.001)\n    (check-within (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2 0.001)\n    (check-within (candidate (list 5 4 10 2 1 1 10 3 6 1 8)) 1 0.001)\n    (check-within (candidate (list 7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1 0.001)\n    (check-within (candidate (list 3 10 10 9 2)) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n### Explanation\n\nThe code is an implementation of a function `search` which takes a list of integers and returns the largest integer `k` such that there are at least `k` occurrences of `k` in the list.\n\nfrq = [0] * (max(lst) + 1)\nThe function first initializes a frequency array `frq` of size `max(lst) + 1` to store the frequency of each integer in the list.\n\nfor i in lst:\n    frq[i] += 1;\nIt then iterates through each integer `i` in the list and increments the corresponding frequency in the `frq` array.\n\nans = -1\nThe variable `ans` is initialized to -1 to indicate that no integer `k` has been found yet.\n\nfor i in range(1, len(frq)):\n    if frq[i] >= i:\n        ans = i\nThe function then iterates through the `frq` array from 1 to `len(frq) - 1` and checks if the frequency of integer `i` is greater than or equal to `i`. If it is, it sets `ans` to `i`.\n\nreturn ans\nThe function returns the value of `ans`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (search lst)\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (pluck arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-within (candidate (list 4 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5 0 3 0 4 2)) (list 0 1) 0.001)\n    (check-within (candidate (list 1 2 3 0 5 3)) (list 0 3) 0.001)\n    (check-within (candidate (list 5 4 8 4 8)) (list 4 1) 0.001)\n    (check-within (candidate (list 7 6 7 1)) (list 6 1) 0.001)\n    (check-within (candidate (list 7 9 7 1)) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\n### Explanation\n\nThe code is an implementation of a function `pluck` which takes a list of integers and returns a list containing the smallest even integer in the input list and its index.\n\nif(len(arr) == 0): return []\nThe function first checks if the input list is empty. If it is, it returns an empty list.\n\nevens = list(filter(lambda x: x%2 == 0, arr))\nThe function then filters the input list to get a list of even integers.\n\nif(evens == []): return []\nIf the list of even integers is empty, the function returns an empty list.\n\nreturn [min(evens), arr.index(min(evens))]\nOtherwise, the function returns a list containing the smallest even integer in the input list and its index. The `min` function is used to get the smallest even integer in the `evens` list, and the `index` method is used to get its index in the original input list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (pluck arr)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (pairs_sum_to_zero l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 5 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 30)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 31)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 30)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 31)) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n### Explanation\n\nThe code is an implementation of checking if there are any pairs of integers in a list that sum to zero. It takes a list of integers `l` as input and returns a boolean.\n\nfor i, l1 in enumerate(l):\n    for j in range(i + 1, len(l)):\n        if l1 + l[j] == 0:\n            return True\nThe function iterates through each element `l1` in the input list `l`. For each element, it iterates through the remaining elements in the list and checks if the sum of `l1` and the current element is zero. If it is, the function returns `True`.\n\nreturn False\nIf no pair of integers in the list sum to zero, the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (pairs_sum_to_zero l)\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (make_palindrome string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"x\") \"x\" 0.001)\n    (check-within (candidate \"xyz\") \"xyzyx\" 0.001)\n    (check-within (candidate \"xyx\") \"xyx\" 0.001)\n    (check-within (candidate \"jerry\") \"jerryrrej\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while string[beginning_of_suffix:] != string[beginning_of_suffix:][::-1]:\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\n### Explanation\n\nThe code is an implementation of a function `make_palindrome` which takes a string and returns a palindrome by appending the reverse of a suffix of the string to the end of the string.\n\nif not string:\n    return ''\nThe function first checks if the input string is empty. If it is, it returns an empty string.\n\nbeginning_of_suffix = 0\nThe variable `beginning_of_suffix` is initialized to 0 to keep track of the beginning of the suffix to be appended to the end of the string.\n\nwhile string[beginning_of_suffix:] != string[beginning_of_suffix:][::-1]:\n    beginning_of_suffix += 1\nThe function then iteratively increments `beginning_of_suffix` until the suffix of the string starting from `beginning_of_suffix` is a palindrome.\n\nreturn string + string[:beginning_of_suffix][::-1]\nFinally, the function returns the original string concatenated with the reverse of the suffix of the string up to `beginning_of_suffix`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (make_palindrome string)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (starts_one_ends n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 2) 18 0.001)\n    (check-within (candidate 3) 180 0.001)\n    (check-within (candidate 4) 1800 0.001)\n    (check-within (candidate 5) 18000 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n### Explanation\n\nThe code is an implementation of a function `starts_one_ends` which takes an integer `n` and returns the number of integers between `10^(n-1)` and `10^n - 1` (inclusive) that start with the digit `1` and end with the digit `1`.\n\nif n == 1: return 1\nThe function first checks if `n` is equal to 1. If it is, it returns 1, since there is only one integer between 1 and 9 (inclusive) that starts and ends with the digit 1.\n\nreturn 18 * (10 ** (n - 2))\nIf `n` is greater than 1, the function returns the number of integers between `10^(n-1)` and `10^n - 1` (inclusive) that start with the digit `1` and end with the digit `1`. This is calculated as `18 * (10 ** (n - 2))`. The `18` comes from the fact that there are 18 digits (0-9, excluding 1) that can be in the middle of the number. The `10 ** (n - 2)` comes from the fact that there are `n - 2` digits between the first and last digits.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (starts_one_ends n)\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_positive l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-within (candidate (list -1 -2 4 5 6)) (list 4 5 6) 0.001)\n    (check-within (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1) 0.001)\n    (check-within (candidate (list -1 -2)) (list ) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n\n### Explanation\n\nThe code is an implementation of a function `get_positive` which takes a list of integers and returns a new list containing only the positive integers.\n\nreturn [e for e in l if e > 0]\nThe function uses a list comprehension to create a new list containing only the elements `e` in the input list `l` that are greater than 0.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_positive l)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (concatenate strings)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n    (check-within (candidate (list )) \"\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"xyz\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n### Explanation\n\nThe code is an implementation of concatenating a list of strings into a single string. It takes a list of strings `strings` as input and returns a single string.\n\nreturn ''.join(strings)\nThe function uses the `join` method of the empty string `''` to concatenate the strings in the input list. The `join` method takes an iterable (in this case, the input list) and returns a string that is the concatenation of all the elements in the iterable, separated by the string on which the method is called (in this case, the empty string `''`).\n\n### Racket version\n\n#lang racket\n\n;; \n(define (concatenate strings)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_nested string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n    (check-within (candidate \"[[]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]][[[[[]\") #f 0.001)\n    (check-within (candidate \"[][]\") #f 0.001)\n    (check-within (candidate \"[]\") #f 0.001)\n    (check-within (candidate \"[[[[]]]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]]]]]\") #f 0.001)\n    (check-within (candidate \"[][][[]]\") #t 0.001)\n    (check-within (candidate \"[[]\") #f 0.001)\n    (check-within (candidate \"[]]\") #f 0.001)\n    (check-within (candidate \"[[]][[\") #t 0.001)\n    (check-within (candidate \"[[][]]\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"[[[[[[[[\") #f 0.001)\n    (check-within (candidate \"]]]]]]]]\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef is_nested(string: str) -> bool:\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n### Explanation\n\nThe code is an implementation of checking whether a string contains at least two nested square brackets. It takes a string `string` as input and returns a boolean.\n\nopening_bracket_index = []\nclosing_bracket_index = []\nThe function first initializes two empty lists `opening_bracket_index` and `closing_bracket_index` to store the indices of opening and closing square brackets in the input string.\n\nfor i in range(len(string)):\n    if string[i] == '[':\n        opening_bracket_index.append(i)\n    else:\n        closing_bracket_index.append(i)\nThe function then iterates through each character in the input string and appends the index of each opening and closing square bracket to the appropriate list.\n\nclosing_bracket_index.reverse()\nThe function then reverses the `closing_bracket_index` list to make it easier to check for nested brackets.\n\ncnt = 0\ni = 0\nl = len(closing_bracket_index)\nfor idx in opening_bracket_index:\n    if i < l and idx < closing_bracket_index[i]:\n        cnt += 1\n        i += 1\nThe function then iterates through each index in the `opening_bracket_index` list and checks if there is a corresponding closing bracket index in the `closing_bracket_index` list that comes after it. If there is, it increments the `cnt` variable and moves to the next index in the `closing_bracket_index` list.\n\nreturn cnt >= 2\nFinally, the function returns `True` if the `cnt` variable is greater than or equal to 2 (meaning there are at least two nested brackets), and `False` otherwise.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_nested string)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_palindrome text)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_palindrome))\n    (check-within (candidate \"\") #t 0.001)\n    (check-within (candidate \"aba\") #t 0.001)\n    (check-within (candidate \"aaaaa\") #t 0.001)\n    (check-within (candidate \"zbcd\") #f 0.001)\n    (check-within (candidate \"xywyx\") #t 0.001)\n    (check-within (candidate \"xywyz\") #f 0.001)\n    (check-within (candidate \"xywzx\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef is_palindrome(text: str) -> bool:\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\n### Explanation\n\nThe code is an implementation of a function `is_palindrome` which takes a string and returns a boolean indicating whether the string is a palindrome.\n\nfor i in range(len(text)):\nThe function iterates through each character in the input string.\n\nif text[i] != text[len(text) - 1 - i]:\n    return False\nIf the character at index `i` is not equal to the character at the corresponding index from the end of the string, the function returns `False`.\n\nreturn True\nIf the function has iterated through the entire string without finding a mismatched pair of characters, it returns `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_palindrome text)\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (count_nums arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list -1 -2 0)) 0 0.001)\n    (check-within (candidate (list 1 1 2 -2 3 4 5)) 6 0.001)\n    (check-within (candidate (list 1 6 9 -6 0 1 5)) 5 0.001)\n    (check-within (candidate (list 1 100 98 -7 1 -1)) 4 0.001)\n    (check-within (candidate (list 12 23 34 -45 -56 0)) 5 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n### Explanation\n\nThe code is an implementation of counting the number of positive integers in an array whose digits sum to a positive number. It takes a list of integers `arr` as input and returns an integer representing the count of positive integers whose digits sum to a positive number.\n\ndef digits_sum(n):\n    neg = 1\n    if n < 0: n, neg = -1 * n, -1 \n    n = [int(i) for i in str(n)]\n    n[0] = n[0] * neg\n    return sum(n)\nThe function first defines a helper function `digits_sum` that takes an integer `n` and returns the sum of its digits. If the integer is negative, the function multiplies the first digit by -1 to account for the negative sign.\n\nreturn len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\nThe main function then applies the `digits_sum` function to each integer in the input list using a list comprehension. It then filters the resulting list to only include positive integers whose digits sum to a positive number. Finally, it returns the length of the filtered list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_nums arr)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (factorize n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n    (check-within (candidate 2) (list 2) 0.001)\n    (check-within (candidate 4) (list 2 2) 0.001)\n    (check-within (candidate 8) (list 2 2 2) 0.001)\n    (check-within (candidate 57) (list 3 19) 0.001)\n    (check-within (candidate 3249) (list 3 3 19 19) 0.001)\n    (check-within (candidate 185193) (list 3 3 3 19 19 19) 0.001)\n    (check-within (candidate 20577) (list 3 19 19 19) 0.001)\n    (check-within (candidate 18) (list 2 3 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n### Explanation\n\nThe code is an implementation of a function `factorize` which takes an integer `n` and returns a list of its prime factors.\n\nimport math\nThe function first imports the `math` module to use the `sqrt` function.\n\nfact = []\ni = 2\nThe function initializes an empty list `fact` to store the prime factors of `n`. It also initializes a variable `i` to 2, which is the smallest prime number.\n\nwhile i <= int(math.sqrt(n) + 1):\nThe function loops through all numbers from 2 to the square root of `n` (inclusive).\n\nif n % i == 0:\n    fact.append(i)\n    n //= i\nIf `i` is a factor of `n`, the function appends `i` to the `fact` list and divides `n` by `i`.\n\nelse:\n    i += 1\nIf `i` is not a factor of `n`, the function increments `i` to check the next number.\n\nif n > 1:\n    fact.append(n)\nFinally, if `n` is greater than 1, it means that `n` itself is a prime factor, so the function appends it to the `fact` list.\n\nreturn fact\nThe function returns the `fact` list containing the prime factors of `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (factorize n)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (largest_prime_factor n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n    (check-within (candidate 15) 5 0.001)\n    (check-within (candidate 27) 3 0.001)\n    (check-within (candidate 63) 7 0.001)\n    (check-within (candidate 330) 11 0.001)\n    (check-within (candidate 13195) 29 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef largest_prime_factor(n: int) -> int:\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n### Explanation\n\nThe code is an implementation of finding the largest prime factor of a given number `n`. It takes an integer `n` as input and returns the largest prime factor of `n`.\n\ndef is_prime(k):\n    if k < 2:\n        return False\n    for i in range(2, k - 1):\n        if k % i == 0:\n            return False\n    return True\nThe function first defines a helper function `is_prime` that takes a number and returns `True` if it is prime and `False` otherwise. This is done by checking if the number is less than 2 (which is not prime), and then checking if it is divisible by any number between 2 and `k-1`.\n\nlargest = 1\nThe variable `largest` is initialized to 1 to keep track of the largest prime factor found so far.\n\nfor j in range(2, n + 1):\nThe function iterates through all numbers between 2 and `n` (inclusive).\n\nif n % j == 0 and is_prime(j):\n    largest = max(largest, j)\nIf the number is a factor of `n` and is prime, the function updates the `largest` variable to be the maximum of the current `largest` value and the current factor.\n\nreturn largest\nFinally, the function returns the `largest` variable, which contains the largest prime factor of `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_prime_factor n)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_max_triples n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-within (candidate 5) 1 0.001)\n    (check-within (candidate 6) 4 0.001)\n    (check-within (candidate 10) 36 0.001)\n    (check-within (candidate 100) 53361 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef get_max_triples(n: int) -> int:\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n### Explanation\n\nThe code is an implementation of finding the number of triples `(i, j, k)` such that `1 <= i < j < k <= n` and `A[i] + A[j] + A[k]` is divisible by 3, where `A[i] = i*i - i + 1` for `1 <= i <= n`. It takes an integer `n` as input and returns an integer.\n\nA = [i*i - i + 1 for i in range(1,n+1)]\nThe function first creates a list `A` of length `n` where `A[i] = i*i - i + 1` for `1 <= i <= n`.\n\nans = []\nThe variable `ans` is used to store the list of valid triples.\n\nfor i in range(n):\n    for j in range(i+1,n):\n        for k in range(j+1,n):\n            if (A[i]+A[j]+A[k])%3 == 0:\n                ans += [(A[i],A[j],A[k])]\nThe function then iterates through all possible triples `(i, j, k)` such that `1 <= i < j < k <= n`. For each triple, it checks if the sum of the corresponding elements in `A` is divisible by 3. If it is, the triple is added to the `ans` list.\n\nreturn len(ans)\nFinally, the function returns the length of the `ans` list, which is the number of valid triples.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_max_triples n)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (anti_shuffle s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate anti_shuffle))\n    (check-within (candidate \"Hi\") \"Hi\" 0.001)\n    (check-within (candidate \"hello\") \"ehllo\" 0.001)\n    (check-within (candidate \"number\") \"bemnru\" 0.001)\n    (check-within (candidate \"abcd\") \"abcd\" 0.001)\n    (check-within (candidate \"Hello World!!!\") \"Hello !!!Wdlor\" 0.001)\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hi. My name is Mister Robot. How are you?\") \".Hi My aemn is Meirst .Rboot How aer ?ouy\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef anti_shuffle(s: str) -> str:\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n### Explanation\n\nThe code is an implementation of a function `anti_shuffle` which takes a string of space-separated words and returns a string where each word has its letters sorted in alphabetical order.\n\nreturn ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\nThe function first splits the input string into a list of words using the `split` method. It then applies a list comprehension to each word in the list, where it converts the word to a list of characters, sorts the list in alphabetical order, and then joins the sorted list back into a string. Finally, it joins the list of sorted words back into a string using the `join` method.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (anti_shuffle s)\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (solve N)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate 1000) \"1\" 0.001)\n    (check-within (candidate 150) \"110\" 0.001)\n    (check-within (candidate 147) \"1100\" 0.001)\n    (check-within (candidate 333) \"1001\" 0.001)\n    (check-within (candidate 963) \"10010\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef solve(N: int) -> str:\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n### Explanation\n\nThe code is an implementation of a function `solve` which takes an integer `N` and returns its binary representation of the sum of its digits.\n\nsum(int(i) for i in str(N))\nThe function first converts the integer `N` to a string and iterates through each character `i` in the string, converting it to an integer and summing them up.\n\nbin(sum(int(i) for i in str(N)))[2:]\nThe sum is then converted to binary using the `bin` function, which returns a string representation of the binary number with a prefix of '0b'. The `[2:]` slice is used to remove the prefix and return only the binary number as a string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solve N)\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (minPath grid k)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minPath))\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)\n    (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)\n    (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)\n    (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)\n    (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)\n    (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)\n    (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\n### Explanation\n\nThe code is an implementation of a function `minPath` which takes a 2D grid of integers and an integer `k` as input, and returns a list of `k` integers representing the minimum path from the top-left corner of the grid to the bottom-right corner. The function assumes that the grid is a square.\n\nn = len(grid)\nval = n * n + 1\nThe function first initializes the variable `n` to the length of the grid (which is assumed to be a square). It then initializes the variable `val` to a value greater than any value in the grid.\n\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] == 1:\n            temp = []\n            if i != 0:\n                temp.append(grid[i - 1][j])\n\n            if j != 0:\n                temp.append(grid[i][j - 1])\n\n            if i != n - 1:\n                temp.append(grid[i + 1][j])\n\n            if j != n - 1:\n                temp.append(grid[i][j + 1])\n\n            val = min(temp)\nThe function then iterates through each element in the grid. If the element is a `1`, it checks the values of the adjacent elements (if they exist) and adds them to a list `temp`. It then updates the value of `val` to be the minimum value in `temp`.\n\nans = []\nfor i in range(k):\n    if i % 2 == 0:\n        ans.append(1)\n    else:\n        ans.append(val)\nFinally, the function initializes an empty list `ans` and iterates `k` times. If the index `i` is even, it appends `1` to the list. Otherwise, it appends the value of `val` to the list. The function then returns the `ans` list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (minPath grid k)\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (encrypt s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n    (check-within (candidate \"hi\") \"lm\" 0.001)\n    (check-within (candidate \"asdfghjkl\") \"ewhjklnop\" 0.001)\n    (check-within (candidate \"gf\") \"kj\" 0.001)\n    (check-within (candidate \"et\") \"ix\" 0.001)\n    (check-within (candidate \"faewfawefaewg\") \"jeiajeaijeiak\" 0.001)\n    (check-within (candidate \"hellomyfriend\") \"lippsqcjvmirh\" 0.001)\n    (check-within (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" 0.001)\n    (check-within (candidate \"a\") \"e\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef encrypt(s: str) -> str:\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\n### Explanation\n\nThe code is an implementation of a simple encryption algorithm that shifts each letter in a string by two positions in the alphabet. It takes a string `s` as input and returns an encrypted string.\n\nd = 'abcdefghijklmnopqrstuvwxyz'\nThe function first initializes a string `d` containing all the lowercase letters of the alphabet.\n\nout = ''\nThe variable `out` is initialized to an empty string to store the encrypted string.\n\nfor c in s:\nThe function iterates through each character `c` in the input string `s`.\n\nif c in d:\n    out += d[(d.index(c)+2*2) % 26]\nIf the character is a lowercase letter, the function finds its index in the alphabet string `d` using the `index` method. It then adds 4 to the index (equivalent to shifting the letter two positions to the right) and takes the result modulo 26 to wrap around to the beginning of the alphabet if necessary. The corresponding letter in the alphabet string is then appended to the `out` string.\n\nelse:\n    out += c\nIf the character is not a lowercase letter, it is simply appended to the `out` string.\n\nreturn out\nFinally, the function returns the encrypted string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (encrypt s)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (make_a_pile n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n    (check-within (candidate 3) (list 3 5 7) 0.001)\n    (check-within (candidate 4) (list 4 6 8 10) 0.001)\n    (check-within (candidate 5) (list 5 7 9 11 13) 0.001)\n    (check-within (candidate 6) (list 6 8 10 12 14 16) 0.001)\n    (check-within (candidate 8) (list 8 10 12 14 16 18 20 22) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\nfrom typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    return [n + 2*i for i in range(n)]\n\n### Explanation\n\nThe code is an implementation of a function `make_a_pile` which takes an integer `n` and returns a list of integers. The list contains `n` elements, where the first element is `n`, and each subsequent element is `2` greater than the previous element.\n\nreturn [n + 2*i for i in range(n)]\nThe function uses a list comprehension to generate the list of integers. It first generates a list of integers from `0` to `n-1` using the `range` function. It then multiplies each element by `2` and adds `n` to get the final list of integers.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (make_a_pile n)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_prime n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 101) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 13441) #t 0.001)\n    (check-within (candidate 61) #t 0.001)\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 1) #f 0.001)\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 17) #t 0.001)\n    (check-within (candidate 85) #f 0.001)\n    (check-within (candidate 77) #f 0.001)\n    (check-within (candidate 255379) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket?\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code is an implementation of finding the number of even and odd palindrome numbers between 1 and `n` (inclusive). It takes an integer `n` as input and returns a tuple of two integers: even and odd palindrome number counts. A palindrome is a number that reads the same forwards and backwards.\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nThe function first defines a helper function `is_palindrome` that takes a number and returns `True` if it is a palindrome and `False` otherwise. This is done by converting the number to a string and checking if the string is equal to its reverse.\n\neven_palindrome_count = 0\nodd_palindrome_count = 0\nThe counter variable `even_palindrome_count` and `odd_palindrome_count` are used to record the result.\n\nfor i in range(1, n+1):\nThe loops goes through all numbers between 1 and `n` (inclusive)\n\nif i%2 == 1 and is_palindrome(i):\n    odd_palindrome_count += 1\nelif i%2 == 0 and is_palindrome(i):\n    even_palindrome_count += 1\nWithin the for-loop, the program checks if each number is a palindrome and even or odd. If the number is a palindrome and odd, it increments `odd_palindrome_count`. If the number is a palindrome and even, it increments `even_palindrome_count`.\n\nreturn (even_palindrome_count, odd_palindrome_count)\nFinally, the function returns a tuple of the two counters.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe code is an implementation of checking whether a list is sorted in non-descending order and has no more than two occurrences of any integer. takes in a list of integers and returns a boolean.\n\ncount_digit = dict([(i, 0) for i in lst])\nfor i in lst:\n    count_digit[i]+=1\nThe function first creates a dictionary where the keys are the integers in the list and the values are the number of times that integer appears in the list.\n\nif any(count_digit[i] > 2 for i in lst):\n    return False\nIt then checks if any integer appears more than twice in the list, and returns False if so.\n\nif all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n    return True\nelse:\n    return False\nFinally, it checks if the list is sorted in non-descending order, and returns True if so, and False otherwise.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an implementation of a function `separate_paren_groups` which takes a string of parentheses and returns a list of strings containing the groups of parentheses.\n\nresult = []\ncurrent_string = []\ncurrent_depth = 0\nThe function initializes an empty list `result` to store the groups of parentheses. It also initializes an empty list `current_string` to store the current group of parentheses being processed. The variable `current_depth` is initialized to 0 to keep track of the depth of the current group of parentheses.\n\nfor c in paren_string:\nThe function iterates through each character `c` in the input string `paren_string`.\n\nif c == '(':\n    current_depth += 1\n    current_string.append(c)\nIf the character is an opening parenthesis `'('`, the function increments the `current_depth` variable and appends the character to the `current_string` list.\n\nelif c == ')':\n    current_depth -= 1\n    current_string.append(c)\nIf the character is a closing parenthesis `')'`, the function decrements the `current_depth` variable and appends the character to the `current_string` list.\n\nif current_depth == 0:\n    result.append(''.join(current_string))\n    current_string.clear()\nIf the `current_depth` variable reaches 0, it means that the current group of parentheses has been fully processed, so the function joins the `current_string` list into a string and appends it to the `result` list. The `current_string` list is then cleared to start processing the next group of parentheses.\n\nreturn result\nThe function returns the `result` list containing the groups of parentheses.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\()\n           (set! current_depth (+ current_depth 1))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\))\n           (set! current_depth (- current_depth 1))\n           (set! current_string (append current_string (list c)))\n           (when (= current_depth 0)\n             (set! result (append result (list (list->string current_string))))\n             (set! current_string '()))]))\n\n  result)\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of sorting an array of integers. It takes a list of integers `array` as input and returns a sorted list of integers.\n\nreturn [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\nThe function first checks if the input list is empty. If it is, it returns an empty list. Otherwise, it sorts the list using the `sorted` function. The `reverse` parameter is set to `True` if the sum of the first and last elements of the array is even (and the array will be sorted in descending order), otherwise, it is set to `False` (and the array will be sorted in ascending order).\n\n### Racket version\n\n#lang racket\n\n;;\n(define (sort_array array)\n  (if (zero? (length array))\n      '()\n      (if (even? (+ (first array) (last array)))\n          (sort array >)\n          (sort array <))))\n\n### Python version\n\ndef is_prime(n:int) -> bool:\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\n### Explanation\n\nThe code is an implementation of a function `is_prime` which takes an integer `n` and returns `True` if it is a prime number, and `False` otherwise.\n\nif n < 2:\n    return False\nThe function first checks if the input integer is less than 2. If it is, it returns `False` since 2 is the smallest prime number.\n\nfor k in range(2, n - 1):\n    if n % k == 0:\n        return False\nThe function then iterates through all integers from 2 to `n-1`. If any of these integers divides `n` evenly (i.e., the remainder of the division is 0), then `n` is not a prime number, so the function returns `False`.\n\nreturn True\nIf the function has not returned `False` by this point, it means that `n` is not divisible by any integer from 2 to `n-1`, so it must be a prime number. The function returns `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_prime n)\n"
  }
]