[
  {
    "name": "HumanEval_30_get_positive",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_positive l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-within (candidate (list -1 -2 4 5 6)) (list 4 5 6) 0.001)\n    (check-within (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1) 0.001)\n    (check-within (candidate (list -1 -2)) (list ) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n\n### Explanation\n\ncode an of `get_positive` function takes of integers and returns a list of integers than 0.\n\n```python\nimport List ```\nThis imports the `List` class the `typing` module. The module provides support for type hints. Type hints are way the expected of a function argument or \n```python\ndef get_positive(l: List[int]) -> List[int]:\nThis line defines function called `get_positive`. The takes a `l` which is a list of integers. `-> part the function definition specifies that the function returns a list of integers.\n\n```python\nreturn [e for in l if e\n```\nline uses a list comprehension create a containing only the positive integers from the input `if e 0` part of the list comprehension filter that only includes elements are greater than 0.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_positive l)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (parse_nested_parens paren_string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3) 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4) 0.001)\n    (check-within (candidate \"(()(())((())))\") (list 4) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n### Explanation\n\nThe code is implementation  takes a of nested returns a list of integers maximum depth of parentheses.\n\n\ntyping import List\n```\nImporting List module from the typing package.\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\nDefining function `parse_nested_parens` that takes a string `paren_string` as and returns a list of integers. The `-> specifies the return type of the function.  ```python\n    def parse_paren_group(s): ```\nDefining a nested function `parse_paren_group` that takes a `s` as input. \n```python\n      0         = 0 ```\nInitializing variables `depth` and `max_depth` to 0. \n```python       for in s:             if c == '(':\n            depth += 1\n            max_depth = max_depth)\n          else:\n             depth -= 1\nIterating through each character `c` string If an opening parenthesis, increment `depth` and update the if `depth` is greater If is a parenthesis, decrement variable.\n\n\n     \n\n`max_depth` variable.\n\n\n    return [parse_paren_group(x) for x in if x] ```\nReturn list comprehension applies the function group of parentheses in the input `paren_string`. ')` method splits the into groups of parentheses separated by spaces. The `if condition filters out empty groups. The list values is\n\n### Racket version\n\n#lang racket\n\n;; \n(define (parse_nested_parens paren_string)\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_row lst x)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)) 0.001)\n    (check-within (candidate (list ) 1) (list ) 0.001)\n    (check-within (candidate (list (list 1)) 2) (list ) 0.001)\n    (check-within (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list 2 2)) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\nfrom typing import Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\n### Explanation\n\nThe code is an implementation of  `get_row` function which takes of lists of integers and integer `x` as and returns a list of tuples coordinates of all of in the list of lists. The tuples sorted row and by\n\n1. The imports the `List` types from These types are used to specify the of parameters return value.\n\n2. `get_row` function is defined with two parameters: `lst` and `x`. `lst` is a list of lists integers and `x` is an\n 3. `coords` variable is initialized with list that iterates over rows and columns of `lst` and a `(i, for each occurrence of `x` `lst`. The `if` statement filters out all the elements that are `x`.\n\n4. The `sorted` function is called twice on `coords`. The first call sorts by descending order, and the second the tuples by row in ascending order.\n The sorted is returned as the of the function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_row lst x)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sum_squares lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 3.0 5.0 7.0)) 84 0.001)\n    (check-within (candidate (list 1.4 4.2 0.0)) 29 0.001)\n    (check-within (candidate (list -2.4 1.0 1.0)) 6 0.001)\n    (check-within (candidate (list 100.0 1.0 15.0 2.0)) 10230 0.001)\n    (check-within (candidate (list 10000.0 10000.0)) 200000000 0.001)\n    (check-within (candidate (list -1.4 4.6 6.3)) 75 0.001)\n    (check-within (candidate (list -1.4 17.9 18.9 19.9)) 1086 0.001)\n    (check-within (candidate (list 0.0)) 0 0.001)\n    (check-within (candidate (list -1.0)) 1 0.001)\n    (check-within (candidate (list -1.0 1.0 0.0)) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n### Explanation\n\ncode is an of  function takes a of floats and returns the sum the of each element in list.\n\nfrom typing import List ```\nthe List class from the typing module. The List is to define list of a specific type. In this case, a list of floats.  ```python\ndef sum_squares(lst: List[float]) ->\n```\nThis line defines `sum_squares` takes a floats as an argument and returns an The function signature specifies the types of the and output.\n\n```python ``` the math module which provides mathematical functions. \n```python\nsquared = 0\n\nThis line initializes variable to 0. This variable will be used to store of the squares of each element in list.\n```python\ni in lst:\nline starts a loop that iterates over each element in the list.\n\n```python\n+=\n```\nthe square of in the list by first rounding up the element nearest integer using the `math.ceil` function, then squaring the result using the exponentiation operator `**`. The squared value is then added to `squared` variable.\n\nreturn squared\n``` This line returns the value of the variable, which the of squares of element in the input list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (derivative xs)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate derivative))\n    (check-within (candidate (list 3 1 2 4 5)) (list 1 4 12 20) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 6) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 2 2) 0.001)\n    (check-within (candidate (list 3 2 1 0 4)) (list 2 2 0 16) 0.001)\n    (check-within (candidate (list 1)) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\n### Explanation\n\nThe code order derivative of polynomial function. list integers input and returns output.\n import List` Importing from typing\n\n2. `def -> List[int]:` a function called that takes a list of integers as and returns a list integers output. \n3. `return [(i * x) i, in enumerate(xs)][1:]` - The returns a list comprehension that iterates over the input `xs` and multiplies each element by index. The `[1:]` the end of the list comprehension is used to remove the first element of resulting which is always zero.\n\n4. `enumerate(xs)` - This function an iterator that generates containing the index and the value of each element the list.\n\n5. `i * x` - This multiplies index and the value of each in the input\n\n6. i, x in - This iterates the tuples generated by `enumerate(xs)` and unpacks them the variables `i` and\n\n7. * for x in enumerate(xs)]` - a comprehension that generates a list of integers by element in the input list by index.\n\n8. - is a slice returns elements of list except first This is done to remove the first element of the resulting list, which is always zero.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (derivative xs)\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_multiply_prime a)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n    (check-within (candidate 5) #f 0.001)\n    (check-within (candidate 30) #t 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 125) #t 0.001)\n    (check-within (candidate 105) #t 0.001)\n    (check-within (candidate 126) #f 0.001)\n    (check-within (candidate 729) #f 0.001)\n    (check-within (candidate 891) #f 0.001)\n    (check-within (candidate 1001) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef is_multiply_prime(a: int) -> bool:\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n### Explanation\n\ncode is implementation  function called `is_multiply_prime` takes integer and returns The function checks if the input integer a product of prime numbers between 2 and 100 \n\nThe function first inner function `is_prime` that takes an integer as input returns boolean `n` is a prime number or not. The function checks if `n` is by any integer between 2 `n-1` and returns `False` if it is, otherwise it returns `True`.\n\nThe function then uses loops to check combinations of three prime between 2 and 100 (inclusive) that multiply to `a`. The outer loop iterates all prime numbers between and 100 (inclusive), the loop over all between 2 and 100 (inclusive), and the inner loop iterates over all numbers between 2 and 100 (inclusive). the product of three prime numbers is equal `a`, the returns `True`. If no of three numbers multiplies the function `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_multiply_prime a)\n"
  },
  {
    "name": "HumanEval_103_rounded_avg",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (rounded_avg n m)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_103_rounded_avg.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n    (check-within (candidate 1 5) \"0b11\" 0.001)\n    (check-within (candidate 7 13) \"0b1010\" 0.001)\n    (check-within (candidate 964 977) \"0b1111001010\" 0.001)\n    (check-within (candidate 996 997) \"0b1111100100\" 0.001)\n    (check-within (candidate 560 851) \"0b1011000010\" 0.001)\n    (check-within (candidate 185 546) \"0b101101110\" 0.001)\n    (check-within (candidate 362 496) \"0b110101101\" 0.001)\n    (check-within (candidate 350 902) \"0b1001110010\" 0.001)\n    (check-within (candidate 197 233) \"0b11010111\" 0.001)\n    (check-within (candidate 7 5) -1 0.001)\n    (check-within (candidate 5 1) -1 0.001)\n    (check-within (candidate 5 5) \"0b101\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n### Explanation\n\ncode of a that takes two arguments, and and returns representation of the rounded average of all the integers between `n` `m` inclusive. If `m` is less than the function `-1`. \n\ntyping Union\n``` The `typing` module provides support for type hints. a type hint that allows to return one of several\n\n```python def rounded_avg(n: int, int) -> Union[str, int]:\n```\nline the function `rounded_avg` that takes `n` and `m`, which are integers. returns either or an integer.\n\n```python\nif m <     return -1\n```\nIf `m` less than `n`, function returns\n\n```python\nsummation 0\n```\nThis line initializes a `summation` zero.  ```python\nfor in range(n, m+1):\n   += i\n```\nThis loop over all the integers between and `m` inclusive, and adds each integer to\n```python return bin(round(summation/(m n +\nThis returns the binary representation of the average of all integers between `n` and The average is calculated by dividing the sum the integers the number integers, is `m - n + 1`. The `round` function rounds the average to the nearest integer, and function returns the representation rounded average.<|im_end|>\n\n### Racket version\n\n#lang racket\n\n;; \n(define (rounded_avg n m)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (eat number need remaining)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n    (check-within (candidate 5 6 10) (list 11 4) 0.001)\n    (check-within (candidate 4 8 9) (list 12 1) 0.001)\n    (check-within (candidate 1 10 10) (list 11 0) 0.001)\n    (check-within (candidate 2 11 5) (list 7 0) 0.001)\n    (check-within (candidate 4 5 7) (list 9 2) 0.001)\n    (check-within (candidate 4 5 1) (list 5 0) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\n### Explanation\n\nThe code is an implementation of a function called `eat` takes integer arguments and returns a list of The function is defined `def` and takes three `need`, and `-> List[int]` part the definition the function returns of integers.\n\nThe function first `need` less than or equal the `remaining` value. If it is, function returns list containing two integers: `number need` `remaining - need`. If `need` is function returns list containing integers: `number remaining` and `0`.\n\nThe `if` checks if `need` is less or equal to If it the list two `number + need` and If `need` is greater than `remaining`, the function returns a list containing two integers: `number remaining` \nis used to return value the In this case, the function returns containing two integers. \nThe `else` statement to handle the case where `need` is greater than `remaining`. If this is the case, the function returns a list two integers: `number + remaining` and `0`. \nOverall, the `eat` function takes three integer arguments and returns a list of two integers. checks if `need` is less than or equal to `remaining` and returns a list containing `number + need` and `remaining - need` if it is. If is greater than `remaining`, the returns list containing remaining` and\n\n### Racket version\n\n#lang racket\n\n;; \n(define (eat number need remaining)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (find_max words)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-within (candidate (list \"name\" \"of\" \"string\")) \"string\" 0.001)\n    (check-within (candidate (list \"name\" \"enam\" \"game\")) \"enam\" 0.001)\n    (check-within (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\" 0.001)\n    (check-within (candidate (list \"abc\" \"cba\")) \"abc\" 0.001)\n    (check-within (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\" 0.001)\n    (check-within (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\" 0.001)\n    (check-within (candidate (list \"b\")) \"b\" 0.001)\n    (check-within (candidate (list \"play\" \"play\" \"play\")) \"play\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef find_max(words: List[str]) -> str:\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n\n### Explanation\n\nThe code is implementation of `find_max` that takes of strings as and the string with the maximum number of characters.\n\nThe function the `sorted` function to sort the list strings on two The first is the length of the set unique string. The second criterion lexicographic order of strings. The `key` parameter of the `sorted` is used to specify sorting criteria.\n `lambda` function `lambda (-len(set(x)), x)` is used as the key function. It takes string `x` as and returns a of two values. first value is the length of the set of characters in the string. sign is used to sort in descending of the the set unique characters. second the string itself. This ensures that if two strings have the same length of characters, they are sorted \n\nFinally, the function returns the first element of sorted list, is the string with maximum number of characters.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (find_max words)\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_sorted lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n    (check-within (candidate (list 5)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 7)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n    (check-within (candidate (list 1)) #t 0.001)\n    (check-within (candidate (list 3 2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 2 2 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 3 3 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 2 3 3 4)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4)) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n\n### Explanation\n\nThe is an implementation of 2 functions. first function is `is_sorted` which takes a list of integers as and returns a boolean indicating whether list is sorted order and has no more than occurrences any integer. The `main` implemented.\n\nThe first line of the code the List type from the typing This is specify type of input parameter the function.\nThe line defines the `is_sorted` function list of integers as returns a boolean whether the list is sorted non-descending order has no more than 2 occurrences of any integer.\n\nthird line a dictionary called which is used to the number of occurrences each integer in input The dictionary with equal to integers the input list and values equal to 0. \nThe fourth through the input and the value of corresponding key in the `count_digit` dictionary each integer encountered.\n\nThe fifth checks if any integer input list occurs than If so, the function returns False.\n\nsixth line checks the input list is sorted in non-descending order. If the returns True.\nThe seventh eighth lines are an else statement is executed the input list is not in order. The returns False.\n\nfunction is not implemented and is left as an exercise for the\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_sorted lst)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (match_parens lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n    (check-within (candidate (list \"()(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \")\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(())\" \"())())\")) \"No\" 0.001)\n    (check-within (candidate (list \")())\" \"(()()(\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"(())))\" \"(()())((\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"()\" \"())\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(\" \"()))()\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"((((\" \"((())\")) \"No\" 0.001)\n    (check-within (candidate (list \")(()\" \"(()(\")) \"No\" 0.001)\n    (check-within (candidate (list \")(\" \")(\")) \"No\" 0.001)\n    (check-within (candidate (list \"(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \"(\")) \"Yes\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n### Explanation\n\nThe code is implementation of  a function `match_parens` that a list of strings input and returns 'Yes' the two the list can be concatenated to form a string with balanced parentheses, 'No' otherwise.\n The function `match_parens` has a function `check` takes a `s` as input and returns `True` if the has balanced parentheses, and function uses a variable `val` to track of the of open parentheses encountered so far. iterates over the characters in `s`, incrementing `val` each open decrementing it for each close parenthesis. If becomes negative any it means that there are more parentheses than open parentheses, and the function returns `False`. If `val` at end of the iteration, it means that string balanced parentheses, and the function returns `True`. Otherwise, it returns `False`. \nThe body `match_parens` two strings in the `lst` two different orders, and of the resulting balanced parentheses the `check` If either string balanced parentheses, the function returns Otherwise, it 'No'.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (match_parens lst)\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (triangle_area a b c)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 3 4 5) 6.0 0.001)\n    (check-within (candidate 1 2 10) -1 0.001)\n    (check-within (candidate 4 8 5) 8.18 0.001)\n    (check-within (candidate 2 2 2) 1.73 0.001)\n    (check-within (candidate 1 2 3) -1 0.001)\n    (check-within (candidate 10 5 7) 16.25 0.001)\n    (check-within (candidate 2 6 3) -1 0.001)\n    (check-within (candidate 1 1 1) 0.43 0.001)\n    (check-within (candidate 2 2 10) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef triangle_area(a: int, b: int, c: int) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n### Explanation\n\nThe is an implementation  formula for calculating area of a triangle length of sides.\n\n1. `def triangle_area(a: int, c: int) -> float:` - This is a function definition that takes in three integer arguments `a`, `b` and `c` representing the of sides of a triangle. The function value the area the triangle. 2. `if a + or a + c <= b + c <= a:` - This is a conditional statement that checks if the two of the triangle than equal length of the third If this true, it means that the do form a triangle and the function returns -1.\n\n3. `s (a + b + c)/2` - This calculates the semi-perimeter of the triangle adding the lengths all three and 2.\n`area = (s * - a) * (s - b) * (s - c)) ** 0.5` - This line calculates the area of the triangle using Heron's The formula involves taking the square root of product the semi-perimeter and the difference between the semi-perimeter each side\n\n5. `area - This line the area value to decimal places.\n\n6. - This returns the calculated area of triangle.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (triangle_area a b c)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (correct_bracketing brackets)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"<>\") #t 0.001)\n    (check-within (candidate \"<<><>>\") #t 0.001)\n    (check-within (candidate \"<><><<><>><>\") #t 0.001)\n    (check-within (candidate \"<><><<<><><>><>><<><><<>>>\") #t 0.001)\n    (check-within (candidate \"<<<><>>>>\") #f 0.001)\n    (check-within (candidate \"><<>\") #f 0.001)\n    (check-within (candidate \"<\") #f 0.001)\n    (check-within (candidate \"<<<<\") #f 0.001)\n    (check-within (candidate \">\") #f 0.001)\n    (check-within (candidate \"<<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>><<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>>><>\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n### Explanation\n\nThe code is implementation named `correct_bracketing` that a string brackets returns value indicating whether the brackets are correctly balanced.\n\nThe function in single `brackets` which of string. function returns boolean value. \nThe function first initializes variable `depth` to 0.  \nthen iterates over each character in the string `brackets` a loop.\n\nFor each character in `brackets`, the checks if it is an opening `<`. If it is, the function increments the `depth` variable by\n\nIf the not opening bracket, function assumes it a closing bracket and decrements the `depth` by 1.\n\nIf at any point `depth` variable becomes negative, the function returns `False` indicating that the brackets are balanced. \nthe completes, the function checks the `depth` variable is 0. If it the function returns `True` that the are balanced. If it is not, the function returns `False` indicating that the brackets are balanced.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (incr_list l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate incr_list))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 4 3 2) 0.001)\n    (check-within (candidate (list 5 2 5 2 3 3 9 0 123)) (list 6 3 6 3 4 4 10 1 124) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [(e + 1) for e in l]\n\n### Explanation\n\nThe is an a function called `incr_list` that a integers as input and returns a list with each element incremented by\n\n```python\nfrom import List ```\nThis imports the List class the module. List class is a generic class that is to represent a list elements of a specific\n\n```python def incr_list(l: -> List[int]:\n```\nThis line function `incr_list` that a argument `l` of type and returns a value of type The `List[int]` type annotation indicates that the expects list as input. \n```python\nreturn [(e + 1) for e l] ```\nThis new list comprehension iterates over element `e` in the input list `l` and returns a new list with element incremented by 1. The list then by the function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (incr_list l)\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (filter_by_substring strings substring)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\n### Explanation\n\ncode is of  a function that filters a list of strings by \n\nfunction takes two arguments: a list to be filtered\n- `substring`: a string that used to filter the list of strings\n\nfunction a list strings that contain the given substring.\n\nThe implemented using a comprehension. The list comprehension iterates the list `strings` and filters out all strings that not contain the given substring. The strings are then returned as a new list.  The function is defined with type annotations, which the of the input and output parameters. The `List` is imported from the `typing` is define more complex\n\n### Racket version\n\n#lang racket\n\n;; \n(define (filter_by_substring strings substring)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (median l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-within (candidate (list 3 1 2 4 5)) 3 0.001)\n    (check-within (candidate (list -10 4 6 1000 10 20)) 8.0 0.001)\n    (check-within (candidate (list 5)) 5 0.001)\n    (check-within (candidate (list 6 5)) 5.5 0.001)\n    (check-within (candidate (list 8 1 3 9 9 2 7)) 7 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef median(l: List[int]) -> float:\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n### Explanation\n\nThe code is implementation of  function calculates the median a list of The of integers as input and returns a The function defined with the name `median` and a single `l` of type `List[int]`. The returns a float value.\n line of the function sorts the of integers in ascending order the `sorted` function. The sorted function returns a new list is in order. The original list is not  The next line checks the length the list is odd If length of list is odd, the function returns the middle element of the list. If the length of the list is even, the function returns average of middle elements of The `//` operator is used to perform integer This that index used to access the middle elements of the list is always\n\n### Racket version\n\n#lang racket\n\n;; \n(define (median l)\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (string_to_md5 text)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n    (check-within (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\" 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"A B C\") \"0ef78513b0cb8cef12743f5aeb35f888\" 0.001)\n    (check-within (candidate \"password\") \"5f4dcc3b5aa765d61d8327deb882cf99\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Optional\n\ndef string_to_md5(text: str) -> Optional[str]:\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\n### Explanation\n\nis implementation  a Python function that converts a string its MD5 hash. The takes a string as an input and returns the MD5 hash of the string. If the string is the function returns None.\n\n```python\ntyping Optional\n\n\nThis line the `Optional` type from the `typing` module. The type hint indicate that argument or return can be `None`.\n ```python -> Optional[str]:\n```\n\na function called `string_to_md5` that a single argument `text` of `str`. The function returns string (`Optional[str]`), which means it can return a string\n\n```python\nimport hashlib\n```\n\nimports the `hashlib` which provides way secure functions.\n ```python\nreturn if else None\n\nThis line calculates the MD5 hash of the input string The `text.encode('ascii')` method converts the input string to bytes using the ASCII encoding. The `hashlib.md5()` then calculates MD5 hash of the bytes. The `hexdigest()` method returns the hash as string of hexadecimal digits.\n\nstring is empty the returns `None`. Otherwise, it returns the MD5 of the input string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (string_to_md5 text)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (strange_sort_list lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-within (candidate (list 1 2 3 4)) (list 1 4 2 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7) 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7) 0.001)\n    (check-within (candidate (list 5 5 5 5)) (list 5 5 5 5) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5) 0.001)\n    (check-within (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2) 0.001)\n    (check-within (candidate (list 111111)) (list 111111) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\n### Explanation\n\nThe code an of  algorithm that sorts a of integers in a strange way. function `strange_sort_list` takes a list of integers and returns a new list of integers that sorted in a strange way. \nThe function starts by initializing two variables `res` `switch` to empty list and `True` used to store the sorted list while `switch` is used alternate between finding the maximum values in the\n\nThe function enters while that runs as long as the input list `lst` is empty. In the loop, the function either minimum value of input list `res` list depending the value of `switch`. The function then the of the `lst` list which the value that was just appended to the `res` list. Finally, the function of `switch` by negating \nThe function `res` list contains the sorted of integers.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (strange_sort_list lst)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (count_upper s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-within (candidate \"aBCdEf\") 1 0.001)\n    (check-within (candidate \"abcdefg\") 0 0.001)\n    (check-within (candidate \"dBBE\") 0 0.001)\n    (check-within (candidate \"B\") 0 0.001)\n    (check-within (candidate \"U\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"EEEE\") 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef count_upper(s: str) -> int:\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\n### Explanation\n\nThe code an implementation of a function called takes a string as argument and returns the number uppercase vowels in \n The by initializing a variable called `count` to \n The function loops through string `s` using a `for` loop starts at the first the string and increments by 2 until the end the string reached. means the loop only looks at other in  \nInside the loop, the function checks the current is an uppercase If it is, the `count` variable is incremented by 1. \n\nFinally, the function returns the which the of uppercase vowels in the string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_upper s)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_odd_collatz n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_odd_collatz))\n    (check-within (candidate 14) (list 1 5 7 11 13 17) 0.001)\n    (check-within (candidate 5) (list 1 5) 0.001)\n    (check-within (candidate 12) (list 1 3 5) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n### Explanation\n\nThe is implementation  the Collatz conjecture. The is that for positive integer n, the sequence of numbers obtained by repeatedly applying the following reach number\n\n* n divide it 2.\n* If n is odd, multiply it by and 1.\n\nprogram takes an as input returns a sorted list of all odd numbers in the sequence starting from n.\n\nThe line imports the List class from the typing module. This is to specify the type the output of the function.\nThe second line defines called an n as and returns list of integers.\n\nThe if n is If it is, an empty list is assigned to variable odd_collatz. If it is odd, a list containing is assigned to odd_collatz.\n\nThe while starts on line 5 and until n is\n\nIf n is even, divided by 2 on line 7. it is odd, it is multiplied 3 and 1 is added on line\n\nIf n is appended to the odd_collatz list on 11.\n\nThe function list in ascending 14.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_odd_collatz n)\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (minPath grid k)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minPath))\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)\n    (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)\n    (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)\n    (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)\n    (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)\n    (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)\n    (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\n### Explanation\n\nThe code is implementation of  a function `minPath` that in a 2D `grid` and an integer `k` and returns a of integers. \n\n```python from typing List\n``` Importing the List module from the typing\n\ndef minPath(grid: k: int) -> List[int]:\n``` a function `minPath` that takes a 2D list integers `grid` and an integer `k` and returns a of integers.\n\n\n   n len(grid)\nthe the `grid` to variable `n`.\n\n```python\n   val n n + 1\n```\nAssigning the of `n * n + to the variable `val`.\n\n   for in range(n):\n       for j in range(n):           if grid[i][j] == 1:              = []\n           if i != 0:\n           - 1][j])\n\n            if j !=\n             1])\n\n             != n -\n                + 1][j])            if j != n - 1:\n              temp.append(grid[i][j + 1])\n\n            val = min(temp) ```\nIterating the and checking if is equal to `1`. it is, then we create an empty list `temp`. We check if the current element is the first row, if it is not, we append the element to `temp`. We then if the current is not in the first column, if it is not, we append the element to left of it to `temp`. then check if current not in the if it is element below `temp`. We then check if the current element is in the last column, if it append the element to right of it to `temp`. then assign the minimum value of `temp` to\n\n\n   ans =\n   for i in range(k):\n      if i % 2 0:\n          ans.append(1)       else:\n        ans.append(val)\n  return ``` Creating an empty list `ans`. We then iterate the range If current index is even, append `1` to `ans`, else we append `val` `ans`. We then return `ans`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (minPath grid k)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (compare game guess)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n    (check-within (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3) 0.001)\n    (check-within (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0) 0.001)\n    (check-within (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6) 0.001)\n    (check-within (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef compare(game: List[int],guess: List[int]) -> List[int]:\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n### Explanation\n\nThe code is an implementation  a `compare` takes lists of as input and returns list of integers. is defined using the keyword and two arguments `game` `guess` which both lists integers. The function returns list integers.\n\nThe `zip` function used over the two lists and `guess` The `zip` an iterator of where the tuple contains the element from each the argument sequences or iterables. The `abs` used to return the absolute value of the difference between the two elements in each tuple. The resulting list absolute differences is returned by the\n\n### Racket version\n\n#lang racket\n\n;; \n(define (compare game guess)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sum_squares lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 1 4 9)) 14 0.001)\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1)) 9 0.001)\n    (check-within (candidate (list -1 -1 -1 -1 -1 -1 -1 -1 -1)) -3 0.001)\n    (check-within (candidate (list 0)) 0 0.001)\n    (check-within (candidate (list -1 -5 2 -1 -5)) -126 0.001)\n    (check-within (candidate (list -56 -99 1 0 -2)) 3030 0.001)\n    (check-within (candidate (list -1 0 0 0 0 0 0 0 -1)) 0 0.001)\n    (check-within (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37)) -14196 0.001)\n    (check-within (candidate (list -1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10)) -1448 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\n### Explanation\n\nThe code is an implementation of `sum_squares` function takes a of integers and returns sum of the squares of the integers in the function is defined with the `def` keyword and takes a single argument, `lst`, is a list integers. function an\n\n```python\ntyping import List\n```\nline `List` type from the `typing` module. This is used to specify the of the `lst` argument function\n\n```python def sum_squares(lst: List[int]) -> int: ```\nThis line the `sum_squares` function. The function takes a single argument, `lst`, which is a of The specifies that the returns\n\n```python\nresult =[]\n```\nThis initializes an empty called `result`. This list will be used to store the squares of the integers in the input list.\n\nfor i in range(len(lst)):\nThis line starts a `for` loop that over the indices of the input list. The function generates a sequence of integers `0` `len(lst) - 1`.\n\n\nif i == 0:    result.append(lst[i]**2)\nline checks if the current `i` is divisible `3` the modulo If it square of the integer at that index is appended to the `result` list using the `append()` method. \n```python\ni % 4 == 0 and i%3 != 0:  \n```\nThis checks current index `i` is divisible `4` but not it is, the cube of the at that is appended to the using the `append()`\n\n```python\nelse:\nresult.append(lst[i])\n\nThis line is executed if neither of the previous conditions met. this integer at the index is simply appended to the list.\n\nreturn sum(result) ``` This the of integers the `result` list the\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (digitSum s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abAB\") 131 0.001)\n    (check-within (candidate \"abcCd\") 67 0.001)\n    (check-within (candidate \"helloE\") 69 0.001)\n    (check-within (candidate \"woArBld\") 131 0.001)\n    (check-within (candidate \"aAaaaXa\") 153 0.001)\n    (check-within (candidate \" How are yOu?\") 151 0.001)\n    (check-within (candidate \"You arE Very Smart\") 327 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef digitSum(s: str) -> int:\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\n### Explanation\n\nThe code is an implementation of  `digitSum` function that string `s` returns the sum the ASCII of all uppercase characters in the string. \n1. `def digitSum(s: str) -> defines called that takes a string an argument and returns integer.\n2. `if == return checks if string `s` is empty. If returns\n3. `return sum(ord(char) char.isupper() else char s)` computes the of the ASCII values uppercase characters the string `s`. It this by over each character in string `s` and if is uppercase. If it is, it adds the ASCII value of the to the sum. it not, it adds 0 the sum. The `ord()` function is to get the value of the character. The `sum()` function is used add up all the values.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (digitSum s)\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_third l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_third))\n    (check-within (candidate (list 5 6 3 4 8 9 2)) (list 2 6 3 4 8 9 5) 0.001)\n    (check-within (candidate (list 5 8 3 4 6 9 2)) (list 2 8 3 4 6 9 5) 0.001)\n    (check-within (candidate (list 5 6 9 4 8 3 2)) (list 2 6 9 4 8 3 5) 0.001)\n    (check-within (candidate (list 5 6 3 4 8 9 2 1)) (list 2 6 3 4 8 9 5 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\n### Explanation\n\ncode is an implementation a function `sort_third` that takes a list and sorts every element of the list. \n\n\nfrom typing import List\n```\nThe `typing` used to specify of the input and output the function. Here, is a of and the output is a list of integers. \n```python\ndef sort_third(l: List[int]) List[int]:\n```\nThe function `sort_third` list of integers as and returns a of The `-> List[int]` specifies return type of the\n\n```python\n= list(l)\n```\nThe input list is to new list `l` the This is to avoid modifying original\n ```python\nl[::3] = sorted(l[::3])\n```\nThe `l[::3]` is a slice `l` contains every third element of the `sorted()` function is sort slice in ascending order. The sorted slice is assigned back to the original slice using `=` sorts every third element of list. \n```python\nreturn l\n```\nsorted list `l` as output of the function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_third l)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fizz_buzz n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n    (check-within (candidate 50) 0 0.001)\n    (check-within (candidate 78) 2 0.001)\n    (check-within (candidate 79) 3 0.001)\n    (check-within (candidate 100) 3 0.001)\n    (check-within (candidate 200) 6 0.001)\n    (check-within (candidate 4000) 192 0.001)\n    (check-within (candidate 10000) 639 0.001)\n    (check-within (candidate 100000) 8026 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef fizz_buzz(n: int) -> int:\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n### Explanation\n\nThe code implementation of FizzBuzz. function an integer `n` as input and returns the number of times the appears the that are multiples of 11 or 13 to `n`.\n\n1. `def fizz_buzz(n: int) -> int:` defines a function named that an `n` as input returns an\n`ns []` initializes an empty list `ns`.\n3. iterates over the integers from to `n-1`.\n4. i % 11 == or % 13 == 0:` checks the integer `i` is a multiple of 11 or 5. `ns.append(i)` the integer to the `ns` if it is a multiple of 11 or 13.\n6. `s = ''.join(list(map(str, ns)))` list integers `ns` to a string by mapping integer to its representation and joining them together.\n7. = variable `ans` to 0.\n8. `for c in s:` each character in the `s`.\n9. `ans += == '7')` increments variable by 1 if the character `c` is equal the string `'7'`. 10. ans` returns the final value of\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fizz_buzz n)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (intersection interval1 interval2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersection))\n    (check-within (candidate (list 1 2) (list 2 3)) \"NO\" 0.001)\n    (check-within (candidate (list -1 1) (list 0 4)) \"NO\" 0.001)\n    (check-within (candidate (list -3 -1) (list -5 5)) \"YES\" 0.001)\n    (check-within (candidate (list -2 2) (list -4 0)) \"YES\" 0.001)\n    (check-within (candidate (list -11 2) (list -1 -1)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 3 5)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 1 2)) \"NO\" 0.001)\n    (check-within (candidate (list -2 -2) (list -3 -2)) \"NO\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Tuple\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n### Explanation\n\nThe code is an of  a function called `intersection` that takes two integers and returns string if the intersection of the two is a number, and otherwise. \nThe starts by defining a nested function called that an integer as input and the integer is and `False` The if the input number is or 0, and returns in those cases. If the input number is 2, the function the function if the number divisible by any and the input (exclusive). If it the function `False`. Otherwise, the function returns `True`. \nThe function then initializes variables `l` and to the maximum of the first of the first tuple and the first element second input tuple, and the minimum of second element of first input the element of the second input tuple, respectively. These variables represent the left and endpoints of the intersection of the two intervals.\n\nThe then calculates the length of the intersection by subtracting `l` from stores in a variable called `length`. \nFinally, the the of the intersection is greater than 0 is a prime number by calling the `is_prime` on `length`. If it the function the function returns \"NO\".<|im_end|>\n\n### Racket version\n\n#lang racket\n\n;; \n(define (intersection interval1 interval2)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_numbers numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"three\") \"three\" 0.001)\n    (check-within (candidate \"three five nine\") \"three five nine\" 0.001)\n    (check-within (candidate \"five zero four seven nine eight\") \"zero four five seven eight nine\" 0.001)\n    (check-within (candidate \"six five four three two one zero\") \"zero one two three four five six\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n### Explanation\n\nThe code is an implementation  called `sort_numbers` that takes string of numbers in English returns a string of numbers in English sorted in ascending order.\n\nThe function takes single argument `numbers` which is a string of space-separated numbers in return type of the function is also a string.\n function starts by creating a called which maps English words corresponding integer keys of dictionary are for the numbers zero to and the are the corresponding integer values.\n\nfunction then splits the `numbers` into a list individual words using the method. The the method is space which specifies that the should be split at each space character.\n\nThe resulting of words is then filtered using a comprehension to remove any empty strings. is done using the x` condition, which if the string `x` empty.\nThe filtered list words is sorted in ascending order using the `sorted` The argument to the `sorted` is lambda that maps word to corresponding value using the `value_map`\n the list words is joined back into string using the `join` The to the `join` is space character, which that each word should be separated by a character.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_numbers numbers)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (make_a_pile n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n    (check-within (candidate 3) (list 3 5 7) 0.001)\n    (check-within (candidate 4) (list 4 6 8 10) 0.001)\n    (check-within (candidate 5) (list 5 7 9 11 13) 0.001)\n    (check-within (candidate 6) (list 6 8 10 12 14 16) 0.001)\n    (check-within (candidate 8) (list 8 10 12 14 16 18 20 22) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    return [n + 2*i for i in range(n)]\n\n### Explanation\n\nThe code is an of  a function `make_a_pile` that takes an integer `n` and returns a list of integers. The list is adding `2*i` to for each `i` in the range `0` `n-1`.   The takes an integer input and returns list of integers. The type is imported from `typing` module. The `List` type is a generic type that is used to represent a of elements of specific In this case, the list contains\n\nThe uses a list comprehension generate the list of integers. The list comprehension way creating a list in Python. list expression that for each element in `0` `n-1`. expression `n + 2*i`, adds `2*i` to `n` each `i` in the range `0` to `n-1`. resulting list returned the\n\n### Racket version\n\n#lang racket\n\n;; \n(define (make_a_pile n)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (iscube a)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate iscube))\n    (check-within (candidate 1) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate -1) #t 0.001)\n    (check-within (candidate 64) #t 0.001)\n    (check-within (candidate 180) #f 0.001)\n    (check-within (candidate 1000) #t 0.001)\n    (check-within (candidate 0) #t 0.001)\n    (check-within (candidate 1729) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef iscube(a: int) -> bool:\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n### Explanation\n\nThe code is an implementation of  a function that takes an integer `a` and returns a boolean value. The function checks the input integer is a perfect not. \n\nHere is line-by-line explanation of the\n\n```python def iscube(a: -> bool:\n``` This line defines a function called that takes an `a` input and returns a value. `:int` and `-> bool` parts are annotations, which indicate that input parameter an and the return value is boolean.\n\n```python\n   a\n```\nThis line absolute value of the integer `a`. This is done to ensure that the function correctly negative as well. \n   return int(round(a ** (1. / 3 ==\n```\nThis line checks if the input integer `a` is a perfect not. It does this by taking the cube root of `a` using the `**(1./3)` which `a` of `1/3`. The `round` is to result the nearest integer, and the is the result to an integer. The result is then cubed using the operator, and compared the original integer `a`. If the values `a` perfect cube the `True`. Otherwise, the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (iscube a)\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (will_it_fly q w)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate will_it_fly))\n    (check-within (candidate (list 3 2 3) 9) #t 0.001)\n    (check-within (candidate (list 1 2) 5) #f 0.001)\n    (check-within (candidate (list 3) 5) #t 0.001)\n    (check-within (candidate (list 3 2 3) 1) #f 0.001)\n    (check-within (candidate (list 1 2 3) 6) #f 0.001)\n    (check-within (candidate (list 5) 5) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n\n### Explanation\n\nThe code implementation of  function `will_it_fly` that takes a list of integers `q` and `w`. function returns indicating whether or the sum of the integers in `q` is less than or equal to and whether the list is a palindrome.\n\nThe first line of code the `List` from the `typing` module. This to specify the type of the argument as of integers.\n\ntyping import List\n\n The next line defines the `will_it_fly` function that takes two arguments, a of integers `q` and an integer and a boolean value.\n\n```python\ndef will_it_fly(q: List[int], w: int) ->\n``` The next line if sum of the integers in the list is greater than integer `w`. If it is, the function returns\n ```python    if sum(q) > w:\n    \n```  next two initialize two variables and to `0` and `len(q)-1` respectively. variables are used to traverse the list `q`  ```python\n  i, j len(q)-1\n```\n The next of code is a `while` runs as long as `i` is less than The loop checks if the element at index `i` is equal the element at index `j`. If they not equal, the returns `False`. they are the loop continues by `i` and decrementing\n\n```python    while i<j:\n       if q[i] !=\n      return\n          \n```\n\nFinally, loop completes without returning `False`, the function returns\n\n```python\n  return True\n```\n\n### Racket version\n\n#lang racket\n\n;; \n(define (will_it_fly q w)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_equal_to_sum_even n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 11) #f 0.001)\n    (check-within (candidate 12) #t 0.001)\n    (check-within (candidate 13) #f 0.001)\n    (check-within (candidate 16) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef is_equal_to_sum_even(n: int) -> bool:\n    return n%2 == 0 and n >= 8\n\n### Explanation\n\nThe is an implementation of  a function that takes an as input and returns a boolean. The returns True if the input is greater than to 8 is even. it returns\n\nThe function `is_equal_to_sum_even` it single argument is an integer. function definition specifies the argument should be type `int` that the function return boolean. \nThe function consists of single line of code. The line of uses modulo operator `%` check if the input integer is even. the is even, the modulo operation will 0 the `n%2 == 0` will evaluate If the integer is odd, then modulo operation will 1 and the expression == 0` will evaluate to False.\n\nThe of code also checks if the input integer is greater or equal to 8. the integer is less than 8, then expression 8` will evaluate to If integer is greater than or to 8, then expression >= 8` will evaluate to True.\n\nThe line of uses the logical operator `and` to combine the expressions. If both expressions evaluate to then the expression will evaluate to True. either expression evaluates False, then the entire expression will evaluate to False.\n\nFinally, the returns of the a value. If the expression to True, function will return the evaluates to False, then the will False.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_equal_to_sum_even n)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (largest_prime_factor n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n    (check-within (candidate 15) 5 0.001)\n    (check-within (candidate 27) 3 0.001)\n    (check-within (candidate 63) 7 0.001)\n    (check-within (candidate 330) 11 0.001)\n    (check-within (candidate 13195) 29 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef largest_prime_factor(n: int) -> int:\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n### Explanation\n\nThe code is an implementation of  a function that an integer and returns the largest prime factor that integer.  ```python\ndef largest_prime_factor(n: int) -> int:\n```\nThis line defines a function called that takes integer `n` input returns an\n\n```python\n  def is_prime(k):\n       if k <\n       return False\n      i in range(2, k - 1):\n          if k % i 0:\n           return False        return True\n```\nThis line defines a helper function `is_prime` that an `k` as and returns a boolean value indicating whether `k` The function checks `k` is less 2, which case it `False`. it checks `k` is divisible any number between 2 `k-1`. If is, then `k` is not and the function returns If such number is found, then `k` is and the function returns `True`.\n\n```python    1\n   j +\n        if % == and is_prime(j):\n        largest = max(largest,     return largest\nThis initializes a `largest` 1. Then, loops through the numbers between 2 and `n+1`. For each `j`, checks if `j` and if is prime. both conditions are true, then it updates value of the maximum of its current value and `j`. Finally, it the value of `largest`, is prime of `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_prime_factor n)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (has_close_elements numbers threshold)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate has_close_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\n### Explanation\n\ncode an implementation of takes in a numbers and a threshold value. boolean indicating whether there are any two elements in the list are to each other than the threshold value.\n\n```python from typing import\n```\nThe `typing` module support for hints. This line imports the `List` from the module. \n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool: ```\nThis line defines the `has_close_elements` function that takes arguments: `numbers` and is a list of and `threshold` is a The function returns a boolean value.\n\n```python for idx, elem enumerate(numbers):\n   for idx2, elem2 in\n```\nThis line starts a nested iterates through all pairs of elements `numbers` list. The `enumerate` function is used to the index and of each element the list. \n```python != idx2:\n```\nThis line if of are the element. If are the same element, then the distance between them is 0 and we don't to check it's less than\n\n```python\ndistance - elem2)\n```\nThis calculates the absolute difference the elements.\n\n```python\ndistance < threshold:     return True\n```\nline checks if the distance between the two is less the threshold. If it found a pair of elements that are too close to each other we return `True`. \n\nFalse ```\nIf we have through all of and found any are close each other, then we `False`. This means that there are no elements in the list are closer to each other the threshold value.<|im_end|>\n\n### Racket version\n\n#lang racket\n\n;; \n(define (has_close_elements numbers threshold)\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sorted_list_sum lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sorted_list_sum))\n    (check-within (candidate (list \"aa\" \"a\" \"aaa\")) (list \"aa\") 0.001)\n    (check-within (candidate (list \"school\" \"AI\" \"asdf\" \"b\")) (list \"AI\" \"asdf\" \"school\") 0.001)\n    (check-within (candidate (list \"d\" \"b\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"d\" \"dcba\" \"abcd\" \"a\")) (list \"abcd\" \"dcba\") 0.001)\n    (check-within (candidate (list \"AI\" \"ai\" \"au\")) (list \"AI\" \"ai\" \"au\") 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"b\" \"c\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"aaaa\" \"bbbb\" \"dd\" \"cc\")) (list \"cc\" \"dd\" \"aaaa\" \"bbbb\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\n### Explanation\n\nThe is an implementation of  a function called that a list strings input returns a list strings have an number of characters. \n```python typing import List ```\nThis the List type the typing This is define the type of the input and output of the function.\n\n```python\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n\nThis line defines the function `sorted_list_sum` that takes a list of strings as input returns of The `->` to the type the function.\n\n```python\nlst.sort()\n```\nsorts the input list in ascending order.\n\n= ```\nThis creates an empty list called `new_lst`.\n\n```python\nfor i lst:     ==        new_lst.append(i)\n\nThis block of code loops each in input list and if the of the string is even. If the length is even, is added to the `new_lst`.\n\n```python return key=len)\n\nThis line sorts `new_lst` in ascending on the length of strings the list. The `key=len` is to specify that the sorting be based on the of the The list is then returned as the output of the function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sorted_list_sum lst)\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (mean_absolute_deviation numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n    (check-within (candidate (list 1.0 2.0)) 0.5 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0)) 1.0 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n### Explanation\n\nThe is an implementation of  mean deviation (MAD) in Python. MAD is a statistical measure that the average deviation a set of data from its mean. \n\nThe function a float numbers as input and a float value. The is with name `mean_absolute_deviation` one argument `numbers` which is a list of float numbers. \n\nline of calculates the mean of the list the of the numbers by the length of list. The result is assigned to the variable `mean`. \nThe line the the MAD of the input list. It does this by the mean from each number the list, taking the absolute the and of these The final is divided the length of the to the average deviation. This value by the function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (mean_absolute_deviation numbers)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (common l1 l2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-within (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653) 0.001)\n    (check-within (candidate (list 5 3 2 8) (list 3 2)) (list 2 3) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n### Explanation\n\nThe code is an of  function called `common` lists of integers and returns a list integers that are common to both lists. uses set to elements and then returns a sorted of the in the set.\n\n```python\ntyping import List\n``` This line the List the typing The List class generic class can used to represent a list of any type.\n```python\ndef common(l1: l2: ->\n``` This line defines `common` that two `l1` and `l2`, lists of integers. function returns a of integers. `-> List[int]` used to specify the return type of the function.\n ```python\nret = set()\n```\nThis creates an empty called `ret`. set will be used to store the common elements between the two lists.\n\nfor e1 l1:    e2 in\n      if e1 ==          ret.add(e1)\n\nThese lines use to iterate over each in `l1` and If an in `l1` is equal to an element in `l2`, the element is added to the set.\n ```python\nreturn sorted(list(ret))\n```\nThis line converts set to list, sorts the list, and returns The function is to sort the in ascending order. `list` function is to convert the set to a list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (common l1 l2)\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (search lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n    (check-within (candidate (list 5 5 5 5 1)) 1 0.001)\n    (check-within (candidate (list 4 1 4 1 4 4)) 4 0.001)\n    (check-within (candidate (list 3 3)) -1 0.001)\n    (check-within (candidate (list 8 8 8 8 8 8 8 8)) 8 0.001)\n    (check-within (candidate (list 2 3 3 2 2)) 2 0.001)\n    (check-within (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1)) 1 0.001)\n    (check-within (candidate (list 3 2 8 2)) 2 0.001)\n    (check-within (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1 0.001)\n    (check-within (candidate (list 8 8 3 6 5 6 4)) -1 0.001)\n    (check-within (candidate (list 6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1 0.001)\n    (check-within (candidate (list 1 9 10 1 3)) 1 0.001)\n    (check-within (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10)) 5 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4 0.001)\n    (check-within (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2 0.001)\n    (check-within (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1 0.001)\n    (check-within (candidate (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4 0.001)\n    (check-within (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7)) 4 0.001)\n    (check-within (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1)) 2 0.001)\n    (check-within (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8)) -1 0.001)\n    (check-within (candidate (list 10)) -1 0.001)\n    (check-within (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2 0.001)\n    (check-within (candidate (list 5 4 10 2 1 1 10 3 6 1 8)) 1 0.001)\n    (check-within (candidate (list 7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1 0.001)\n    (check-within (candidate (list 3 10 10 9 2)) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n### Explanation\n\nThe is an implementation  a called `search` takes a list integers and an integer. The function implemented in Python. The function is designed to find the integer that appears at least as as itself in the input \n\nstarts by importing List module from the typing package. This module is used to define the type the input and the return the function. \n\n\nfrom typing import List\n```\n The function definition starts with the `def` followed by the function name `search`. input parameter a integers called `lst`. The return value is an integer. \n```python\ndef search(lst: -> int:\n```\n function a new called `frq` with length equal to the maximum value in the input plus one. The `max` function is used to find the value in the input The `+1` is added to ensure that the list has enough space store frequency of all the integers in the input list. \n\n  frq = * (max(lst) 1)\n\n The then iterates over input list `lst` and at the corresponding index the `frq` is done to the frequency of integer in the input list.  \n```python\n   for i in lst:\n        frq[i] += ```\n The then initializes variable `ans` to -1. This variable will be to store answer.\n    ans\n```\n\nThe function iterates over `frq` starting index The loop checks frequency integer the current index is or equal to the the index. If condition is true, then answer is updated index. \n```python\n   for i in range(1,\n     frq[i] >= i:\n           ans i\n``` \nFinally, the function the\n\n```python     ans\n```\n\n### Racket version\n\n#lang racket\n\n;; \n(define (search lst)\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_array arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5) 0.001)\n    (check-within (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3) 0.001)\n    (check-within (candidate (list 1 0 2 3 4)) (list 0 1 2 4 3) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4 3 3 5 5 5 7 77) 0.001)\n    (check-within (candidate (list 3 6 44 12 32 5)) (list 32 3 5 6 12 44) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\n### Explanation\n\nThe code implementation of  [LeetCode problem 1356](https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/). takes in an array of integers sorted array based the of 1 bits in binary representation of each integer. \n\nspecifies that the function in a list of integers returns integers. The `List` is imported from the\n\n```python\nimport List\n```\n\nThe `sort_array` function sorts the array The sort is ensure that the are sorted in The sort is based on the of 1 bits in binary of each integer. \n```python\nsort_array(arr: List[int]) -> List[int]:    key=lambda x: bin(x)[2:].count('1'))\n\n\nThe `sorted` function is to sort the array in ascending order. The `key` argument is used to specify the criteria. The `lambda` function takes in an integer `x` and returns the number of in the binary of `x`. The is to convert the integer to its representation. The `[2:]` slice is used to `0b` prefix from the representation. The `count` is to count the number of 1 bits in binary representation. \n\nsorted(arr), bin(x)[2:].count('1')\n\n\nThe `sort_array` function returns the sorted array.\n\n```python\nreturn key=lambda x:\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_array arr)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (Strongest_Extension class_name extensions)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-within (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\" 0.001)\n    (check-within (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\" 0.001)\n    (check-within (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\" 0.001)\n    (check-within (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\" 0.001)\n    (check-within (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\" 0.001)\n    (check-within (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\" 0.001)\n    (check-within (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\" 0.001)\n    (check-within (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\" 0.001)\n    (check-within (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n### Explanation\n\nThe code an of  a `Strongest_Extension` that takes two parameters: `class_name` is a representing the a class, while a list of strings representing of classes that extend class represented by `class_name`.\n\nThe function returns a is name of the class `extensions` that has the The strength an extension by the difference the number of uppercase letters the number of letters in the name the class. The class with the highest difference to have strongest extension.\n\nThe function first a variable to the first element the `extensions` list. It calculates the strength of the first element and stores in a variable `my_val`.  The function then iterates through the remaining of `extensions` list, calculates the strength of each element, and compares to `my_val`. the of current element is greater than `my_val`, then `strong` is updated to the current element and `my_val` is updated the strength of the current element. Finally, the returns a string that of `class_name`, a period, and `strong`. This string represents the the class strongest extension.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (Strongest_Extension class_name extensions)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_max_triples n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-within (candidate 5) 1 0.001)\n    (check-within (candidate 6) 4 0.001)\n    (check-within (candidate 10) 36 0.001)\n    (check-within (candidate 100) 53361 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef get_max_triples(n: int) -> int:\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n### Explanation\n\nThe code is an implementation of 3SUM problem. The 3SUM is classic computer problem asks if there exist elements in array whose sum equals to zero. The problem statement is follows:\n\nan array n integers, are elements a, b, c in nums such a + b + 0? Find in array which gives the of zero.\n\nThe takes an integer `n` as and an integer. The function returns the number of unique triplets integers (a,b,c) such that + b^2 + is divisible by and 1 <= n.  line the a list `A` length where the i-th element the list is i + is using list \n\nThe second line of the function initializes empty list `ans`.  next three lines of function loops to iterate over all possible combinations of integers i, j, and k such that < j < k. For each combination of i, j, and k, the function checks if the sum of the corresponding elements in the list `A` is by If it is, then the tuple (A[i], A[k]) is added the list `ans`.\n\nFinally, the returns length of the list\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_max_triples n)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (exchange lst1 lst2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate exchange))\n    (check-within (candidate (list 1 2 3 4) (list 1 2 3 4)) \"YES\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 1 5 3 4)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 2 1 4 3)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 4)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 3)) \"NO\" 0.001)\n    (check-within (candidate (list 3 2 6 1 8 9) (list 3 5 5 1 1 1)) \"NO\" 0.001)\n    (check-within (candidate (list 100 200) (list 200 200)) \"YES\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n\n### Explanation\n\nThe code is of  called `exchange` takes two lists of integers `lst2` as and returns a string \"NO\". function returns \"YES\" if there are more even numbers in `lst2` than numbers `lst1`, it returns \"NO\".\n\n```python typing List ```\nline imports the the typing module. The class is to indicate the input arguments `lst1` and `lst2` are lists of integers.\n\n```python\nexchange(lst1: List[int], List[int]) -> str: This line the function `exchange` that two arguments `lst1` both of which are of integers. The function returns a string.\n\n```python\nodd = 0\neven = ```\nThese lines initialize two `odd` `even` to 0. variables will be used to count the number of odd and even numbers in and `lst2`.\n\n\nfor i in lst1:\n  if i%2 == 1:\n      odd += 1\nThis loop element `i` in `lst1`. `i` is `i%2 == 1`), the variable is incremented by\n\nfor i in\n   if i%2 == 0:\n       even += 1\n```\nThis loop each element `i` `lst2`. `i` is even (i.e., 0`), the variable is incremented\n\n```python if >= odd:\n  return \"YES\"\n\"NO\"\n```\nThis block checks the number even numbers in `lst2` greater than or to number of odd numbers `lst1`. If it is, then the function returns \"YES\". Otherwise, it \"NO\".<|im_end|>\n\n### Racket version\n\n#lang racket\n\n;; \n(define (exchange lst1 lst2)\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (tri n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-within (candidate 3) (list 1 3 2 8) 0.001)\n    (check-within (candidate 4) (list 1 3 2 8 3) 0.001)\n    (check-within (candidate 5) (list 1 3 2 8 3 15) 0.001)\n    (check-within (candidate 6) (list 1 3 2 8 3 15 4) 0.001)\n    (check-within (candidate 7) (list 1 3 2 8 3 15 4 24) 0.001)\n    (check-within (candidate 8) (list 1 3 2 8 3 15 4 24 5) 0.001)\n    (check-within (candidate 9) (list 1 3 2 8 3 15 4 24 5 35) 0.001)\n    (check-within (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11) 0.001)\n    (check-within (candidate 0) (list 1) 0.001)\n    (check-within (candidate 1) (list 1 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n### Explanation\n\nThe code is an implementation of  [Triangular numbers](https://en.wikipedia.org/wiki/Triangular_number). The function an integer `n` as and returns list of triangular numbers. \n\n\nfrom import\n```\nThe `typing` is imported to allow use hints. `List` is a hint a list integers.\n\n```python def tri(n: -> ```\nThe function `tri` takes an integer input and returns a list of integers. The `->` is a type hint for the value.\n\n```python     if == 0:\n   \n\nIf `n` is zero, the function returns a list containing the integer 1. \n```python\n    my_tri = 3]\n``` A list `my_tri` is initialized with the first two numbers, 1 and 3.\n ```python\n  for i in n +\n\n`for` loop used to over the of from to `n` (inclusive).\n\n```python\n       if i % 2 == 0:\n        / + 1)\n```\nIf `i` is the next calculated by dividing by 2 adding 1. This because every even number `n` is the sum of two triangular numbers, `n/2 +\n\n```python\n      else:          my_tri.append(my_tri[i - 1] my_tri[i 2] + (i + 3) 2)\n```\nIf `i` is the next triangular number is calculated by the previous two numbers the list, and adding + / because `n` the sum consecutive triangular numbers, `n-1`, and `n-3`.\n\n```python\n  return my_tri\n\nThe list returned as of function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (tri n)\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (generate_integers a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate generate_integers))\n    (check-within (candidate 2 10) (list 2 4 6 8) 0.001)\n    (check-within (candidate 10 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 132 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 17 89) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n\n### Explanation\n\nThe code is an implementation of  function called `generate_integers` takes integer and `b` and returns a list of even `a` and `b` inclusive.\n\nThe first line the code imports the `List` from the `typing` module.\n\nThe line defines the `generate_integers` which takes two integer arguments `a` and `b` returns list of integers.\n\nThe third line sets variable `lower` the maximum 2 and the of and `b`. is done to ensure that the of range is at least\n\nThe fourth variable `upper` to the minimum of 8 the of and `b`. is done to the upper bound of range is\n\nThe fifth line a comprehension that generates list even integers between and inclusive. The statement in the list comprehension out odd integers.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (generate_integers a b)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (get_closest_vowel word)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n    (check-within (candidate \"yogurt\") \"u\" 0.001)\n    (check-within (candidate \"full\") \"u\" 0.001)\n    (check-within (candidate \"easy\") \"\" 0.001)\n    (check-within (candidate \"eAsy\") \"\" 0.001)\n    (check-within (candidate \"ali\") \"\" 0.001)\n    (check-within (candidate \"bad\") \"a\" 0.001)\n    (check-within (candidate \"most\") \"o\" 0.001)\n    (check-within (candidate \"ab\") \"\" 0.001)\n    (check-within (candidate \"ba\") \"\" 0.001)\n    (check-within (candidate \"quick\") \"\" 0.001)\n    (check-within (candidate \"anime\") \"i\" 0.001)\n    (check-within (candidate \"Asia\") \"\" 0.001)\n    (check-within (candidate \"Above\") \"o\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef get_closest_vowel(word: str) -> str:\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\n### Explanation\n\nThe code is implementation of  a takes a string as input the closest vowel the middle of the If there are no vowels, an empty string returned.  \n```python\ndef get_closest_vowel(word: -> str:\n```\nThe function is called and takes single argument `word` type string. The function returns string.\n```python    if < 3:\n       \"\"\n```\nIf the length of word is than the returns an empty string.\n ```python    vowels = {\"a\", \"e\", \"u\", \"A\", \"E\", 'O', 'U', set of is set both upper lower vowels.\n\n   i range(len(word)-2, -1):\n```\nA for loop is to iterate over indices of the string. The loop starts at the second to index and ends at the index. loop decrements by 1.\n\n```python\n     if word[i] vowels:\n```\nthe current character is a vowel, the following block is\n\n```python\n       if (word[i+1] not in vowels) and (word[i-1] not              return\n```\nIf the previous and characters not vowels, the current character is\n\n```python  return \"\"\n``` If no vowels are found, an string is returned.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_closest_vowel word)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (greatest_common_divisor a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-within (candidate 3 7) 1 0.001)\n    (check-within (candidate 10 15) 5 0.001)\n    (check-within (candidate 49 14) 7 0.001)\n    (check-within (candidate 144 60) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n### Explanation\n\nThe is implementation of  the Euclidean algorithm to find the greatest common divisor of two integers `a` and `b`. \n\nfunction `greatest_common_divisor` integer arguments and `b` and returns an integer.  \nThe first line of the function definition specifies It Python's type hinting feature to indicate the function takes two integer arguments `a` and returns an integer. \n\nThe second of the function definition a `while` loop that to execute the of zero. \n\nThe third of the loop assigns the value of `b` to and the value `a % to `b`. The `%` operator returns remainder of the division of `a` by `b`.\n fourth line returns the of `a` after the This value the divisor the original of and `b`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (greatest_common_divisor a b)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (find_closest_elements numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0) 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\n### Explanation\n\nThe code an implementation of  a function that finds the pair of numbers in numbers.\n ```python from typing import List,\n```\nline the List Tuple classes the typing module. The List class is to indicate that the function takes a list of as input, while the Tuple class is used that the function returns tuple two numbers.\n\n```python\ndef find_closest_elements(numbers: -> Tuple[float,\n```\nThis defines the function `find_closest_elements` which takes a list of floats as input and returns a tuple of two floats.\n\n```python\nclosest_pair\ndistance = None\n```\nlines two variables, `closest_pair` and to These variables used to keep track of the closest pair of numbers and between them, respectively.\n idx, in\n   for idx2, in enumerate(numbers):       if idx ```\nThese lines start a nested loop that over each pair of numbers in the list. The `enumerate` function is used get both the index of each element in the list. The `if` statement ensures numbers being are not same number.\n ```python\nif distance is None:\n distance abs(elem elem2)\n  closest_pair = tuple(sorted([elem, elem2]))\nelse:\n   = elem2)\n   if new_distance <\n      =\n        closest_pair = tuple(sorted([elem, elem2]))\n```\nThese lines calculate the distance between two being update the `closest_pair` and `distance` variables if new is smaller the distance. `sorted` is used ensure two numbers in are ascending order. return closest_pair\n```\nThis line returns the `closest_pair` contains the two numbers that are closest to other in the list.<|im_end|>\n\n### Racket version\n\n#lang racket\n\n;; \n(define (find_closest_elements numbers)\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (odd_count lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_count))\n    (check-within (candidate (list \"1234567\")) (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\") 0.001)\n    (check-within (candidate (list \"3\" \"11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\") 0.001)\n    (check-within (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\n### Explanation\n\nThe code an implementation of  a function called `odd_count` that a of strings as input and returns a of strings as output. The function returns a string that describes the of odd elements in each string the input list.\n The first line of imports the `List` class from the `typing` module. This is used to type the input and output of the function.\n\nThe second line the `odd_count` function. function takes in a strings `lst` and returns a list of strings as `-> specifies that the is a list of strings.\nThe third initializes an list that will be to store the output strings.\nThe fourth line starts `for` loop that iterates over each string input list\n fifth line `n` 0. variable will be used the number of odd elements the current `arr`. \nThe sixth line a generator to the number of odd elements in the current string The if the integer value each in the odd. The `sum` function adds the number of `True` values returned by the generator\nThe line appends string to the `res` list that describes the number odd elements the string `arr`. The string is constructed the `str` convert integer value of `n` a string and concatenating other strings.\n\nThe eighth line ends the `for` loop.\n\nninth line returns the `res` list contains the output strings.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (odd_count lst)\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (even_odd_palindrome n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_palindrome))\n    (check-within (candidate 123) (list 8 13) 0.001)\n    (check-within (candidate 12) (list 4 6) 0.001)\n    (check-within (candidate 3) (list 1 2) 0.001)\n    (check-within (candidate 63) (list 6 8) 0.001)\n    (check-within (candidate 25) (list 5 6) 0.001)\n    (check-within (candidate 19) (list 4 6) 0.001)\n    (check-within (candidate 9) (list 4 5) 0.001)\n    (check-within (candidate 1) (list 0 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n### Explanation\n\nThe code an implementation of a function that takes integer and returns tuple of two The first integer is count palindromes 1 and inclusive, and the second integer is of odd palindromes between 1 and `n` inclusive. \nstarts another `is_palindrome` takes an and returns a boolean whether the integer is a palindrome or not. A palindrome a number that reads the same backward as The function converts the to string and checks the string is equal its\n\nThe then initializes `even_palindrome_count` and `odd_palindrome_count` to\n\nThe function then loops through the of integers from 1 to `n` inclusive a `for` loop. each integer function checks it is odd even the modulo operator `%`. If `i` is odd and a palindrome, `odd_palindrome_count` variable is incremented by 1. If is even and a palindrome, `even_palindrome_count` variable is incremented by 1.\n Finally, function returns tuple of the counts.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (even_odd_palindrome n)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (prime_length string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n    (check-within (candidate \"Hello\") #t 0.001)\n    (check-within (candidate \"abcdcba\") #t 0.001)\n    (check-within (candidate \"kittens\") #t 0.001)\n    (check-within (candidate \"orange\") #f 0.001)\n    (check-within (candidate \"wow\") #t 0.001)\n    (check-within (candidate \"world\") #t 0.001)\n    (check-within (candidate \"MadaM\") #t 0.001)\n    (check-within (candidate \"Wow\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"HI\") #t 0.001)\n    (check-within (candidate \"go\") #t 0.001)\n    (check-within (candidate \"gogo\") #f 0.001)\n    (check-within (candidate \"aaaaaaaaaaaaaaa\") #f 0.001)\n    (check-within (candidate \"Madam\") #t 0.001)\n    (check-within (candidate \"M\") #f 0.001)\n    (check-within (candidate \"0\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef prime_length(string: str) -> bool:\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n### Explanation\n\ncode is an implementation of  a that checks if length of a string is a prime number.\n\n```python\ndef str) -> bool:\n```\nfunction is called `prime_length` and accepts input. The specifies function returns a boolean\n\n\nl len(string)\nThe length of the input string is stored a variable  ```python if l == l == 1:\n  return False\n```\nIf the length of the string 0 or 1, the function returns `False` because and 1 are not prime numbers. \n```python\nfor i in range(2, l):\n    if i ==\n     return False\n```\nThe function checks if the of the string is divisible by any number between 2 the length string. If it the returns because is only by 1 itself.\n\n```python\nTrue ```\nlength of the is not divisible any number between 2 and of the string, function returns the length of the string is a number.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prime_length string)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (change_base x base)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n    (check-within (candidate 8 3) \"22\" 0.001)\n    (check-within (candidate 9 3) \"100\" 0.001)\n    (check-within (candidate 234 2) \"11101010\" 0.001)\n    (check-within (candidate 16 2) \"10000\" 0.001)\n    (check-within (candidate 8 2) \"1000\" 0.001)\n    (check-within (candidate 7 2) \"111\" 0.001)\n    (check-within (candidate 2 3) \"2\" 0.001)\n    (check-within (candidate 3 4) \"3\" 0.001)\n    (check-within (candidate 4 5) \"4\" 0.001)\n    (check-within (candidate 5 6) \"5\" 0.001)\n    (check-within (candidate 6 7) \"6\" 0.001)\n    (check-within (candidate 7 8) \"7\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef change_base(x: int, base: int) -> str:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n### Explanation\n\ncode is an implementation  a function called `change_base` that two arguments, and The function returns a string represents the number `x` in given `base`. \nThe function initializes an empty string `ret` that will be used to the \n\nThe function then enters a while loop that will long as `x` is greater than 0. \nInside the the function calculates the `x` divided by `base` using modulus operator `%`. This remainder is converted to a string and concatenated with current value `ret`. \n\nThe function then of by performing integer division `x //= This is to `x = x in Python 3.   loop continues until `x` is no greater than\n the returns the resulting string `ret` which represents `x` in given `base`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (change_base x base)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (remove_vowels text)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"abcdef\nghijklm\") \"bcdf\nghjklm\" 0.001)\n    (check-within (candidate \"fedcba\") \"fdcb\" 0.001)\n    (check-within (candidate \"eeeee\") \"\" 0.001)\n    (check-within (candidate \"acBAA\") \"cB\" 0.001)\n    (check-within (candidate \"EcBOO\") \"cB\" 0.001)\n    (check-within (candidate \"ybcd\") \"ybcd\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef remove_vowels(text: str) -> str:\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\n### Explanation\n\ncode is an implementation a function removes vowels from a string. \n\ndef remove_vowels(text: str) -> str:\nThe is called `remove_vowels` and takes a string argument `text` and returns string. \n ```python\n\"\".join([s for s in if s.lower() not [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n```\nThe returns is the result of joining all the the string that are vowels. The `join` method called on an string `\"\"` the passed to it is a that iterates over each character `s` in the input `text` and adds it the list if is not a vowel. list of characters is then joined together string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (remove_vowels text)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (below_zero operations)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 2 -3 1 2 -3)) #f 0.001)\n    (check-within (candidate (list 1 2 -4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t 0.001)\n    (check-within (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\n### Explanation\n\nThe code is an implementation of a function called `below_zero` that takes a of integers called `operations` returns boolean. function returns if the sum of the integers the is negative at any point during the iteration, otherwise it returns False.\n\nstarts initializing variable `balance` to 0. \n\nIt then through the of integers a loop. For integer in the list, it adds it to the `balance` variable. \n If `balance` variable is less 0 any point the iteration, function returns True. \nthe the variable ever being than 0, the function returns False. \n\nThe module is imported at the beginning the code to allow for type annotations. The `List` type used indicate parameter is a The `-> syntax is to indicate that the function returns boolean value.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (below_zero operations)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (below_threshold l t)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_threshold))\n    (check-within (candidate (list 1 2 4 10) 100) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 5) #f 0.001)\n    (check-within (candidate (list 1 20 4 10) 21) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 22) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 11) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 10) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n### Explanation\n\nThe is an implementation of  a `below_threshold` of integers `l` and an integer `t` as input returns all elements are less than `t`, and otherwise.\n\n\nfrom typing import List\n\nThis line imports the `List` type from the `typing` module. The `List` type is used to specify that the input `l` is list of\n ```python\ndef below_threshold(l: List[int], t: ->\nThis line defines the function `below_threshold` that takes input parameters:\n`l`: a list of integers\n- `t`: an integer\nThe `-> bool` that the function a boolean\n\n\n    e in l:\n\nline starts a loop that iterates element `e` in the input list\n ```python\n     if e >= t:\n         return\n```\nThis line if the current `e` is greater than or threshold `t`. it is, function returns `False`, indicating that not all elements in the list are below the threshold.\n\n\n  True ```\nThis line is reached if the loop completes indicating that all elements in the list are below threshold.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (below_threshold l t)\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (int_to_mini_roman number)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n    (check-within (candidate 19) \"xix\" 0.001)\n    (check-within (candidate 152) \"clii\" 0.001)\n    (check-within (candidate 251) \"ccli\" 0.001)\n    (check-within (candidate 426) \"cdxxvi\" 0.001)\n    (check-within (candidate 500) \"d\" 0.001)\n    (check-within (candidate 1) \"i\" 0.001)\n    (check-within (candidate 4) \"iv\" 0.001)\n    (check-within (candidate 43) \"xliii\" 0.001)\n    (check-within (candidate 90) \"xc\" 0.001)\n    (check-within (candidate 94) \"xciv\" 0.001)\n    (check-within (candidate 532) \"dxxxii\" 0.001)\n    (check-within (candidate 900) \"cm\" 0.001)\n    (check-within (candidate 994) \"cmxciv\" 0.001)\n    (check-within (candidate 1000) \"m\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef int_to_mini_roman(number: int) -> str:\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n### Explanation\n\nThe code an implementation of  a function that converts an integer a numeral. The function takes an integer as input and a string. \n\n1. `def int_to_mini_roman(number: int) -> str:` - This line a function called `int_to_mini_roman` which takes an as input a string. `-> str` part line indicates the function returns string.\n\n2. [1, 9, 10, 50, 90, 100, 500, 1000]` - This line defines list called `num` which contains the numbers that correspond the roman numerals. \n`sym = [\"I\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"D\", \"CM\", - This defines a list which contains mini numerals.\n\n4. `i = - This line a variable `i` to 12. This variable will be used to iterate `num` and `sym` lists.\n\n= ''` - This line an empty string called This string will be mini roman numeral.\n\n6. number:` - This starts a while loop that will continue as is not equal 0.\n = number // num[i]` - This line calculates integer division of `number` by at index `i` the `num` list. The result a variable called `div`.\n\n8. `number %= num[i]` - This line calculates the modulus of `number` by the at index `i` of `num` list. The result is back in `number`.\n\n9. div:` - This starts a while loop will continue long as `div` to 0.\n\n10. `res += - This line appends the roman numeral at index `i` of the `sym` list the string.  11. `div -= 1` - the value `div` by\n-= 1` This line decrements the value of by\n\n13. `return - This line returns the string in This because mini are written lowercase.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (int_to_mini_roman number)\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (double_the_difference lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 5.0 4.0)) 25 0.001)\n    (check-within (candidate (list 0.1 0.2 0.3)) 0 0.001)\n    (check-within (candidate (list -10.0 -20.0 -30.0)) 0 0.001)\n    (check-within (candidate (list -1.0 -2.0 8.0)) 0 0.001)\n    (check-within (candidate (list 0.2 3.0 5.0)) 34 0.001)\n    (check-within (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef double_the_difference(lst: List[float]) -> int:\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n### Explanation\n\nThe code an implementation of  `double_the_difference` that takes a list of point numbers returns sum of the of the numbers that are odd and no decimal\n\n```python\nfrom List\n```\nThis line imports the class from the module. This used to the type of input parameter the function.\n```python\ndef double_the_difference(lst: -> int:\nThis line defines the `double_the_difference` function that takes a of floating point as input and returns The function defined using the `def` keyword by the name and the input parameter in The int` is used to the type of the function.\n ```python\nreturn sum([i**2 for i lst if > 0 i%2!=0 and \".\" in str(i)])\n```\nThis line returns the sum the of in the input list that are odd have decimal The `sum` function is used add up the squares that meet the specified The `[]` syntax is used to create comprehension generates a list of squares the numbers that meet specified The `for` keyword used to iterate over the input list. The `if` is to filter out that do meet the conditions. The `i**2` syntax used to square the number. The `and` is used the The `not in` syntax is used to check if point is not the string representation of the number.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (double_the_difference lst)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (words_in_sentence sentence)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n    (check-within (candidate \"This is a test\") \"is\" 0.001)\n    (check-within (candidate \"lets go for swimming\") \"go for\" 0.001)\n    (check-within (candidate \"there is no place available here\") \"there is no place\" 0.001)\n    (check-within (candidate \"Hi I am Hussein\") \"Hi am Hussein\" 0.001)\n    (check-within (candidate \"go for it\") \"go for it\" 0.001)\n    (check-within (candidate \"here\") \"\" 0.001)\n    (check-within (candidate \"here is\") \"is\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef words_in_sentence(sentence: str) -> str:\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n### Explanation\n\nThe code is an implementation of  a called `words_in_sentence` that takes in string `sentence` and returns a string. The function a string that contains all the in the input sentence that either prime one letter. \n\nis a line by line explanation of\n```python def str) ->\n``` This defines `words_in_sentence` which takes in a string called and a string. `-> str` part of the line return type of\n\n```python\nnew_lst = []\n\nline initializes an empty list called `new_lst`.\n\n```python for word in sentence.split():\n```\nThis line starts a for that iterates over each in the sentence. The method to split the sentence into a of \n```python\nflg = 0\n```\nvariable `flg` variable to keep of whether a prime or not. \n```python\nif len(word) == 1:\n  flg = 1\n``` This line checks if the word is equal to 1. If it is, then the `flg` variable is set to This is a word with one \n\ni range(2, len(word)):\n  if len(word)%i 0:\n     =\nThis line starts another for loop iterates over each from 2 to the of the current word. For each it if the is divisible number. If it is, then the `flg` variable to This is because a word that is divisible by any number other 1 and itself is prime.\n\n```python\nif flg == or len(word) == 2:\n    new_lst.append(word)\n```\nThis line checks `flg` variable is equal to 0 or if the length of the current word equal to 2. If these conditions is true, then the current word is added the `new_lst` list.\n\n```python\nreturn \"\n```\nline returns string that contains all the words in `new_lst` list, by spaces. string is the output of function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (words_in_sentence sentence)\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (same_chars s0 s1)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate same_chars))\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabc\") #t 0.001)\n    (check-within (candidate \"dddddddabc\" \"abcd\") #t 0.001)\n    (check-within (candidate \"eabcd\" \"dddddddabc\") #f 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabcf\") #f 0.001)\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f 0.001)\n    (check-within (candidate \"aabb\" \"aaccc\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n\n### Explanation\n\nThe code is an implementation of  called `same_chars` that takes strings `s0` and `s1` input and a boolean value. The returns `True` if the two strings contain the same characters, `False`\n\nfunction uses the `set` data type to compare the in the strings. A set is an unordered collection of unique elements. When we string to `set` it a set of the unique the string. \n The compares the sets the using the `==` operator. the equal, it that the strings contain the same characters, function returns `True`. Otherwise, it\n\n### Racket version\n\n#lang racket\n\n;; \n(define (same_chars s0 s1)\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (compare_one a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare_one))\n    (check-within (candidate 1 2) 2 0.001)\n    (check-within (candidate 1 2.5) 2.5 0.001)\n    (check-within (candidate 2 3) 3 0.001)\n    (check-within (candidate 5 6) 6 0.001)\n    (check-within (candidate 1 \"2,3\") \"2,3\" 0.001)\n    (check-within (candidate \"5,1\" \"6\") \"6\" 0.001)\n    (check-within (candidate \"1\" \"2\") \"2\" 0.001)\n    (check-within (candidate \"1\" 1) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b\n\n### Explanation\n\nThe code is an implementation of a that compares two The function called `compare_one` and takes two arguments, `b`. The returns either or on which one is greater. If the two values are the returns `None`.\n The function `typing` module specify the types the arguments return value. The `Union` type is to that the argument can be any of the specified types. In this the be of type `float`, or the return be of any of these types as well `None`.\n\nThe first two of the function create temporary variables `temp_b` and assign them the values of `a` and `b`, respectively. This is done so the original values and `b` are modified.\n The two and `temp_b` are type `str`. If they are, the method is used to any commas in the string with periods. This is because the `float` function a as the not a comma.\n\nThe next converts `temp_a` and `temp_b` to `float` values and compares them. If they are equal, function returns `None`. function `a` if is greater `temp_b`, `b` otherwise.\n\n\n### Racket version\n\n#lang racket\n\n;; \n(define (compare_one a b)\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (max_fill grid capacity)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n    (check-within (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6 0.001)\n    (check-within (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nimport math\nfrom typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n### Explanation\n\nis an implementation of bin packing algorithm. function `max_fill` two arguments, a 2D list of integers `grid` and an integer The function returns maximum number of required to all elements the grid.\n\nThe function first imports `math` module and the `List` from the `typing` module.\n\n```python math\nfrom typing import List\n``` \nThe `max_fill` function takes two 2D of integers `grid` and an `capacity`. The returns the maximum number of bins required to fill elements the grid. \n```python\ndef max_fill(grid: capacity: -> int:\n```\n\nThe function uses a list comprehension to calculate number of bins required fill each of the grid. The function calculate the of elements each and `math.ceil()` is to round the of the by `capacity` argument.\n\n```python\nreturn sum([math.ceil(sum(arr)/capacity) for arr in grid])\n```\n\nThe `sum()` function is used to calculate number elements in row of the grid, is used to round up result the division argument.\nThe returns the sum of the number of bins fill row the grid. This is maximum number bins required to all the in the grid.\n\n```python\nsum([math.ceil(sum(arr)/capacity) for in grid])\n\n### Racket version\n\n#lang racket\n\n;; \n(define (max_fill grid capacity)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (solution lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-within (candidate (list 5 8 7 1)) 12 0.001)\n    (check-within (candidate (list 3 3 3 3 3)) 9 0.001)\n    (check-within (candidate (list 30 13 24 321)) 0 0.001)\n    (check-within (candidate (list 5 9)) 5 0.001)\n    (check-within (candidate (list 2 4 8)) 0 0.001)\n    (check-within (candidate (list 30 13 23 32)) 23 0.001)\n    (check-within (candidate (list 3 13 2 9)) 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\n### Explanation\n\nThe code an implementation of  a function that in a list of returns the sum of all odd numbers indices in the\n ```python\nfrom typing import\n``` This line imports the class from the It is used to specify the of the input parameter of function.\n\n```python\nsolution(lst: List[int]) int: ```\nline the function `solution` takes a list of an integer. The int` specifies the return type of the function. \n\nreturn sum([x idx, x in if idx%2==0 x%2==1]) ```\nThis line returns the sum of numbers even indices in the list.\n\n`enumerate` function is used the index value of each the list.   The list comprehension `[x idx, x enumerate(lst) if and x%2==1]` creates a new list odd numbers even indices in the list. \n\nThe `sum` function is used to add up all elements in the new list and return result.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solution lst)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (total_match lst1 lst2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate total_match))\n    (check-within (candidate (list ) (list )) (list ) 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\")) (list \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\")) (list \"4\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"Hi\")) (list \"hI\" \"Hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\")) (list \"hI\" \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hii\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list ) (list \"this\")) (list ) 0.001)\n    (check-within (candidate (list \"this\") (list )) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n### Explanation\n\nThe code is of  `total_match` function that takes two lists of strings as and returns the list with total length of strings less than or other  \n```python\nfrom typing import List\n```\nImporting List from the is a that a list of a specific type.\n\ndef total_match(lst1: lst2: List[str]) ->\nDeclaring a function `total_match` takes two `lst1` and of List of strings and a List of strings. \n```python   = 0\n    for st in lst1:         l1 +=\n```\nDeclaring a variable `l1` initializing it to Then iterating through the elements of `lst1` using a for adding the length each `l1`.\n\n```python\n  l2 =     st in\n        l2 += len(st)\n```\nDeclaring a variable `l2` and initializing it to through the elements of `lst2` a for loop and adding the length of each string to\n\n```python   l1 l2:        return lst1\n   else:\n    return\n\nComparing the values of and If `l1` is or equal then return `lst1`. Otherwise, `lst2`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (total_match lst1 lst2)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (vowels_count s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n    (check-within (candidate \"abcde\") 2 0.001)\n    (check-within (candidate \"Alone\") 3 0.001)\n    (check-within (candidate \"key\") 2 0.001)\n    (check-within (candidate \"bye\") 1 0.001)\n    (check-within (candidate \"keY\") 2 0.001)\n    (check-within (candidate \"bYe\") 1 0.001)\n    (check-within (candidate \"ACEDY\") 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef vowels_count(s: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n### Explanation\n\nThe code is an implementation of  a `vowels_count` that takes string input and returns the vowels the string.  \n```python\ndef vowels_count(s: str) -> int: ```\nstarts the keyword, by the function name `vowels_count`. The function a single argument `str` and returns an integer. \n ```python\nvowels = \"aeiouAEIOU\"\n```\nThe next creates a string variable `vowels` contains all vowels in the English language, both uppercase\n ```python\nn_vowels sum(c in vowels for c\n```\nnext a generator expression to count the number vowels the input string `s`. The function used to add up the number values the generator expression. The generator expression checks if in string `s` a vowel by checking the `vowels` string. \n\n\nif s[-1] 'y' or s[-1] 'Y':\n    n_vowels += 1 ```\nnext line checks if the character the input string `s` is either 'Y'. If it is, then it to a and the `n_vowels` count is incremented by \n ```python\nreturn n_vowels\n```\nThe final line of the function returns the total count of vowels in the input string `s`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (vowels_count s)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (factorize n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n    (check-within (candidate 2) (list 2) 0.001)\n    (check-within (candidate 4) (list 2 2) 0.001)\n    (check-within (candidate 8) (list 2 2 2) 0.001)\n    (check-within (candidate 57) (list 3 19) 0.001)\n    (check-within (candidate 3249) (list 3 3 19 19) 0.001)\n    (check-within (candidate 185193) (list 3 3 3 19 19 19) 0.001)\n    (check-within (candidate 20577) (list 3 19 19 19) 0.001)\n    (check-within (candidate 18) (list 2 3 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n### Explanation\n\nThe code is an implementation of  a function takes an and a list prime factors.\n\n```python from import List\n``` The module is imported to allow use of type hints. `List` a type hint for a list integers.\n\nfactorize(n: -> ``` `factorize` function takes an integer as input and returns a list of integers. The List[int]` indicates the function a list of integers.\n\nimport\n```\nThe `math` is imported to allow of the `sqrt` function.\n\n```python\nfact = []\n```\nAn empty list is created to store prime factors `n`. \n```python\ni = 2\nThe variable initialized to 2, which is the smallest prime\n\n```python\ni int(math.sqrt(n) 1):\n```\n`while` loop continues as as `i` than or to the root of `n` plus 1. The `int` function is used to convert the result + 1` an integer.\n\n```python\nif n i == 0: ``` If `n` is divisible `i`, then `i` is a prime factor `n`.\n\n\n\nn //= i ```\nfactor added to the `fact` list, and is divided by `i` to reduce it next iteration of loop.\n\n```python\nelse:\ni += 1\n```\nIf `n` is not by `i`, is incremented by 1 the number. \n```python\nif n > 1:\n   fact.append(n)\n```\nIf is greater after the loop has then it is a prime factor of itself added to the `fact` list.\n\n```python return fact\n``` The `fact` is returned as the output of the\n\n### Racket version\n\n#lang racket\n\n;; \n(define (factorize n)\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (count_nums arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list -1 -2 0)) 0 0.001)\n    (check-within (candidate (list 1 1 2 -2 3 4 5)) 6 0.001)\n    (check-within (candidate (list 1 6 9 -6 0 1 5)) 5 0.001)\n    (check-within (candidate (list 1 100 98 -7 1 -1)) 4 0.001)\n    (check-within (candidate (list 12 23 34 -45 -56 0)) 5 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n### Explanation\n\nThe is an implementation of  `count_nums` function a list of as input and returns count of integers digits sum to odd number.\n\n```python\nfrom typing import List ``` Importing List from module.\n\n\ncount_nums(arr: List[int]) ->\n\na function `count_nums` takes a list of integers as input returns integer.\n\n```python\n   def digits_sum(n): ``` nested function `digits_sum` that takes an integer as returns the sum of its digits.\n ```python     neg\n     if n < n, neg -1 n, ```\ninteger is negative, is converted to its absolute value a flag `neg` set -1.\n ```python\n      n = [int(i) i str(n)]\n```\nThe integer is converted a and each is converted to an integer and stored in a list.\n      n[0] n[0] * neg\n``` If the input integer was negative, the first of the list is multiplied by -1 to make it\n\n```python\n      return sum(n)\n```\nThe sum of the list is \n```python     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n``` The input list is iterated over and each integer, its digits sum is calculated function. The resulting list sums is filtered to only include positive and the length the list is returned.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_nums arr)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (max_element l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n    (check-within (candidate (list 1 2 3)) 3 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef max_element(l: List[int]) -> int:\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n### Explanation\n\nThe is an implementation  a `max_element` that takes a list of and the maximum element in the\n```python\nfrom import\n```\nline imports the List the typing module. List type is a generic that represents a of elements of specific \ndef List[int]) -> int: ```\nThis line defines function that a list of integers as argument and an integer. signature specifies the of input and output parameters.\n\n```python\nm = l[0]\n``` This line initializes the `m` the of the input list `l`.\n\n```python\nfor e in l:\n  if > m:\n      m = e ```\nThis block iterates the elements of the list and updates the value `m` to the maximum element in list.\n```python\nreturn m\n```\nThis line returns the maximum element in the input list `l`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (max_element l)\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (bf planet1 planet2)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bf))\n    (check-within (candidate \"Jupiter\" \"Neptune\") (list \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Mercury\") (list \"Venus\") 0.001)\n    (check-within (candidate \"Mercury\" \"Uranus\") (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\") 0.001)\n    (check-within (candidate \"Neptune\" \"Venus\") (list \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Mars\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Jupiter\" \"Makemake\") (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n### Explanation\n\nis implementation of 2 functions, and `bf2`. takes 2 `planet1` and both of type `str`, a tuple of `bf2` takes no and returns a \nThe `typing` module is imported to allow type hints be is imported to the return type of `bf` to be specified. \nThe `planet_names` variable is a tuple strings containing the the planets in the solar system. \n\nThe `if` statement checks `planet1` and `planet2` are valid planet names not the of these conditions not empty is\n\nThe `planet1_index` and `planet2_index` variables are set to the index `planet1` and `planet2` in the `planet_names`\n\nThe second `if` checks if before `planet2` in the tuple. If does, a slice of the `planet_names` is returned, all the between and `planet2`, excluding `planet1` and If `planet2` before `planet1`, the slice is returned, but with coming `planet1`.\n\nis not used in code can be ignored.<|im_end|>\n\n### Racket version\n\n#lang racket\n\n;; \n(define (bf planet1 planet2)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (simplify x n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/6\" \"2/1\") #f 0.001)\n    (check-within (candidate \"5/1\" \"3/1\") #t 0.001)\n    (check-within (candidate \"7/10\" \"10/2\") #f 0.001)\n    (check-within (candidate \"2/10\" \"50/10\") #t 0.001)\n    (check-within (candidate \"7/2\" \"4/2\") #t 0.001)\n    (check-within (candidate \"11/6\" \"6/1\") #t 0.001)\n    (check-within (candidate \"2/3\" \"5/2\") #f 0.001)\n    (check-within (candidate \"5/2\" \"3/5\") #f 0.001)\n    (check-within (candidate \"2/4\" \"8/4\") #t 0.001)\n    (check-within (candidate \"2/4\" \"4/2\") #t 0.001)\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/5\" \"1/5\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef simplify(x: str, n: str) -> bool:\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\n### Explanation\n\nThe implementation of  a function called `simplify` in two strings `x` and returns a\n\nThe function first splits the two strings and `n` parts each, using the `/` as the separator. The first part `x` assigned to the variable `a`, the second to the variable `b`. Similarly, first part of is assigned to the variable and part the variable `d`. \nThe then calculates the denominator the fraction represented `x` The numerator is calculated multiplying `a` and `c` together, the is calculated multiplying `b` and `d` together.\n\nfunction then checks if the fraction represented by `x` and `n` is a simplified It does by by denominator, and checking if the result is equal to integer value of the result of the division. If is, then the fraction is simplified, the returns `True`. Otherwise, the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (simplify x n)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (digits n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n    (check-within (candidate 5) 5 0.001)\n    (check-within (candidate 54) 5 0.001)\n    (check-within (candidate 120) 1 0.001)\n    (check-within (candidate 5014) 5 0.001)\n    (check-within (candidate 98765) 315 0.001)\n    (check-within (candidate 5576543) 2625 0.001)\n    (check-within (candidate 2468) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef digits(n: int) -> int:\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n### Explanation\n\nThe code implementation of  a function `digits` that takes an integer `n` as input and returns an as The function returns product of all odd digits in `n`. If there no digits `n`, the 0.\n\n```python def int) int:\n``` `digits` takes an integer `n` as input and returns an integer output.\n\n\nproduct = 1 = 0\n`product` and `odd_count` initialized to 1 0 respectively. `product` is used to store the product all odd `n`. `odd_count` is count number of odd digits in\n\n```python\nfor in str(n):\nThe `for` loop iterates each digit in the string of `n`.\n```python\nint_digit = int(digit)\n```\nvariable `int_digit` is integer value of `digit`.\n\n```python if 1:     product= product*int_digit\n\n``` If is odd, the of and is stored in `product`, and `odd_count` incremented by\n\n```python\nif odd_count ==0:\n   return\nelse:\n    return product\n```\nIf `odd_count` is the function returns 0. Otherwise, the function returns `product`.<|im_end|>\n\n### Racket version\n\n#lang racket\n\n;; \n(define (digits n)\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (encrypt s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n    (check-within (candidate \"hi\") \"lm\" 0.001)\n    (check-within (candidate \"asdfghjkl\") \"ewhjklnop\" 0.001)\n    (check-within (candidate \"gf\") \"kj\" 0.001)\n    (check-within (candidate \"et\") \"ix\" 0.001)\n    (check-within (candidate \"faewfawefaewg\") \"jeiajeaijeiak\" 0.001)\n    (check-within (candidate \"hellomyfriend\") \"lippsqcjvmirh\" 0.001)\n    (check-within (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" 0.001)\n    (check-within (candidate \"a\") \"e\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef encrypt(s: str) -> str:\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\n### Explanation\n\nThe an implementation of  cipher, a simple technique that shifts the letters the alphabet number of places. \n\nThe function `encrypt` takes a string `s` as input and an string. \n\nvariable `d` a containing all the letters of lowercase. \nvariable `out` an empty string that will hold the encrypted string.\n The for loop over each character `c` in string `s`. \n if statement checks if the `c` is a in the alphabet. If it is, the is by shifting two places to the right. The expression `(d.index(c)+2*2) 26` calculates the the encrypted character alphabet string `d`. \n\nstatement is if character `c` is not a letter in In this case, the character is added to the string `out` as is.\n\nthe function returns the encrypted string `out`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (encrypt s)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_simple_power x n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-within (candidate 16 2) #t 0.001)\n    (check-within (candidate 143214 16) #f 0.001)\n    (check-within (candidate 4 2) #t 0.001)\n    (check-within (candidate 9 3) #t 0.001)\n    (check-within (candidate 16 4) #t 0.001)\n    (check-within (candidate 24 2) #f 0.001)\n    (check-within (candidate 128 4) #f 0.001)\n    (check-within (candidate 12 6) #f 0.001)\n    (check-within (candidate 1 1) #t 0.001)\n    (check-within (candidate 1 12) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x)\n\n### Explanation\n\nThe is an implementation of a function `is_simple_power` that two `x` and `n` and boolean The function returns `True` if `x` is a power of otherwise.\n```python\ndef is_simple_power(x: int) -> bool:\n function definition starts with the `def` keyword followed by the name `is_simple_power`. The function takes two integer arguments `x` and `n` and returns a boolean value. `-> bool` part function definition specifies the return type function.  ```python\n   (n == 1):\n      return (x ==\n```\n\nThe first the function checks if is equal to `1`. If `n` is equal to `1`, returns `True` if also equal `1`, `False` This is because any number raised to the power of equal to itself.\n ```python\n  power = 1\n   while (power < x): \n       power = power * n     (power ==\n```\n\nIf `n` is not equal to `1`, the a variable `power` to `1`. The function then enters a `while` loop that execute as long as less than `x`. each iteration loop, `power` is multiplied by `n`. loop stops is greater than or equal `x`.\n\nAfter loop, the function checks if `power` is to `x`. `power` is to function indicating that `x` is power of `n`. If `power` is to function returns `False`, that `x` is not a power of `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_simple_power x n)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fib4 n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 28 0.001)\n    (check-within (candidate 10) 104 0.001)\n    (check-within (candidate 12) 386 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef fib4(n: int) -> int:\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n### Explanation\n\nThe code is an implementation of Fibonacci \n\n1. `def int) -> int:` defines a function takes an integer `n` as input and an integer as\n2. `results 0, 2, list with four elements: 0, 0, 2, and\n3. n < 4: return results[n]` checks if the input `n` is less 4. If it is, the function returns the `n`th element the\n4. `for _ range(4, n + 1):` loops through the range from to (inclusive).\n5. `results.append(results[-1] + results[-2] + adds a new element to the of the `results` is the sum last elements of the list.\n`results.pop(0)` removes the the\n`return returns the element the `results` list, which is the `n`th element of the 4-step Fibonacci\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fib4 n)\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (check_if_last_char_is_a_letter txt)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_if_last_char_is_a_letter))\n    (check-within (candidate \"apple\") #f 0.001)\n    (check-within (candidate \"apple pi e\") #t 0.001)\n    (check-within (candidate \"eeeee\") #f 0.001)\n    (check-within (candidate \"A\") #t 0.001)\n    (check-within (candidate \"Pumpkin pie \") #f 0.001)\n    (check-within (candidate \"Pumpkin pie 1\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"eeeee e \") #f 0.001)\n    (check-within (candidate \"apple pie\") #f 0.001)\n    (check-within (candidate \"apple pi e \") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\n### Explanation\n\nThe code is an implementation  a function that checks if last character of a string is letter. \n\n1. function defined the name `check_if_last_char_is_a_letter` and takes in string argument `txt` and returns a boolean value. The variable defined and the of last word in string `txt`. done by splitting the string into a list of words the last using the index `-1`. 3. The function returns `True` if the length `check` is equal to `1` and value the lowercase version the is between `97` and This is done using the `ord()` function which returns value character. The lowercase letters `a` to `z` have values and If the condition is not met, the function `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (check_if_last_char_is_a_letter txt)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (string_sequence n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-within (candidate 0) \"0\" 0.001)\n    (check-within (candidate 3) \"0 1 2 3\" 0.001)\n    (check-within (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n\n### Explanation\n\nThe an implementation of  a called `string_sequence` that an integer `n` input and returns a string. string is a sequence of numbers 0 separated by a space.\n\nis in one of code. The `join` is on string a space as the separator. The argument to the `join` method is a list comprehension generates a The list comprehension generates list numbers 0 to `n` using `range` function. The `range` function generates a sequence of numbers from 0 `n` (inclusive). Each number the sequence is to a string using `str` function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (string_sequence n)\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (truncate_number number)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate truncate_number))\n    (check-within (candidate 3.5) 0.5 0.001)\n    (check-within (candidate 1.25) 0.25 0.001)\n    (check-within (candidate 123.0) 0.0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef truncate_number(number: float) -> float:\n    return number % 1.0\n\n### Explanation\n\nThe an implementation  a function that takes a float as an argument and returns the part of the \n\nfunction is defined with the `def` keyword and takes a single argument `number` is of type `-> float` is hint that indicates that the function returns a float.\n\nThe function consists a single line that uses the modulo operator `%` to get the of the the number by 1.0. This effectively truncates the integer the float and the part.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (truncate_number number)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (unique l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-within (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n\n### Explanation\n\nThe code is an implementation of  a function that takes list of integers and returns list of unique integers in order. \n\nThe function is defined with name and takes a integers `l` an The a \n\nThe `List` module from the library is imported enable type hinting. \nThe `sorted` function is to sort the of integers in ascending order. \n\n`set` function is used duplicates from list of integers. `list` function is to convert the back a list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (unique l)\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (filter_by_prefix strings prefix)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n\n### Explanation\n\nThe code is an implementation of  a function called takes in arguments, a of strings called `strings` and a called `prefix`. The function list of that with the `prefix` argument.\n\nThe first the code imports the class `typing` This used to specify the type of `strings` and the return type the function.\n\nline defines the `filter_by_prefix` which takes in two `strings` and `prefix`. The function returns list comprehension that iterates the `strings` list and only elements that with the `prefix` argument.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (filter_by_prefix strings prefix)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_palindrome text)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_palindrome))\n    (check-within (candidate \"\") #t 0.001)\n    (check-within (candidate \"aba\") #t 0.001)\n    (check-within (candidate \"aaaaa\") #t 0.001)\n    (check-within (candidate \"zbcd\") #f 0.001)\n    (check-within (candidate \"xywyx\") #t 0.001)\n    (check-within (candidate \"xywyz\") #f 0.001)\n    (check-within (candidate \"xywzx\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef is_palindrome(text: str) -> bool:\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\n### Explanation\n\nThe is implementation of  a function that checks if given string is a palindrome. A palindrome word, phrase, or other sequence of characters which reads the same backward as\n\nfunction `is_palindrome` takes a string `text` as and a value. \n\nThe first of the function definition specifies the type of the argument `text` as a string and the return type of the function as boolean. \n\ndef str) ->\n```\n\nThe starts for over the indices the string `text`. The function creates a sequence numbers 0 the of string `text` minus 1. \n ```python\nfor in range(len(text)):\n\n\nInside for loop, the code checks the character at the current index is to at the index from the end of the string `text`. If the characters are equal, the function `False`, that the string is not palindrome.\n\ntext[i] != text[len(text) - 1 i]:\n return False\n``` \nIf the for loop completes returning `False`, returns `True`, indicating the string is a palindrome.\n\n```python\nreturn True ```\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_palindrome text)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (choose_num x y)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n    (check-within (candidate 12 15) 14 0.001)\n    (check-within (candidate 13 12) -1 0.001)\n    (check-within (candidate 33 12354) 12354 0.001)\n    (check-within (candidate 5234 5233) -1 0.001)\n    (check-within (candidate 6 29) 28 0.001)\n    (check-within (candidate 27 10) -1 0.001)\n    (check-within (candidate 7 7) -1 0.001)\n    (check-within (candidate 546 546) 546 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\n### Explanation\n\nThe code is implementation of  function `choose_num` that takes two `x` and `y` as and returns an integer.\nchecks if `x` than `y`. If it is, it returns `-1`.  If `x` is greater the function checks if `y` is even. If it it `y`.\n\nIf `y` is not even, the function checks if `x` is to `y`. If is, returns `-1`.\n\nIf `x` is equal to the function returns `y - 1`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (choose_num x y)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (add_elements arr k)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n    (check-within (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4 0.001)\n    (check-within (candidate (list 111 121 3 4000 5 6) 2) 0 0.001)\n    (check-within (candidate (list 11 21 3 90 5 6 7 8 9) 4) 125 0.001)\n    (check-within (candidate (list 111 21 3 4000 5 6 7 8 9) 4) 24 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\n### Explanation\n\ncode is  a that takes a list of and a number k as input and returns sum of first of that at most digits.\n\nline the List class from typing module. used to specify the type of the arr parameter in the function signature.\n\nThe line defines the function add_elements that takes parameters: and arr a list integers and k is an integer.\nThe third line uses a list comprehension sum first k elements the list have at most 2 digits. The comprehension iterates over the k elements of the list (arr[:k]) and out those that have more than digits <= 2). The elements are summed using the sum\n\n### Racket version\n\n#lang racket\n\n;; \n(define (add_elements arr k)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (remove_duplicates numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\n### Explanation\n\nThe code is an  a function called `remove_duplicates` that takes in a list integers a new list with all duplicates \n ```python from typing import List\n```\nThis line the List module from the typing package. The List is used define the type of the input and output the function.\n\n```python ->\n\nThis line defines the function which takes a list integers as returns a list of integers as The `List[int]` the type of input output.\n\n\n\n=\n```\nline imports the `collections` module and creates a `Counter` object `c` which counts the number of integer in input list. \n```python return [n for n in numbers if 1]\n```\nThis line returns a list of integers that contains the integers appear once the input list. The list comprehension n in numbers if c[n] <= iterates over integer `n` the input list `numbers` adds it to the list count in the `Counter` object `c` than or equal to\n\n### Racket version\n\n#lang racket\n\n;; \n(define (remove_duplicates numbers)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (parse_music music_string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_music))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"o o o o\") (list 4 4 4 4) 0.001)\n    (check-within (candidate \".| .| .| .|\") (list 1 1 1 1) 0.001)\n    (check-within (candidate \"o| o| .| .| o o o o\") (list 2 2 1 1 4 4 4 4) 0.001)\n    (check-within (candidate \"o| .| o| .| o o| o o|\") (list 2 1 2 1 4 2 4 2) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\n### Explanation\n\nThe code is an  `parse_music` function that takes a of music notes and returns list of integers.  \nThe takes argument `music_string` which is a string of music notes. The function returns list integers.\n The function by defining a that the music notes to their corresponding integer values. The of the dictionary the music notes and the values are the corresponding integer\n function then a comprehension that iterates over the music in `music_string` argument. list uses method to the `music_string` argument into a list of music `if is used to filter out strings in the list of notes.\n\neach music note in the list of music the list comprehension dictionary to map the music to its corresponding integer value. The resulting list of integer values returned by function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (parse_music music_string)\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (rescale_to_unit numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-within (candidate (list 2.0 49.9)) (list 0.0 1.0) 0.001)\n    (check-within (candidate (list 100.0 49.9)) (list 1.0 0.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0) 0.001)\n    (check-within (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n    (check-within (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n### Explanation\n\nimplementation of  a function called that takes list of point numbers and a new list of the same length, where each element is scaled to be between and \nfunction uses the `typing` specify input output of function. it the input is a list of the output also a list\n\nThe starts by finding the minimum and maximum values the input list using the `min` `max` functions. These values used to each element in the input list.\n function uses a list comprehension to create new where each element is rescaled to between 0 and 1. Specifically, subtracts the minimum value from each divides result by the difference between maximum and minimum values. This that the smallest value in the input list is mapped to 0 and largest value is to 1. \n\nthe returns the new list of rescaled values.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (rescale_to_unit numbers)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sum_product numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n    (check-within (candidate (list )) (list 0 1) 0.001)\n    (check-within (candidate (list 1 1 1)) (list 3 1) 0.001)\n    (check-within (candidate (list 100 0)) (list 100 0) 0.001)\n    (check-within (candidate (list 3 5 7)) (list 15 105) 0.001)\n    (check-within (candidate (list 10)) (list 10 10) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\n### Explanation\n\nThe code an implementation of function that a list of integers as and a tuple of two The integer is the sum of all the integers in the list and the integer product the integers in the\n\n```python\nfrom typing import Tuple\nThe `typing` module support for type hints. `List` and `Tuple` are types can be to specify types of the elements in a list or tuple respectively. \n```python def sum_product(numbers: List[int]) -> int]:\n```\nThis line function called that takes a single argument called `numbers`. argument expected of integers. The returns tuple two integers.\n\n```python\nsum_value 0\nprod_value =\n```\nThese lines initialize two variables `sum_value` and `prod_value` to 0 and 1 respectively. \n```python\nfor in numbers:\n  sum_value += n\n    prod_value *= n\n\nThis is loop over each element in the `numbers` each element, adds the element and multiplies element\n\n```python\nreturn sum_value, prod_value\nThis a tuple of two integers, `sum_value` and `prod_value`. tuple the sum and product all the in the\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_product numbers)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (words_string s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_string))\n    (check-within (candidate \"Hi, my name is John\") (list \"Hi\" \"my\" \"name\" \"is\" \"John\") 0.001)\n    (check-within (candidate \"One, two, three, four, five, six\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"Hi, my name\") (list \"Hi\" \"my\" \"name\") 0.001)\n    (check-within (candidate \"One,, two, three, four, five, six,\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"ahmed     , gamal\") (list \"ahmed\" \"gamal\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef words_string(s: str) -> List[str]:\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n### Explanation\n\nThe code an  a function takes string input and returns a list of the \n\n```python\ntyping import List\n\nThis line imports the class from the typing module. The List is a generic class that represents a elements of a \n\n\ndef str) -> List[str]: ```\nThis line defines the function `words_string` that takes a string `s` as and returns a list of The List[str]` syntax specifies return type of \n```python\n  not s:\n      return []\n```\nThis checks the input string is empty. If it is, function returns an\n ```python\n   = [] \n   for letter in s:\n      if ',':\n                else:           s_list.append(letter)\n``` block of code initializes an empty list `s_list` and iterates over each in the input string `s`. If the is a comma, it replaced with a space and added to the Otherwise, the the `s_list` as is.\n ```python   s_list\n  return s_list.split()\n``` of code all the characters in the `s_list` into a single string and then splits string into list of words using the default whitespace separator. resulting of words is returned as the output of the function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (words_string s)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_prime n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 101) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 13441) #t 0.001)\n    (check-within (candidate 61) #t 0.001)\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 1) #f 0.001)\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 17) #t 0.001)\n    (check-within (candidate 85) #f 0.001)\n    (check-within (candidate 77) #f 0.001)\n    (check-within (candidate 255379) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef is_prime(n:int) -> bool:\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\n### Explanation\n\nThe code is an implementation of a that checks whether a given is a prime number not. \n\ndef -> bool:\n``` The function called `is_prime` takes input and returns a boolean value.   ```python\n   n < 2:\n      False\n``` The first line checks the number is than 2. it it returns False 1 not a prime number and all prime numbers are greater 1.\n```python\n for k in range(2, n - 1):\n```\nnext line is a that iterates over a from 2 to n-1. The range function returns sequence of starting from the argument and at second argument (exclusive). \n\n```python\n      if n % k == 0:\n        return False\n```\nThe if statement inside loop checks if the input number is divisible by the number in the If then the function returns False a prime number is only divisible by 1 itself.\n\n```python     return True ``` If the function has not returned False by this point, the input number and the function returns True.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_prime n)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (right_angle_triangle a b c)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n    (check-within (candidate 3 4 5) #t 0.001)\n    (check-within (candidate 1 2 3) #f 0.001)\n    (check-within (candidate 10 6 8) #t 0.001)\n    (check-within (candidate 2 2 2) #f 0.001)\n    (check-within (candidate 7 24 25) #t 0.001)\n    (check-within (candidate 10 5 7) #f 0.001)\n    (check-within (candidate 5 12 13) #t 0.001)\n    (check-within (candidate 15 8 17) #t 0.001)\n    (check-within (candidate 48 55 73) #t 0.001)\n    (check-within (candidate 1 1 1) #f 0.001)\n    (check-within (candidate 2 2 10) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n### Explanation\n\ncode an of  a that takes 3 and returns a boolean value. The function is called `right_angle_triangle`.  \nThe function checks the 3 form a right A right angle triangle is a triangle where one of the is 90 degrees. \n The function checks the square of one sides of the triangle equal to sum of the squares of the other two sides. If this is true for any of the then the returns `True`, otherwise it\ntakes 3 integer arguments, `a`, `b`, and `c`, represent the \n\nfunction `True` if of following conditions met:\n\n- `a*a == b*b + c*c` - == a*a + c*c` - `c*c == a*a b*b`\n\nof the above conditions are the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (right_angle_triangle a b c)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (add lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate (list 4 88)) 88 0.001)\n    (check-within (candidate (list 4 5 6 7 2 122)) 122 0.001)\n    (check-within (candidate (list 4 0 6 7)) 0 0.001)\n    (check-within (candidate (list 4 4 6 8)) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n### Explanation\n\nThe is an implementation  a function `add` that takes list of integers input and returns the all even numbers indices the list.  - import List`: This line imports the class the typing module. The List class is to represent a list of elements a specific type.\n\n- `def add(lst: List[int]) -> line defines function called `add` that list of as and returns an integer. The function signature specifies the input list is of type and the output is type \n`return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])`: This line sum even numbers at odd indices input The expression inside `sum` function is a list comprehension that iterates over odd indices of input list and selects even The `range` function used to generate of odd from 1 and ending at the length list. The `if` statement filters out odd indices that do not contain even numbers. Finally, function adds up all even numbers selected by list comprehension and returns result.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (add lst)\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fix_spaces text)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n    (check-within (candidate \"Example\") \"Example\" 0.001)\n    (check-within (candidate \"Mudasir Hanif \") \"Mudasir_Hanif_\" 0.001)\n    (check-within (candidate \"Yellow Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\" 0.001)\n    (check-within (candidate \"Exa   mple\") \"Exa-mple\" 0.001)\n    (check-within (candidate \"   Exa 1 2 2 mple\") \"-Exa_1_2_2_mple\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef fix_spaces(text: str) -> str:\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n### Explanation\n\nThe code is an implementation of function which a string `text` as and returns string with replaced by and hyphens. The function is defined with a hint for input and output parameters.\n\ndef fix_spaces(text: str) ->\n\nThe initializes string `new_text` and two integer variables `i`, and to \n\n   new_text = \"\"\n    = 0    start, end = 0, 0\n```\n\nThe function then enters a while that through character in the input string `text`.\n ```python\n   len(text): ```\n If current character a space, `end` variable \n```python\n        text[i] == \" \":\n         end += 1 ```\n the current is not a space, the function checks if there are more than two spaces between the current and previous so, the function a before the current character. \n```python\n       else:\n        if end start 2:\n            new_text += \"-\"+text[i]\n\n\nIf are one or two spaces between current character and the previous character, the function adds underscores before the current\n\n\n        - start\n          new_text += - start)+text[i]\n```\nIf there are no between the and previous non-space the function simply adds the current character to the new string.\n\n         else:              new_text +=\n\n\n`start` and `end` variables are then to the current position the\n\n```python\n         start, = ```\n`i` variable then to to next in the string.\n```python\n        i+=1\n```\n\nloop has finished, the function checks there than at end of the string. If so, the function a to the end of the new string.\n```python\n    if end - start > 2:\n       ```\n If there are one or two spaces the of the string, the function adds underscores to the end of the string.\n\n    end - start > 0:\n       new_text +=\n```\n\nFinally, the function returns the string.\n\n```python\n   return new_text ```\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fix_spaces text)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (unique_digits x)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-within (candidate (list 15 33 1422 1)) (list 1 15 33) 0.001)\n    (check-within (candidate (list 152 323 1422 10)) (list ) 0.001)\n    (check-within (candidate (list 12345 2033 111 151)) (list 111 151) 0.001)\n    (check-within (candidate (list 135 103 31)) (list 31 135) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n### Explanation\n\nThe code is an of function that a list of integers returns list of integers that have only odd The function is called `unique_digits` takes a single argument `x` is a list integers. The returns a list of\n\nThe first the imports type from the `typing` This is used to specify of input output the\n\n```python\nfrom typing import List ```\n\nnext line function `unique_digits` which takes a argument `x` of type and returns list of The function is defined using the\n```python\ndef unique_digits(x: ->\n\n\nThe next initializes an list called `odd_digit_elements`. This list to store the integers that only odd digits. \n```python\n    odd_digit_elements []\n```\n\nThe next line starts a for loop that iterates over elements of `x`. The loop is\n\n\n  for i in x: ```\n The next line checks if all digits of the current integer `i` are odd. is done converting the to string and checking if each character the string is odd. all the digits are odd, integer is appended to the `odd_digit_elements` list.\n\n\n     all % 2 == 1 for c           odd_digit_elements.append(i)\n```\n\nThe last line of the returns the list integers that only\n ```python\n   return sorted(odd_digit_elements)\n```\n\n### Racket version\n\n#lang racket\n\n;; \n(define (unique_digits x)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (valid_date date)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n    (check-within (candidate \"03-11-2000\") #t 0.001)\n    (check-within (candidate \"15-01-2012\") #f 0.001)\n    (check-within (candidate \"04-0-2040\") #f 0.001)\n    (check-within (candidate \"06-04-2020\") #t 0.001)\n    (check-within (candidate \"01-01-2007\") #t 0.001)\n    (check-within (candidate \"03-32-2011\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"04-31-3000\") #f 0.001)\n    (check-within (candidate \"06-06-2005\") #t 0.001)\n    (check-within (candidate \"21-31-2000\") #f 0.001)\n    (check-within (candidate \"04-12-2003\") #t 0.001)\n    (check-within (candidate \"04122003\") #f 0.001)\n    (check-within (candidate \"20030412\") #f 0.001)\n    (check-within (candidate \"2003-04\") #f 0.001)\n    (check-within (candidate \"2003-04-12\") #f 0.001)\n    (check-within (candidate \"04-2003\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef valid_date(date: str) -> bool:\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n### Explanation\n\ncode implementation of  a function named `valid_date` that takes string `date` and returns a boolean value. function checks if the input is a valid in the format `MM-DD-YYYY`. \n\nvalid_date(date: str) -> - line function that takes in string `date` and returns a boolean The `-> the of the function.\n 2. `try:` This line starts a try block.\n\n3. `date = date.strip()` This line removes any leading or trailing from the input string.\n\n4. `month, day, year = - This line splits the input string three parts using '-' character as a separator. The to variables `month`, `day`, and\n\n5. day, int(month), int(day), - This converts the three of the date into integers.\n\n6. `if month < 1 or 12:` - This line checks if the is the month is less than or greater than 12, function returns `False`.\n7. `if in [1,3,5,7,8,10,12] and day < 1 or day - This line checks if the day a valid value for months with days. If the month is of January, March, May, August, October, or December, and is less or greater 31, the function returns `False`.\n\n8. `if month [4,6,9,11] and day 1 or day > 30:` - This line the day is value for with days. If the month one of April, June, and the day is than 1 or greater than 30, the function returns `False`.  `if month == 2 and day < 1 day > 29:` This line checks if the is a valid February. the month is February, and the day is than 1 or greater 29, the function `False`. \n10. `except:` - This line an except block.\n\n11. False` - This `False` if an exception occurs. \n`return True` - line returns if input is valid If of the conditions in the the function `True`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (valid_date date)\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (filter_integers values)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9) 0.001)\n    (check-within (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\n### Explanation\n\nThe code implementation of  a function `filter_integers` that takes a list of values as and returns a list of integers. The function is defined Python's type hinting to indicate the input list contain and the output list will only contain\n\nThe function uses a list comprehension to iterate over list and filter that The `isinstance` function is used to check each value is integer. If value an integer, in the output list.\n\nThe resulting list of integers is returned by the\n\n### Racket version\n\n#lang racket\n\n;; \n(define (filter_integers values)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (anti_shuffle s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate anti_shuffle))\n    (check-within (candidate \"Hi\") \"Hi\" 0.001)\n    (check-within (candidate \"hello\") \"ehllo\" 0.001)\n    (check-within (candidate \"number\") \"bemnru\" 0.001)\n    (check-within (candidate \"abcd\") \"abcd\" 0.001)\n    (check-within (candidate \"Hello World!!!\") \"Hello !!!Wdlor\" 0.001)\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hi. My name is Mister Robot. How are you?\") \".Hi My aemn is Meirst .Rboot How aer ?ouy\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef anti_shuffle(s: str) -> str:\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n### Explanation\n\nThe code is an implementation of  a function `anti_shuffle` takes a input and returns a string. The function sorts the characters each word of input string and sorted words separated by a space.\n\nfunction takes a input and into a of words using the `split()` method. The separator used is a space character. The resulting list is then iterated over using a list comprehension. word the characters are sorted the `sorted()` method, returns a list of characters. The sorted list then converted back to a string using `join()` The resulting sorted word added to new \nFinally, the list of sorted is joined into string using the `join()` method. The a The resulting string is returned the function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (anti_shuffle s)\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (separate_paren_groups paren_string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate separate_paren_groups))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list \"(()())\" \"((()))\" \"()\" \"((())()())\") 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list \"()\" \"(())\" \"((()))\" \"(((())))\") 0.001)\n    (check-within (candidate \"(()(())((())))\") (list \"(()(())((())))\") 0.001)\n    (check-within (candidate \"( ) (( )) (( )( ))\") (list \"()\" \"(())\" \"(()())\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n### Explanation\n\nThe code is an of a called which takes a string of parentheses and returns a where a \n ```python\nfrom typing import\n\nThe module is imported to the use of type hints.\n\n```python\ndef separate_paren_groups(paren_string: str)\n``` The function `separate_paren_groups` takes a `paren_string` as and returns list of strings. The `-> List[str]` indicates that the function returns a list of\n\n```python\n    = []\n    current_string = []   current_depth 0\n``` variables are `result` is list that will the groups of parentheses, `current_string` is an empty that will store current group of and `current_depth` is an integer that keep track the of the current of\n```python   in paren_string:\n```\nThe function iterates over each character `c` in the input string `paren_string`.\n\n     if c == '(':\n          current_depth +=\n          current_string.append(c)\n```\nIf the character is opening the `current_depth` is by 1 and the character is appended to the `current_string`. \n```python\n        elif c == ')':\n           current_depth -= 1           \n\n     if == 0:           \n          current_string.clear()\n```\nIf the character a closing parenthesis, the is by 1 and the character is appended the `current_string`. If the `current_depth` 0, it that current group is complete, so the is joined into and appended to the `result` list. The is then cleared to start a new group of parentheses.\n    result\n```\nThe returns the containing the groups of\n\n### Racket version\n\n#lang racket\n\n;; \n(define (separate_paren_groups paren_string)\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (any_int x y z)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate any_int))\n    (check-within (candidate 2 3 1) #t 0.001)\n    (check-within (candidate 2.5 2 3) #f 0.001)\n    (check-within (candidate 1.5 5 3.5) #f 0.001)\n    (check-within (candidate 2 6 2) #f 0.001)\n    (check-within (candidate 4 2 2) #t 0.001)\n    (check-within (candidate 2.2 2.2 2.2) #f 0.001)\n    (check-within (candidate -4 6 2) #t 0.001)\n    (check-within (candidate 2 1 1) #t 0.001)\n    (check-within (candidate 3 4 7) #t 0.001)\n    (check-within (candidate 3.0 4 7) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\n### Explanation\n\nThe code is an of  function called that takes three arguments and `z` and returns a value. function checks any two of the three arguments up to third argument. If the sum of any two arguments is equal third argument, the function returns `True`, otherwise it returns `False`.  - `def any_int(x: float, y: float, z: -> bool:` defines function that takes arguments `x`, and `z`. The function returns a boolean and isinstance(y,int) and isinstance(z,int):` if all three arguments are integers.\n`if (x+y==z) (x+z==y) or checks if any of the arguments add up the third - True` returns if any two of the three arguments add up to third argument.\n- `return False` if none of the arguments add up third argument.\n- `return False` `False` if of arguments is not an integer.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (any_int x y z)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (starts_one_ends n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 2) 18 0.001)\n    (check-within (candidate 3) 180 0.001)\n    (check-within (candidate 4) 1800 0.001)\n    (check-within (candidate 5) 18000 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n### Explanation\n\nThe code is implementation of  a function called `starts_one_ends` that takes an integer input and returns an integer. The calculates the number of start 1 and end with 1 in a range have `n` \n\nThe function first checks the input integer `n` is to If the function returns 1. If it not, calculates the integers start 1 and end with 1 in range of integers that have `n` \n\nThe calculation is using the formula `18 * (10 ** - 2))`. is from the fact that are 9 that can be used to fill the remaining `n - 2` digits after last digits are fixed to The first digit can 1, and the last digit can only 1. Therefore, there are 9 choices for of remaining `n - 2` digits. gives a total `9 ** (n 2)` start end with any digit. we are only interested that start end There are such integers (11 and 1), the total number of integers that and with 1 is `2 * 9 ** - 2)`. This simplified `18 * (10 ** - 2))`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (starts_one_ends n)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fib n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-within (candidate 10) 55 0.001)\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 8) 21 0.001)\n    (check-within (candidate 11) 89 0.001)\n    (check-within (candidate 12) 144 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef fib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n### Explanation\n\nThe code is an implementation of  a to calculate the nth Fibonacci number. \n\nThe function takes integer n as input and returns an integer. \n\nfirst if are the of the recursion. If n is 0, returns If n is 1,   The final statement is the It the function with n-1 and n-2 as arguments, and returns the of two. \n\nThe continues call itself until it reaches of the base cases.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fib n)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (can_arrange arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate can_arrange))\n    (check-within (candidate (list 1 2 4 3 5)) 3 0.001)\n    (check-within (candidate (list 1 2 4 5)) -1 0.001)\n    (check-within (candidate (list 1 4 2 5 6 7 8 9 10)) 2 0.001)\n    (check-within (candidate (list 4 8 5 7 3)) 4 0.001)\n    (check-within (candidate (list )) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n### Explanation\n\ncode is an implementation of  a function `can_arrange` that takes a list integers and returns the index of that is out of order. If is already sorted, it returns -1.\n The first List class the This is used to specify the type of input argument to the function. The second line defines the function `can_arrange` which takes single argument `arr` type List[int] and an integer.\n The third initializes a variable `ind` to -1. variable will be used keep track of the index element is of order.  The fourth a variable 1. This will be used to over the of the input\n\nfifth line starts a loop will continue until `i` equal length of the input list.  The sixth line checks if current element is less than the previous element (`arr[i-1]`). If this true, then the current out of\n\nseventh line the `ind` variable to the current value\nThe eighth increments `i` 1 to move to next element.\n\nThe ninth line returns the value of `ind`. If `ind` is still -1, then the input is already sorted, so the function returns -1.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (can_arrange arr)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (skjkasdkd lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n    (check-within (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3)) 10 0.001)\n    (check-within (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1)) 25 0.001)\n    (check-within (candidate (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3)) 13 0.001)\n    (check-within (candidate (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6)) 11 0.001)\n    (check-within (candidate (list 0 81 12 3 1 21)) 3 0.001)\n    (check-within (candidate (list 0 8 1 2 1 7)) 7 0.001)\n    (check-within (candidate (list 8191)) 19 0.001)\n    (check-within (candidate (list 8191 123456 127 7)) 19 0.001)\n    (check-within (candidate (list 127 97 8192)) 10 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef skjkasdkd(lst: List[int]) -> int:\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n### Explanation\n\ncode is an implementation of  a function that a list of and returns the sum of largest prime number in the list.\n\n```python\nfrom import\n```\nThe module provides support for type hints. This line imports the `List` type hint. \n```python\ndef skjkasdkd(lst: ->\n```\nThis defines a function `skjkasdkd` that takes in a list of `lst` and `-> int` a hint the the \n```python\n  def isPrime(n):      range(2,int(n**0.5)+1):\n        if               return False\n\n       return\n\nThis is function takes integer `n` and returns a boolean indicating whether `n` is number or not. It does this by over the range of from 2 the square root of `n` `n` by of them. If is, it returns `False`, otherwise it returns `True`.\n\n   = 0\n   = 0\n    i <\n       if(lst[i] > maxx isPrime(lst[i])):\n         maxx = lst[i]\n      \n```\nThis block of code variables `maxx` and to 0. then iterates over list using a loop and if each element in the is greater than `maxx` and is a prime number using `isPrime` function. If it updates value of `maxx` to be the current then increments `i` by 1 and continues the loop has over all the elements list.\n\n```python\n result = sum(int(digit) digit in str(maxx))\n    return result\n```\nThis line initializes a `result` to the sum of the digits the largest It does by converting `maxx` to a string using the `str` function, iterating over each character in the string using a generator expression, character to an integer using `int` function, and then summing up all the using the function. Finally, returns the value of `result`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (skjkasdkd lst)\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (reverse_delete s c)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_delete))\n    (check-within (candidate \"abcde\" \"ae\") (list \"bcd\" #f) 0.001)\n    (check-within (candidate \"abcdef\" \"b\") (list \"acdef\" #f) 0.001)\n    (check-within (candidate \"abcdedcba\" \"ab\") (list \"cdedc\" #t) 0.001)\n    (check-within (candidate \"dwik\" \"w\") (list \"dik\" #f) 0.001)\n    (check-within (candidate \"a\" \"a\") (list \"\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"v\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"vabba\" \"v\") (list \"abba\" #t) 0.001)\n    (check-within (candidate \"mamma\" \"mia\") (list \"\" #t) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Tuple\n\ndef reverse_delete(s: str,c: str) -> Tuple[str, bool]:\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n### Explanation\n\nThe is an of  a function named `reverse_delete` that two arguments, `s` and a character `c`. The function returns a tuple containing values: the modified string `s` and a boolean value whether the modified string palindrome. \nfirst line of the imports `Tuple` class from the `typing` This to specify the type the function's return\n\nThe line function signature. The function two arguments: a `s` and a `c`. The function a tuple modified and a\nThe third line the function creates a new by over each character in the original `s` and only including characters that are not to the character `c`. This is using comprehension. The resulting string assigned back variable\n\nThe fourth of the function tuple containing string a boolean value. The value is determined by checking if the modified string `s` is equal to its reverse. If is, the string is a and the boolean value is `True`. If it is not, then the string is not a palindrome and the boolean is\n\n### Racket version\n\n#lang racket\n\n;; \n(define (reverse_delete s c)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (pairs_sum_to_zero l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 5 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 30)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 31)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 30)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 31)) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n### Explanation\n\nThe code is of  a function that a list of and returns a boolean indicating whether there are two numbers in the that sum to zero.  function is called `pairs_sum_to_zero` and it a single `l`, is a list integers. function returns a boolean value.\n\nThe first the code imports the `List` type from module. This a hint that tells that the `l` argument list of \nThe second the `pairs_sum_to_zero` function. a argument, `l`, which is a of The function returns a boolean value.\n\nThe uses a nested iterate all possible pairs of integers in the list. outer loop over each list, the inner loop iterates over the integers that come after the current in the list.\n\nThe `enumerate` function used to get of the current in the The `i` holds the of the current integer, while the `l1` variable holds the value of current integer.\n\ninner loop from the index of the current integer plus one, and over all the that come the current integer in list. The holds the of the current integer in the inner loop.\nThe `if` statement sum of the current and the integer the inner loop is zero. If the function returns `True`.\n\nthe not returned `True` the time loops have finished iterating, it means that there are pairs of integers in the list that sum In this the function returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (pairs_sum_to_zero l)\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fruit_distribution s n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n    (check-within (candidate \"5 apples and 6 oranges\" 19) 8 0.001)\n    (check-within (candidate \"5 apples and 6 oranges\" 21) 10 0.001)\n    (check-within (candidate \"0 apples and 1 oranges\" 3) 2 0.001)\n    (check-within (candidate \"1 apples and 0 oranges\" 3) 2 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 100) 95 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 5) 0 0.001)\n    (check-within (candidate \"1 apples and 100 oranges\" 120) 19 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef fruit_distribution(s: str, n: int) -> int:\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\n### Explanation\n\nThe code an of  a called that takes two a string `s` an function returns an\n The function starts by an empty list `lis`. It then through the string `s` splitting it into a list of words the space character as the delimiter. For each word the list, it checks if word is a digit using `isdigit()` method. If is a digit, it is to an integer using the appended the `lis`  Finally, function returns difference between the integer `n` and the sum of all the integers in the `lis` list. This is achieved by using the `sum()` method add the in the `lis` list and then result from `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fruit_distribution s n)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (f n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 5) (list 1 2 6 24 15) 0.001)\n    (check-within (candidate 7) (list 1 2 6 24 15 720 28) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n    (check-within (candidate 3) (list 1 2 6) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef f(n: int) -> List[int]:\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n### Explanation\n\nThe code is implementation of  function `f(n)` that takes an `n` a list of integers. \n```python\nfrom typing import List\nThis line imports the `List` class from the `typing` module. The class is used to a list of integers that the function will\n```python def int) -> List[int]:\n```\nThis line defines the `f(n)` that takes an `n` input and a list of integers. The `-> List[int]` syntax specifies the return type of the function. \n```python ret = []\n```\nThis line initializes empty `ret` be to the that the function will return.\n in\n```\nThis line starts loop over the from 1 to `n` `range()` function a sequence of numbers, starting from 0 by default, and by default), and stops before a specified number.\n\nif i%2 == 0:\n```\nThis line checks if the current `i` even. The `%` returns remainder of of `i` 2. If the remainder is is even.\n```python x 1\nj in range(1,i+1): x j\n[x]\n\nThis block of is executed `i` is It initializes a variable and then multiplies it by the integers from to (inclusive) using a loop. resulting value of `x` added to the `ret`\n\n\nelse: ```\nThis line is executed `i` is\n x = 0\nfor j in range(1,i+1): x += j\nret += [x]\n```\nThis of code is if `i` is odd. It initializes a variable 0 and then adds integers from to `i` (inclusive) using a loop. The resulting value of `x` then added to `ret` list.\n\n\nreturn ret\n\nThis the `ret` list that contains all the integers computed by the function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (f n)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (next_smallest lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest))\n    (check-within (candidate (list 1 2 3 4 5)) 2 0.001)\n    (check-within (candidate (list 5 1 4 3 2)) 2 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list 1 1 1 1 0)) 1 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list -35 34 12 -45)) -35 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\nfrom typing import Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n### Explanation\n\nThe code an of  a function `next_smallest` that a of integers and returns second smallest integer the \n\n\nimport List\nfrom typing import Optional\n```\nThe `typing` module used specify the of arguments and return value. and `Optional` are types that are to that the argument is a list integers and the value is either `None`.\n\n```python\ndef next_smallest(lst: List[int]) -> Optional[int]:\nline that takes list of integers as and returns an integer or `None`. \n\n```python\nlst = sorted(set(lst))\n```\nline sorts the input list in ascending and removes duplicates. The `set` function is used remove duplicates and function is used to sort the \n\nreturn None if len(lst) < 2 else ```\nThis returns the second integer in the If the has less than two elements, it returns returns the second element the sorted list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (next_smallest lst)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (multiply a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n    (check-within (candidate 148 412) 16 0.001)\n    (check-within (candidate 19 28) 72 0.001)\n    (check-within (candidate 2020 1851) 0 0.001)\n    (check-within (candidate 14 -15) 20 0.001)\n    (check-within (candidate 76 67) 42 0.001)\n    (check-within (candidate 17 27) 49 0.001)\n    (check-within (candidate 0 1) 0 0.001)\n    (check-within (candidate 0 0) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef multiply(a: int, b: int) -> int:\n    return abs(a % 10) * abs(b % 10)\n\n### Explanation\n\nThe code is an  a function called `multiply` that two integer arguments `a` and `b` the product of the absolute values of the last digits each argument. \nThe first line defines the function and specifies the types of arguments and the return type.\n\nThe line returns of absolute the last of `a` and `b`.\n\nThe function is used that is always positive, regardless of the sign of the The `%` operator used to obtain the digit of each\n\n### Racket version\n\n#lang racket\n\n;; \n(define (multiply a b)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (modp n p)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n    (check-within (candidate 3 5) 3 0.001)\n    (check-within (candidate 1101 101) 2 0.001)\n    (check-within (candidate 0 101) 1 0.001)\n    (check-within (candidate 3 11) 8 0.001)\n    (check-within (candidate 100 101) 1 0.001)\n    (check-within (candidate 30 5) 4 0.001)\n    (check-within (candidate 31 5) 3 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\n### Explanation\n\nThe code is an implementation 2^n % p. \n\nDefine a called `modp` takes two integer arguments, `n` returns\n2. Initialize a variable called `ret` 1.\n3. Loop a of `n` values. 4. For each iteration, multiply `ret` by 2 and take the modulo `p`. Return the of `ret`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (modp n p)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (concatenate strings)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n    (check-within (candidate (list )) \"\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"xyz\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n### Explanation\n\nThe code is an implementation of  a called `concatenate` that a of input and returns a single that the concatenation all the strings in the input list.\n\nThe first line of the code imports from the `typing` `List` is a type that is used to a list of of a particular this `List[str]` a list of strings.\n\nThe second line the `concatenate` takes a single `strings` of type `List[str]` and returns a single string. The function uses the `join` method of the string class to concatenate all the strings in input `join` method takes an iterable of returns a single string that is of all the strings in the iterable. In case, iterable is argument passed to the function.\n\nThe str` syntax after the definition a type hint that specifies the type the function. It indicates function returns a\n\n### Racket version\n\n#lang racket\n\n;; \n(define (concatenate strings)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (triples_sum_to_zero l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -1)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #t 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 1 2 5 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 9 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -100)) #f 0.001)\n    (check-within (candidate (list 100 3 5 -100)) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n### Explanation\n\nThe code is an implementation of 3SUM problem. 3SUM problem is to find all an that sum to zero. \n\nThe function `triples_sum_to_zero` a list of as a boolean value. The function returns `True` if there exists a in list sums up to zero, otherwise returns `False`.\n\nThe function uses three nested loops to all possible triplets in the input The outermost loop over all elements of the input list. The second loop iterates of the input list after the current element of the loop. The innermost loop iterates over all elements the input list after the element of the loop.\n\nif statement inside the checks if sum of the current triplet to zero. If it is, function `True` as it finds the first that to is that sums up to zero, the function returns all possible triplets have been checked.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (triples_sum_to_zero l)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (triangle_area a h)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 5 3) 7.5 0.001)\n    (check-within (candidate 2 2) 2.0 0.001)\n    (check-within (candidate 10 8) 40.0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef triangle_area(a: int, h: int) -> float:\n    return a * h / 2.0\n\n### Explanation\n\nThe is implementation of that calculates the area of a \n The takes two arguments, `a` `h`, which are the and height of triangle respectively. The function returns the which is calculated by multiplying the base and height then dividing the result by 2.0.\nThe function is defined using the `def` keyword, by the of function (`triangle_area`) the arguments it takes (`a` and `h`). `-> float` notation indicates that returns a floating-point number.\n\nThe function of a single line code that performs the calculation returns the result the `return` keyword.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (triangle_area a h)\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (largest_smallest_integers lst)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n    (check-within (candidate (list 2 4 1 3 5 7)) (list #f 1) 0.001)\n    (check-within (candidate (list 2 4 1 3 5 7 0)) (list #f 1) 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 -2)) (list -2 1) 0.001)\n    (check-within (candidate (list 4 5 3 6 2 7 -7)) (list -7 2) 0.001)\n    (check-within (candidate (list 7 3 8 4 9 2 5 -9)) (list -9 2) 0.001)\n    (check-within (candidate (list )) (list #f #f) 0.001)\n    (check-within (candidate (list 0)) (list #f #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6)) (list -1 #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6 0)) (list -1 #f) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 1)) (list -3 1) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\nfrom typing import Tuple\nfrom typing import Optional\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n### Explanation\n\nThe is an implementation  a function that takes list of returns a tuple containing the largest integer the smallest integer in the list. If the list does not contain any or positive integers, the function returns for corresponding in the\n\n```python from typing import\nfrom typing import Tuple\ntyping Optional ```\nThe `typing` module used provide for the parameters and value. The `List`, `Tuple`, and `Optional` are used specify the types of the function and return value.  ```python def List[int]) -> Tuple[Optional[int], Optional[int]]:\n```\nThis line defines the function `largest_smallest_integers` which a single parameter `lst` of type and returns a tuple of two optional integers. The function signature that the function returns a tuple two optional which means either both of the values in tuple can be `None`.\n ```python smallest = list(filter(lambda x: x <\n``` This line creates a new list `smallest` filtering the input `lst` using a function that returns `True` for all negative integers in list. The function returns iterator the of the that the condition specified by the lambda The `list` function is to the to a list.\n\n```python\n= x: x > lst))\n\nThis a new list `largest` by filtering the `lst` using function that returns all positive integers in the list. `filter` function iterator that the elements of the input list that condition specified by lambda function. The `list` used to convert iterator a list.\n```python\nreturn (max(smallest) if else None, min(largest) if largest else None)\nThis line returns the largest negative integer smallest positive in the input list. The `max` and `min` functions used to find the and smallest values in `smallest` and `largest` lists, respectively. The `if` statements are used to handle either `smallest` or `largest` empty list, in which the corresponding value in the set to `None`. The `return` returns tuple.<|im_end|>\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_smallest_integers lst)\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (cycpattern_check a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n    (check-within (candidate \"xyzw\" \"xyw\") #f 0.001)\n    (check-within (candidate \"yello\" \"ell\") #t 0.001)\n    (check-within (candidate \"whattup\" \"ptut\") #f 0.001)\n    (check-within (candidate \"efef\" \"fee\") #t 0.001)\n    (check-within (candidate \"abab\" \"aabb\") #f 0.001)\n    (check-within (candidate \"winemtt\" \"tinem\") #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef cycpattern_check(a: str , b: str) -> bool:\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\n### Explanation\n\nThe is a cyclic pattern if `a` contains a pattern of `b`. A cyclic is a pattern that repeats itself after a number of characters. For example, the `abab` is cyclic pattern of `ab`.  \nThe takes two string arguments `a` and and returns a boolean value. checks `a` a cyclic of `b`. \nfirst line of the function defines the signature. It specifies that the two string arguments `a` and `b` and a value.\n\nThe second line of the function calculates the of string it to variable\n The third the creates a new string concatenating string `b` with itself. This creates string that contains of string `b`.  \nThe fourth line the function starts a loop that iterates over the indices of string `a` where a cyclic pattern of `b` could start. The loop runs from the `a` minus length `b` plus one. This ensures that the loop checks indices where a pattern of `b` start. \n\nThe line of the a nested loop that iterates over the indices `pat`. loop runs from 0 the of `b` plus one. This ensures the loop checks all possible cyclic patterns \n line of the function checks the substring of `a` starting at `i` ending at index `i+l` equal to the substring of `pat` starting at index `j` and index `j+l`. substrings are equal, it means that `a` contains a cyclic pattern of `b` and the function returns\n\nIf the function has returned after have finished, it means that `a` does not a pattern of and the returns\n\n### Racket version\n\n#lang racket\n\n;; \n(define (cycpattern_check a b)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (hex_key num)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n    (check-within (candidate \"AB\") 1 0.001)\n    (check-within (candidate \"1077E\") 2 0.001)\n    (check-within (candidate \"ABED1A33\") 4 0.001)\n    (check-within (candidate \"2020\") 2 0.001)\n    (check-within (candidate \"123456789ABCDEF0\") 6 0.001)\n    (check-within (candidate \"112233445566778899AABBCCDDEEFF00\") 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef hex_key(num: str) -> int:\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n### Explanation\n\nThe an implementation of  a function called `hex_key` which in a string `num` returns an integer. function calculates the prime numbers in `num` which in hexadecimal format. \n- `def str) int:` defines the function `hex_key` which takes a and returns an integer.  - `primes = '3', '5', '7', 'B', 'D')` a tuple `primes` contains the prime numbers in hexadecimal format.\n- `total 0` a variable `total` to\n`for in len(num)):` loops from index 0 to the the string.\n- `if num[i] in primes:` checks if current character the string `num` is a prime number in hexadecimal format. - `total += 1` increments the variable `total` by 1 if the character a prime\n- `return total` returns the total number prime numbers the string\n\n### Racket version\n\n#lang racket\n\n;; \n(define (hex_key num)\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (numerical_letter_grade grades)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numerical_letter_grade))\n    (check-within (candidate (list 4.0 3 1.7 2 3.5)) (list \"A+\" \"B\" \"C-\" \"C\" \"A-\") 0.001)\n    (check-within (candidate (list 1.2)) (list \"D+\") 0.001)\n    (check-within (candidate (list 0.5)) (list \"D-\") 0.001)\n    (check-within (candidate (list 0.0)) (list \"E\") 0.001)\n    (check-within (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list \"D\" \"D-\" \"C-\" \"B\" \"B+\") 0.001)\n    (check-within (candidate (list 0.0 0.7)) (list \"E\" \"D-\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n### Explanation\n\nThe is implementation of  a that takes a list grades and returns a list of The function called `numerical_letter_grade` and takes argument `grades` which is a list floating numbers. The function a list of strings.\n The line of the code imports `List` class module. This is used to specify the the `grades` argument.\n\nThe second line defines the function `numerical_letter_grade` which single argument `grades` and returns a of strings.\nThe third line an called `letter_grade`.\n\nfourth line loop that iterates over element in the `grades` list. loop variable is called `gpa`. \nThe next few lines use series of `if` and `elif` statements determine the grade for `gpa` value. If the `gpa` value is equal to the letter is If the value is greater than 3.7, the letter If the is greater than 3.3, grade \"A-\". And so on.\n\nThe final `else` statement is executed if the `gpa` than or to 0.0. this case, the letter grade is\n\nThe grade for each `gpa` value is appended to the `letter_grade` list.\n\nthe returns the `letter_grade`\n\n### Racket version\n\n#lang racket\n\n;; \n(define (numerical_letter_grade grades)\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (minSubArraySum nums)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n    (check-within (candidate (list 2 3 4 1 2 4)) 1 0.001)\n    (check-within (candidate (list -1 -2 -3)) -6 0.001)\n    (check-within (candidate (list -1 -2 -3 2 -10)) -14 0.001)\n    (check-within (candidate (list -9999999999999999)) -9999999999999999 0.001)\n    (check-within (candidate (list 0 10 20 1000000)) 0 0.001)\n    (check-within (candidate (list -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 100 -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 10 11 13 8 3 4)) 3 0.001)\n    (check-within (candidate (list 100 -33 32 -1 0 -2)) -33 0.001)\n    (check-within (candidate (list -10)) -10 0.001)\n    (check-within (candidate (list 7)) 7 0.001)\n    (check-within (candidate (list 1 -1)) -1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\n### Explanation\n\nThe code is an of  [Kadane's algorithm](https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane's_algorithm) to find minimum subarray sum an\n\nThe first line the List class the typing The List is a generic class a list elements of particular type.\n\nsecond line defines function called `minSubArraySum` that takes as input returns an \n third line a `max_sum` to 0. This variable will used to track of the maximum subarray sum.  \n4. fourth line a variable called `s` to 0. variable be used to track of the current subarray   5. The fifth starts a for loop that iterates over element in the input list. \n\n6. The sixth line subtracts the current from `s`. This is find maximum subarray sum that ends the current element.  \n7. The seventh line checks if is than 0. If is, then `s` is to 0. This because if current subarray sum negative, then is better to start a new subarray from next element. \n8. eighth line updates `max_sum` to be the maximum of and This is done to track the maximum subarray \n\n9. The line if `max_sum` is 0. If is, it that all the elements in the input list are negative. this case, `max_sum` is set be the maximum of the absolute values the elements in the input  \n10. The tenth line initializes a variable `min_sum` to be the negative of This done to find the minimum subarray  \n11. The eleventh line returns `min_sum`, is the sum.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (minSubArraySum nums)\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (solve N)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate 1000) \"1\" 0.001)\n    (check-within (candidate 150) \"110\" 0.001)\n    (check-within (candidate 147) \"1100\" 0.001)\n    (check-within (candidate 333) \"1001\" 0.001)\n    (check-within (candidate 963) \"10010\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef solve(N: int) -> str:\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n### Explanation\n\nThe code an of a function that an integer and returns binary representation.\n\nThe function converts the integer `N` a string using `str(N)`. It then iterates over each in the string, it to an integer and sums all the integers using The result the sum is then to a using `bin()`. `bin()` function returns a string with prefix `0b` indicating that is binary of a number. The `[2:]` slice to remove the prefix `0b` from the binary string, only the binary digits are returned.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solve N)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (by_length arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-within (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\") 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -1 55)) (list \"One\") 0.001)\n    (check-within (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\") 0.001)\n    (check-within (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\n### Explanation\n\ncode is implementation of a function called `by_length` that takes in an array and an strings. The function sorts the array in descending order and then maps each integer to its corresponding string value. If an integer is not in the dictionary, it ignored.\n ```python\nfrom import List\n\nThis line List from the typing module. The List class a type that represents of elements a specific type.\n\ndef by_length(arr: List[int]) List[str]:\n``` line defines a function called `by_length` that takes in a list of and returns a list strings. The is annotated with to indicate the types of the input and output. \n```python\ndic =\n    1:\n   2: \"Two\",\n    \"Three\",     4:\n   5: \"Five\",   \"Six\",\n \"Seven\",\n   8: \"Eight\",    9: \"Nine\",\n}\n``` creates called `dic` that maps to their corresponding string values.\n\n```python\nsorted_arr sorted(arr, reverse=True) ```\nline sorts the input in descending assigns result to variable called\n\n```python\nnew_arr = [] for in sorted_arr:\n  try:\n      new_arr.append(dic[var])\n   except:\n      pass\n```\nblock code a empty list called `new_arr` and each element in the array. each element, it attempts to up its corresponding value the If lookup is successful, the string value is appended to the new array. If the lookup fails (i.e. the integer not in the the exception caught and the continues to next element.\n\n```python\nreturn new_arr\nThis returns the new of\n\n### Racket version\n\n#lang racket\n\n;; \n(define (by_length arr)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (prod_signs arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prod_signs))\n    (check-within (candidate (list 1 2 2 -4)) -9 0.001)\n    (check-within (candidate (list 0 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 3 -1 1)) -10 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 2 4 1 2 -1 -1 9)) 20 0.001)\n    (check-within (candidate (list -1 1 -1 1)) 4 0.001)\n    (check-within (candidate (list -1 1 1 1)) -4 0.001)\n    (check-within (candidate (list -1 1 1 0)) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\nfrom typing import Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\n### Explanation\n\nimplementation  a function `prod_signs` that takes a list of integers `arr` and returns product signs of integers the list multiplied the sum of absolute values of the integers in list. function returns `None` if the is empty.\n\n```python\ntyping import List\nfrom typing import Optional\n```\nThe `typing` is provide type hints for the arguments and return value. `List` and are used indicate that the `arr` is a integers and the return value `None`.\n\n```python\ndef prod_signs(arr: List[int]) Optional[int]:\n```\nThis line the `prod_signs` takes a list of integers `arr` an argument and returns an integer. The `->` syntax used to indicate the return type of the function.\n\n\nif not return None\n```\n This checks if list empty. If it is, the function `None`.\n\n\nprod = 0 0 in arr else (-1) len(list(filter(lambda x: <\n```\n\nThis line the product of the signs of integers in the list. If the a the is `0`. Otherwise, raised to power of the number of integers in the `filter` function is used to create list of negative integers the list, the is used to count the number negative  ```python return prod * sum([abs(i) i arr])\n```\n\nline calculates sum of the absolute values of the integers in the and multiplies it by the product of the signs of the list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prod_signs arr)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (x_or_y n x y)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate x_or_y))\n    (check-within (candidate 7 34 12) 34 0.001)\n    (check-within (candidate 15 8 5) 5 0.001)\n    (check-within (candidate 3 33 5212) 33 0.001)\n    (check-within (candidate 1259 3 52) 3 0.001)\n    (check-within (candidate 7919 -1 12) -1 0.001)\n    (check-within (candidate 3609 1245 583) 583 0.001)\n    (check-within (candidate 91 56 129) 129 0.001)\n    (check-within (candidate 6 34 1234) 1234 0.001)\n    (check-within (candidate 1 2 0) 0 0.001)\n    (check-within (candidate 2 2 0) 2 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\n### Explanation\n\nThe code implementation of a called that takes three integer arguments `n`, `x`, and returns The function returns if `n` is by any integer other than 1 otherwise it returns `x`.\n ```python\ndef x_or_y(n: int, int) int:\n``` The function is defined arguments, `x`, `y`. `n` is the number to checked, `x` the to returned if `n` is not by any other than and `y` is the to be returned if `n` is divisible by any integer than and itself. function\n\n\n   n ==        return y\n``` If `n` is equal 1, function `y`.\n\n```python\n   i in range(2, n):\n     if n % i ==\n           return y\n         ```\n`n` is not equal to 1, the function a that range integers from to `n`-1. For each integer `i` in the range, the function checks if `n` is divisible `i`. If `n` is divisible by `i`, returns `y` and exits the loop. the without finding divisor of `n`, the function `x`.\n\n```python\n   else:\n       return x\n```\nthe completes finding a divisor of `n`, the returns `x`. The `else` clause is associated with the `for` and is if the loop completes without a `break` statement.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (x_or_y n x y)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (select_words s n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-within (candidate \"Mary had a little lamb\" 4) (list \"little\") 0.001)\n    (check-within (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\") 0.001)\n    (check-within (candidate \"simple white space\" 2) (list ) 0.001)\n    (check-within (candidate \"Hello world\" 4) (list \"world\") 0.001)\n    (check-within (candidate \"Uncle sam\" 3) (list \"Uncle\") 0.001)\n    (check-within (candidate \"\" 4) (list ) 0.001)\n    (check-within (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n### Explanation\n\ncode is an of  a `select_words` that takes two a string `s` and `n`. The returns a of string `s` that have `n` consonants.   The function first initializes an empty will be used to the words that meet the criteria. \n\nThe function then loops each word in the string `s` by splitting the string on whitespace the `split()` \n\nFor each word, the function initializes a `n_consonants` \n\nThe loops through each character in using `range()` function and loop.  \nFor each character, the function checks if the character is a consonant by comparing to list of vowels `[\"a\",\"e\",\"i\",\"o\",\"u\"]`. If the character is a vowel, the function increments the variable by\n\nAfter looping through all characters in the word, if the `n_consonants` is equal to the input integer If it is, is appended to `result` list. \n Finally, the function the `result` list containing all the words that\n\n### Racket version\n\n#lang racket\n\n;; \n(define (select_words s n)\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_bored S)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-within (candidate \"Hello world\") 0 0.001)\n    (check-within (candidate \"Is the sky blue?\") 0 0.001)\n    (check-within (candidate \"I love It !\") 1 0.001)\n    (check-within (candidate \"bIt\") 0 0.001)\n    (check-within (candidate \"I feel good today. I will be productive. will kill It\") 2 0.001)\n    (check-within (candidate \"You and I are going for a walk\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\n### Explanation\n\nis implementation  that takes a string `S` and returns number of sentences start \"I \". \n`def is_bored(S: -> int:` defines a function `is_bored` string `S` as input and returns an integer.\n2. re` imports the regular expression module.\n3. = re.split(r'[.?!]\\s*', S)` splits input string `S` into a of sentences. The expression `[.?!]\\s*` period, mark, question mark by zero or more whitespace characters.\n4. `return sum(sentence[0:2] ' for sentence in sentences)` number of sentences that start \"I \" by iterating over sentence in the list of sentences and checking if the first two characters of the sentence are \". The function number of sentences that this condition.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_bored S)\n"
  },
  {
    "name": "HumanEval_160_do_algebra",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (do_algebra operator operand)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_160_do_algebra.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n    (check-within (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37 0.001)\n    (check-within (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9 0.001)\n    (check-within (candidate (list \"//\" \"*\") (list 7 3 4)) 8 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n### Explanation\n\ncode implementation  a function that takes two as arguments: `operator` `operand`. The function returns the result of arithmetic by the two lists.  \nThe function first imports the class the The `List` class is a generic represents a list a particular type. \n ```python\nfrom import ```\n\nThe function specifies that the function two lists as arguments: and `operand`. The `operator` contains strings that represent operators. integers that represent the operands arithmetic expression. The function integer that result of the expression.\n\n```python\ndo_algebra(operator: List[str], -> int:\n```\n\nThe function creates variable `expression` and initializes with first element of `operand` list. \n```python\n  str(operand[0])\n```\n\nThe then over `operator` and `operand` lists using the `zip` function. `zip` function an iterator that aggregates elements from each of the passed as arguments. this case, it aggregates elements of the `operator` and `operand` lists pairs of `(oprt,\n\n```python\n   for oprt, oprn zip(operator, operand[1:]):\n\n\neach pair of `(oprt, the function concatenates the string and the `oprn` integer to the `expression` string.\n\n```python     oprt + str(oprn)\n```\n\nFinally, the function evaluates `expression` string using the `eval` function and returns the result.\n\n```python    return eval(expression)\n```\n\n### Racket version\n\n#lang racket\n\n;; \n(define (do_algebra operator operand)\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (solve s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate \"AsDf\") \"aSdF\" 0.001)\n    (check-within (candidate \"1234\") \"4321\" 0.001)\n    (check-within (candidate \"ab\") \"AB\" 0.001)\n    (check-within (candidate \"#a@C\") \"#A@c\" 0.001)\n    (check-within (candidate \"#AsdfW^45\") \"#aSDFw^45\" 0.001)\n    (check-within (candidate \"#6@2\") \"2@6#\" 0.001)\n    (check-within (candidate \"#$a^D\") \"#$A^d\" 0.001)\n    (check-within (candidate \"#ccc\") \"#CCC\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef solve(s: str) -> str:\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n### Explanation\n\nThe code is an implementation a function that takes a string and returns a The function first initializes two variables `flg` and then creates new list from the input `s`. \nfunction then through character in the input string `s`. If the character is an swaps case of the character and stores it in the corresponding index of the `new_str` list. It sets the `flg` variable to 1. The `idx` variable is by 1 after each iteration. \nthe the an empty string `s`. It loops character in the `new_str` list appends it to the `s`\n If the `flg` variable is still 0, means that no was found in input string. In this the function returns reverse input string. Otherwise, returns the `s` string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solve s)\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (flip_case string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hello!\") \"hELLO!\" 0.001)\n    (check-within (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n\n### Explanation\n\nThe an of  a function called `flip_case` which a string as an argument and returns the string with the case each character flipped.  ```python\ndef flip_case(string: -> str:\n```\nline defines the function `flip_case` which as an argument a string. The str` is a type which tells us that `string` to be string. \n```python\n    return string.swapcase() ```\nThis line string the case of each character flipped. The `swapcase()` method is called on the `string` object a new string the case of character flipped.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (flip_case string)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (rolling_max numbers)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 1)) (list 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\n### Explanation\n\nan implementation of  a function that takes a list of integers and a list of function a list of the value so far in input \n\n\nfrom import List,\n```\nThis imports List and classes from the typing The List used to define a list of while the Tuple class is used to define a\n ```python\ndef List[int]) -> List[int]: ```\nline defines `rolling_max` function that takes a list as input and returns a list of integers. The `-> List[int]` syntax specifies the return of the\n```python = None []\n```\nThese lines initialize two `running_max` and `result`. is to `None` and is initialized an empty list.\n```python\nn in numbers:\nThis line starts a for loop that iterates over each element `n` in the `numbers`\n\n```python\nif running_max None:\n  running_max = n else:\n  = max(running_max, n)\n\nThis code block checks if is `None`. If it is, `running_max` set to the element `n`. `running_max` not `None`, the maximum value between `running_max` and is assigned `running_max`.\n\n```python\nresult.append(running_max)\n```\nThis line appends the current value `running_max` to the `result` list.\n\n```python\nreturn result ``` line `result` list containing the maximum value seen so for each element in input list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (rolling_max numbers)\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (decimal_to_binary decimal)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-within (candidate 0) \"db0db\" 0.001)\n    (check-within (candidate 32) \"db100000db\" 0.001)\n    (check-within (candidate 103) \"db1100111db\" 0.001)\n    (check-within (candidate 15) \"db1111db\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef decimal_to_binary(decimal: int) -> str:\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n### Explanation\n\nThe code is an implementation of  a that converts a decimal to a binary number. function takes in integer an argument and a string that represents the binary\n\n`def decimal_to_binary(decimal: int) ->\n\nThe function with the `decimal_to_binary` and in integer as an argument. `-> str` specifies the a string.\n\n`return \"db\" + bin(decimal)[2:] \"db\"` \nThe function a string starts with \"db\" and then appends binary of the decimal number. The function a built-in Python function that converts integer to representation. The is to remove the first characters of the binary representation, which are always \"0b\". Finally, string is appended the of the binary\n\n### Racket version\n\n#lang racket\n\n;; \n(define (decimal_to_binary decimal)\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (how_many_times string substring)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-within (candidate \"\" \"x\") 0 0.001)\n    (check-within (candidate \"xyxyxyx\" \"x\") 4 0.001)\n    (check-within (candidate \"cacacacac\" \"cac\") 4 0.001)\n    (check-within (candidate \"john doe\" \"john\") 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n### Explanation\n\nThe code implementation of  a function called that string arguments, and `substring`, an integer value. The function returns the number of times the appears in the\n\nThe function variable called 0.\n\nThe function then a `for` that iterates over a of values. of is determined by the length of the `string` minus the length the `substring` plus This is because `substring` can appear `string` if there are at as characters remaining in the `string` as there are characters in the `substring`. \n\nThe then checks in the `string` at the current index. This is done slicing the `string` from the current index to the index length of the `substring`. sliced string equal the `substring`, then `times` variable is incremented\n\nthe function returns the `times` variable, which represents the number of times the appears in the `string`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (how_many_times string substring)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (monotonic l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-within (candidate (list 1 2 4 10)) #t 0.001)\n    (check-within (candidate (list 1 2 4 20)) #t 0.001)\n    (check-within (candidate (list 1 20 4 10)) #f 0.001)\n    (check-within (candidate (list 4 1 0 -10)) #t 0.001)\n    (check-within (candidate (list 4 1 1 0)) #t 0.001)\n    (check-within (candidate (list 1 2 3 2 5 60)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 60)) #t 0.001)\n    (check-within (candidate (list 9 9 9 9)) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n### Explanation\n\nThe code an  `monotonic` function that list of and a boolean indicating list is monotonic or not. list is a that either entirely non-increasing or non-decreasing. \n\nThe function a list of integers as an argument and a boolean type is imported from the `typing` The `List` type is generic type that is used to represent a elements of a particular type. \n\nThe `monotonic` function checks the list is sorted in ascending order or descending order. If the list is in either of these orders, returns `True`, indicating that is monotonic. If not sorted in either of these orders, function `False`, indicating that the list is not monotonic.\n\nThe `sorted` function is used sort the list ascending order. The `sorted` new sorted list not the original list. The `reverse` parameter is used to the list in descending  The operator is used to compare the original list the list. If the original list is equal to the list either or descending order, the function Otherwise, the function `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (monotonic l)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (smallest_change arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate smallest_change))\n    (check-within (candidate (list 1 2 3 5 4 7 9 6)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 3 2 2)) 1 0.001)\n    (check-within (candidate (list 1 4 2)) 1 0.001)\n    (check-within (candidate (list 1 4 4 2)) 1 0.001)\n    (check-within (candidate (list 1 2 3 2 1)) 0 0.001)\n    (check-within (candidate (list 3 1 1 3)) 0 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\n### Explanation\n\nThe an implementation of  a function `smallest_change` that takes list of integers as input and returns the number of changes that need to be made the list so that it becomes a palindrome. A is phrase, number, or other of characters that same forward backward.\n\nby initializing variable `ans` to 0. This variable will be to keep of the number changes that need to be made to the\n\nThe function then over the first half of the list the `range` function. function generates a sequence of numbers from 0 `len(arr) - 1`. `//` operator is floor operator, which the largest less than or equal the division its This ensures that loop only iterates over the first half of the  Inside the the function checks the element at index `i` is equal to the element at the in the second half of the index `len(arr) - i - 1`. If the are not equal, it that a needs be made to list it a The increments `ans` variable by 1.\n\nFinally, the function returns the value of `ans`, which represents number changes to be made to the list to it a palindrome.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (smallest_change arr)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (all_prefixes string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\") 0.001)\n    (check-within (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\") 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n### Explanation\n\nThe code an implementation  function called `all_prefixes` that a string as input returns list of all the prefixes the  \nThe takes a argument, a string The returns a list of which is why we the `List` from `typing` module.\n\nThe by creating an list called `result`.   The function then loops the range of the of the input string. `range` function returns a sequence of numbers from to the length of the string minus 1.  \nFor each `i` in the sequence, a slice the string to the `result` list. The at the beginning of the ends at the index `i+1`. \n\nFinally, function the `result` list containing the prefixes of the input string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (all_prefixes string)\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (encode message)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-within (candidate \"TEST\") \"tgst\" 0.001)\n    (check-within (candidate \"Mudasir\") \"mWDCSKR\" 0.001)\n    (check-within (candidate \"YES\") \"ygs\" 0.001)\n    (check-within (candidate \"This is a message\") \"tHKS KS C MGSSCGG\" 0.001)\n    (check-within (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\n### Explanation\n\nThe code is an of  a function `encode` that a string and a string.\nThe first `def encode(message: -> str:` defines the function signature. It specifies that the function is called takes in a string argument called `message` returns string. \n\nsecond line = \"aeiouAEIOU\"` creates a string `vowels` that contains all the vowels in the English language (both and lower case). \nthird line = dict([(i, chr(ord(i) 2)) for i in vowels])` creates a dictionary called `vowels_replace` that each vowel to vowel two letters after in alphabet. example, 'a' maps to 'c', maps to 'g', and so on. \n The fourth `message = message.swapcase()` swaps the case all letters in `message` string. For if `message` string is \"Hello, World!\", this line will it to \"hELLO, wORLD!\". \n The fifth line `return ''.join([vowels_replace[i] if i in vowels else i for in message])` new by through each character the `message` If the character is it replaces it with vowel that is it in the alphabet (using `vowels_replace` dictionary). If character a vowel, it it unchanged. Finally, joins all characters into a single and returns\n\n### Racket version\n\n#lang racket\n\n;; \n(define (encode message)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sum_to_n n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 6) 21 0.001)\n    (check-within (candidate 11) 66 0.001)\n    (check-within (candidate 30) 465 0.001)\n    (check-within (candidate 100) 5050 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n\n### Explanation\n\nThe code  a function that sums all the numbers to n. \n\nThe function is `sum_to_n` takes an integer `n` as an argument. \n The returns the of the numbers 0 to `n`. \nThe `range` function creates a sequence of 0 to `n`. The `sum` function then all the numbers sequence. \n The `-> syntax a type hint, which that the function returns an integer.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_to_n n)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (specialFilter nums)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate specialFilter))\n    (check-within (candidate (list 5 -2 1 -5)) 0 0.001)\n    (check-within (candidate (list 15 -73 14 -15)) 1 0.001)\n    (check-within (candidate (list 33 -2 -3 45 21 109)) 2 0.001)\n    (check-within (candidate (list 43 -12 93 125 121 109)) 4 0.001)\n    (check-within (candidate (list 71 -2 -33 75 21 19)) 3 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list )) 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count\n\n### Explanation\n\ncode is an implementation of `specialFilter` function that takes a list of integers and the count of integers that are greater than and have odd digits at the first and last position.\n\n1. `from typing import List` Importing List from the typing to as a hint the function argument.\n2. specialFilter(nums: List[int]) int:` - Defining `specialFilter` that takes list integers as argument and an integer. 3. `count = - Initializing a `count` to 0 track the count of integers the criteria.\n4. in nums:` - Looping through each integer in input list.\n5. num > - Checking the integer than 10.\n6. `odd_digits = (1, 3, 9)` - Defining tuple `odd_digits` that all digits.\n`number_as_string = str(num)` - the integer to a string to digits.\n8. `if int(number_as_string[0]) odd_digits and int(number_as_string[-1]) in Checking if first and digits of integer are digits.\n9. += 1` - Incrementing the `count` variable if the meets the\n10. `return count` Returning the count of that meet criteria.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (specialFilter nums)\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (prime_fib n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n    (check-within (candidate 1) 2 0.001)\n    (check-within (candidate 2) 3 0.001)\n    (check-within (candidate 3) 5 0.001)\n    (check-within (candidate 4) 13 0.001)\n    (check-within (candidate 5) 89 0.001)\n    (check-within (candidate 6) 233 0.001)\n    (check-within (candidate 7) 1597 0.001)\n    (check-within (candidate 8) 28657 0.001)\n    (check-within (candidate 9) 514229 0.001)\n    (check-within (candidate 10) 433494437 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef prime_fib(n: int) -> int:\n    import math\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n### Explanation\n\nThe code is an implementation of called that takes an integer `n` as returns the `n`-th prime Fibonacci  \n```python\nprime_fib(n: int) int:\n```\n function definition starts with keyword, by the function `prime_fib`, which takes integer `n` and returns integer. The `->` symbol used to the return the function.\n\n```python\n\n``` \nThe statement to `math` module, which provides various mathematical functions. ```python\ndef\n  if p <\n    return False\n    for k in + 1, p -\n      if p % k == 0:\n       return False    True\n```\n The `is_prime` function is defined inside the function. It takes integer `p` as input returns a boolean value indicating whether `p` a prime number or \nThe function first checks if `p` less which a prime number. If `p` is greater than equal to 2, the if `p` is divisible number between 2 and the square of `p`. If `p` is any of it is not prime number and the function `False`. If is not divisible any these numbers, it is a prime number and the returns `True`. \n```python\nf = [0,\n\n The `f` list is initialized with Fibonacci numbers, 0 and 1.\n\nwhile True:\n   f.append(f[-1] +\n   if is_prime(f[-1]):\n      n   if n == 0:\n        return f[-1]\n```\n\nThe `while` continues indefinitely the `return` is executed. each iteration of the the next Fibonacci is calculated by adding the last two numbers the `f` list. If the number in `f` list is a prime number, the value `n` is decremented by 1. If `n` becomes 0, the function returns the last number in the `f` list, which is the `n`-th prime Fibonacci\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prime_fib n)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_happy s)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n    (check-within (candidate \"a\") #f 0.001)\n    (check-within (candidate \"aa\") #f 0.001)\n    (check-within (candidate \"abcd\") #t 0.001)\n    (check-within (candidate \"aabb\") #f 0.001)\n    (check-within (candidate \"adb\") #t 0.001)\n    (check-within (candidate \"xyy\") #f 0.001)\n    (check-within (candidate \"iopaxpoi\") #t 0.001)\n    (check-within (candidate \"iopaxioi\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef is_happy(s: str) -> bool:\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n### Explanation\n\nThe is implementation of  a `is_happy` that takes a `s` and a boolean value. function returns `True` if the does contain any consecutive characters are the same. Otherwise, it returns `False`.\n\ntakes a single argument, `s`, is type `str`. The function a boolean value, which is of type `bool`.\n\nline of the code imports the type the `typing` module. This not used the function and ignored.\n\nThe second line of the code defines the function `is_happy`. function takes single argument, which is `str`. function returns boolean value, which is of type `bool`. The third line of the if the length of string `s` is less than 3. is, the function `False`. This is string with less than 3 characters contain consecutive characters that same.\n\nThe fourth line the code starts `for` loop that iterates over the indices string The loop starts at the first and at second-to-last index.\n The of checks if any of the consecutive at the current index and the following indices are the same. If are, the function returns `False`.\n\nline of the returns `True` if the loop completes finding any consecutive are the Otherwise, it returns `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_happy s)\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (file_name_check file_name)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-within (candidate \"example.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"1example.dll\") \"No\" 0.001)\n    (check-within (candidate \"s1sdf3.asd\") \"No\" 0.001)\n    (check-within (candidate \"K.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"MY16FILE3.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"His12FILE94.exe\") \"No\" 0.001)\n    (check-within (candidate \"_Y.txt\") \"No\" 0.001)\n    (check-within (candidate \"?aREYA.exe\") \"No\" 0.001)\n    (check-within (candidate \"/this_is_valid.dll\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.wow\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"this_is_valid.txtexe\") \"No\" 0.001)\n    (check-within (candidate \"#this2_i4s_5valid.ten\") \"No\" 0.001)\n    (check-within (candidate \"@this1_is6_valid.exe\") \"No\" 0.001)\n    (check-within (candidate \"this_is_12valid.6exe4.txt\") \"No\" 0.001)\n    (check-within (candidate \"all.exe.txt\") \"No\" 0.001)\n    (check-within (candidate \"I563_No.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"Is3youfault.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"no_one#knows.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"1I563_Yes3.exe\") \"No\" 0.001)\n    (check-within (candidate \"I563_Yes3.txtt\") \"No\" 0.001)\n    (check-within (candidate \"final..txt\") \"No\" 0.001)\n    (check-within (candidate \"final132\") \"No\" 0.001)\n    (check-within (candidate \"_f4indsartal132.\") \"No\" 0.001)\n    (check-within (candidate \".txt\") \"No\" 0.001)\n    (check-within (candidate \"s.\") \"No\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef file_name_check(file_name: str) -> str:\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n\n### Explanation\n\nThe code is an implementation  function called takes string as input a string as output. The input string is expected to be a with an The output string is either 'Yes' or 'No' on whether the input is a valid file name or not.\n\ndefines a list of valid file extensions called `suf` which contains the strings 'exe', 'dll'.   The function splits the string parts: the file name and the extension. This is done by calling the `split` method on the input string with the separator '.'. a called `lst` which contains two file name and the extension.  \nThe then the `lst` not equal to 2. If it is then the function returns 'No' because the input is not a valid file name.   The function checks if the extension is in list of extensions `suf`. If it not, then the function returns because the input string is not a file name.\n\nThe then if length the is greater than 0. it is not, the function returns 'No' because input string is not valid file name. \n function checks if first the file is an alphabetic character. If it not, then the function returns 'No' because the string not a valid file  The function then counts the number of digits the file creating list of all digits in the file name and then taking length of list. If the number of is greater than 3, then the function returns 'No' because string not a file \nIf all above conditions then the function returns 'Yes' because input string is a valid file name.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (file_name_check file_name)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (maximum arr k)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-within (candidate (list -3 -4 5) 3) (list -4 -3 5) 0.001)\n    (check-within (candidate (list 4 -4 4) 2) (list 4 4) 0.001)\n    (check-within (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2) 0.001)\n    (check-within (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123) 0.001)\n    (check-within (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20) 0.001)\n    (check-within (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15) 0.001)\n    (check-within (candidate (list -1 0 2 5 3 -10) 2) (list 3 5) 0.001)\n    (check-within (candidate (list 1 0 5 -7) 1) (list 5) 0.001)\n    (check-within (candidate (list 4 -4) 2) (list -4 4) 0.001)\n    (check-within (candidate (list -10 10) 2) (list -10 10) 0.001)\n    (check-within (candidate (list 1 2 3 -23 243 -400 0) 0) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n### Explanation\n\ncode is an of a function that returns the k elements in list of integers.\n\n```python from typing import List\n```\nImporting the from the typing package. is to specify the type input and output the function.\n\n\ndef maximum(arr: List[int], k: int) List[int]:\n```\nDefining a function called `maximum` that takes arguments, a of an integer `k`. The a list of integers. \n```python\n   0:\n       return []\n```\nIf is 0, an empty list.\n\n```python\n   arr.sort()\n\nSort list in order.\n ```python\n   ans =\n\nSlice the last `k` elements of the sorted and assign variable\n\n```python\n return\n```\nReturn the variable `ans`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (maximum arr k)\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (pluck arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-within (candidate (list 4 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5 0 3 0 4 2)) (list 0 1) 0.001)\n    (check-within (candidate (list 1 2 3 0 5 3)) (list 0 3) 0.001)\n    (check-within (candidate (list 5 4 8 4 8)) (list 4 1) 0.001)\n    (check-within (candidate (list 7 6 7 1)) (list 6 1) 0.001)\n    (check-within (candidate (list 7 9 7 1)) (list ) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\n### Explanation\n\nThe is an implementation of  a function called in a list of integers returns a list of integers. first integer is smallest even number in the list the second integer is the index the smallest even in list.\n\n\nfrom typing import List\n```\nThis line imports the class the typing module. This used specify the of the and of the `pluck` function.\n\ndef pluck(arr: List[int]) -> List[int]:\n```\nThis line `pluck` function that takes in a list of integers and a list of integers. The `arr` parameter is type `List[int]` which means a integers. `-> List[int]` specifies the function returns a of integers.\n\n```python\nif(len(arr) == 0): return\n```\nThis line if length of input list is zero. If it is, empty list is returned.\n ```python\nevens = list(filter(lambda x: x%2 == 0, arr))\n\nThis a new called `evens` that contains only the numbers from the input list. The `filter` function is used to filter out the numbers. The `lambda` function is define the condition for filtering. In this case, the is that even (`x%2 \n```python\nif(evens []): return []\nThis line checks the list it empty list is \n\n[min(evens), arr.index(min(evens))] ```\nThis line returns list containing two integers. The first is the even number in the `evens` list. The `min` is used to the smallest second integer the smallest even number the input list. The `index` used to find index of the smallest in the list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (pluck arr)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (count_distinct_characters string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_distinct_characters))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abcde\") 5 0.001)\n    (check-within (candidate \"abcdecadeCADE\") 5 0.001)\n    (check-within (candidate \"aaaaAAAAaaaa\") 1 0.001)\n    (check-within (candidate \"Jerry jERRY JeRRRY\") 5 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n### Explanation\n\nis an implementation of  a function in a string and the number of distinct in the string.\n\n`def count_distinct_characters(string: str) int:` This line defines a function called `count_distinct_characters` that takes in string as an and returns an integer.\n 2. `return len(set(string.lower()))` - This returns length a set the of the input string. The `set()` function returns set of unique characters in the string, and the function returns length of the The `lower()` function is to convert all in the lowercase before creating the set, that uppercase and lowercase characters are same.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_distinct_characters string)\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (make_palindrome string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"x\") \"x\" 0.001)\n    (check-within (candidate \"xyz\") \"xyzyx\" 0.001)\n    (check-within (candidate \"xyx\") \"xyx\" 0.001)\n    (check-within (candidate \"jerry\") \"jerryrrej\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while string[beginning_of_suffix:] != string[beginning_of_suffix:][::-1]:\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\n### Explanation\n\nThe code is an implementation of  [Manacher's to find the longest palindrome a string. function a string as and returns a palindrome of that string.\n\nmake_palindrome(string: str) -> str:\n```\nstring input and string.\n```python\n   if\n       '' If the input string is empty, return an empty string.\n\n```python\n    beginning_of_suffix = 0\n\nInitialize the beginning of the to\n```python\n    while string[beginning_of_suffix:] != string[beginning_of_suffix:][::-1]:\n     beginning_of_suffix 1\n```\nWhile the substring from the beginning of suffix to end of the string is not equal reverse that substring, increment the beginning the suffix by 1.\n\n```python     + string[:beginning_of_suffix][::-1]\n```\nReturn the concatenated with the the substring from the beginning of the string to the beginning of suffix. a original\n\n### Racket version\n\n#lang racket\n\n;; \n(define (make_palindrome string)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (check_dict_case dict)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"))) #t 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\"))) #f 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f 0.001)\n    (check-within (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"))) #f 0.001)\n    (check-within (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\"))) #t 0.001)\n    (check-within (candidate #hash((\"fruit\" .  \"Orange\") (\"taste\" .  \"Sweet\"))) #t 0.001)\n    (check-within (candidate #hash()) #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                continue\n        return state == \"upper\" or state == \"lower\"\n\n### Explanation\n\nThe is implementation  `check_dict_case` function which takes dictionary as and returns a boolean value indicating whether all keys the dictionary are case all uppercase or all lowercase).\n\n1. `from import Dict` - import the `Dict` class the `typing`\n2. `def check_dict_case(dict: Dict[str, str]) -> bool:` - the `check_dict_case` function which takes as input and returns a boolean value.\n`if 0:` - check is empty. If it is, return `False`.\n`else:` - if the is empty, with function. 5. \"start\"` - `state` variable `\"start\"`. 6. dict.keys():` iterate over the keys of dictionary.\n7. isinstance(key, str) == - check if the a string. If it is set the `state` variable to `\"mixed\"` break out of the loop.\n8. `if state \"start\":` - the variable is\n9. `if key.isupper():` check the key is all uppercase.\n10. `state = \"upper\"` - set the `state` variable to `\"upper\"`.\n`elif key.islower():` - check the key all lowercase.\n12. `state = \"lower\"` - set variable to `\"lower\"`.\n13. `else:` if is not uppercase or all lowercase, break out of\n`elif (state == and not key.isupper()) or (state == \"lower\" and not - if the `state` is `\"upper\"` and the key is not uppercase, or if `state` variable is and the key not lowercase. 15. `state = \"mixed\"` - set the variable to\n16. `break` - break out the\n17. `else:` - if none of the above conditions met, with loop. `continue` - continue the\n19. `return == \"upper\" or state == \"lower\"` - return `True` if the is `\"upper\"` or `\"lower\"`,\n\n### Racket version\n\n#lang racket\n\n;; \n(define (check_dict_case dict)\n"
  },
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (correct_bracketing brackets)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"()\") #t 0.001)\n    (check-within (candidate \"(()())\") #t 0.001)\n    (check-within (candidate \"()()(()())()\") #t 0.001)\n    (check-within (candidate \"()()((()()())())(()()(()))\") #t 0.001)\n    (check-within (candidate \"((()())))\") #f 0.001)\n    (check-within (candidate \")(()\") #f 0.001)\n    (check-within (candidate \"(\") #f 0.001)\n    (check-within (candidate \"((((\") #f 0.001)\n    (check-within (candidate \")\") #f 0.001)\n    (check-within (candidate \"(()\") #f 0.001)\n    (check-within (candidate \"()()(()())())(()\") #f 0.001)\n    (check-within (candidate \"()()(()())()))()\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n### Explanation\n\ncode an implementation of  a function called `correct_bracketing` that takes in string of brackets and returns a boolean whether the brackets correctly balanced or \n\nThe function in a of as an argument and a whether the are correctly or\n\nThe starts by initializing a called to 0.  \nfunction then over each character in the a for loop. \n\ncharacter, function checks if it is opening bracket (i.e. \"(\"). If it is, the function the `depth` variable \n\ncharacter is not an opening bracket, the assumes it is a closing bracket and decrements `depth` variable by 1. \n The function then checks if the `depth` is than 0. If it this that there are more closing than brackets, is not In `False` to indicate that the brackets are balanced. \n\nthe `depth` is not less than 0 after processing all the characters the string, the function checks if the variable is to 0. If is, this means that number of opening brackets is equal to number of closing which is the of correctly brackets. In this case, the function returns `True` to the brackets correctly balanced.\n\nIf the `depth` is not equal 0, this means are more than closing brackets, which also not allowed. case, function returns `False` that the brackets are not correctly\n\n### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (split_words txt)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n    (check-within (candidate \"Hello world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello,world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello world,!\") (list \"Hello\" \"world,!\") 0.001)\n    (check-within (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\" \"!\") 0.001)\n    (check-within (candidate \"abcdef\") 3 0.001)\n    (check-within (candidate \"aaabb\") 2 0.001)\n    (check-within (candidate \"aaaBb\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\n### Explanation\n\ncode implementation of a function called that string as returns a list of the words in the string, or number letters the that have an even ASCII code.\n\n```python\nfrom List\nfrom typing Union\n\n`typing` module used to provide for the and `Union` are the types that imported from module. `List` is used to indicate that the function list of strings, while `Union` is used to indicate that function return either a list or integer.\n\n```python\nsplit_words(txt: -> int]:\n``` This line the `split_words` that takes a string `txt` as input and returns either of strings integer. `->` symbol is used to indicate the type of function. ```python\nif \" in txt:\n   txt.split()\n\nThis code checks if the `txt` a If it does, then the string split into a list of using the `split()` method and list returned.\n\n```python\nelif \",\" in txt:\n    return txt.replace(',','\n```\nblock of code if the string contains comma character. If does, then the commas are replaced with spaces using the `replace()` and the resulting string into a list of words using the `split()` method. The list returned.\n\n\nelse:\n  return len([i i in txt i.islower() and == 0]) ```\nThis of code is executed if a nor a comma is in the `txt`. It creates a list of all the lowercase letters the have an even ASCII code using a list comprehension. The list is then returned, which is the number of lowercase letters in the string that have an even ASCII code.\n\n\n### Racket version\n\n#lang racket\n\n;; \n(define (split_words txt)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (strlen string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"x\") 1 0.001)\n    (check-within (candidate \"asdasnakj\") 9 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef strlen(string: str) -> int:\n    return len(string)\n\n### Explanation\n\nThe code an implementation of  a called `strlen` that string as an argument returns length of the string.\n\nThe function defined with the keyword followed by of the `strlen`. The function takes one argument which is of type `str`. The `-> specifies that an\n\nThe `return` the length of the string using the `len` function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (strlen string)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (car_race_collision n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate car_race_collision))\n    (check-within (candidate 2) 4 0.001)\n    (check-within (candidate 3) 9 0.001)\n    (check-within (candidate 4) 16 0.001)\n    (check-within (candidate 8) 64 0.001)\n    (check-within (candidate 10) 100 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef car_race_collision(n: int) -> int:\n    return n**2\n\n### Explanation\n\nis an implementation of a function named `car_race_collision` that takes an as input and returns an integer. The function returns the square of the\n\n### Racket version\n\n#lang racket\n\n;; \n(define (car_race_collision n)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (fibfib n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 1) 0 0.001)\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 24 0.001)\n    (check-within (candidate 10) 81 0.001)\n    (check-within (candidate 12) 274 0.001)\n    (check-within (candidate 14) 927 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n### Explanation\n\nThe is an implementation 3-step Fibonacci sequence. The function takes an integer `n` input and integer as output.  \nThe first if statements the base cases. 0, the function returns 0. If `n` is 1, the returns 0. If `n` 2, the function returns 1. \n\nThe fourth line the recursive `n` is 2, the function calls itself times with 1`, `n - 2`, and 3` as inputs. function returns the sum these three function calls.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fibfib n)\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (order_by_points nums)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-within (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11) 0.001)\n    (check-within (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\n### Explanation\n\nis an implementation of  `order_by_points` function that takes list of integers and returns a of integers sorted by their digits sum. \n\nThe function an `n` and returns the sum of its digits. If the integer negative, it multiplies it by to it then to a string and into of integers. It then multiplies the first digit by if the was negative, and returns the the digits.\n\nThe `order_by_points` function integers and sorts it using the `sorted` function. The `key` of the `sorted` is set `digits_sum`, which that the sorting will be on the sum of the digits of integer the list. sorted list is\n\n### Racket version\n\n#lang racket\n\n;; \n(define (order_by_points nums)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (move_one_ball arr)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_one_ball))\n    (check-within (candidate (list 3 4 5 1 2)) #t 0.001)\n    (check-within (candidate (list 3 5 10 1 2)) #t 0.001)\n    (check-within (candidate (list 4 3 1 2)) #f 0.001)\n    (check-within (candidate (list 3 5 4 1 2)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\n### Explanation\n\ncode is an a called `move_one_ball` that takes list of as and returns a boolean The function checks if the input list can be sorted by moving only one element to a different position. If it can be sorted moving only one element, function returns True, otherwise it False. \nThe function starts by importing List class from typing module. This is used to indicate that the input is a of integers.\n ```python from import List\n\nThe starts with `def` keyword, followed the function name `move_one_ball`. The input is a list of called function a boolean value. \n```python def move_one_ball(arr: List[int]) ->\n\nThe first line the function the list zero. If it is, the function returns True.\n\n```python\n if len(arr)==0:\n      return\n\n\nThe next line sorts input list in ascending order and assigns the sorted list to a new variable called `sorted_array`.  ```python\n   \n``` \nThe next an empty list called `my_arr`.\n\n```python\n   my_arr=[] ```\n\nlines find the minimum value in its index. The minimum value is assigned to a variable called the index is assigned to a called `min_index`.\n\n```python\n \n   min_index=arr.index(min_value)\n``` \nThe next line a list called `my_arr` concatenating slices of the input list. slice starts from the of the minimum value and goes to the end of the list. second slice starts the beginning of the and up to the\n\n```python\n  \n```\n\nnext loop checks if the elements in `my_arr` in the order the elements in `sorted_array`. If are function returns\n\n```python\n   for in range(len(arr)):\n     if my_arr[i]!=sorted_array[i]:\n       False\n\nIf the loop completes without False, the function returns\n```python\n \n```\n\n### Racket version\n\n#lang racket\n\n;; \n(define (move_one_ball arr)\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (closest_integer value)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-within (candidate \"10\") 10 0.001)\n    (check-within (candidate \"14.5\") 15 0.001)\n    (check-within (candidate \"-15.5\") -16 0.001)\n    (check-within (candidate \"15.3\") 15 0.001)\n    (check-within (candidate \"0\") 0 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef closest_integer(value: str) -> int:\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n### Explanation\n\nThe code is an implementation  `closest_integer` function that takes a string `value` returns the closest integer to the float value represented by the string. The function is defined with a type hint for the and output types. \n ```python\ndef closest_integer(value: -> ```\n\nfunction imports `floor` and `ceil` functions from the module.\n\n\n    from math import floor, ceil\n\nfunction the input string a If does, it any trailing zeros. \n```python\n    if value.count('.') == 1:\n        # remove zeros\n      (value[-1]         value\n```\n\nfunction converts the to a float. \n\n   num = float(value) ```\n\nThe checks if input string ends with `.5`. If does, rounds the number is positive rounds if the number negative.\n\n```python    if value[-2:] '.5':\n      if num >\n     res\n       else:\n         res = ```\n\nIf the input string does not end with `.5`, the rounds the nearest integer.\n\n\n   len(value) 0:        res = int(round(num)) ```\n\nIf the input is returns\n\n```python\n  else:\n        res 0\n```  the function returns the closest integer as an integer. \n```python\n   return res ```\n\n### Racket version\n\n#lang racket\n\n;; \n(define (closest_integer value)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (special_factorial n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate special_factorial))\n    (check-within (candidate 4) 288 0.001)\n    (check-within (candidate 5) 34560 0.001)\n    (check-within (candidate 7) 125411328000 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef special_factorial(n: int) -> int:\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n### Explanation\n\ncode is an implementation of  a function that takes integer as input and returns an integer. \n\n1. `fact_i = 1` - initialize a variable called `fact_i` to This variable be used calculate of from 1 to `n`.\n2. `special_fact 1` - initialize called `special_fact` to variable will be used to calculate the special of `n`.\n3. `for in n+1):` - loop through 1\n`fact_i *= i` - multiply by to the factorial `i`.\n5. `special_fact *= fact_i` by `fact_i` to the special factorial of `n`.\n6. `return special_fact` - return the special factorial of `n`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (special_factorial n)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (is_nested string)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n    (check-within (candidate \"[[]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]][[[[[]\") #f 0.001)\n    (check-within (candidate \"[][]\") #f 0.001)\n    (check-within (candidate \"[]\") #f 0.001)\n    (check-within (candidate \"[[[[]]]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]]]]]\") #f 0.001)\n    (check-within (candidate \"[][][[]]\") #t 0.001)\n    (check-within (candidate \"[[]\") #f 0.001)\n    (check-within (candidate \"[]]\") #f 0.001)\n    (check-within (candidate \"[[]][[\") #t 0.001)\n    (check-within (candidate \"[[][]]\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"[[[[[[[[\") #f 0.001)\n    (check-within (candidate \"]]]]]]]]\") #f 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef is_nested(string: str) -> bool:\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n### Explanation\n\nThe code is an implementation  a function `is_nested` that takes a as input and a boolean value. The function checks if the string contains at least two nested square\n\n```python def is_nested(string: str) ```\n\nfunction definition starts with the `def` followed by the function name `is_nested`. The function takes a argument `string` type string and returns value. The `->` symbol used to indicate the type of the \n```python\n   opening_bracket_index = []\n  closing_bracket_index = ```\n\nTwo lists created to store the indices of and closing square brackets.\n ```python\n    for i       if string[i] ==\n         opening_bracket_index.append(i)\n       else:\n         \n```\n\nA for loop to character in input string. the character an opening square its index is appended to the If the character is a closing square bracket, is appended to the `closing_bracket_index` list.\n```python\n   closing_bracket_index.reverse()\n\n\nThe is called on `closing_bracket_index` to reverse order of elements.\n\n    cnt =\n   i = 0    l = len(closing_bracket_index)\n    for idx opening_bracket_index:\n     if i and idx closing_bracket_index[i]:\n      cnt 1\n         i 1\n``` \nTwo `i` initialized to 0. The of the `closing_bracket_index` is stored in variable `l`. A loop used to iterate each in the `opening_bracket_index` list. If the current index than index closing square bracket, the `cnt` variable is incremented and the `i` variable incremented.\n\n```python\n   cnt 2\n``` \nfunction `True` if the `cnt` variable is equal 2, indicating that there are at least two nested square brackets in the input string. Otherwise, it `False`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_nested string)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (even_odd_count num)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-within (candidate 7) (list 0 1) 0.001)\n    (check-within (candidate -78) (list 1 1) 0.001)\n    (check-within (candidate 3452) (list 2 2) 0.001)\n    (check-within (candidate 346211) (list 3 3) 0.001)\n    (check-within (candidate -345821) (list 3 3) 0.001)\n    (check-within (candidate -2) (list 1 0) 0.001)\n    (check-within (candidate -45347) (list 2 3) 0.001)\n    (check-within (candidate 0) (list 1 0) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Tuple \n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\n### Explanation\n\nThe code is implementation  a function that takes integer as input and returns a tuple of two integers. The first integer in is the count of digits input integer and the second integer in the tuple is the count digits in the input integer. \nThe `even_odd_count` an integer `num` as input and returns a of two integers. The module is imported from the `typing` to enable hinting.\n\nvariables and `odd_count` are to 0. These variables used to keep track of the count even and odd digits the input integer.\n The `for` loop iterates over character in the representation of absolute of input The `abs` is to ensure that integer positive.\n\nThe `if` statement checks if current character is an even digit. If it is, `even_count` variable is 1. If it is the `odd_count` variable is incremented by\nthe returns a of `even_count` variables.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (even_odd_count num)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (string_xor a b)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n    (check-within (candidate \"111000\" \"101010\") \"010010\" 0.001)\n    (check-within (candidate \"1\" \"1\") \"0\" 0.001)\n    (check-within (candidate \"0101\" \"0000\") \"0101\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\n### Explanation\n\nThe code an of strings XOR operation.\n\nThe `string_xor` takes 2 strings as input and returns XOR result the 2 strings. \n\nThe `xor` function is a function 2 characters as input and returns XOR result of the 2 If the characters are returns '0', otherwise it returns '1'.\n The `string_xor` the function to iterate over the 2 input strings character by character. then applies `xor` function to each pair of characters and the result into a single string function.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (string_xor a b)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (longest strings)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longest))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"x\" 0.001)\n    (check-within (candidate (list \"x\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\")) \"zzzz\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n### Explanation\n\ncode is an implementation of a function that takes a of strings and returns the string in the list. \n\n```python from import List, Optional\n``` This line the List and Optional types from the typing module. The indicate the function a list strings as input, while the type used indicate that the function may return None if the input is empty.\n```python\ndef longest(strings: List[str]) Optional[str]:\n```\nThis line defines the which takes a list of as input and returns an optional string. The function name is `longest` it takes one argument, a list of strings. The `-> part of the indicates that the may None input empty.\n\n```python\nif strings:    return None\n``` This if the If it is, the function returns\n\n\nmaxlen = max(len(x) for x strings) ```\nline calculates length of the longest string the input It this by using a generator expression list of the the input list, and then list to the `max` function.\n\n```python\nfor s in strings:\n    if == maxlen:\n      return s\n```\nThis loop iterates string in the list if its length to in the previous line. If it is, the function string. If none of the have a length to the ends and the function returns None is the default value if no return statement is executed).\n\n### Racket version\n\n#lang racket\n\n;; \n(define (longest strings)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (intersperse numbers delimeter)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n    (check-within (candidate (list ) 7) (list ) 0.001)\n    (check-within (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2) 0.001)\n    (check-within (candidate (list 2 2 2) 2) (list 2 2 2 2 2) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n### Explanation\n\nThe code an implementation  a function called `intersperse` that takes in a list and a delimiter and returns with the delimiter integer of the original  \n```python\nfrom typing import List\n``` This imports the List from the typing module. This used to specify the type of the input and of the\n\n```python\ndef List[int], delimeter: int) -> ```\nThis line defines the function takes in arguments: list of integers called `numbers` and an called `delimiter`. The function returns a of integers.  ```python\n  if numbers:\n       return []\n\nThis line checks the list is empty. If it is, the function returns an empty list.\n\n\n   result = []\n```\nThis line initializes an empty called This list will be used store the list the delimiter inserted between element original list.\n\n```python\n    for n in numbers[:-1]:\n    result.append(n)\n    result.append(delimeter)\n```\nloop iterates through all of the `numbers` except the last one. For each it element the `result` list, followed by the delimiter integer.\n```python\n  result.append(numbers[-1])\n``` This line appends element the `numbers` to the `result`\n\n    result\n```\nThis returns `result` list, which the new list with the delimiter inserted between each of original list.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (intersperse numbers delimeter)\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (histogram test)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate histogram))\n    (check-within (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1) (\"d\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"b b b b a\") #hash((\"b\" .  4)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"\") #hash() 0.001)\n    (check-within (candidate \"a\") #hash((\"a\" .  1)) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\n### Explanation\n\nThe code is an implementation of  a function takes string returns a dictionary of the frequency of each word the string. \n\n1. `from typing import Dict` - typing library. \n2. str) -> Dict[str, int]:` Defining a called histogram that takes a string input and dictionary of the frequency of word the string.\n 3. `dict1={}` - Creating an empty dictionary called dict1.\n\n4. `list1=test.split(\" - the input string into a of words using the character as delimiter.\n\n`t=0` - Initializing variable called \n6. `for list1:` Starting a for loop that iterates word in the list.\n 7. `if(list1.count(i)>t) and i!='':` - if count of current in the list is greater the current value of t and if the current word is empty string. `t=list1.count(i)` - If the condition in step is set value to the count of current word the list.\n\n9. t>0:` - Checking if the t greater than 0.\n\n10. `for i in list1:` - Starting a for loop that each word the list. \n11. `if(list1.count(i)==t):` - Checking if count the current word in list is the value of t.\n 12. `dict1[i]=t` - If the condition in 11 is true, then the current word as a key to the dictionary dict1 and value the of t. \n13. `return dict1` - Return the dictionary dict1 containing the frequency of word in input string.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (histogram test)\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_array array)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5)) (list 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3 4 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0) 0.001)\n    (check-within (candidate (list 2 1)) (list 1 2) 0.001)\n    (check-within (candidate (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87) 0.001)\n    (check-within (candidate (list 21 14 23 11)) (list 23 21 14 11) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)\n\n### Explanation\n\nThe code is an implementation of that sorts an array integers. \n\nThe function `sort_array` an array of integers as and sorted of integers. \n\nThe `List` type is imported from the `typing` \n\nfunction is used to the input array. parameter is set to `True` if sum of the first and of array is even, it is set to `False`.  \nIf input is empty, function returns empty array.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_array array)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (largest_divisor n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-within (candidate 3) 1 0.001)\n    (check-within (candidate 7) 1 0.001)\n    (check-within (candidate 10) 5 0.001)\n    (check-within (candidate 100) 50 0.001)\n    (check-within (candidate 49) 7 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n### Explanation\n\nThe code an implementation of function integer `n` the largest divisor `n`. \n\n1. largest_divisor(n: int) -> defines the function `largest_divisor` that takes integer `n` as an argument an integer. 2. i reversed(range(n)):` loops through the range integers from to `0` in reverse\n3. `if n % i == 0:` if `n` is divisible by `i`. `return i` returns the divisor of `n` is found the loop. the loop starts the largest possible divisor, the first divisor found will be the largest.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_divisor n)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (count_up_to n)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_up_to))\n    (check-within (candidate 5) (list 2 3) 0.001)\n    (check-within (candidate 6) (list 2 3 5) 0.001)\n    (check-within (candidate 7) (list 2 3 5) 0.001)\n    (check-within (candidate 10) (list 2 3 5 7) 0.001)\n    (check-within (candidate 0) (list ) 0.001)\n    (check-within (candidate 22) (list 2 3 5 7 11 13 17 19) 0.001)\n    (check-within (candidate 1) (list ) 0.001)\n    (check-within (candidate 18) (list 2 3 5 7 11 13 17) 0.001)\n    (check-within (candidate 47) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43) 0.001)\n    (check-within (candidate 101) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n### Explanation\n\nThe code is an implementation of  a function that returns a of all prime numbers to a given\n\n```python\nfrom typing import List\n``` Importing the class from the module. \n```python def count_up_to(n: int) -> List[int]:\n\na function takes an integer `n` and returns of integers. \n\n```python\n= []\n\nInitializing an list store numbers. \n\n```python\nfor i n):\n```\nIterating over integers from `2` to \n```python\nis_prime True ```\nInitializing a boolean variable to `True`. \n ```python\nfor in range(2, i):\n```\nover all integers from `2` to `i-1`. \n\n```python if % j == 0:\n  = False\n    break\n```\nIf `i` is by `i` not a prime number. Set `is_prime` to `False` and out the inner loop.\n\n```python\nis_prime:  \n\n`is_prime` is still `True`, then is a prime Append to the `primes` list.  \n\nreturn primes\nReturn the `primes`\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_up_to n)\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (sort_even l)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_even))\n    (check-within (candidate (list 1 2 3)) (list 1 2 3) 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 123 1 -10)) (list -10 3 -5 2 -3 3 5 0 9 1 123) 0.001)\n    (check-within (candidate (list 5 8 -12 4 23 2 3 11 12 -10)) (list -12 8 3 4 5 2 12 11 23 -10) 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\nfrom typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n### Explanation\n\ncode is an implementation of  a function `sort_even` that takes a of integers and returns a list all even sorted in ascending order, but keeping the numbers in their position. \n\n\nfrom typing import List\n``` This line imports type typing module. This is to specify type of the function argument return value.\n\n```python def -> List[int]:\nThis line defines the function `sort_even` which a list of `l` as an argument and a new list of integers. The `-> List[int]` specifies the return type of function.\n\n```python evens = l[::2]\nodds l[1::2]\n``` These lines two new and `odds` by slicing the input list `l`. `evens` list elements of `l`, while the list contains all odd-indexed elements of `l`.\n\n\nevens.sort()\n```\nThis line sorts the `evens` list in order.\n\n```python\n[]\nfor e, o in zip(evens, odds):\n   \n```\nThese lines create a new by iterating the `evens` and `odds` lists simultaneously using `zip` function. each pair elements `(e, o)`, the elements added to in the order using the `extend` method.\n\n```python\nif len(evens)\n   ans.append(evens[-1]) This line checks if the the list than length the `odds` list. If it is, then the element of `evens` is appended \n```python\nreturn ans ```\nThis line returns the contains all even sorted ascending keeping the odd numbers in original\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_even l)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (add x y)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate 0 1) 1 0.001)\n    (check-within (candidate 1 0) 1 0.001)\n    (check-within (candidate 2 3) 5 0.001)\n    (check-within (candidate 5 7) 12 0.001)\n    (check-within (candidate 7 5) 12 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef add(x: int, y: int) -> int:\n    return x + y\n\n### Explanation\n\nis an of  a function takes two integer returns their sum. The function is called `add` and is defined using `def` The function takes two arguments, `x` and `y`, both which `int`. The `->` is used indicate the of the which is also `int`. The function consists of a single line returns the sum of the arguments using the `+` operator.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (add x y)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "rkt",
    "prompt": "#lang racket\n\n;; \n(define (circular_shift x shift)\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n    (check-within (candidate 100 2) \"001\" 0.001)\n    (check-within (candidate 12 2) \"12\" 0.001)\n    (check-within (candidate 97 8) \"79\" 0.001)\n    (check-within (candidate 12 1) \"21\" 0.001)\n    (check-within (candidate 11 101) \"11\" 0.001)\n))\n\n(test-humaneval)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Python program does line by line? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### Python version\n\ndef circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n### Explanation\n\nThe is an implementation of a circular shift operation on function takes two an integer and an `shift`. The returns string.\n\n1. `def circular_shift(x: int) str:` This line defines function called `circular_shift` takes arguments, an integer and an integer `shift`. The function a string.\n\n2. - This line converts the integer `x` to a string and assigns it to the variable `s`. \n3. `if shift > - checks value of is the length of the string  4. `return s[::-1]` - This returns the reverse of the `s` if the value `shift` is greater than length of the string `s`.\n\n5. `else:` - starts block.\n 6. s[len(s) - shift:] + s[:len(s) - - This line returns the of the circular shift operation. It takes the of `s` from index `len(s) - to the end of the string and it with the substring of `s` of the string to the `len(s) - shift`.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (circular_shift x shift)\n"
  }
]