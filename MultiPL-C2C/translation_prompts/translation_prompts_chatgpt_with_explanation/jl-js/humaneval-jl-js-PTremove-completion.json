[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "js",
    "prompt": "function correct_bracketing(brackets){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction correct_bracketing(brackets::String)::Bool \n    depth = 0\n    for b in brackets\n        if b == '('\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\n### JavaScript version\n\nfunction correct_bracketing(brackets){\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "js",
    "prompt": "function triangle_area(a, h){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n  assert.deepEqual(candidate(2, 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction triangle_area(a::Int64, h::Int64)::Float64 \n    return a * h / 2.0\nend\n\n### JavaScript version\n\nfunction triangle_area(a, h){\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "js",
    "prompt": "function special_factorial(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction special_factorial(n::Int64)::Int64 \n    fact_i = 1\n    special_fact = 1\n    for i in 1:n\n        fact_i *= i\n        special_fact *= fact_i\n    end\n    return special_fact\nend\n\n### JavaScript version\n\nfunction special_factorial(n){\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "js",
    "prompt": "function largest_smallest_integers(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}} \n    smallest = filter(x -> x < 0, lst)\n    largest = filter(x -> x > 0, lst)\n    return (isempty(smallest) ? nothing : maximum(smallest), isempty(largest) ? nothing : minimum(largest))\nend\n\n### JavaScript version\n\nfunction largest_smallest_integers(lst){\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "js",
    "prompt": "function move_one_ball(arr){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_one_ball;\n  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);\n  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);\n  assert.deepEqual(candidate([4, 3, 1, 2]),false);\n  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);\n  assert.deepEqual(candidate([]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return true\n    end\n    sorted_array=sort(arr)\n    my_arr=[]\n    min_value=minimum(arr)\n    min_index=findfirst(x->x==min_value,arr)\n    my_arr=vcat(arr[min_index:end],arr[1:min_index-1])\n    for i in 1:length(arr)\n        if my_arr[i]!=sorted_array[i]\n            return false\n        end\n    end\n    return true\nend\n\n### JavaScript version\n\nfunction move_one_ball(arr){\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "js",
    "prompt": "function digits(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n  assert.deepEqual(candidate(2468),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction digits(n::Int64)::Int64 \n    product = 1\n    odd_count = 0\n    for digit in string(n)\n        int_digit = parse(Int64, digit)\n        if int_digit%2 == 1\n            product *= int_digit\n            odd_count += 1\n        end\n    end\n    if odd_count == 0\n        return 0\n    else\n        return product\n    end\nend\n\n### JavaScript version\n\nfunction digits(n){\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "js",
    "prompt": "function fib4(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction fib4(n::Int64)::Int64 \n    results = [0, 0, 2, 0]\n    if n < 4\n        return results[n]\n    end\n\n    for i in 4:n\n        results = [results[2], results[3], results[4], results[1] + results[2] + results[3] + results[4]]\n    end\n\n    return results[4]\nend\n\n### JavaScript version\n\nfunction fib4(n){\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "js",
    "prompt": "function sort_even(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_even;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction sort_even(l::Vector{Int64})::Vector{Int64} \n    evens = l[1:2:end]\n    odds = l[2:2:end]\n    sort!(evens)\n    ans = []\n    for (e, o) in zip(evens, odds)\n        push!(ans, e, o)\n    end\n    if length(evens) > length(odds)\n        push!(ans, evens[end])\n    end\n    return ans\nend\n\n### JavaScript version\n\nfunction sort_even(l){\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "js",
    "prompt": "function order_by_points(nums){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n    function digits_sum(n)\n        neg = 1\n        if n < 0 n, neg = -1 * n, -1 end\n        n = [parse(Int64, i) for i in string(n)]\n        n[1] = n[1] * neg\n        return sum(n)\n    end\n    return sort(nums, by=digits_sum)\nend\n\n### JavaScript version\n\nfunction order_by_points(nums){\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "js",
    "prompt": "function is_happy(s){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n      return false\n    end\n\n    for i in 1:length(s) - 2\n      if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]\n        return false\n      end\n    end\n    return true\nend\n\n### JavaScript version\n\nfunction is_happy(s){\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "js",
    "prompt": "function circular_shift(x, shift){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction circular_shift(x::Int64, shift::Int64)::String \n    s = string(x)\n    if shift > length(s)\n        return reverse(s)\n    else\n        return s[length(s) - shift + 1:end] * s[1:length(s) - shift]\n    end\nend\n\n### JavaScript version\n\nfunction circular_shift(x, shift){\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "js",
    "prompt": "function max_fill(grid, capacity){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)::Int64 \n    sum([ceil(sum(arr)/capacity) for arr in grid])\nend\n\n### JavaScript version\n\nfunction max_fill(grid, capacity){\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "js",
    "prompt": "function has_close_elements(numbers, threshold){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool \n    for idx = 1:length(numbers)\n        for idx2 = 1:length(numbers)\n            if idx != idx2\n                distance = abs(numbers[idx] - numbers[idx2])\n                if distance < threshold\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\n### JavaScript version\n\nfunction has_close_elements(numbers, threshold){\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "js",
    "prompt": "function numerical_letter_grade(grades){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String} \n    letter_grade = []\n    for gpa in grades\n        if gpa == 4.0\n            push!(letter_grade, \"A+\")\n        elseif gpa > 3.7\n            push!(letter_grade, \"A\")\n        elseif gpa > 3.3\n            push!(letter_grade, \"A-\")\n        elseif gpa > 3.0\n            push!(letter_grade, \"B+\")\n        elseif gpa > 2.7\n            push!(letter_grade, \"B\")\n        elseif gpa > 2.3\n            push!(letter_grade, \"B-\")\n        elseif gpa > 2.0\n            push!(letter_grade, \"C+\")\n        elseif gpa > 1.7\n            push!(letter_grade, \"C\")\n        elseif gpa > 1.3\n            push!(letter_grade, \"C-\")\n        elseif gpa > 1.0\n            push!(letter_grade, \"D+\")\n        elseif gpa > 0.7\n            push!(letter_grade, \"D\")\n        elseif gpa > 0.0\n            push!(letter_grade, \"D-\")\n        else\n            push!(letter_grade, \"E\")\n        end\n    end\n    return letter_grade\nend\n\n### JavaScript version\n\nfunction numerical_letter_grade(grades){\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "js",
    "prompt": "function x_or_y(n, x, y){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = x_or_y;\n  assert.deepEqual(candidate(7, 34, 12),34);\n  assert.deepEqual(candidate(15, 8, 5),5);\n  assert.deepEqual(candidate(3, 33, 5212),33);\n  assert.deepEqual(candidate(1259, 3, 52),3);\n  assert.deepEqual(candidate(7919, -1, 12),-1);\n  assert.deepEqual(candidate(3609, 1245, 583),583);\n  assert.deepEqual(candidate(91, 56, 129),129);\n  assert.deepEqual(candidate(6, 34, 1234),1234);\n  assert.deepEqual(candidate(1, 2, 0),0);\n  assert.deepEqual(candidate(2, 2, 0),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction x_or_y(n::Int64, x::Int64, y::Int64)::Int64 \n    if n == 1\n        return y\n    end\n    for i in 2:n-1\n        if n % i == 0\n            return y\n        end\n    end\n    return x\nend\n\n### JavaScript version\n\nfunction x_or_y(n, x, y){\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "js",
    "prompt": "function specialFilter(nums){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2, 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([]),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction specialFilter(nums::Vector{Int64})::Int64 \n    count = 0\n    odd_digits = (1, 3, 5, 7, 9)\n    for num in nums\n        if num > 10\n            number_as_string = string(num)\n            if parse(Int64, number_as_string[1]) in odd_digits && parse(Int64, number_as_string[end]) in odd_digits\n                count += 1\n            end\n        end\n    end\n    return count\nend\n\n### JavaScript version\n\nfunction specialFilter(nums){\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "js",
    "prompt": "function parse_music(music_string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction parse_music(music_string::String)::Vector{Int64} \n    note_map = Dict(\"o\"=>4, \"o|\"=>2, \".|\"=>1)\n    return [note_map[x] for x in split(music_string) if x != \"\"]\nend\n\n### JavaScript version\n\nfunction parse_music(music_string){\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "js",
    "prompt": "function count_distinct_characters(string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction count_distinct_characters(string::String)::Int64 \n    return length(Set(lowercase(string)))\nend\n\n### JavaScript version\n\nfunction count_distinct_characters(string){\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "js",
    "prompt": "function digitSum(s){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\" How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction digitSum(s::String)::Int64 \n    if s == \"\" return 0 end\n    sum([Int64(Char) for Char in s if Char in 'A':'Z'])\nend\n\n### JavaScript version\n\nfunction digitSum(s){\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "js",
    "prompt": "function count_up_to(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_up_to;\n  assert.deepEqual(candidate(5),[2, 3]);\n  assert.deepEqual(candidate(6),[2, 3, 5]);\n  assert.deepEqual(candidate(7),[2, 3, 5]);\n  assert.deepEqual(candidate(10),[2, 3, 5, 7]);\n  assert.deepEqual(candidate(0),[]);\n  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);\n  assert.deepEqual(candidate(1),[]);\n  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction count_up_to(n::Int64)::Vector{Int64} \n    primes = []\n    for i in 2:n-1\n        is_prime = true\n        for j in 2:i-1\n            if i % j == 0\n                is_prime = false\n                break\n            end\n        end\n        if is_prime\n            push!(primes, i)\n        end\n    end\n    return primes\nend\n\n### JavaScript version\n\nfunction count_up_to(n){\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "js",
    "prompt": "function sum_squares(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction sum_squares(lst::Vector{Float64})::Int64 \n    squared = 0\n    for i in lst\n        squared += ceil(i)^2\n    end\n    return squared\nend\n\n### JavaScript version\n\nfunction sum_squares(lst){\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "js",
    "prompt": "function unique(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction unique(l::Vector{Int64})::Vector{Int64} \n    return sort(collect(Set(l)))\nend\n\n### JavaScript version\n\nfunction unique(l){\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "js",
    "prompt": "function fib(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction fib(n::Int64)::Int64 \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\n    end\nend\n\n### JavaScript version\n\nfunction fib(n){\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "js",
    "prompt": "function fizz_buzz(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction fizz_buzz(n::Int64)::Int64 \n    ns = []\n    for i in 0:n-1\n        if i % 11 == 0 || i % 13 == 0\n            push!(ns, i)\n        end\n    end\n    s = join(string.(ns))\n    ans = 0\n    for c in s\n        ans += (c == '7')\n    end\n    return ans\nend\n\n### JavaScript version\n\nfunction fizz_buzz(n){\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "js",
    "prompt": "function Strongest_Extension(class_name, extensions){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\");\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction Strongest_Extension(class_name::String, extensions::Vector{String})::String \n    strong = extensions[1]\n    my_val = count(isuppercase, extensions[1]) - count(islowercase, extensions[1])\n    for s in extensions[2:end]\n        val = count(isuppercase, s) - count(islowercase, s)\n        if val > my_val\n            strong = s\n            my_val = val\n        end\n    end\n    ans = class_name * \".\" * strong\n    return ans\nend\n\n### JavaScript version\n\nfunction Strongest_Extension(class_name, extensions){\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "js",
    "prompt": "function find_closest_elements(numbers){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64} \n    closest_pair = nothing\n    distance = nothing\n\n    for (idx, elem) in enumerate(numbers)\n        for (idx2, elem2) in enumerate(numbers)\n            if idx != idx2\n                if distance === nothing\n                    distance = abs(elem - elem2)\n                    closest_pair = sort([elem, elem2])\n                else\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance\n                        distance = new_distance\n                        closest_pair = sort([elem, elem2])\n                    end\n                end\n            end\n        end\n    end\n\n    return closest_pair[1], closest_pair[2]\nend\n\n### JavaScript version\n\nfunction find_closest_elements(numbers){\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "js",
    "prompt": "function valid_date(date){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction valid_date(date::String)::Bool \n    try\n        date = strip(date)\n        month, day, year = split(date, '-')\n        month, day, year = parse(Int, month), parse(Int, day), parse(Int, year)\n        if month < 1 || month > 12\n            return false\n        elseif month in [1,3,5,7,8,10,12] && (day < 1 || day > 31)\n            return false\n        elseif month in [4,6,9,11] && (day < 1 || day > 30)\n            return false\n        elseif month == 2 && (day < 1 || day > 29)\n            return false\n        end\n    catch\n        return false\n    end\n\n    return true\nend\n\n### JavaScript version\n\nfunction valid_date(date){\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "js",
    "prompt": "function add(x, y){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate(0, 1),1);\n  assert.deepEqual(candidate(1, 0),1);\n  assert.deepEqual(candidate(2, 3),5);\n  assert.deepEqual(candidate(5, 7),12);\n  assert.deepEqual(candidate(7, 5),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\nend\n\n### JavaScript version\n\nfunction add(x, y){\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "js",
    "prompt": "function triples_sum_to_zero(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1, 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3, 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    for i in 1:length(l)\n        for j in i+1:length(l)\n            for k in j+1:length(l)\n                if l[i]+l[j]+l[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\n### JavaScript version\n\nfunction triples_sum_to_zero(l){\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "js",
    "prompt": "function largest_divisor(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n  assert.deepEqual(candidate(49),7);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction largest_divisor(n::Int64)::Int64 \n    for i = n-1:-1:0\n        if n % i == 0\n            return i\n        end\n    end\nend\n\n### JavaScript version\n\nfunction largest_divisor(n){\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "js",
    "prompt": "function sort_numbers(numbers){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction sort_numbers(numbers::String)::String \n    value_map = Dict(\"zero\"=>0,\"one\"=>1,\"two\"=>2,\"three\"=>3,\"four\"=>4,\"five\"=>5,\"six\"=>6,\"seven\"=>7,\"eight\"=>8,\"nine\"=>9)\n    return join(sort(filter(!isempty,split(numbers,\" \")), by = x -> value_map[x]), \" \")\nend\n\n### JavaScript version\n\nfunction sort_numbers(numbers){\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "js",
    "prompt": "function smallest_change(arr){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    ans = 0\n    for i in 1:length(arr)\u00f72\n        if arr[i] != arr[end-i+1]\n            ans += 1\n        end\n    end\n    return ans\nend\n\n### JavaScript version\n\nfunction smallest_change(arr){\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "js",
    "prompt": "function below_threshold(l, t){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_threshold;\n  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);\n  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction below_threshold(l::Vector{Int64}, t::Int64)::Bool \n    for e in l\n        if e >= t\n            return false\n        end\n    end\n    return true\nend\n\n### JavaScript version\n\nfunction below_threshold(l, t){\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "js",
    "prompt": "function prod_signs(arr){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr) return nothing end\n    prod = 0 in arr ? 0 : (-1) ^ length(filter(x -> x < 0, arr))\n    return prod * sum(abs.(arr))\nend\n\n### JavaScript version\n\nfunction prod_signs(arr){\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "js",
    "prompt": "function modp(n, p){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction modp(n::Int64, p::Int64)::Int64 \n    ret = 1\n    for i in 1:n\n        ret = (2 * ret) % p\n    end\n    return ret\nend\n\n### JavaScript version\n\nfunction modp(n, p){\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "js",
    "prompt": "function count_upper(s){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for i in 1:2:length(s)\n        if s[i] in \"AEIOU\"\n            count += 1\n        end\n    end\n    return count\nend\n\n### JavaScript version\n\nfunction count_upper(s){\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "js",
    "prompt": "function multiply(a, b){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a % 10) * abs(b % 10)\nend\n\n### JavaScript version\n\nfunction multiply(a, b){\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "js",
    "prompt": "function unique_digits(x){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n    odd_digit_elements = Int64[]\n    for i in x\n        if all(c -> parse(Int, c) % 2 == 1, string(i))\n            push!(odd_digit_elements, i)\n        end\n    end\n    return sort(odd_digit_elements)\nend\n\n### JavaScript version\n\nfunction unique_digits(x){\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "js",
    "prompt": "function will_it_fly(q, w){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q) > w\n        return false\n    end\n    i, j = 1, length(q)\n    while i<j\n        if q[i] != q[j]\n            return false\n        end\n        i+=1\n        j-=1\n    end\n    return true\nend\n\n### JavaScript version\n\nfunction will_it_fly(q, w){\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "js",
    "prompt": "function is_multiply_prime(a){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n  assert.deepEqual(candidate(1001),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_multiply_prime(a::Int64)::Bool \n    function is_prime(n)\n        for j in 2:n-1\n            if n%j == 0\n                return false\n            end\n        end\n        return true\n    end\n\n    for i in 2:101\n        if !is_prime(i) continue end\n        for j in 2:101\n            if !is_prime(j) continue end\n            for k in 2:101\n                if !is_prime(k) continue end\n                if i*j*k == a return true end\n            end\n        end\n    end\n    return false\nend\n\n### JavaScript version\n\nfunction is_multiply_prime(a){\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "js",
    "prompt": "function maximum(arr, k){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n        return []\n    end\n    sort!(arr)\n    return arr[end-k+1:end]\nend\n\n### JavaScript version\n\nfunction maximum(arr, k){\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "js",
    "prompt": "function separate_paren_groups(paren_string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction separate_paren_groups(paren_string::String)::Vector{String} \n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string\n        if c == '('\n            current_depth += 1\n            push!(current_string, c)\n        elseif c == ')'\n            current_depth -= 1\n            push!(current_string, c)\n\n            if current_depth == 0\n                push!(result, join(current_string))\n                current_string = []\n            end\n        end\n    end\n    return result\nend\n\n### JavaScript version\n\nfunction separate_paren_groups(paren_string){\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "js",
    "prompt": "function filter_integers(values){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    [x for x in values if isa(x, Int64)]\nend\n\n### JavaScript version\n\nfunction filter_integers(values){\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "js",
    "prompt": "function skjkasdkd(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction skjkasdkd(lst::Vector{Int64})::Int64 \n    function isPrime(n)\n        for i in 2:isqrt(n)\n            if n%i==0\n                return false\n            end\n        end\n        return true\n    end\n    maxx = 0\n    i = 1\n    while i <= length(lst)\n        if lst[i] > maxx && isPrime(lst[i])\n            maxx = lst[i]\n        end\n        i+=1\n    end\n    result = sum([parse(Int,digit) for digit in string(maxx)])\n    return result\nend\n\n### JavaScript version\n\nfunction skjkasdkd(lst){\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "js",
    "prompt": "function total_match(lst1, lst2){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n    l1 = sum(length.(lst1))\n    l2 = sum(length.(lst2))\n    if l1 <= l2\n        return lst1\n    else\n        return lst2\n    end\nend\n\n### JavaScript version\n\nfunction total_match(lst1, lst2){\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "js",
    "prompt": "function car_race_collision(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction car_race_collision(n::Int64)::Int64 \n    n^2\nend\n\n### JavaScript version\n\nfunction car_race_collision(n){\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "js",
    "prompt": "function is_simple_power(x, n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n == 1\n        return x == 1\n    end\n    power = 1\n    while power < x\n        power *= n\n    end\n    return power == x\nend\n\n### JavaScript version\n\nfunction is_simple_power(x, n){\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "js",
    "prompt": "function encode(message){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction encode(message::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_replace = Dict([(i, Char(UInt16(i) + 2)) for i in vowels])\n    message = map(c -> islowercase(c) ? uppercase(c) : lowercase(c), message)\n    return join([haskey(vowels_replace, i) ? vowels_replace[i] : i for i in message])\nend\n\n### JavaScript version\n\nfunction encode(message){\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "js",
    "prompt": "function incr_list(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction incr_list(l::Vector{Int64})::Vector{Int64} \n    [(e + 1) for e in l]\nend\n\n### JavaScript version\n\nfunction incr_list(l){\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "js",
    "prompt": "function flip_case(string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction flip_case(string::String)::String \n    return map(c -> islowercase(c) ? uppercase(c) : lowercase(c), string)\nend\n\n### JavaScript version\n\nfunction flip_case(string){\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "js",
    "prompt": "function vowels_count(s){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"ACEDY\"),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction vowels_count(s::String)::Int64 \n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c -> c in vowels, s)\n    if s[end] == 'y' || s[end] == 'Y'\n        n_vowels += 1\n    end\n    return n_vowels\nend\n\n### JavaScript version\n\nfunction vowels_count(s){\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "js",
    "prompt": "function sorted_list_sum(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    sort!(lst)\n    new_lst = []\n    for i in lst\n        if length(i)%2 == 0\n            push!(new_lst, i)\n        end\n    end\n    return sort(new_lst, by=length)\nend\n\n### JavaScript version\n\nfunction sorted_list_sum(lst){\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "js",
    "prompt": "function words_string(s){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction words_string(s::String)::Vector{String} \n    if s == \"\"\n        return []\n    end\n\n    s_list = []\n\n    for letter in s\n        if letter == ','\n            push!(s_list, ' ')\n        else\n            push!(s_list, letter)\n        end\n    end\n\n    s_list = join(s_list)\n    return split(s_list)\nend\n\n### JavaScript version\n\nfunction words_string(s){\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "js",
    "prompt": "function even_odd_palindrome(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction even_odd_palindrome(n::Int64)::Tuple{Int64, Int64} \n    function is_palindrome(n)\n        return string(n) == reverse(string(n))\n    end\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in 1:n\n        if i%2 == 1 && is_palindrome(i)\n            odd_palindrome_count += 1\n        elseif i%2 == 0 && is_palindrome(i)\n            even_palindrome_count += 1\n        end\n    end\n    return (even_palindrome_count, odd_palindrome_count)\nend\n\n### JavaScript version\n\nfunction even_odd_palindrome(n){\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "js",
    "prompt": "function triangle_area(a, b, c){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4, 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4, 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1, 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2, 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2, 2, 10),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64 \n    if a + b <= c || a + c <= b || b + c <= a\n        return -1.0\n    end\n    s = (a + b + c)/2\n    area = (s * (s - a) * (s - b) * (s - c)) ^ 0.5\n    area = round(area, digits=2)\n    return area\nend\n\n### JavaScript version\n\nfunction triangle_area(a, b, c){\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "js",
    "prompt": "function median(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    if length(l) % 2 == 1\n        return l[div(length(l), 2)+1]\n    else\n        return (l[div(length(l), 2)] + l[div(length(l), 2)+1])/2\n    end\nend\n\n### JavaScript version\n\nfunction median(l){\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "js",
    "prompt": "function change_base(x, base){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction change_base(x::Int64, base::Int64)::String \n    ret = \"\"\n    while x > 0\n        ret = string(x % base) * ret\n        x \u00f7= base\n    end\n    return ret\nend\n\n### JavaScript version\n\nfunction change_base(x, base){\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "js",
    "prompt": "function longest(strings){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    maxlen = maximum(length.(strings))\n    for s in strings\n        if length(s) == maxlen\n            return s\n        end\n    end\nend\n\n### JavaScript version\n\nfunction longest(strings){\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "js",
    "prompt": "function common(l1, l2){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64} \n    ret = Set()\n    for e1 in l1\n        for e2 in l2\n            if e1 == e2\n                push!(ret, e1)\n            end\n        end\n    end\n    return sort(collect(ret))\nend\n\n### JavaScript version\n\nfunction common(l1, l2){\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "js",
    "prompt": "function cycpattern_check(a, b){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cycpattern_check;\n  assert.deepEqual(candidate(\"xyzw\", \"xyw\"),false);\n  assert.deepEqual(candidate(\"yello\", \"ell\"),true);\n  assert.deepEqual(candidate(\"whattup\", \"ptut\"),false);\n  assert.deepEqual(candidate(\"efef\", \"fee\"),true);\n  assert.deepEqual(candidate(\"abab\", \"aabb\"),false);\n  assert.deepEqual(candidate(\"winemtt\", \"tinem\"),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction cycpattern_check(a::String, b::String)::Bool \n    l = length(b)\n    pat = b * b\n    for i in 0:(length(a) - l)\n        for j in 0:l\n            if a[i+1:i+l] == pat[j+1:j+l]\n                return true\n            end\n        end\n    end\n    return false\nend\n\n### JavaScript version\n\nfunction cycpattern_check(a, b){\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "js",
    "prompt": "function minSubArraySum(nums){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    max_sum = 0\n    s = 0\n    for num in nums\n        s += -num\n        if (s < 0)\n            s = 0\n        end\n        max_sum = max(s, max_sum)\n    end\n    if max_sum == 0\n        max_sum = maximum(-nums)\n    end\n    min_sum = -max_sum\n    return min_sum\nend\n\n### JavaScript version\n\nfunction minSubArraySum(nums){\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "js",
    "prompt": "function sort_array(array){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n    return length(array) == 0 ? [] : sort(array, rev=(array[1]+array[end]) % 2 == 0)\nend\n\n### JavaScript version\n\nfunction sort_array(array){\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "js",
    "prompt": "function histogram(test){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction histogram(test::String)::Dict{String, Int64}> \n    dict1=Dict()\n    list1=split(test)\n    t=0\n\n    for i in list1\n        if(count(x->x==i, list1)>t) && i!=\"\"\n            t=count(x->x==i, list1)\n        end\n    end\n    if t>0\n        for i in list1\n            if(count(x->x==i, list1)==t)\n                dict1[i]=t\n            end\n        end\n    end\n    return dict1\nend\n\n### JavaScript version\n\nfunction histogram(test){\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "js",
    "prompt": "function get_odd_collatz(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_odd_collatz;\n  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(5),[1, 5]);\n  assert.deepEqual(candidate(12),[1, 3, 5]);\n  assert.deepEqual(candidate(1),[1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n    if n%2==0\n        odd_collatz = [] \n    else\n        odd_collatz = [n]\n    end\n    while n > 1\n        if n % 2 == 0\n            n = n/2\n        else\n            n = n*3 + 1\n        end\n        if n%2 == 1\n            push!(odd_collatz, Int(n))\n        end\n    end\n    return sort(odd_collatz)\nend\n\n### JavaScript version\n\nfunction get_odd_collatz(n){\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "js",
    "prompt": "function fibfib(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction fibfib(n::Int64)::Int64 \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n        return 1\n    end\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nend\n\n### JavaScript version\n\nfunction fibfib(n){\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "js",
    "prompt": "function truncate_number(number){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction truncate_number(number::Float64)::Float64 \n    number % 1.0\nend\n\n### JavaScript version\n\nfunction truncate_number(number){\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "js",
    "prompt": "function max_element(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction max_element(l::Vector{Int64})::Int64 \n    m = l[1]\n    for e in l\n        if e > m\n            m = e\n        end\n    end\n    return m\nend\n\n### JavaScript version\n\nfunction max_element(l){\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "js",
    "prompt": "function prime_fib(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction prime_fib(n::Int64)::Int64 \n    function is_prime(p)\n        if p < 2\n            return false\n        end\n        for k in 2:min(floor(Int64, sqrt(p))+1, p-1)\n            if p % k == 0\n                return false\n            end\n        end\n        return true\n    end\n    f = [0, 1]\n    while true\n        push!(f, f[end] + f[end-1])\n        if is_prime(f[end])\n            n -= 1\n        end\n        if n == 0\n            return f[end]\n        end\n    end\nend\n\n### JavaScript version\n\nfunction prime_fib(n){\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "js",
    "prompt": "function sum_product(numbers){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers\n        sum_value += n\n        prod_value *= n\n    end\n    return sum_value, prod_value\nend\n\n### JavaScript version\n\nfunction sum_product(numbers){\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "js",
    "prompt": "function select_words(s, n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction select_words(s::String, n::Int64)::Vector{String} \n    result = []\n    for word in split(s)\n        n_consonants = 0\n        for i in 1:length(word)\n            if word[i] \u2209 ['a','e','i','o','u','A','E','I','O','U']\n                n_consonants += 1 \n            end\n        end\n        if n_consonants == n\n            push!(result, word)\n        end\n    end\n    return result\nend\n\n### JavaScript version\n\nfunction select_words(s, n){\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "js",
    "prompt": "function add_elements(arr, k){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction add_elements(arr::Vector{Int64}, k::Int64)::Int64 \n    return sum(filter(x -> length(string(x)) <= 2, arr[1:k]))\nend\n\n### JavaScript version\n\nfunction add_elements(arr, k){\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "js",
    "prompt": "function eat(number, need, remaining){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4, 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2, 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4, 5, 1),[5, 0]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64} \n    if need <= remaining\n        return [number + need, remaining - need]\n    else\n        return [number + remaining, 0]\n    end\nend\n\n### JavaScript version\n\nfunction eat(number, need, remaining){\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "js",
    "prompt": "function odd_count(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = odd_count;\n  assert.deepEqual(candidate([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction odd_count(lst::Vector{String})::Vector{String} \n    res = []\n    for arr in lst\n        n = sum([parse(Int, d)%2==1 for d in arr])\n        push!(res, \"the number of odd elements \" * string(n) * \"n the str\" * string(n) * \"ng \" * string(n) * \" of the \" * string(n) * \"nput.\")\n    end\n    return res\nend\n\n### JavaScript version\n\nfunction odd_count(lst){\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "js",
    "prompt": "function next_smallest(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    lst = sort(unique(lst))\n    length(lst) < 2 ? nothing : lst[2]\nend\n\n### JavaScript version\n\nfunction next_smallest(lst){\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "js",
    "prompt": "function filter_by_prefix(strings, prefix){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String} \n    return [x for x in strings if occursin(prefix, x)]\nend\n\n### JavaScript version\n\nfunction filter_by_prefix(strings, prefix){\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "js",
    "prompt": "function choose_num(x, y){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6, 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7, 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n    end\n    if y % 2 == 0\n        return y\n    end\n    if x == y\n        return -1\n    end\n    return y - 1\nend\n\n### JavaScript version\n\nfunction choose_num(x, y){\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "js",
    "prompt": "function prime_length(string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_length;\n  assert.deepEqual(candidate(\"Hello\"),true);\n  assert.deepEqual(candidate(\"abcdcba\"),true);\n  assert.deepEqual(candidate(\"kittens\"),true);\n  assert.deepEqual(candidate(\"orange\"),false);\n  assert.deepEqual(candidate(\"wow\"),true);\n  assert.deepEqual(candidate(\"world\"),true);\n  assert.deepEqual(candidate(\"MadaM\"),true);\n  assert.deepEqual(candidate(\"Wow\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"HI\"),true);\n  assert.deepEqual(candidate(\"go\"),true);\n  assert.deepEqual(candidate(\"gogo\"),false);\n  assert.deepEqual(candidate(\"aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"Madam\"),true);\n  assert.deepEqual(candidate(\"M\"),false);\n  assert.deepEqual(candidate(\"0\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction prime_length(string::String)::Bool \n    l = length(string)\n    if l == 0 || l == 1\n        return false\n    end\n    for i in 2:l-1\n        if l % i == 0\n            return false\n        end\n    end\n    return true\nend\n\n### JavaScript version\n\nfunction prime_length(string){\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "js",
    "prompt": "function sum_to_n(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(6),21);\n  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n  assert.deepEqual(candidate(100),5050);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction sum_to_n(n::Int64)::Int64 \n    sum(0:n)\nend\n\n### JavaScript version\n\nfunction sum_to_n(n){\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "js",
    "prompt": "function fix_spaces(text){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction fix_spaces(text::String)::String \n    new_text = \"\"\n    i = 1\n    start, ending = 1, 1\n    while i <= length(text)\n        if text[i] == ' '\n            ending += 1\n        else\n            if ending - start > 2\n                new_text *= \"-\"*text[i]\n            elseif ending - start > 0\n                new_text *= \"_\"^(ending-start)*text[i]\n            else\n                new_text *= text[i]\n            end\n            start, ending = i+1, i+1\n        end\n        i += 1\n    end\n    if ending - start > 2\n        new_text *= \"-\"\n    elseif ending - start > 0\n        new_text *= \"_\"^(ending-start)\n    end\n    return new_text\nend\n\n### JavaScript version\n\nfunction fix_spaces(text){\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "js",
    "prompt": "function rolling_max(numbers){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    running_max = nothing\n    result = []\n\n    for n in numbers\n        if running_max == nothing\n            running_max = n\n        else\n            running_max = max(running_max, n)\n        end\n        push!(result, running_max)\n    end\n    return result\nend\n\n### JavaScript version\n\nfunction rolling_max(numbers){\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "js",
    "prompt": "function compare(game, guess){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return [abs(x-y) for (x,y) in zip(game,guess)]\nend\n\n### JavaScript version\n\nfunction compare(game, guess){\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "js",
    "prompt": "function remove_duplicates(numbers){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64} \n    c = Dict()\n    for n in numbers\n        c[n] = get(c, n, 0) + 1\n    end\n    return [n for n in numbers if c[n] <= 1]\nend\n\n### JavaScript version\n\nfunction remove_duplicates(numbers){\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "js",
    "prompt": "function same_chars(s0, s1){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\", \"aaccc\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction same_chars(s0::String, s1::String)::Bool \n    return Set(s0) == Set(s1)\nend\n\n### JavaScript version\n\nfunction same_chars(s0, s1){\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "js",
    "prompt": "function even_odd_count(num){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction even_odd_count(num::Int64)::Tuple{Int64, Int64} \n    even_count = 0\n    odd_count = 0\n    for i in string(abs(num))\n        if parse(Int64, i)%2==0\n            even_count +=1\n        else\n            odd_count +=1\n        end\n    end\n    return (even_count, odd_count)\nend\n\n### JavaScript version\n\nfunction even_odd_count(num){\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "js",
    "prompt": "function string_xor(a, b){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction string_xor(a::String, b::String)::String \n    xor(i, j) = i == j ? '0' : '1'\n    return join([xor(x, y) for (x, y) in zip(a, b)])\nend\n\n### JavaScript version\n\nfunction string_xor(a, b){\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "js",
    "prompt": "function strlen(string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"),9);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction strlen(string::String)::Int64 \n    return length(string)\nend\n\n### JavaScript version\n\nfunction strlen(string){\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "js",
    "prompt": "function string_sequence(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction string_sequence(n::Int64)::String \n    return join(string.(0:n), \" \")\nend\n\n### JavaScript version\n\nfunction string_sequence(n){\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "js",
    "prompt": "function file_name_check(file_name){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"/this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\");\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"_f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction file_name_check(file_name::String)::String \n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = split(file_name, '.')\n    if length(lst) != 2\n        return \"No\"\n    end\n    if !(lst[2] in suf)\n        return \"No\"\n    end\n    if length(lst[1]) == 0\n        return \"No\"\n    end\n    if !(isletter(lst[1][1]))\n        return \"No\"\n    end\n    t = count(isdigit, lst[1])\n    if t > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\n### JavaScript version\n\nfunction file_name_check(file_name){\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "js",
    "prompt": "function add(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction add(lst::Vector{Int64})::Int64 \n    sum([lst[i] for i in 2:2:length(lst) if lst[i]%2 == 0])\nend\n\n### JavaScript version\n\nfunction add(lst){\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "js",
    "prompt": "function intersperse(numbers, delimeter){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction intersperse(numbers::Vector{Int64}, delimeter::Int64)::Vector{Int64} \n    if isempty(numbers)\n        return []\n    end\n\n    result = []\n\n    for n in numbers[1:end-1]\n        push!(result, n)\n        push!(result, delimeter)\n    end\n\n    push!(result, numbers[end])\n\n    return result\nend\n\n### JavaScript version\n\nfunction intersperse(numbers, delimeter){\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "js",
    "prompt": "function match_parens(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction match_parens(lst::Vector{String})::String \n    function check(s)\n        val = 0\n        for i in s\n            if i == '('\n                val = val + 1\n            else\n                val = val - 1\n            end\n            if val < 0\n                return false\n            end\n        end\n        return val == 0 ? true : false\n    end\n\n    S1 = lst[1] * lst[2]\n    S2 = lst[2] * lst[1]\n    return check(S1) || check(S2) ? \"Yes\" : \"No\"\nend\n\n### JavaScript version\n\nfunction match_parens(lst){\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "js",
    "prompt": "function filter_by_substring(strings, substring){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String} \n    return filter(x -> occursin(substring, x), strings)\nend\n\n### JavaScript version\n\nfunction filter_by_substring(strings, substring){\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "js",
    "prompt": "function find_max(words){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction find_max(words::Vector{String})::String \n    sort(words, by = x -> (-length(Set(x)), x))[1]\nend\n\n### JavaScript version\n\nfunction find_max(words){\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "js",
    "prompt": "function generate_integers(a, b){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = generate_integers;\n  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(17, 89),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64} \n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in lower:upper if i % 2 == 0]\nend\n\n### JavaScript version\n\nfunction generate_integers(a, b){\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "js",
    "prompt": "function exchange(lst1, lst2){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String \n    odd = 0\n    even = 0\n    for i in lst1\n        if i%2 == 1\n            odd += 1\n        end\n    end\n    for i in lst2\n        if i%2 == 0\n            even += 1\n        end\n    end\n    if even >= odd\n        return \"YES\"\n    end\n    return \"NO\"\nend\n\n### JavaScript version\n\nfunction exchange(lst1, lst2){\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "js",
    "prompt": "function int_to_mini_roman(number){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction int_to_mini_roman(number::Int64)::String \n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 13\n    res = \"\"\n    while number > 0\n        div = number \u00f7 num[i] \n        number %= num[i] \n        while div > 0 \n            res *= sym[i] \n            div -= 1\n        end\n        i -= 1\n    end\n    return lowercase(res)\nend\n\n### JavaScript version\n\nfunction int_to_mini_roman(number){\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "js",
    "prompt": "function is_equal_to_sum_even(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_equal_to_sum_even;\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),true);\n  assert.deepEqual(candidate(11),false);\n  assert.deepEqual(candidate(12),true);\n  assert.deepEqual(candidate(13),false);\n  assert.deepEqual(candidate(16),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    return n%2 == 0 && n >= 8\nend\n\n### JavaScript version\n\nfunction is_equal_to_sum_even(n){\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "js",
    "prompt": "function decimal_to_binary(decimal){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction decimal_to_binary(decimal::Int64)::String \n    return \"db\" * string(decimal, base=2) * \"db\"\nend\n\n### JavaScript version\n\nfunction decimal_to_binary(decimal){\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "js",
    "prompt": "function sort_third(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_third;\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);\n  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);\n  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction sort_third(l::Vector{Int64})::Vector{Int64} \n    l[1:3:end] = sort(l[1:3:end])\n    return l\nend\n\n### JavaScript version\n\nfunction sort_third(l){\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "js",
    "prompt": "function simplify(x, n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction simplify(x::String, n::String)::Bool \n    a, b = split(x, \"/\")\n    c, d = split(n, \"/\")\n    numerator = parse(Int, a) * parse(Int, c)\n    denom = parse(Int, b) * parse(Int, d)\n    numerator / denom == trunc(numerator / denom)\nend\n\n### JavaScript version\n\nfunction simplify(x, n){\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "js",
    "prompt": "function right_angle_triangle(a, b, c){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction right_angle_triangle(a::Int64, b::Int64, c::Int64)::Bool \n    return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b\nend\n\n### JavaScript version\n\nfunction right_angle_triangle(a, b, c){\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "js",
    "prompt": "function below_zero(operations){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction below_zero(operations::Vector{Int64})::Bool \n    balance = 0\n\n    for op in operations\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n\n### JavaScript version\n\nfunction below_zero(operations){\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "js",
    "prompt": "function greatest_common_divisor(a, b){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n    while b != 0\n        a, b = b, a % b\n    end\n    return a\nend\n\n### JavaScript version\n\nfunction greatest_common_divisor(a, b){\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "js",
    "prompt": "function f(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);\n  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);\n  assert.deepEqual(candidate(1),[1]);\n  assert.deepEqual(candidate(3),[1, 2, 6]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction f(n::Int64)::Vector{Int64} \n    ret = []\n    for i in 1:n\n        if i%2 == 0\n            x = 1\n            for j in 1:i x *= j end\n            push!(ret,x)\n        else\n            x = 0\n            for j in 1:i x += j end\n            push!(ret,x)\n        end\n    end\n    return ret\nend\n\n### JavaScript version\n\nfunction f(n){\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "js",
    "prompt": "function monotonic(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction monotonic(l::Vector{Int64})::Bool \n    return l == sort(l) || l == sort(l, rev=true)\nend\n\n### JavaScript version\n\nfunction monotonic(l){\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "js",
    "prompt": "function by_length(arr){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    dic = Dict(1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")\n    sorted_arr = sort(arr, rev=true)\n    new_arr = []\n    for var in sorted_arr\n        try\n            push!(new_arr, dic[var])\n        catch\n        end\n    end\n    return new_arr\nend\n\n### JavaScript version\n\nfunction by_length(arr){\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "js",
    "prompt": "function check_if_last_char_is_a_letter(txt){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_if_last_char_is_a_letter;\n  assert.deepEqual(candidate(\"apple\"),false);\n  assert.deepEqual(candidate(\"apple pi e\"),true);\n  assert.deepEqual(candidate(\"eeeee\"),false);\n  assert.deepEqual(candidate(\"A\"),true);\n  assert.deepEqual(candidate(\"Pumpkin pie \"),false);\n  assert.deepEqual(candidate(\"Pumpkin pie 1\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"eeeee e \"),false);\n  assert.deepEqual(candidate(\"apple pie\"),false);\n  assert.deepEqual(candidate(\"apple pi e \"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction check_if_last_char_is_a_letter(txt::String)::Bool \n    check = split(txt, \" \")[end]\n    return length(check) == 1 && 97 <= Int(lowercase(check[1])) <= 122\nend\n\n### JavaScript version\n\nfunction check_if_last_char_is_a_letter(txt){\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "js",
    "prompt": "function iscube(a){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction iscube(a::Int64)::Bool \n    a = abs(a)\n    return round(cbrt(a))^3 == a\nend\n\n### JavaScript version\n\nfunction iscube(a){\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "js",
    "prompt": "function reverse_delete(s, c){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction reverse_delete(s::String, c::String)::Tuple{String, Bool} \n    s = filter(x -> !(x in c), s)\n    return (s, s == reverse(s))\nend\n\n### JavaScript version\n\nfunction reverse_delete(s, c){\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "js",
    "prompt": "function mean_absolute_deviation(numbers){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0, 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64 \n    mean = sum(numbers) / length(numbers)\n    return sum(abs(x - mean) for x in numbers) / length(numbers)\nend\n\n### JavaScript version\n\nfunction mean_absolute_deviation(numbers){\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "js",
    "prompt": "function correct_bracketing(brackets){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction correct_bracketing(brackets::String)::Bool \n    depth = 0\n    for b in brackets\n        if b == '<'\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\n### JavaScript version\n\nfunction correct_bracketing(brackets){\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "js",
    "prompt": "function rescale_to_unit(numbers){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64} \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n    [(x - min_number) / (max_number - min_number) for x in numbers]\nend\n\n### JavaScript version\n\nfunction rescale_to_unit(numbers){\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "js",
    "prompt": "function intersection(interval1, interval2){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64, Int64})::String \n    function is_prime(num)\n        if num == 1 || num == 0\n            return false\n        end\n        if num == 2\n            return true\n        end\n        for i in 2:num\n            if num%i == 0\n                return false\n            end\n        end\n        return true\n    end\n\n    l = max(interval1[1], interval2[1])\n    r = min(interval1[2], interval2[2])\n    length = r - l\n    if length > 0 && is_prime(length)\n        return \"YES\"\n    end\n    return \"NO\"\nend\n\n### JavaScript version\n\nfunction intersection(interval1, interval2){\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "js",
    "prompt": "function hex_key(num){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction hex_key(num::String)::Int64 \n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in num\n        if i in primes\n            total += 1\n        end\n    end\n    return total\nend\n\n### JavaScript version\n\nfunction hex_key(num){\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "js",
    "prompt": "function strange_sort_list(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    res, switch = [], true\n    while !isempty(lst)\n        push!(res, switch ? minimum(lst) : maximum(lst))\n        deleteat!(lst, findfirst(x -> x == res[end], lst))\n        switch = !switch\n    end\n    return res\nend\n\n### JavaScript version\n\nfunction strange_sort_list(lst){\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "js",
    "prompt": "function is_bored(S){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a walk\"),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_bored(S::String)::Int64 \n    sentences = split(S, r\"[.?!]\\s*\")\n    return sum(startswith.(sentences, \"I \"))\nend\n\n### JavaScript version\n\nfunction is_bored(S){\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "js",
    "prompt": "function all_prefixes(string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction all_prefixes(string::String)::Vector{String} \n    result = []\n    for i in 1:length(string)\n        push!(result, string[1:i])\n    end\n    return result\nend\n\n### JavaScript version\n\nfunction all_prefixes(string){\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "js",
    "prompt": "function how_many_times(string, substring){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction how_many_times(string::String, substring::String)::Int64 \n    times = 0\n\n    for i in 1:length(string)-length(substring)+1\n        if string[i:i+length(substring)-1] == substring\n            times += 1\n        end\n    end\n\n    return times\nend\n\n### JavaScript version\n\nfunction how_many_times(string, substring){\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "js",
    "prompt": "function solution(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction solution(lst::Vector{Int64})::Int64 \n    return sum([x for (idx, x) in enumerate(lst) if isodd(idx) && isodd(x)])\nend\n\n### JavaScript version\n\nfunction solution(lst){\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "js",
    "prompt": "function is_sorted(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_sorted(lst::Vector{Int64})::Bool \n    count_digit = Dict([(i, 0) for i in lst])\n    for i in lst\n        count_digit[i]+=1\n    end\n    if any(count_digit[i] > 2 for i in lst)\n        return false\n    end\n    if all(lst[i-1] <= lst[i] for i in 2:length(lst))\n        return true\n    else\n        return false\n    end\nend\n\n### JavaScript version\n\nfunction is_sorted(lst){\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "js",
    "prompt": "function search(lst){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction search(lst::Vector{Int64})::Int64 \n    frq = zeros(Int64, maximum(lst)+1)\n    for i in lst\n        frq[i] += 1\n    end\n\n    ans = -1\n    for i in 1:length(frq)\n        if frq[i] >= i\n            ans = i\n        end\n    end\n\n    return ans\nend\n\n### JavaScript version\n\nfunction search(lst){\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "js",
    "prompt": "function pluck(arr){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction pluck(arr::Vector{Int64})::Vector{Int64} \n    if(length(arr) == 0) return [] end\n    evens = filter(x -> x%2 == 0, arr)\n    if(evens == []) return [] end\n    return [minimum(evens), findfirst(x -> x == minimum(evens), arr) - 1]\nend\n\n### JavaScript version\n\nfunction pluck(arr){\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "js",
    "prompt": "function pairs_sum_to_zero(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction pairs_sum_to_zero(l::Vector{Int64})::Bool \n    for i = 1:length(l)\n        for j = i+1:length(l)\n            if l[i] + l[j] == 0\n                return true\n            end\n        end\n    end\n    return false\nend\n\n### JavaScript version\n\nfunction pairs_sum_to_zero(l){\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "js",
    "prompt": "function make_palindrome(string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction make_palindrome(string::String)::String \n    if isempty(string)\n        return \"\"\n    end\n    beginning_of_suffix = 1\n    while string[beginning_of_suffix:end] != reverse(string[beginning_of_suffix:end])\n        beginning_of_suffix += 1\n    end\n    return string * reverse(string[1:beginning_of_suffix-1])\nend\n\n### JavaScript version\n\nfunction make_palindrome(string){\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "js",
    "prompt": "function starts_one_ends(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction starts_one_ends(n::Int64)::Int64 \n    if n == 1; return 1; end\n    return 18 * 10^(n - 2)\nend\n\n### JavaScript version\n\nfunction starts_one_ends(n){\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "js",
    "prompt": "function get_positive(l){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction get_positive(l::Vector{Int64})::Vector{Int64} \n    return [e for e in l if e > 0]\nend\n\n### JavaScript version\n\nfunction get_positive(l){\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "js",
    "prompt": "function concatenate(strings){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = concatenate;\n  assert.deepEqual(candidate([]),\"\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"xyz\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction concatenate(strings::Vector{String})::String \n    return join(strings)\nend\n\n### JavaScript version\n\nfunction concatenate(strings){\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "js",
    "prompt": "function is_nested(string){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_nested(string::String)::Bool \n    opening_bracket_index = []\n    closing_bracket_index = []\n    for (i, c) in enumerate(string)\n        if c == '['\n            push!(opening_bracket_index, i)\n        else\n            push!(closing_bracket_index, i)\n        end\n    end\n    reverse!(closing_bracket_index)\n    cnt = 0\n    i = 1\n    l = length(closing_bracket_index)\n    for idx in opening_bracket_index\n        if i <= l && idx < closing_bracket_index[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    return cnt >= 2\nend\n\n### JavaScript version\n\nfunction is_nested(string){\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "js",
    "prompt": "function is_palindrome(text){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_palindrome(text::String)::Bool \n    for i in 1:length(text)\n        if text[i] != text[end-i+1]\n            return false\n        end\n    end\n    return true\nend\n\n### JavaScript version\n\nfunction is_palindrome(text){\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "js",
    "prompt": "function count_nums(arr){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction count_nums(arr::Vector{Int64})::Int64 \n    function digits_sum(n)\n        neg = 1\n        if n < 0 n, neg = -1 * n, -1 end\n        n = [parse(Int64, i) for i in string(n)]\n        n[1] = n[1] * neg\n        return sum(n)\n    end\n    return length(filter(x -> x > 0, [digits_sum(i) for i in arr]))\nend\n\n### JavaScript version\n\nfunction count_nums(arr){\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "js",
    "prompt": "function factorize(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction factorize(n::Int64)::Vector{Int64} \n    fact = []\n    i = 2\n    while i <= isqrt(n) + 1\n        if n % i == 0\n            push!(fact, i)\n            n \u00f7= i\n        else\n            i += 1\n        end\n    end\n    if n > 1\n        push!(fact, n)\n    end\n    return fact\nend\n\n### JavaScript version\n\nfunction factorize(n){\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "js",
    "prompt": "function largest_prime_factor(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction largest_prime_factor(n::Int64)::Int64 \n    function is_prime(k)\n        if k < 2\n            return false\n        end\n        for i in 2:k-1\n            if k % i == 0\n                return false\n            end\n        end\n        return true\n    end\n    largest = 1\n    for j in 2:n\n        if n % j == 0 && is_prime(j)\n            largest = max(largest, j)\n        end\n    end\n    return largest\nend\n\n### JavaScript version\n\nfunction largest_prime_factor(n){\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "js",
    "prompt": "function get_max_triples(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction get_max_triples(n::Int64)::Int64 \n    A = [i*i - i + 1 for i in 1:n]\n    ans = []\n    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n                if (A[i]+A[j]+A[k])%3 == 0\n                    push!(ans,(A[i],A[j],A[k]))\n                end\n            end\n        end\n    end\n    return length(ans)\nend\n\n### JavaScript version\n\nfunction get_max_triples(n){\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "js",
    "prompt": "function anti_shuffle(s){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction anti_shuffle(s::String)::String \n    return join([join(sort(collect(i))) for i in split(s)], \" \")\nend\n\n### JavaScript version\n\nfunction anti_shuffle(s){\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "js",
    "prompt": "function solve(N){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction solve(N::Int64)::String \n    N_str = string(N)\n    N_sum = sum(parse.(Int64, collect(N_str)))\n    N_bin = string(parse(Int64, string(N_sum)), base=2)\n    return N_bin\nend\n\n### JavaScript version\n\nfunction solve(N){\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "js",
    "prompt": "function minPath(grid, k){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minPath;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);\n  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);\n  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction minPath(grid::Vector{Vector{Int64}}, k::Int64)::Vector{Int64} \n    n = length(grid)\n    val = n * n + 1\n    for i in 1:n\n        for j in 1:n\n            if grid[i][j] == 1\n                temp = []\n                if i != 1\n                    push!(temp, grid[i - 1][j])\n                end\n\n                if j != 1\n                    push!(temp, grid[i][j - 1])\n                end\n\n                if i != n\n                    push!(temp, grid[i + 1][j])\n                end\n\n                if j != n\n                    push!(temp, grid[i][j + 1])\n                end\n\n                val = min(temp...)\n            end\n        end\n    end\n\n    ans = []\n    for i in 1:k\n        if i % 2 == 1\n            push!(ans, 1)\n        else\n            push!(ans, val)\n        end\n    end\n    return ans\nend\n\n### JavaScript version\n\nfunction minPath(grid, k){\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "js",
    "prompt": "function make_a_pile(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    [n + 2*i for i in 0:n-1]\nend\n\n### JavaScript version\n\nfunction make_a_pile(n){\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "js",
    "prompt": "function is_prime(n){\n",
    "doctests": "keep",
    "original": "../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nconsole.log"
    ],
    "translation_prompt": "You are a helpful and faithful compiler that transpiles Julia code to JavaScript code. Please translate the following Julia code to JavaScript?\n\n### Julia version\n\nfunction is_prime(n::Int64)::Bool \n    if n < 2\n        return false\n    end\n    for k in 2:n-1\n        if n % k == 0\n            return false\n        end\n    end\n    return true\nend\n\n### JavaScript version\n\nfunction is_prime(n){\n"
  }
]