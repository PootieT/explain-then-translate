[{"name": "HumanEval_61_correct_bracketing", "language": "rkt", "prompt": "#lang racket\n\n(define (correct_bracketing brackets)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_61_correct_bracketing.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"()\") #t 0.001)\n    (check-within (candidate \"(()())\") #t 0.001)\n    (check-within (candidate \"()()(()())()\") #t 0.001)\n    (check-within (candidate \"()()((()()())())(()()(()))\") #t 0.001)\n    (check-within (candidate \"((()())))\") #f 0.001)\n    (check-within (candidate \")(()\") #f 0.001)\n    (check-within (candidate \"(\") #f 0.001)\n    (check-within (candidate \"((((\") #f 0.001)\n    (check-within (candidate \")\") #f 0.001)\n    (check-within (candidate \"(()\") #f 0.001)\n    (check-within (candidate \"()()(()())())(()\") #f 0.001)\n    (check-within (candidate \"()()(()())()))()\") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction correct_bracketing(brackets){\n  let depth = 0;\n  for(let b of brackets){\n    if(b === '('){\n      depth += 1;\n    }else{\n      depth -= 1;\n    }\n    if(depth < 0){\n      return false;\n    }\n  }\n  return depth == 0;\n}\n\n### Explanation\n\nThis function takes a string of brackets and checks if they are properly nested. It does this by iterating through each bracket in the string and keeping track of the depth of the nesting. If it encounters an opening bracket, it increments the depth, and if it encounters a closing bracket, it decrements the depth. If the depth ever goes negative, it means there is a closing bracket without a corresponding opening bracket, so the function returns false. If the depth is zero at the end of the iteration, it means all brackets were properly nested, so the function returns true. To rewrite this program in Racket, you could use a similar approach with a loop and a counter to keep track of the depth. You would also need to use Racket's string functions to iterate through the characters in the string. Here's an example implementation in Racket:\n\n(define (correct-bracketing brackets)\n  (let loop ((depth 0)\n             (chars (string->list brackets)))\n    (cond ((null? chars) (= depth 0))\n          ((eq? (car chars) #\\() (loop (+ depth 1) (cdr chars)))\n          ((eq? (car chars) #\\)) (and (> depth 0) (loop (- depth 1) (cdr chars))))\n          (else (loop depth (cdr chars))))))<|im_end|>\n\n### Racket version\n\n#lang racket\n\n(define (correct_bracketing brackets)\n"}, {"name": "HumanEval_45_triangle_area", "language": "rkt", "prompt": "#lang racket\n\n(define (triangle_area a h)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_45_triangle_area.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 5 3) 7.5 0.001)\n    (check-within (candidate 2 2) 2.0 0.001)\n    (check-within (candidate 10 8) 40.0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction triangle_area(a, h){\n  return a*h/2;\n}\n\n### Explanation\n\nThis program defines a function called `triangle_area` that takes two parameters, `a` and `h`. The function returns the value of `a*h/2`, which is the formula for calculating the area of a triangle given its base and height.\n\n\n### Racket version\n\n#lang racket\n\n(define (triangle_area a h)\n"}, {"name": "HumanEval_139_special_factorial", "language": "rkt", "prompt": "#lang racket\n\n(define (special_factorial n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_139_special_factorial.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate special_factorial))\n    (check-within (candidate 4) 288 0.001)\n    (check-within (candidate 5) 34560 0.001)\n    (check-within (candidate 7) 125411328000 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction special_factorial(n){\n  let fact_i = 1;\n  let special_fact = 1;\n  for(let i=1; i<n+1; i++){\n    fact_i *= i;\n    special_fact *= fact_i;\n  }\n  return special_fact;\n}\n\n### Explanation\n\nThis program defines a function `special_factorial` that takes an integer `n` as input. It initializes two variables `fact_i` and `special_fact` to 1. It then loops through all integers from 1 to `n`, and for each integer `i`, it multiplies `fact_i` by `i` and `special_fact` by `fact_i`. Finally, it returns `special_fact`. The function computes a special factorial of `n`, which is the product of the factorials of all integers from 1 to `n`. \n\n\n### Racket version\n\n#lang racket\n\n(define (special_factorial n)\n"}, {"name": "HumanEval_136_largest_smallest_integers", "language": "rkt", "prompt": "#lang racket\n\n(define (largest_smallest_integers lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_136_largest_smallest_integers.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n    (check-within (candidate (list 2 4 1 3 5 7)) (list #f 1) 0.001)\n    (check-within (candidate (list 2 4 1 3 5 7 0)) (list #f 1) 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 -2)) (list -2 1) 0.001)\n    (check-within (candidate (list 4 5 3 6 2 7 -7)) (list -7 2) 0.001)\n    (check-within (candidate (list 7 3 8 4 9 2 5 -9)) (list -9 2) 0.001)\n    (check-within (candidate (list )) (list #f #f) 0.001)\n    (check-within (candidate (list 0)) (list #f #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6)) (list -1 #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6 0)) (list -1 #f) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 1)) (list -3 1) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction largest_smallest_integers(lst){\n  let smallest = lst.filter(x => x < 0)\n  let largest = lst.filter(x => x > 0)\n  return [smallest.length ? Math.max(...smallest) : null, largest.length ? Math.min(...largest) : null]\n}\n\n### Explanation\n\nThis function takes a list of integers as an input. It then filters the list to find the smallest and largest integers. If there are no negative integers in the list, the function returns null for the smallest integer. If there are no positive integers in the list, the function returns null for the largest integer. The function returns an array with the smallest and largest integers.\n\n\n### Racket version\n\n#lang racket\n\n(define (largest_smallest_integers lst)\n"}, {"name": "HumanEval_109_move_one_ball", "language": "rkt", "prompt": "#lang racket\n\n(define (move_one_ball arr)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_109_move_one_ball.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_one_ball))\n    (check-within (candidate (list 3 4 5 1 2)) #t 0.001)\n    (check-within (candidate (list 3 5 10 1 2)) #t 0.001)\n    (check-within (candidate (list 4 3 1 2)) #f 0.001)\n    (check-within (candidate (list 3 5 4 1 2)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction move_one_ball(arr){\n  if(arr.length==0){\n    return true;\n  }\n  let sorted_array=arr.slice().sort((a,b) => a-b);\n  let my_arr=[];\n  \n  let min_value=Math.min(...arr);\n  let min_index=arr.indexOf(min_value);\n  my_arr=arr.slice(min_index).concat(arr.slice(0,min_index));\n  for(let i=0; i<arr.length; i++){\n    if(my_arr[i]!=sorted_array[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis function takes an array of integers and checks if it is possible to sort the array by moving only one element to the beginning or end of the array. If it is possible, the function returns true, otherwise it returns false. \n\nThe function first checks if the array is empty. If it is, it returns true. If not, it creates a sorted copy of the array and a new array called `my_arr`. \n\nIt then finds the minimum value in the original array and its index. It then slices the original array into two parts, one from the minimum value to the end of the array, and one from the beginning of the array to the index of the minimum value. It then concatenates these two parts in reverse order to create `my_arr`.\n\nFinally, it checks if `my_arr` is equal to the sorted copy of the original array. If it is, it returns true, otherwise it returns false. \n\n\n### Racket version\n\n#lang racket\n\n(define (move_one_ball arr)\n"}, {"name": "HumanEval_131_digits", "language": "rkt", "prompt": "#lang racket\n\n(define (digits n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_131_digits.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n    (check-within (candidate 5) 5 0.001)\n    (check-within (candidate 54) 5 0.001)\n    (check-within (candidate 120) 1 0.001)\n    (check-within (candidate 5014) 5 0.001)\n    (check-within (candidate 98765) 315 0.001)\n    (check-within (candidate 5576543) 2625 0.001)\n    (check-within (candidate 2468) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction digits(n){\n  let product = 1;\n  let odd_count = 0;\n  for(let digit of String(n)){\n    let int_digit = Number(digit);\n    if(int_digit%2 === 1){\n      product *= int_digit;\n      odd_count += 1;\n    }\n  }\n  return odd_count === 0 ? 0 : product;\n}\n\n### Explanation\n\nThis program takes an integer `n` and returns the product of all odd digits in `n`. If `n` has no odd digits, it returns `0`. \n\nThe function first initializes two variables, `product` and `odd_count`, to `1` and `0`, respectively. It then iterates over each digit of `n`, converting each digit to an integer and checking if it is odd. If the digit is odd, it multiplies `product` by the digit and increments `odd_count`. Finally, if `odd_count` is `0`, the function returns `0`, otherwise it returns `product`. \n\n\n### Racket version\n\n#lang racket\n\n(define (digits n)\n"}, {"name": "HumanEval_46_fib4", "language": "rkt", "prompt": "#lang racket\n\n(define (fib4 n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_46_fib4.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 28 0.001)\n    (check-within (candidate 10) 104 0.001)\n    (check-within (candidate 12) 386 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction fib4(n){\n    let results = [0, 0, 2, 0];\n    if (n < 4){\n        return results[n];\n    }\n\n    for (let i = 4; i <= n; i++){\n        let sum = results[0] + results[1] + results[2] + results[3];\n        results.shift();\n        results.push(sum);\n    }\n\n    return results[3];\n}\n\n### Explanation\n\nThis function calculates the nth number of the Fibonacci sequence using a dynamic programming approach. It initializes an array with the first four numbers of the sequence, and then iteratively calculates the next number by summing the previous four numbers. The function returns the fourth number in the array, which is the nth number of the sequence. If n is less than 4, it simply returns the corresponding number from the initialization array. \n\n\n### Racket version\n\n#lang racket\n\n(define (fib4 n)\n"}, {"name": "HumanEval_145_order_by_points", "language": "rkt", "prompt": "#lang racket\n\n(define (order_by_points nums)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_145_order_by_points.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-within (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11) 0.001)\n    (check-within (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction order_by_points(nums){\n  function digits_sum(n){\n    let neg = 1;\n    if (n < 0) [n, neg] = [-1 * n, -1];\n    n = Array.from(String(n), Number);\n    n[0] = n[0] * neg;\n    return n.reduce((a, b) => a + b, 0);\n  }\n  return nums.sort((a, b) => digits_sum(a) - digits_sum(b));\n}\n\n### Explanation\n\nThis program defines a function `order_by_points` that takes an array of numbers `nums` as input. It then defines a nested function `digits_sum` that takes a number `n` as input and returns the sum of its digits. The `digits_sum` function first checks if `n` is negative, and if so, it multiplies it by -1 and sets a flag `neg` to -1. It then converts `n` to an array of digits using `Array.from(String(n), Number)`, and sets the sign of the first digit to `neg`. Finally, it returns the sum of the digits using `reduce`.\n\nThe `order_by_points` function sorts the input array `nums` using the `sort` method, with a comparison function that compares the sum of the digits of each number using `digits_sum`. The function returns the sorted array.\n\n\n### Racket version\n\n#lang racket\n\n(define (order_by_points nums)\n"}, {"name": "HumanEval_80_is_happy", "language": "rkt", "prompt": "#lang racket\n\n(define (is_happy s)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_80_is_happy.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n    (check-within (candidate \"a\") #f 0.001)\n    (check-within (candidate \"aa\") #f 0.001)\n    (check-within (candidate \"abcd\") #t 0.001)\n    (check-within (candidate \"aabb\") #f 0.001)\n    (check-within (candidate \"adb\") #t 0.001)\n    (check-within (candidate \"xyy\") #f 0.001)\n    (check-within (candidate \"iopaxpoi\") #t 0.001)\n    (check-within (candidate \"iopaxioi\") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]) return false;\n  }\n  return true;\n}\n\n### Explanation\n\nThis program defines a function `is_happy` that takes a string `s` as input. If the length of `s` is less than 3, the function returns `false`. Otherwise, the function iterates over the characters of `s` using a for loop. For each character at index `i`, the function checks if the character at index `i+1` or `i+2` is the same as the character at index `i`. If any of these conditions are true, the function returns `false`. If the loop completes without returning `false`, the function returns `true`.\n\n\n### Racket version\n\n#lang racket\n\n(define (is_happy s)\n"}, {"name": "HumanEval_65_circular_shift", "language": "rkt", "prompt": "#lang racket\n\n(define (circular_shift x shift)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_65_circular_shift.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n    (check-within (candidate 100 2) \"001\" 0.001)\n    (check-within (candidate 12 2) \"12\" 0.001)\n    (check-within (candidate 97 8) \"79\" 0.001)\n    (check-within (candidate 12 1) \"21\" 0.001)\n    (check-within (candidate 11 101) \"11\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction circular_shift(x, shift){\n  let s = String(x);\n  if(shift > s.length){\n    return s.split(\"\").reverse().join(\"\");\n  }else{\n    return s.slice(s.length-shift) + s.slice(0, s.length-shift);\n  }\n}\n\n### Explanation\n\nThis function takes two arguments, `x` and `shift`. If `shift` is greater than the length of `x`, it returns a reversed string of `x`. Otherwise, it returns a string that is the result of concatenating the last `shift` characters of `x` with the first `x.length - shift` characters of `x`.\n\n\n### Racket version\n\n#lang racket\n\n(define (circular_shift x shift)\n"}, {"name": "HumanEval_115_max_fill", "language": "rkt", "prompt": "#lang racket\n\n(define (max_fill grid capacity)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_115_max_fill.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n    (check-within (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6 0.001)\n    (check-within (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction max_fill(grid, capacity){\n  return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((a,b) => a+b)/capacity), 0);\n}\n\n### Explanation\n\nThis function takes in a 2D array of integers and a capacity integer. It returns the maximum number of times the capacity can be filled in the grid. The function does this by first reducing the 2D array to a single integer, which is the sum of all the integers in the array. It then divides this sum by the capacity and rounds up to the nearest integer. Finally, it reduces the array of rounded up integers to a single integer, which is the maximum number of times the capacity can be filled in the grid.\n\n\n### Racket version\n\n#lang racket\n\n(define (max_fill grid capacity)\n"}, {"name": "HumanEval_0_has_close_elements", "language": "rkt", "prompt": "#lang racket\n\n(define (has_close_elements numbers threshold)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_0_has_close_elements.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate has_close_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction has_close_elements(numbers, threshold){\n  for(let idx in numbers){\n    for(let idx2 in numbers){\n      if(idx != idx2){\n        let distance = Math.abs(numbers[idx] - numbers[idx2]);\n        if(distance < threshold){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis function takes in an array of numbers and a threshold. It then loops through each element of the array and checks the distance between it and every other element in the array. If the distance between any two elements is less than the threshold, the function returns true. If no two elements have a distance less than the threshold, the function returns false.\n\n\n### Racket version\n\n#lang racket\n\n(define (has_close_elements numbers threshold)\n"}, {"name": "HumanEval_81_numerical_letter_grade", "language": "rkt", "prompt": "#lang racket\n\n(define (numerical_letter_grade grades)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_81_numerical_letter_grade.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numerical_letter_grade))\n    (check-within (candidate (list 4.0 3 1.7 2 3.5)) (list \"A+\" \"B\" \"C-\" \"C\" \"A-\") 0.001)\n    (check-within (candidate (list 1.2)) (list \"D+\") 0.001)\n    (check-within (candidate (list 0.5)) (list \"D-\") 0.001)\n    (check-within (candidate (list 0.0)) (list \"E\") 0.001)\n    (check-within (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list \"D\" \"D-\" \"C-\" \"B\" \"B+\") 0.001)\n    (check-within (candidate (list 0.0 0.7)) (list \"E\" \"D-\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction numerical_letter_grade(grades){\n  let letter_grade = [];\n  for(let gpa of grades){\n    if(gpa == 4.0){\n      letter_grade.push(\"A+\");\n    }else if(gpa > 3.7){\n      letter_grade.push(\"A\");\n    }else if(gpa > 3.3){\n      letter_grade.push(\"A-\");\n    }else if(gpa > 3.0){\n      letter_grade.push(\"B+\");\n    }else if(gpa > 2.7){\n      letter_grade.push(\"B\");\n    }else if(gpa > 2.3){\n      letter_grade.push(\"B-\");\n    }else if(gpa > 2.0){\n      letter_grade.push(\"C+\");\n    }else if(gpa > 1.7){\n      letter_grade.push(\"C\");\n    }else if(gpa > 1.3){\n      letter_grade.push(\"C-\");\n    }else if(gpa > 1.0){\n      letter_grade.push(\"D+\");\n    }else if(gpa > 0.7){\n      letter_grade.push(\"D\");\n    }else if(gpa > 0.0){\n      letter_grade.push(\"D-\");\n    }else{\n      letter_grade.push(\"E\");\n    }\n  }\n  return letter_grade;\n}\n\n### Explanation\n\nThis program takes an array of numerical grades and returns an array of letter grades. The letter grades are determined by the following scale: A+ for 4.0, A for 3.7-4.0, A- for 3.3-3.7, B+ for 3.0-3.3, B for 2.7-3.0, B- for 2.3-2.7, C+ for 2.0-2.3, C for 1.7-2.0, C- for 1.3-1.7, D+ for 1.0-1.3, D for 0.7-1.0, D- for 0.0-0.7, and E for anything below 0.0. To rewrite this program in Racket, you would need to replace the for...of loop with a for loop that iterates over the indices of the array, and replace the push method with the cons function to build up the result list. You would also need to adjust the if...else if statements to use Racket syntax. \n\n```racket\n(define (numerical-letter-grade grades)\n  (let ([letter-grade '()])\n    (for ([i (in-range (length grades))])\n      (let ([gpa (list-ref grades i)])\n        (cond [(= gpa 4.0) (set! letter-grade (cons \"A+\" letter-grade))]\n              [(> gpa 3.7) (set! letter-grade (cons \"A\" letter-grade))]\n              [(> gpa 3.3) (set! letter-grade (cons \"A-\" letter-grade))]\n              [(> gpa 3.0) (set! letter-grade (cons \"B+\" letter-grade))]\n              [(> gpa 2.7) (set! letter-grade (cons \"B\" letter-grade))]\n              [(> gpa 2.3) (set! letter-grade (cons \"B-\" letter-grade))]\n              [(> gpa 2.0) (set! letter-grade (cons \"C+\" letter-grade))]\n              [(> gpa 1.7) (set! letter-grade (cons \"C\" letter-grade))]\n              [(> gpa 1.3) (set! letter-grade (cons \"C-\" letter-grade))]\n              [(> gpa 1.0) (set! letter-grade (cons \"D+\" letter-grade))]\n              [(> gpa 0.7) (set! letter-grade (cons \"D\" letter-grade))]\n              [(> gpa 0.0) (set! letter-grade (cons \"D-\" letter-grade))]\n              [else (set! letter-grade (cons \"E\" letter-grade))])))\n    (reverse letter-grade)))\n```<|im_end|>\n\n### Racket version\n\n#lang racket\n\n(define (numerical_letter_grade grades)\n"}, {"name": "HumanEval_150_x_or_y", "language": "rkt", "prompt": "#lang racket\n\n(define (x_or_y n x y)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_150_x_or_y.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate x_or_y))\n    (check-within (candidate 7 34 12) 34 0.001)\n    (check-within (candidate 15 8 5) 5 0.001)\n    (check-within (candidate 3 33 5212) 33 0.001)\n    (check-within (candidate 1259 3 52) 3 0.001)\n    (check-within (candidate 7919 -1 12) -1 0.001)\n    (check-within (candidate 3609 1245 583) 583 0.001)\n    (check-within (candidate 91 56 129) 129 0.001)\n    (check-within (candidate 6 34 1234) 1234 0.001)\n    (check-within (candidate 1 2 0) 0 0.001)\n    (check-within (candidate 2 2 0) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction x_or_y(n, x, y){\n  if (n === 1) return y;\n  for (let i = 2; i < n; i++){\n    if (n % i === 0) return y;\n  }\n  return x;\n}\n\n### Explanation\n\nThis function takes three arguments, `n`, `x`, and `y`. If `n` is equal to 1, it returns `y`. Otherwise, it loops through all numbers between 2 and `n - 1` (inclusive) and checks if `n` is divisible by any of them. If it is, it returns `y`. If it isn't, it returns `x`. \n\n\n### Racket version\n\n#lang racket\n\n(define (x_or_y n x y)\n"}, {"name": "HumanEval_146_specialFilter", "language": "rkt", "prompt": "#lang racket\n\n(define (specialFilter nums)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_146_specialFilter.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate specialFilter))\n    (check-within (candidate (list 5 -2 1 -5)) 0 0.001)\n    (check-within (candidate (list 15 -73 14 -15)) 1 0.001)\n    (check-within (candidate (list 33 -2 -3 45 21 109)) 2 0.001)\n    (check-within (candidate (list 43 -12 93 125 121 109)) 4 0.001)\n    (check-within (candidate (list 71 -2 -33 75 21 19)) 3 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list )) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction specialFilter(nums){\n  let count = 0;\n  for(let num of nums){\n    if(num > 10){\n      let odd_digits = [1, 3, 5, 7, 9];\n      let number_as_string = String(num);\n      if(odd_digits.includes(Number(number_as_string[0])) && odd_digits.includes(Number(number_as_string[number_as_string.length-1]))){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\n### Explanation\n\nThis function takes an array of numbers as input. It then initializes a count variable to zero. It loops through the array of numbers and checks if the current number is greater than 10. If it is, it converts the number to a string and checks if the first and last digits of the string are odd numbers. If they are, it increments the count variable. Finally, it returns the count variable. \n\n\n### Racket version\n\n#lang racket\n\n(define (specialFilter nums)\n"}, {"name": "HumanEval_17_parse_music", "language": "rkt", "prompt": "#lang racket\n\n(define (parse_music music_string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_17_parse_music.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_music))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"o o o o\") (list 4 4 4 4) 0.001)\n    (check-within (candidate \".| .| .| .|\") (list 1 1 1 1) 0.001)\n    (check-within (candidate \"o| o| .| .| o o o o\") (list 2 2 1 1 4 4 4 4) 0.001)\n    (check-within (candidate \"o| .| o| .| o o| o o|\") (list 2 1 2 1 4 2 4 2) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction parse_music(music_string){\n  let note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x).map(x => note_map[x]);\n}\n\n### Explanation\n\nThis program defines a function `parse_music` that takes a string of musical notes as input. The function then creates a dictionary `note_map` that maps certain note strings to integer values. The function then splits the input string by spaces, filters out any empty strings, and maps the remaining strings to their corresponding integer values using `note_map`. The function then returns the resulting array of integers.\n\n\n### Racket version\n\n#lang racket\n\n(define (parse_music music_string)\n"}, {"name": "HumanEval_125_split_words", "language": "rkt", "prompt": "#lang racket\n\n(define (split_words txt)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_125_split_words.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n    (check-within (candidate \"Hello world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello,world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello world,!\") (list \"Hello\" \"world,!\") 0.001)\n    (check-within (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\" \"!\") 0.001)\n    (check-within (candidate \"abcdef\") 3 0.001)\n    (check-within (candidate \"aaabb\") 2 0.001)\n    (check-within (candidate \"aaaBb\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction split_words(txt){\n  if(txt.includes(\" \")){\n    return txt.split(\" \");\n  }else if(txt.includes(\",\")){\n    return txt.replace(/,/g, \" \").split(\" \");\n  }else{\n    return [...txt].filter(i => i.match(/[a-z]/) && i.charCodeAt(0)%2 == 0).length;\n  }\n}\n\n### Explanation\n\nThis function takes a string as input and returns an array of words if the input contains spaces, or an array of words if the input contains commas. If the input contains neither spaces nor commas, the function returns the number of characters in the input that are lowercase letters and have an even ASCII code.\n\n\n### Racket version\n\n#lang racket\n\n(define (split_words txt)\n"}, {"name": "HumanEval_16_count_distinct_characters", "language": "rkt", "prompt": "#lang racket\n\n(define (count_distinct_characters string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_16_count_distinct_characters.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_distinct_characters))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abcde\") 5 0.001)\n    (check-within (candidate \"abcdecadeCADE\") 5 0.001)\n    (check-within (candidate \"aaaaAAAAaaaa\") 1 0.001)\n    (check-within (candidate \"Jerry jERRY JeRRRY\") 5 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction count_distinct_characters(string){\n  return new Set(string.toLowerCase()).size\n}\n\n### Explanation\n\nThis function takes a string as an argument and returns the number of distinct characters in the string. It does this by first converting the string to lowercase, then creating a new Set object from the resulting string. The Set object automatically removes any duplicates, so the size of the Set is the number of distinct characters in the original string.\n\n\n### Racket version\n\n#lang racket\n\n(define (count_distinct_characters string)\n"}, {"name": "HumanEval_148_bf", "language": "rkt", "prompt": "#lang racket\n\n(define (bf planet1 planet2)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_148_bf.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bf))\n    (check-within (candidate \"Jupiter\" \"Neptune\") (list \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Mercury\") (list \"Venus\") 0.001)\n    (check-within (candidate \"Mercury\" \"Uranus\") (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\") 0.001)\n    (check-within (candidate \"Neptune\" \"Venus\") (list \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Mars\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Jupiter\" \"Makemake\") (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction bf(planet1, planet2){\n  let planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  if(!planet_names.includes(planet1) || !planet_names.includes(planet2) || planet1 == planet2){\n    return [];\n  }\n  let planet1_index = planet_names.indexOf(planet1);\n  let planet2_index = planet_names.indexOf(planet2);\n  if(planet1_index < planet2_index){\n    return planet_names.slice(planet1_index+1, planet2_index);\n  }else{\n    return planet_names.slice(planet2_index+1, planet1_index);\n  }\n}\n\n### Explanation\n\nThis program defines a function `bf` that takes two arguments, `planet1` and `planet2`. The function first defines an array of planet names and checks if both `planet1` and `planet2` are included in the array and are not equal to each other. If either of these conditions are not met, an empty array is returned. If both planets are in the array and are not equal, the function finds the index of each planet in the array and returns a slice of the array between the two indices. If `planet1` comes before `planet2` in the array, the slice starts at the index after `planet1` and ends at the index before `planet2`. If `planet2` comes before `planet1`, the slice starts at the index after `planet2` and ends at the index before `planet1`. \n\n\n### Racket version\n\n#lang racket\n\n(define (bf planet1 planet2)\n"}, {"name": "HumanEval_66_digitSum", "language": "rkt", "prompt": "#lang racket\n\n(define (digitSum s)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_66_digitSum.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abAB\") 131 0.001)\n    (check-within (candidate \"abcCd\") 67 0.001)\n    (check-within (candidate \"helloE\") 69 0.001)\n    (check-within (candidate \"woArBld\") 131 0.001)\n    (check-within (candidate \"aAaaaXa\") 153 0.001)\n    (check-within (candidate \" How are yOu?\") 151 0.001)\n    (check-within (candidate \"You arE Very Smart\") 327 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction digitSum(s){\n  if(s === \"\") return 0;\n  return s.split(\"\").reduce((acc, char) => acc + (char.match(/[A-Z]/) ? char.charCodeAt(0) : 0), 0);\n}\n\n### Explanation\n\nThis program defines a function `digitSum` that takes a string `s` as input. If the string is empty, the function returns 0. Otherwise, the function splits the string into an array of characters, and then reduces the array to a single value by summing the ASCII code of each uppercase letter in the string. The sum is returned as the output of the function.\n\n\n### Racket version\n\n#lang racket\n\n(define (digitSum s)\n"}, {"name": "HumanEval_142_sum_squares", "language": "rkt", "prompt": "#lang racket\n\n(define (sum_squares lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_142_sum_squares.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 1 4 9)) 14 0.001)\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1)) 9 0.001)\n    (check-within (candidate (list -1 -1 -1 -1 -1 -1 -1 -1 -1)) -3 0.001)\n    (check-within (candidate (list 0)) 0 0.001)\n    (check-within (candidate (list -1 -5 2 -1 -5)) -126 0.001)\n    (check-within (candidate (list -56 -99 1 0 -2)) 3030 0.001)\n    (check-within (candidate (list -1 0 0 0 0 0 0 0 -1)) 0 0.001)\n    (check-within (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37)) -14196 0.001)\n    (check-within (candidate (list -1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10)) -1448 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sum_squares(lst){\n  let result =[];\n  for(let i =0; i<lst.length; i++){\n    if(i %3 === 0){\n      result.push(lst[i]**2)\n    }else if(i % 4 === 0 && i%3 !== 0){\n      result.push(lst[i]**3)\n    }else{\n      result.push(lst[i])\n    }\n  }\n  return result.reduce((a,b) => a+b,0)\n}\n\n### Explanation\n\nThis function takes in a list of numbers and returns the sum of the squares of the numbers in the list. However, if the index of the number in the list is divisible by 3, it returns the square of that number. If the index of the number in the list is divisible by 4 but not 3, it returns the cube of that number. Otherwise, it returns the number itself. \n\n\n### Racket version\n\n#lang racket\n\n(define (sum_squares lst)\n"}, {"name": "HumanEval_96_count_up_to", "language": "rkt", "prompt": "#lang racket\n\n(define (count_up_to n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_96_count_up_to.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_up_to))\n    (check-within (candidate 5) (list 2 3) 0.001)\n    (check-within (candidate 6) (list 2 3 5) 0.001)\n    (check-within (candidate 7) (list 2 3 5) 0.001)\n    (check-within (candidate 10) (list 2 3 5 7) 0.001)\n    (check-within (candidate 0) (list ) 0.001)\n    (check-within (candidate 22) (list 2 3 5 7 11 13 17 19) 0.001)\n    (check-within (candidate 1) (list ) 0.001)\n    (check-within (candidate 18) (list 2 3 5 7 11 13 17) 0.001)\n    (check-within (candidate 47) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43) 0.001)\n    (check-within (candidate 101) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction count_up_to(n){\n  let primes = [];\n  for(let i=2; i<n; i++){\n    let is_prime = true;\n    for(let j=2; j<i; j++){\n      if(i%j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\n### Explanation\n\nThis program takes an integer `n` and returns an array of all the prime numbers up to `n`. It does this by iterating through all the numbers from 2 to `n` and checking if each number is prime. If a number is prime, it is added to an array of primes. The program then returns this array of primes. \n\n\n### Racket version\n\n#lang racket\n\n(define (count_up_to n)\n"}, {"name": "HumanEval_133_sum_squares", "language": "rkt", "prompt": "#lang racket\n\n(define (sum_squares lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_133_sum_squares.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 3.0 5.0 7.0)) 84 0.001)\n    (check-within (candidate (list 1.4 4.2 0.0)) 29 0.001)\n    (check-within (candidate (list -2.4 1.0 1.0)) 6 0.001)\n    (check-within (candidate (list 100.0 1.0 15.0 2.0)) 10230 0.001)\n    (check-within (candidate (list 10000.0 10000.0)) 200000000 0.001)\n    (check-within (candidate (list -1.4 4.6 6.3)) 75 0.001)\n    (check-within (candidate (list -1.4 17.9 18.9 19.9)) 1086 0.001)\n    (check-within (candidate (list 0.0)) 0 0.001)\n    (check-within (candidate (list -1.0)) 1 0.001)\n    (check-within (candidate (list -1.0 1.0 0.0)) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sum_squares(lst){\n  let squared = 0;\n  lst.forEach(i => squared += Math.ceil(i)**2);\n  return squared;\n}\n\n### Explanation\n\nThis program defines a function `sum_squares` that takes a list of numbers as input. It initializes a variable `squared` to 0, then iterates over each element of the input list using the `forEach` method. For each element `i`, it adds the square of the ceiling of `i` to `squared`. Finally, it returns the value of `squared`. \n\n\n### Racket version\n\n#lang racket\n\n(define (sum_squares lst)\n"}, {"name": "HumanEval_34_unique", "language": "rkt", "prompt": "#lang racket\n\n(define (unique l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_34_unique.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-within (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction unique(l){\n  return [...new Set(l)].sort((a,b) => a-b);\n}\n\n### Explanation\n\nThis function takes a list `l` and returns a new list with all the unique elements of `l`. The `new Set(l)` creates a new set with the unique elements of `l`, and the `[... ]` syntax is used to convert the set back to a list. The `sort((a,b) => a-b)` sorts the list in ascending order. \n\n\n### Racket version\n\n#lang racket\n\n(define (unique l)\n"}, {"name": "HumanEval_55_fib", "language": "rkt", "prompt": "#lang racket\n\n(define (fib n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_55_fib.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-within (candidate 10) 55 0.001)\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 8) 21 0.001)\n    (check-within (candidate 11) 89 0.001)\n    (check-within (candidate 12) 144 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction fib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n\n### Explanation\n\nThis"}, {"name": "HumanEval_36_fizz_buzz", "language": "rkt", "prompt": "#lang racket\n\n(define (fizz_buzz n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_36_fizz_buzz.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n    (check-within (candidate 50) 0 0.001)\n    (check-within (candidate 78) 2 0.001)\n    (check-within (candidate 79) 3 0.001)\n    (check-within (candidate 100) 3 0.001)\n    (check-within (candidate 200) 6 0.001)\n    (check-within (candidate 4000) 192 0.001)\n    (check-within (candidate 10000) 639 0.001)\n    (check-within (candidate 100000) 8026 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction fizz_buzz(n){\n  let ns = []\n  for(let i = 0; i < n; i++){\n    if(i % 11 == 0 || i % 13 == 0){\n      ns.push(i)\n    }\n  }\n  let s = ns.join('')\n  let ans = 0\n  for(let c of s){\n    ans += (c == '7')\n  }\n  return ans\n}\n\n### Explanation\n\nThis program returns the number of times the digit 7 appears in the concatenation of all numbers between 0 and n that are divisible by 11 or 13. \n\n\n### Racket version\n\n#lang racket\n\n(define (fizz_buzz n)\n"}, {"name": "HumanEval_153_Strongest_Extension", "language": "rkt", "prompt": "#lang racket\n\n(define (Strongest_Extension class_name extensions)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_153_Strongest_Extension.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-within (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\" 0.001)\n    (check-within (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\" 0.001)\n    (check-within (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\" 0.001)\n    (check-within (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\" 0.001)\n    (check-within (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\" 0.001)\n    (check-within (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\" 0.001)\n    (check-within (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\" 0.001)\n    (check-within (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\" 0.001)\n    (check-within (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction Strongest_Extension(class_name, extensions){\n    let strong = extensions[0];\n    let my_val = extensions[0].replace(/[^A-Z]/g, \"\").length - extensions[0].replace(/[^a-z]/g, \"\").length;\n    for(let s of extensions){\n        let val = s.replace(/[^A-Z]/g, \"\").length - s.replace(/[^a-z]/g, \"\").length;\n        if(val > my_val){\n            strong = s;\n            my_val = val;\n        }\n    }\n    let ans = class_name + \".\" + strong;\n    return ans;\n}\n\n### Explanation\n\nThis function takes in a class name and an array of extensions. It then finds the extension with the most capital letters and returns the class name concatenated with that extension. \n\n\n### Racket version\n\n#lang racket\n\n(define (Strongest_Extension class_name extensions)\n"}, {"name": "HumanEval_20_find_closest_elements", "language": "rkt", "prompt": "#lang racket\n\n(define (find_closest_elements numbers)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_20_find_closest_elements.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0) 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction find_closest_elements(numbers){\n  let closest_pair = null;\n  let distance = null;\n  \n  for(let i=0; i<numbers.length; i++){\n    for(let j=0; j<numbers.length; j++){\n      if(i !== j){\n        let new_distance = Math.abs(numbers[i] - numbers[j]);\n        if(distance === null){\n          distance = new_distance;\n          closest_pair = [numbers[i], numbers[j]].sort((a,b) => a-b);\n        }else if(new_distance < distance){\n          distance = new_distance;\n          closest_pair = [numbers[i], numbers[j]].sort((a,b) => a-b);\n        }\n      }\n    }\n  }\n  \n  return closest_pair;\n}\n\n### Explanation\n\nThis program receives an array of numbers and returns the pair of numbers that are closest to each other. It does this by iterating over the array twice, comparing each pair of numbers and keeping track of the closest pair found so far. The final closest pair is returned. \n\n\n### Racket version\n\n#lang racket\n\n(define (find_closest_elements numbers)\n"}, {"name": "HumanEval_124_valid_date", "language": "rkt", "prompt": "#lang racket\n\n(define (valid_date date)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_124_valid_date.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n    (check-within (candidate \"03-11-2000\") #t 0.001)\n    (check-within (candidate \"15-01-2012\") #f 0.001)\n    (check-within (candidate \"04-0-2040\") #f 0.001)\n    (check-within (candidate \"06-04-2020\") #t 0.001)\n    (check-within (candidate \"01-01-2007\") #t 0.001)\n    (check-within (candidate \"03-32-2011\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"04-31-3000\") #f 0.001)\n    (check-within (candidate \"06-06-2005\") #t 0.001)\n    (check-within (candidate \"21-31-2000\") #f 0.001)\n    (check-within (candidate \"04-12-2003\") #t 0.001)\n    (check-within (candidate \"04122003\") #f 0.001)\n    (check-within (candidate \"20030412\") #f 0.001)\n    (check-within (candidate \"2003-04\") #f 0.001)\n    (check-within (candidate \"2003-04-12\") #f 0.001)\n    (check-within (candidate \"04-2003\") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction valid_date(date){\n  try{\n    date = date.trim()\n    var [month, day, year] = date.split('-').map(Number)\n    if (month < 1 || month > 12) return false\n    if ([1,3,5,7,8,10,12].includes(month) && (day < 1 || day > 31)) return false\n    if ([4,6,9,11].includes(month) && (day < 1 || day > 30)) return false\n    if (month == 2 && (day < 1 || day > 29)) return false\n  } catch {\n    return false\n  }\n  return true\n}\n\n### Explanation\n\nThis is a function that takes a string `date` as input and returns `true` if the string represents a valid date in the format `MM-DD-YYYY`, and `false` otherwise. The function first trims the input string, then splits it into an array of three strings representing the month, day, and year, respectively. It then checks if the month is between 1 and 12, and if the day is valid for that month (e.g. February can have at most 29 days). If any of these checks fail, the function returns `false`. If there is an error during the execution of the function (e.g. if the input is not a string), the function also returns `false`. Otherwise, it returns `true`. \n\n\n### Racket version\n\n#lang racket\n\n(define (valid_date date)\n"}, {"name": "HumanEval_53_add", "language": "rkt", "prompt": "#lang racket\n\n(define (add x y)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_53_add.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate 0 1) 1 0.001)\n    (check-within (candidate 1 0) 1 0.001)\n    (check-within (candidate 2 3) 5 0.001)\n    (check-within (candidate 5 7) 12 0.001)\n    (check-within (candidate 7 5) 12 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction add(x, y){\n  return x + y\n}\n\n### Explanation\n\nThis program defines a function named `add` that takes two arguments `x` and `y`. The function returns the sum of `x` and `y`.\n\n\n### Racket version\n\n#lang racket\n\n(define (add x y)\n"}, {"name": "HumanEval_40_triples_sum_to_zero", "language": "rkt", "prompt": "#lang racket\n\n(define (triples_sum_to_zero l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -1)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #t 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 1 2 5 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 9 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -100)) #f 0.001)\n    (check-within (candidate (list 100 3 5 -100)) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction triples_sum_to_zero(l){\n  for(let i=0; i<l.length; i++){\n    for(let j=i+1; j<l.length; j++){\n      for(let k=j+1; k<l.length; k++){\n        if(l[i]+l[j]+l[k] === 0){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis program takes an array of numbers as input and returns true if there are three numbers in the array that sum up to zero, and false otherwise. It does this by iterating through every possible combination of three numbers in the array, and checking if their sum is zero. If a combination is found that sums to zero, the function returns true. If no combination is found that sums to zero, the function returns false.\n\n\n### Racket version\n\n#lang racket\n\n(define (triples_sum_to_zero l)\n"}, {"name": "HumanEval_24_largest_divisor", "language": "rkt", "prompt": "#lang racket\n\n(define (largest_divisor n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_24_largest_divisor.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-within (candidate 3) 1 0.001)\n    (check-within (candidate 7) 1 0.001)\n    (check-within (candidate 10) 5 0.001)\n    (check-within (candidate 100) 50 0.001)\n    (check-within (candidate 49) 7 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction largest_divisor(n){\n  for(let i=n-1; i>=0; i--){\n    if(n%i === 0){\n      return i;\n    }\n  }\n}\n\n### Explanation\n\nThis function takes an integer `n` and returns the largest divisor of `n`. It does this by starting at `n-1` and checking if `n` is divisible by each number in descending order. If it finds a divisor, it returns that divisor. If it reaches `0` without finding a divisor, it returns `undefined`.\n\n\n### Racket version\n\n#lang racket\n\n(define (largest_divisor n)\n"}, {"name": "HumanEval_19_sort_numbers", "language": "rkt", "prompt": "#lang racket\n\n(define (sort_numbers numbers)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_19_sort_numbers.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"three\") \"three\" 0.001)\n    (check-within (candidate \"three five nine\") \"three five nine\" 0.001)\n    (check-within (candidate \"five zero four seven nine eight\") \"zero four five seven eight nine\" 0.001)\n    (check-within (candidate \"six five four three two one zero\") \"zero one two three four five six\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sort_numbers(numbers){\n  let value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  }\n  return numbers.split(' ').filter(x => x).sort((a,b) => value_map[a] - value_map[b]).join(' ');\n}\n\n### Explanation\n\nThis function takes a string of numbers written as words, and returns a string of the same numbers sorted in ascending order. The function first creates a mapping of the word representations of numbers to their numerical values. It then splits the input string into an array of words, filters out any empty strings, sorts the array based on the numerical values of the words, and then joins the array back into a string. \n\n\n### Racket version\n\n#lang racket\n\n(define (sort_numbers numbers)\n"}, {"name": "HumanEval_73_smallest_change", "language": "rkt", "prompt": "#lang racket\n\n(define (smallest_change arr)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_73_smallest_change.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate smallest_change))\n    (check-within (candidate (list 1 2 3 5 4 7 9 6)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 3 2 2)) 1 0.001)\n    (check-within (candidate (list 1 4 2)) 1 0.001)\n    (check-within (candidate (list 1 4 4 2)) 1 0.001)\n    (check-within (candidate (list 1 2 3 2 1)) 0 0.001)\n    (check-within (candidate (list 3 1 1 3)) 0 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction smallest_change(arr){\n  let ans = 0;\n  for(let i=0; i<arr.length/2; i++){\n    if(arr[i] !== arr[arr.length-i-1]){\n      ans++;\n    }\n  }\n  return ans;\n}\n\n### Explanation\n\nThis function takes an array and returns the number of changes that need to be made to make the array symmetric. The function iterates over the first half of the array and compares the first element to the last element, the second element to the second to last element, and so on. If the elements are not equal, the function increments a counter. The function then returns the counter.\n\n\n### Racket version\n\n#lang racket\n\n(define (smallest_change arr)\n"}, {"name": "HumanEval_52_below_threshold", "language": "rkt", "prompt": "#lang racket\n\n(define (below_threshold l t)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_52_below_threshold.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_threshold))\n    (check-within (candidate (list 1 2 4 10) 100) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 5) #f 0.001)\n    (check-within (candidate (list 1 20 4 10) 21) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 22) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 11) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 10) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction below_threshold(l, t){\n  return l.every(e => e < t);\n}\n\n### Explanation\n\nThis function takes in a list `l` and a threshold `t`. It returns `true` if every element in the list is less than the threshold, and `false` otherwise.\n\n\n### Racket version\n\n#lang racket\n\n(define (below_threshold l t)\n"}, {"name": "HumanEval_128_prod_signs", "language": "rkt", "prompt": "#lang racket\n\n(define (prod_signs arr)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_128_prod_signs.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prod_signs))\n    (check-within (candidate (list 1 2 2 -4)) -9 0.001)\n    (check-within (candidate (list 0 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 3 -1 1)) -10 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 2 4 1 2 -1 -1 9)) 20 0.001)\n    (check-within (candidate (list -1 1 -1 1)) 4 0.001)\n    (check-within (candidate (list -1 1 1 1)) -4 0.001)\n    (check-within (candidate (list -1 1 1 0)) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction prod_signs(arr){\n  if(arr.length === 0) return null;\n  let prod = arr.includes(0) ? 0 : (-1) ** arr.filter(x => x < 0).length;\n  return prod * arr.map(Math.abs).reduce((a,b) => a+b);\n}\n\n### Explanation\n\nThis function takes an array of numbers as input. It first checks if the array is empty, and if so, returns null. If the array contains a 0, it returns 0. Otherwise, it calculates the product of the signs of the numbers in the array (i.e. whether each number is positive or negative), and multiplies it by the sum of the absolute values of the numbers in the array. The result is returned.\n\n\n### Racket version\n\n#lang racket\n\n(define (prod_signs arr)\n"}, {"name": "HumanEval_49_modp", "language": "rkt", "prompt": "#lang racket\n\n(define (modp n p)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_49_modp.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n    (check-within (candidate 3 5) 3 0.001)\n    (check-within (candidate 1101 101) 2 0.001)\n    (check-within (candidate 0 101) 1 0.001)\n    (check-within (candidate 3 11) 8 0.001)\n    (check-within (candidate 100 101) 1 0.001)\n    (check-within (candidate 30 5) 4 0.001)\n    (check-within (candidate 31 5) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction modp(n, p){\n  let ret = 1;\n  for(let i=0; i<n; i++){\n    ret = (2 * ret) % p;\n  }\n  return ret;\n}\n\n### Explanation\n\nThis program defines a function `modp` that takes two arguments, `n` and `p`. It initializes a variable `ret` to 1, then loops `n` times, each time multiplying `ret` by 2 and taking the result modulo `p`. Finally, it returns the resulting value of `ret`.\n\n\n### Racket version\n\n#lang racket\n\n(define (modp n p)\n"}, {"name": "HumanEval_98_count_upper", "language": "rkt", "prompt": "#lang racket\n\n(define (count_upper s)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_98_count_upper.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-within (candidate \"aBCdEf\") 1 0.001)\n    (check-within (candidate \"abcdefg\") 0 0.001)\n    (check-within (candidate \"dBBE\") 0 0.001)\n    (check-within (candidate \"B\") 0 0.001)\n    (check-within (candidate \"U\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"EEEE\") 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction count_upper(s){\n  let count = 0;\n  for(let i=0; i<s.length; i+=2){\n    if(\"AEIOU\".includes(s[i])){\n      count++;\n    }\n  }\n  return count;\n}\n\n### Explanation\n\nThis program defines a function `count_upper` that takes a string `s` as an argument. The function initializes a variable `count` to 0. It then loops over the string `s` in increments of 2. If the current character is a vowel (A, E, I, O, or U), it increments the `count` variable. The function returns the final value of `count`.\n\n\n### Racket version\n\n#lang racket\n\n(define (count_upper s)\n"}, {"name": "HumanEval_97_multiply", "language": "rkt", "prompt": "#lang racket\n\n(define (multiply a b)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_97_multiply.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n    (check-within (candidate 148 412) 16 0.001)\n    (check-within (candidate 19 28) 72 0.001)\n    (check-within (candidate 2020 1851) 0 0.001)\n    (check-within (candidate 14 -15) 20 0.001)\n    (check-within (candidate 76 67) 42 0.001)\n    (check-within (candidate 17 27) 49 0.001)\n    (check-within (candidate 0 1) 0 0.001)\n    (check-within (candidate 0 0) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n\n### Explanation\n\nThis function takes two numbers `a` and `b` as arguments. It returns the product of the absolute values of the last digits of `a` and `b`. The `%` operator gives the remainder of dividing `a` and `b` by 10, and `Math.abs` returns the absolute value of the result. The `return` statement returns the product of these two values.\n\n\n### Racket version\n\n#lang racket\n\n(define (multiply a b)\n"}, {"name": "HumanEval_104_unique_digits", "language": "rkt", "prompt": "#lang racket\n\n(define (unique_digits x)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_104_unique_digits.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-within (candidate (list 15 33 1422 1)) (list 1 15 33) 0.001)\n    (check-within (candidate (list 152 323 1422 10)) (list ) 0.001)\n    (check-within (candidate (list 12345 2033 111 151)) (list 111 151) 0.001)\n    (check-within (candidate (list 135 103 31)) (list 31 135) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction unique_digits(x){\n  let odd_digit_elements = [];\n  for(let i of x){\n    if([...String(i)].every(c => parseInt(c) % 2 == 1)){\n      odd_digit_elements.push(i);\n    }\n  }\n  return odd_digit_elements.sort((a,b) => a-b);\n}\n\n### Explanation\n\nThis function takes in an array of integers and returns a new array of integers that only contain odd digits. The function first creates an empty array called `odd_digit_elements`. It then loops through each element of the input array and checks if every digit in the element is odd. If every digit is odd, the element is added to the `odd_digit_elements` array. Finally, the function sorts the `odd_digit_elements` array in ascending order and returns it.\n\n\n### Racket version\n\n#lang racket\n\n(define (unique_digits x)\n"}, {"name": "HumanEval_72_will_it_fly", "language": "rkt", "prompt": "#lang racket\n\n(define (will_it_fly q w)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_72_will_it_fly.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate will_it_fly))\n    (check-within (candidate (list 3 2 3) 9) #t 0.001)\n    (check-within (candidate (list 1 2) 5) #f 0.001)\n    (check-within (candidate (list 3) 5) #t 0.001)\n    (check-within (candidate (list 3 2 3) 1) #f 0.001)\n    (check-within (candidate (list 1 2 3) 6) #f 0.001)\n    (check-within (candidate (list 5) 5) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction will_it_fly(q, w){\n  if(q.reduce((a,b) => a+b, 0) > w){\n    return false;\n  }\n  \n  for(let i=0, j=q.length-1; i<j; i++, j--){\n    if(q[i] !== q[j]){\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n### Explanation\n\nThis function takes two arguments, `q` and `w`. `q` is an array of integers and `w` is an integer. The function returns a boolean indicating whether `q` can be transformed into a palindrome by removing some elements and summing the remaining elements, and whether the sum of the remaining elements is less than or equal to `w`. \n\nThe function first checks whether the sum of all elements in `q` is greater than `w`. If it is, the function returns `false`. Otherwise, the function checks whether `q` can be transformed into a palindrome by removing some elements. It does this by iterating through the array from both ends, comparing the elements at each end. If the elements are not equal, the function returns `false`. If the function has not yet returned, it returns `true`. \n\n\n### Racket version\n\n#lang racket\n\n(define (will_it_fly q w)\n"}, {"name": "HumanEval_75_is_multiply_prime", "language": "rkt", "prompt": "#lang racket\n\n(define (is_multiply_prime a)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_75_is_multiply_prime.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n    (check-within (candidate 5) #f 0.001)\n    (check-within (candidate 30) #t 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 125) #t 0.001)\n    (check-within (candidate 105) #t 0.001)\n    (check-within (candidate 126) #f 0.001)\n    (check-within (candidate 729) #f 0.001)\n    (check-within (candidate 891) #f 0.001)\n    (check-within (candidate 1001) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_multiply_prime(a){\n  function is_prime(n){\n    for(let j=2;j<n;j++){\n      if(n%j==0){\n        return false\n      }\n    }\n    return true\n  }\n  for(let i=2;i<101;i++){\n    if(!is_prime(i)) continue\n    for(let j=2;j<101;j++){\n      if(!is_prime(j)) continue\n      for(let k=2;k<101;k++){\n        if(!is_prime(k)) continue\n        if(i*j*k==a) return true\n      }\n    }\n  }\n  return false\n}\n\n### Explanation\n\nThis program defines a function `is_multiply_prime` that takes an integer `a` as input. The function then defines another function `is_prime` that takes an integer `n` as input and returns `true` if `n` is prime and `false` otherwise. The function then loops over all integers `i`, `j`, and `k` between 2 and 100 (inclusive) and checks if each of them is prime. If any of them is not prime, the loop continues to the next integer. If all three integers are prime and their product is equal to `a`, the function returns `true`. If no such combination of three prime integers is found, the function returns `false`. \n\nTo rewrite this program in Racket, you could define the `is_prime` function using a `define` statement and then define the `is_multiply_prime` function using nested `for` loops and `if` statements to check for primes and the product of three primes. Here is an example implementation:\n\n```racket\n(define (is_prime n)\n  (define (divisible-by? k)\n    (= (remainder n k) 0))\n  (and (> n 1)\n       (not (ormap divisible-by? (range 2 (add1 (floor (sqrt n))))))))\n\n(define (is_multiply_prime a)\n  (for*/first ([i (in-range 2 101)]\n                [j (in-range 2 101)]\n                [k (in-range 2 101)]\n                #:when (and (is_prime i)\n                            (is_prime j)\n                            (is_prime k)\n                            (= (* i j k) a)))\n    #t))\n```\n\nThe `is_prime` function uses a helper function `divisible-by?` to check if `n` is divisible by any integer between 2 and the square root of `n`. The `is_multiply_prime` function uses `for*/first` to loop over all combinations of `i`, `j`, and `k` between 2 and 100 (inclusive) and check if each of them is prime and their product is equal to `a`. If such a combination is found, the function returns `#t`. If no such combination is found, the function returns `#f`. Note that `for*/first` returns the first value that satisfies the condition, or `#f` if no value satisfies the condition. This is equivalent to the `return` statement in the JavaScript version.<|im_end|>\n\n### Racket version\n\n#lang racket\n\n(define (is_multiply_prime a)\n"}, {"name": "HumanEval_120_maximum", "language": "rkt", "prompt": "#lang racket\n\n(define (maximum arr k)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_120_maximum.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-within (candidate (list -3 -4 5) 3) (list -4 -3 5) 0.001)\n    (check-within (candidate (list 4 -4 4) 2) (list 4 4) 0.001)\n    (check-within (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2) 0.001)\n    (check-within (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123) 0.001)\n    (check-within (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20) 0.001)\n    (check-within (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15) 0.001)\n    (check-within (candidate (list -1 0 2 5 3 -10) 2) (list 3 5) 0.001)\n    (check-within (candidate (list 1 0 5 -7) 1) (list 5) 0.001)\n    (check-within (candidate (list 4 -4) 2) (list -4 4) 0.001)\n    (check-within (candidate (list -10 10) 2) (list -10 10) 0.001)\n    (check-within (candidate (list 1 2 3 -23 243 -400 0) 0) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction maximum(arr, k){\n  if(k === 0){\n    return [];\n  }\n  arr.sort((a,b) => a-b);\n  return arr.slice(-k);\n}\n\n### Explanation\n\nThis function takes in an array and a number `k`. If `k` is 0, it returns an empty array. Otherwise, it sorts the array in ascending order and returns the last `k` elements of the sorted array.\n\n\n### Racket version\n\n#lang racket\n\n(define (maximum arr k)\n"}, {"name": "HumanEval_1_separate_paren_groups", "language": "rkt", "prompt": "#lang racket\n\n(define (separate_paren_groups paren_string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_1_separate_paren_groups.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate separate_paren_groups))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list \"(()())\" \"((()))\" \"()\" \"((())()())\") 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list \"()\" \"(())\" \"((()))\" \"(((())))\") 0.001)\n    (check-within (candidate \"(()(())((())))\") (list \"(()(())((())))\") 0.001)\n    (check-within (candidate \"( ) (( )) (( )( ))\") (list \"()\" \"(())\" \"(()())\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_string = [];\n  let current_depth = 0;\n\n  for(let c of paren_string){\n    if(c === '('){\n      current_depth += 1;\n      current_string.push(c);\n    } else if(c === ')'){\n      current_depth -= 1;\n      current_string.push(c);\n\n      if(current_depth === 0){\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n### Explanation\n\nThis program takes a string of parentheses and returns an array of strings, where each string is a group of parentheses. For example, the input string \"(())()()\" would return [\"(())\", \"()()\"]. The program works by iterating through the input string and keeping track of the current depth of parentheses. Whenever it encounters an opening parenthesis, it increments the depth and adds the character to the current string. Whenever it encounters a closing parenthesis, it decrements the depth and adds the character to the current string. If the depth reaches zero, it means that it has found a complete group of parentheses, so it adds the current string to the result array and resets the current string to an empty array. Finally, it returns the result array. \n\n\n### Racket version\n\n#lang racket\n\n(define (separate_paren_groups paren_string)\n"}, {"name": "HumanEval_22_filter_integers", "language": "rkt", "prompt": "#lang racket\n\n(define (filter_integers values)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_22_filter_integers.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9) 0.001)\n    (check-within (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction filter_integers(values){\n  return values.filter(x => Number.isInteger(x))\n}\n\n### Explanation\n\nThis program defines a function `filter_integers` that takes a list of values as input. It then returns a new list that contains only the integers from the input list. \n\nThe `filter` method is used to create the new list. The `filter` method takes a function as input and applies it to each element of the input list. If the function returns `true`, the element is included in the new list. If the function returns `false`, the element is excluded from the new list. \n\nIn this case, the function passed to `filter` is an arrow function that uses the `Number.isInteger` method to check if each element is an integer. If the element is an integer, the function returns `true` and the element is included in the new list. If the element is not an integer, the function returns `false` and the element is excluded from the new list.\n\n\n### Racket version\n\n#lang racket\n\n(define (filter_integers values)\n"}, {"name": "HumanEval_94_skjkasdkd", "language": "rkt", "prompt": "#lang racket\n\n(define (skjkasdkd lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_94_skjkasdkd.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n    (check-within (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3)) 10 0.001)\n    (check-within (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1)) 25 0.001)\n    (check-within (candidate (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3)) 13 0.001)\n    (check-within (candidate (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6)) 11 0.001)\n    (check-within (candidate (list 0 81 12 3 1 21)) 3 0.001)\n    (check-within (candidate (list 0 8 1 2 1 7)) 7 0.001)\n    (check-within (candidate (list 8191)) 19 0.001)\n    (check-within (candidate (list 8191 123456 127 7)) 19 0.001)\n    (check-within (candidate (list 127 97 8192)) 10 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction skjkasdkd(lst){\n  function isPrime(n){\n    for(let i=2; i<=Math.sqrt(n); i++){\n      if(n%i === 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  let maxx = 0;\n  lst.forEach(i => {\n    if(i > maxx && isPrime(i)){\n      maxx = i;\n    }\n  });\n  return maxx.toString().split('').reduce((a,b) => parseInt(a) + parseInt(b));\n}\n\n### Explanation\n\nThis program defines a function `skjkasdkd` that takes a list of integers as input. The function then defines an inner function `isPrime` that checks whether a number is prime. The function then initializes a variable `maxx` to 0. The function then iterates over the input list, and for each element that is both greater than `maxx` and prime, sets `maxx` to that element. Finally, the function converts `maxx` to a string, splits it into an array of digits, and reduces that array to a single integer by summing its elements. The resulting integer is then returned.\n\n\n### Racket version\n\n#lang racket\n\n(define (skjkasdkd lst)\n"}, {"name": "HumanEval_74_total_match", "language": "rkt", "prompt": "#lang racket\n\n(define (total_match lst1 lst2)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_74_total_match.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate total_match))\n    (check-within (candidate (list ) (list )) (list ) 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\")) (list \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\")) (list \"4\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"Hi\")) (list \"hI\" \"Hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\")) (list \"hI\" \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hii\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list ) (list \"this\")) (list ) 0.001)\n    (check-within (candidate (list \"this\") (list )) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction total_match(lst1, lst2){\n  let l1 = lst1.reduce((a,b) => a+b.length, 0);\n  let l2 = lst2.reduce((a,b) => a+b.length, 0);\n  \n  return l1 <= l2 ? lst1 : lst2;\n}\n\n### Explanation\n\nThis function takes two lists of strings as input, lst1 and lst2. It then calculates the total length of all the strings in each list, and returns the list with the shortest total length. If the total length of lst1 is less than or equal to the total length of lst2, then lst1 is returned. Otherwise, lst2 is returned.\n\n\n### Racket version\n\n#lang racket\n\n(define (total_match lst1 lst2)\n"}, {"name": "HumanEval_162_string_to_md5", "language": "rkt", "prompt": "#lang racket\n\n(define (string_to_md5 text)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_162_string_to_md5.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n    (check-within (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\" 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"A B C\") \"0ef78513b0cb8cef12743f5aeb35f888\" 0.001)\n    (check-within (candidate \"password\") \"5f4dcc3b5aa765d61d8327deb882cf99\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction string_to_md5(text){\n  const crypto = require('crypto')\n  return text ? crypto.createHash('md5').update(text).digest('hex') : null\n}\n\n### Explanation\n\nThis program defines a function called `string_to_md5` that takes a string as an argument. It then uses the `crypto` module to create an MD5 hash of the string, and returns the hash as a hexadecimal string. If the input string is null or undefined, the function returns null.\n\n\n### Racket version\n\n#lang racket\n\n(define (string_to_md5 text)\n"}, {"name": "HumanEval_41_car_race_collision", "language": "rkt", "prompt": "#lang racket\n\n(define (car_race_collision n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_41_car_race_collision.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate car_race_collision))\n    (check-within (candidate 2) 4 0.001)\n    (check-within (candidate 3) 9 0.001)\n    (check-within (candidate 4) 16 0.001)\n    (check-within (candidate 8) 64 0.001)\n    (check-within (candidate 10) 100 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction car_race_collision(n){\n  return n*n;\n}\n\n### Explanation\n\nThis is a function that takes a number `n` as an argument and returns the square of `n`.\n\n\n### Racket version\n\n#lang racket\n\n(define (car_race_collision n)\n"}, {"name": "HumanEval_76_is_simple_power", "language": "rkt", "prompt": "#lang racket\n\n(define (is_simple_power x n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_76_is_simple_power.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-within (candidate 16 2) #t 0.001)\n    (check-within (candidate 143214 16) #f 0.001)\n    (check-within (candidate 4 2) #t 0.001)\n    (check-within (candidate 9 3) #t 0.001)\n    (check-within (candidate 16 4) #t 0.001)\n    (check-within (candidate 24 2) #f 0.001)\n    (check-within (candidate 128 4) #f 0.001)\n    (check-within (candidate 12 6) #f 0.001)\n    (check-within (candidate 1 1) #t 0.001)\n    (check-within (candidate 1 12) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_simple_power(x, n){\n  if(n == 1){\n    return x == 1;\n  }\n  let power = 1;\n  while(power < x){\n    power *= n;\n  }\n  return power == x;\n}\n\n### Explanation\n\nThis function checks if `x` is a power of `n`. It does this by repeatedly multiplying `n` by itself until the result is greater than or equal to `x`. If `x` is equal to the final result, then it is a power of `n`. If `n` is 1, then `x` must also be 1 for it to be considered a power of `n`. \n\n\n### Racket version\n\n#lang racket\n\n(define (is_simple_power x n)\n"}, {"name": "HumanEval_93_encode", "language": "rkt", "prompt": "#lang racket\n\n(define (encode message)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_93_encode.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-within (candidate \"TEST\") \"tgst\" 0.001)\n    (check-within (candidate \"Mudasir\") \"mWDCSKR\" 0.001)\n    (check-within (candidate \"YES\") \"ygs\" 0.001)\n    (check-within (candidate \"This is a message\") \"tHKS KS C MGSSCGG\" 0.001)\n    (check-within (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction encode(message){\n  const vowels = \"aeiouAEIOU\";\n  const vowelsReplace = Object.fromEntries([...vowels].map(v => [v, String.fromCharCode(v.charCodeAt(0) + 2)]));\n  message = message.split('').map(c => vowelsReplace[c] || c).join('');\n  return message.split('').map(c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join('');\n}\n\n### Explanation\n\nThis function takes a message as input and returns a new message where all vowels are replaced by the letter that comes two letters after it in the alphabet. For example, 'a' is replaced by 'c', 'e' is replaced by 'g', and so on. The function then takes this new message and returns a new message where all uppercase letters are replaced by lowercase letters and all lowercase letters are replaced by uppercase letters.\n\n\n### Racket version\n\n#lang racket\n\n(define (encode message)\n"}, {"name": "HumanEval_42_incr_list", "language": "rkt", "prompt": "#lang racket\n\n(define (incr_list l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_42_incr_list.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate incr_list))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 4 3 2) 0.001)\n    (check-within (candidate (list 5 2 5 2 3 3 9 0 123)) (list 6 3 6 3 4 4 10 1 124) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction incr_list(l){\n  return l.map(e => e+1);\n}\n\n### Explanation\n\nThis is a function that takes a list as input and returns a new list where each element of the input list has been incremented by 1. The function uses the `map` method of the input list to apply an arrow function that increments each element by 1.\n\n\n### Racket version\n\n#lang racket\n\n(define (incr_list l)\n"}, {"name": "HumanEval_27_flip_case", "language": "rkt", "prompt": "#lang racket\n\n(define (flip_case string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_27_flip_case.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hello!\") \"hELLO!\" 0.001)\n    (check-within (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction flip_case(string){\n  return string.split('').map(c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join('');\n}\n\n### Explanation\n\nThis function takes a string as input and returns a new string with all the characters flipped in case. If a character is upper case, it is converted to lower case and vice versa. \n\nThe function first splits the input string into an array of characters using the `split` method. It then maps over this array and applies a function to each character. This function checks if the character is upper case using the `toUpperCase` method. If it is, it converts it to lower case using the `toLowerCase` method. If it is not, it converts it to upper case using the `toUpperCase` method. Finally, the function joins the array of characters back into a string using the `join` method and returns it.\n\n\n### Racket version\n\n#lang racket\n\n(define (flip_case string)\n"}, {"name": "HumanEval_64_vowels_count", "language": "rkt", "prompt": "#lang racket\n\n(define (vowels_count s)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_64_vowels_count.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n    (check-within (candidate \"abcde\") 2 0.001)\n    (check-within (candidate \"Alone\") 3 0.001)\n    (check-within (candidate \"key\") 2 0.001)\n    (check-within (candidate \"bye\") 1 0.001)\n    (check-within (candidate \"keY\") 2 0.001)\n    (check-within (candidate \"bYe\") 1 0.001)\n    (check-within (candidate \"ACEDY\") 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction vowels_count(s){\n  let vowels = \"aeiouAEIOU\";\n  let n_vowels = [...s].filter(c => vowels.includes(c)).length;\n  if(s.slice(-1) === 'y' || s.slice(-1) === 'Y'){\n    n_vowels += 1;\n  }\n  return n_vowels;\n}\n\n### Explanation\n\nThis function takes a string `s` as input and returns the number of vowels in the string. It first defines a string `vowels` containing all vowels in both upper and lower case. It then creates a new array containing all characters in `s` and filters out all characters that are not in `vowels`. The length of the resulting array is then returned. If the last character in `s` is `y` or `Y`, the function adds one to the number of vowels before returning it.\n\n\n### Racket version\n\n#lang racket\n\n(define (vowels_count s)\n"}, {"name": "HumanEval_149_sorted_list_sum", "language": "rkt", "prompt": "#lang racket\n\n(define (sorted_list_sum lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_149_sorted_list_sum.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sorted_list_sum))\n    (check-within (candidate (list \"aa\" \"a\" \"aaa\")) (list \"aa\") 0.001)\n    (check-within (candidate (list \"school\" \"AI\" \"asdf\" \"b\")) (list \"AI\" \"asdf\" \"school\") 0.001)\n    (check-within (candidate (list \"d\" \"b\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"d\" \"dcba\" \"abcd\" \"a\")) (list \"abcd\" \"dcba\") 0.001)\n    (check-within (candidate (list \"AI\" \"ai\" \"au\")) (list \"AI\" \"ai\" \"au\") 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"b\" \"c\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"aaaa\" \"bbbb\" \"dd\" \"cc\")) (list \"cc\" \"dd\" \"aaaa\" \"bbbb\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sorted_list_sum(lst){\n  lst.sort();\n  let new_lst = [];\n  for(let i of lst){\n    if(i.length%2 === 0){\n      new_lst.push(i);\n    }\n  }\n  return new_lst.sort((a,b) => a.length-b.length);\n}\n\n### Explanation\n\nThis function takes a list of strings as input. It sorts the list, then creates a new list to hold the even-length strings. It iterates over the sorted list, and if the length of the current string is even, it adds it to the new list. Finally, it sorts the new list by length and returns it.\n\n\n### Racket version\n\n#lang racket\n\n(define (sorted_list_sum lst)\n"}, {"name": "HumanEval_107_even_odd_palindrome", "language": "rkt", "prompt": "#lang racket\n\n(define (even_odd_palindrome n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_107_even_odd_palindrome.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_palindrome))\n    (check-within (candidate 123) (list 8 13) 0.001)\n    (check-within (candidate 12) (list 4 6) 0.001)\n    (check-within (candidate 3) (list 1 2) 0.001)\n    (check-within (candidate 63) (list 6 8) 0.001)\n    (check-within (candidate 25) (list 5 6) 0.001)\n    (check-within (candidate 19) (list 4 6) 0.001)\n    (check-within (candidate 9) (list 4 5) 0.001)\n    (check-within (candidate 1) (list 0 1) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction even_odd_palindrome(n){\n    function is_palindrome(n){\n        return String(n) == String(n).split(\"\").reverse().join(\"\");\n    }\n    let even_palindrome_count = 0;\n    let odd_palindrome_count = 0;\n    for(let i = 1; i <= n; i++){\n        if(i%2 == 1 && is_palindrome(i)){\n            odd_palindrome_count++;\n        }else if(i%2 == 0 && is_palindrome(i)){\n            even_palindrome_count++;\n        }\n    }\n    return [even_palindrome_count, odd_palindrome_count];\n}\n\n### Explanation\n\nThis program defines a function `even_odd_palindrome` that takes an integer `n` as input. The function returns an array of two integers: the first integer is the number of even palindromes between 1 and `n`, and the second integer is the number of odd palindromes between 1 and `n`. A palindrome is a number that reads the same forwards and backwards. The function first defines a helper function `is_palindrome` that checks if a number is a palindrome. It then initializes two counters for even and odd palindromes, and loops through all numbers between 1 and `n`. If a number is a palindrome and even, it increments the even palindrome counter, and if it is a palindrome and odd, it increments the odd palindrome counter. The function then returns the two counters as an array. \n\n\n### Racket version\n\n#lang racket\n\n(define (even_odd_palindrome n)\n"}, {"name": "HumanEval_71_triangle_area", "language": "rkt", "prompt": "#lang racket\n\n(define (triangle_area a b c)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_71_triangle_area.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 3 4 5) 6.0 0.001)\n    (check-within (candidate 1 2 10) -1 0.001)\n    (check-within (candidate 4 8 5) 8.18 0.001)\n    (check-within (candidate 2 2 2) 1.73 0.001)\n    (check-within (candidate 1 2 3) -1 0.001)\n    (check-within (candidate 10 5 7) 16.25 0.001)\n    (check-within (candidate 2 6 3) -1 0.001)\n    (check-within (candidate 1 1 1) 0.43 0.001)\n    (check-within (candidate 2 2 10) -1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction triangle_area(a, b, c){\n  if(a+b <= c || a+c <= b || b+c <= a){\n    return -1;\n  }\n  let s = (a+b+c)/2;\n  let area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n  area = Math.round(area*100)/100;\n  return area;\n}\n\n### Explanation\n\nThis program calculates the area of a triangle given the length of its three sides. It first checks if the triangle is valid by checking if the sum of any two sides is greater than the third side. If the triangle is valid, it calculates the area using Heron's formula and rounds the result to two decimal places. If the triangle is invalid, it returns -1. \n\n\n### Racket version\n\n#lang racket\n\n(define (triangle_area a b c)\n"}, {"name": "HumanEval_95_check_dict_case", "language": "rkt", "prompt": "#lang racket\n\n(define (check_dict_case dict)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_95_check_dict_case.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"))) #t 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\"))) #f 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f 0.001)\n    (check-within (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"))) #f 0.001)\n    (check-within (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\"))) #t 0.001)\n    (check-within (candidate #hash((\"fruit\" .  \"Orange\") (\"taste\" .  \"Sweet\"))) #t 0.001)\n    (check-within (candidate #hash()) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length == 0){\n    return false;\n  }else{\n    let state = \"start\";\n    for(let key in dict){\n      if(typeof key !== \"string\"){\n        state = \"mixed\";\n        break;\n      }\n      if(state == \"start\"){\n        if(key === key.toUpperCase()){\n          state = \"upper\";\n        }else if(key === key.toLowerCase()){\n          state = \"lower\";\n        }else{\n          break;\n        }\n      }else if((state == \"upper\" && key !== key.toUpperCase()) || (state == \"lower\" && key !== key.toLowerCase())){\n        state = \"mixed\";\n        break;\n      }else{\n        continue;\n      }\n    }\n    return state == \"upper\" || state == \"lower\";\n  }\n}\n\n### Explanation\n\nThis program checks if all keys in a dictionary are either all uppercase or all lowercase. If the dictionary is empty, it returns false. Otherwise, it iterates through each key in the dictionary and checks if the key is a string. If the key is not a string, it sets the state to \"mixed\" and breaks out of the loop. If the key is a string, it checks if the key is all uppercase, all lowercase, or mixed case. If the key is all uppercase, it sets the state to \"upper\". If the key is all lowercase, it sets the state to \"lower\". If the key is mixed case, it sets the state to \"mixed\" and breaks out of the loop. If the state is \"upper\" or \"lower\" after iterating through all keys, it returns true. Otherwise, it returns false.\n\n\n### Racket version\n\n#lang racket\n\n(define (check_dict_case dict)\n"}, {"name": "HumanEval_130_tri", "language": "rkt", "prompt": "#lang racket\n\n(define (tri n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_130_tri.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-within (candidate 3) (list 1 3 2 8) 0.001)\n    (check-within (candidate 4) (list 1 3 2 8 3) 0.001)\n    (check-within (candidate 5) (list 1 3 2 8 3 15) 0.001)\n    (check-within (candidate 6) (list 1 3 2 8 3 15 4) 0.001)\n    (check-within (candidate 7) (list 1 3 2 8 3 15 4 24) 0.001)\n    (check-within (candidate 8) (list 1 3 2 8 3 15 4 24 5) 0.001)\n    (check-within (candidate 9) (list 1 3 2 8 3 15 4 24 5 35) 0.001)\n    (check-within (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11) 0.001)\n    (check-within (candidate 0) (list 1) 0.001)\n    (check-within (candidate 1) (list 1 3) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction tri(n){\n  if(n === 0){\n    return [1];\n  }\n  let my_tri = [1, 3];\n  for(let i=2; i<n+1; i++){\n    if(i%2 === 0){\n      my_tri.push(i/2+1);\n    }else{\n      my_tri.push(my_tri[i-1]+my_tri[i-2]+(i+3)/2);\n    }\n  }\n  return my_tri;\n}\n\n### Explanation\n\nThis program generates an array of numbers that represent a triangle. The first element is always 1, and each subsequent element is calculated based on the previous elements. The calculation is different depending on whether the index of the element is even or odd. If it's even, the element is (index/2)+1. If it's odd, the element is the sum of the previous two elements plus (index+3)/2. The function takes an integer n as input and returns an array of the first n+1 elements of the triangle. If n is 0, the function returns an array with just 1 element. \n\n\n### Racket version\n\n#lang racket\n\n(define (tri n)\n"}, {"name": "HumanEval_47_median", "language": "rkt", "prompt": "#lang racket\n\n(define (median l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_47_median.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-within (candidate (list 3 1 2 4 5)) 3 0.001)\n    (check-within (candidate (list -10 4 6 1000 10 20)) 8.0 0.001)\n    (check-within (candidate (list 5)) 5 0.001)\n    (check-within (candidate (list 6 5)) 5.5 0.001)\n    (check-within (candidate (list 8 1 3 9 9 2 7)) 7 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction median(l){\n  l = l.sort((a,b) => a-b);\n  if(l.length % 2 == 1){\n    return l[Math.floor(l.length/2)];\n  }else{\n    return (l[l.length/2-1] + l[l.length/2])/2;\n  }\n}\n\n### Explanation\n\nThis program defines a function `median` that takes a list of numbers as input. The function first sorts the list in ascending order. If the length of the list is odd, the function returns the middle element of the sorted list. If the length of the list is even, the function returns the average of the two middle elements of the sorted list.\n\n\n### Racket version\n\n#lang racket\n\n(define (median l)\n"}, {"name": "HumanEval_44_change_base", "language": "rkt", "prompt": "#lang racket\n\n(define (change_base x base)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_44_change_base.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n    (check-within (candidate 8 3) \"22\" 0.001)\n    (check-within (candidate 9 3) \"100\" 0.001)\n    (check-within (candidate 234 2) \"11101010\" 0.001)\n    (check-within (candidate 16 2) \"10000\" 0.001)\n    (check-within (candidate 8 2) \"1000\" 0.001)\n    (check-within (candidate 7 2) \"111\" 0.001)\n    (check-within (candidate 2 3) \"2\" 0.001)\n    (check-within (candidate 3 4) \"3\" 0.001)\n    (check-within (candidate 4 5) \"4\" 0.001)\n    (check-within (candidate 5 6) \"5\" 0.001)\n    (check-within (candidate 6 7) \"6\" 0.001)\n    (check-within (candidate 7 8) \"7\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction change_base(x, base){\n  let ret = \"\";\n  while (x > 0){\n    ret = x % base + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n### Explanation\n\nThis program takes in two arguments, `x` and `base`. It returns a string that represents `x` in the `base` number system. The `while` loop runs as long as `x` is greater than 0. In each iteration, the remainder of `x` divided by `base` is added to the beginning of the `ret` string. Then, `x` is updated to be the quotient of `x` divided by `base`. Finally, the `ret` string is returned. \n\n\n### Racket version\n\n#lang racket\n\n(define (change_base x base)\n"}, {"name": "HumanEval_12_longest", "language": "rkt", "prompt": "#lang racket\n\n(define (longest strings)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_12_longest.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longest))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"x\" 0.001)\n    (check-within (candidate (list \"x\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\")) \"zzzz\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction longest(strings){\n  if(strings.length == 0){\n    return null;\n  }\n  \n  let maxlen = Math.max(...strings.map(x => x.length));\n  for(let s of strings){\n    if(s.length == maxlen){\n      return s;\n    }\n  }\n}\n\n### Explanation\n\nThis function takes an array of strings as input and returns the longest string in the array. If the input array is empty, the function returns null. The function first finds the length of the longest string in the array using the Math.max function and the spread operator. It then iterates over the array and returns the first string that has the same length as the longest string.\n\n\n### Racket version\n\n#lang racket\n\n(define (longest strings)\n"}, {"name": "HumanEval_116_sort_array", "language": "rkt", "prompt": "#lang racket\n\n(define (sort_array arr)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_116_sort_array.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5) 0.001)\n    (check-within (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3) 0.001)\n    (check-within (candidate (list 1 0 2 3 4)) (list 0 1 2 4 3) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4 3 3 5 5 5 7 77) 0.001)\n    (check-within (candidate (list 3 6 44 12 32 5)) (list 32 3 5 6 12 44) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g) || []).length || a - b;\n  });\n}\n\n### Explanation\n\nThis function sorts an array of integers in ascending order based on the number of 1's in their binary representation. If two integers have the same number of 1's in their binary representation, then they are sorted in ascending order based on their value. \n\n\n### Racket version\n\n#lang racket\n\n(define (sort_array arr)\n"}, {"name": "HumanEval_58_common", "language": "rkt", "prompt": "#lang racket\n\n(define (common l1 l2)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_58_common.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-within (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653) 0.001)\n    (check-within (candidate (list 5 3 2 8) (list 3 2)) (list 2 3) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list )) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction common(l1, l2){\n  let ret = new Set();\n  l1.forEach(e1 => l2.forEach(e2 => {if(e1 === e2){ret.add(e1)}}));\n  return Array.from(ret).sort((a,b) => a-b);\n}\n\n### Explanation\n\nThis function takes two arrays as input and returns an array of the common elements between the two input arrays. The returned array is sorted in ascending order. \n\nThe function works by creating a new Set object called `ret`. The `forEach` method is called on the first input array `l1`. For each element `e1` in `l1`, the `forEach` method is called on the second input array `l2`. For each element `e2` in `l2`, if `e1` is equal to `e2`, then `e1` is added to the `ret` set. \n\nFinally, the `Array.from` method is called on `ret` to convert the set to an array. The `sort` method is called on the resulting array to sort it in ascending order. \n\n\n### Racket version\n\n#lang racket\n\n(define (common l1 l2)\n"}, {"name": "HumanEval_154_cycpattern_check", "language": "rkt", "prompt": "#lang racket\n\n(define (cycpattern_check a b)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_154_cycpattern_check.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n    (check-within (candidate \"xyzw\" \"xyw\") #f 0.001)\n    (check-within (candidate \"yello\" \"ell\") #t 0.001)\n    (check-within (candidate \"whattup\" \"ptut\") #f 0.001)\n    (check-within (candidate \"efef\" \"fee\") #t 0.001)\n    (check-within (candidate \"abab\" \"aabb\") #f 0.001)\n    (check-within (candidate \"winemtt\" \"tinem\") #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction cycpattern_check(a, b){\n  let l = b.length;\n  let pat = b + b;\n  for(let i=0; i<a.length-l+1; i++){\n    for(let j=0; j<l+1; j++){\n      if(a.slice(i,i+l) === pat.slice(j,j+l)){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis function takes two strings as input, `a` and `b`. It returns `true` if `b` is a cyclic pattern of `a`, and `false` otherwise. A cyclic pattern is a pattern that can be obtained by concatenating `a` with itself one or more times, and then taking a substring of the resulting string. The function works by creating a new string `pat` that is the concatenation of `b` with itself, and then checking if any substring of length `l` of `pat` matches a substring of length `l` of `a`. If a match is found, the function returns `true`. If no match is found after checking all possible substrings, the function returns `false`.\n\n\n### Racket version\n\n#lang racket\n\n(define (cycpattern_check a b)\n"}, {"name": "HumanEval_114_minSubArraySum", "language": "rkt", "prompt": "#lang racket\n\n(define (minSubArraySum nums)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_114_minSubArraySum.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n    (check-within (candidate (list 2 3 4 1 2 4)) 1 0.001)\n    (check-within (candidate (list -1 -2 -3)) -6 0.001)\n    (check-within (candidate (list -1 -2 -3 2 -10)) -14 0.001)\n    (check-within (candidate (list -9999999999999999)) -9999999999999999 0.001)\n    (check-within (candidate (list 0 10 20 1000000)) 0 0.001)\n    (check-within (candidate (list -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 100 -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 10 11 13 8 3 4)) 3 0.001)\n    (check-within (candidate (list 100 -33 32 -1 0 -2)) -33 0.001)\n    (check-within (candidate (list -10)) -10 0.001)\n    (check-within (candidate (list 7)) 7 0.001)\n    (check-within (candidate (list 1 -1)) -1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction minSubArraySum(nums){\n  let max_sum = 0\n  let s = 0\n  for (let num of nums){\n    s += -num\n    if (s < 0){\n      s = 0\n    }\n    max_sum = Math.max(s, max_sum)\n  }\n  if (max_sum == 0){\n    max_sum = Math.max(...nums.map(i => -i))\n  }\n  let min_sum = -max_sum\n  return min_sum\n}\n\n### Explanation\n\nThis function takes an array of numbers as input and returns the minimum possible sum of any contiguous subarray of the input array. The function works by iterating through the array and keeping track of the maximum sum seen so far. If the current sum becomes negative, it is reset to zero. If the maximum sum seen is zero, then the function returns the maximum negative value in the input array. The function returns the negative of the maximum sum seen as the minimum possible sum of any contiguous subarray. \n\n\n### Racket version\n\n#lang racket\n\n(define (minSubArraySum nums)\n"}, {"name": "HumanEval_88_sort_array", "language": "rkt", "prompt": "#lang racket\n\n(define (sort_array array)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_88_sort_array.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5)) (list 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3 4 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0) 0.001)\n    (check-within (candidate (list 2 1)) (list 1 2) 0.001)\n    (check-within (candidate (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87) 0.001)\n    (check-within (candidate (list 21 14 23 11)) (list 23 21 14 11) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sort_array(array){\n  return array.length == 0 ? [] : array.sort((a,b)=>(array[0]+array[array.length-1])%2==0 ? b-a : a-b);\n}\n\n### Explanation\n\nThis function takes an array of integers as input and returns the sorted array. If the input array is empty, the function returns an empty array. The sorting is done using the built-in sort method. The sort order is determined by whether the sum of the first and last elements of the array is even or odd. If it is even, the array is sorted in descending order, otherwise it is sorted in ascending order.\n\n\n### Racket version\n\n#lang racket\n\n(define (sort_array array)\n"}, {"name": "HumanEval_111_histogram", "language": "rkt", "prompt": "#lang racket\n\n(define (histogram test)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_111_histogram.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate histogram))\n    (check-within (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1) (\"d\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"b b b b a\") #hash((\"b\" .  4)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"\") #hash() 0.001)\n    (check-within (candidate \"a\") #hash((\"a\" .  1)) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction histogram(test){\n  let dict1 = {};\n  let list1 = test.split(\" \");\n  let t = 0;\n\n  for(let i of list1){\n    if(list1.filter(x => x === i).length > t && i !== ''){\n      t = list1.filter(x => x === i).length;\n    }\n  }\n  if(t > 0){\n    for(let i of list1){\n      if(list1.filter(x => x === i).length === t){\n        dict1[i] = t;\n      }\n    }\n  }\n  return dict1;\n}\n\n### Explanation\n\nThis program takes a string as input and returns a dictionary with the most common word(s) in the string and the number of times it appears. The program first splits the string into a list of words, then loops through the list to find the most common word(s). It then creates a dictionary with the most common word(s) and the number of times it appears and returns it.\n\n\n### Racket version\n\n#lang racket\n\n(define (histogram test)\n"}, {"name": "HumanEval_123_get_odd_collatz", "language": "rkt", "prompt": "#lang racket\n\n(define (get_odd_collatz n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_123_get_odd_collatz.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_odd_collatz))\n    (check-within (candidate 14) (list 1 5 7 11 13 17) 0.001)\n    (check-within (candidate 5) (list 1 5) 0.001)\n    (check-within (candidate 12) (list 1 3 5) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction get_odd_collatz(n){\n  let odd_collatz = n%2 == 0 ? [] : [n];\n  while(n > 1){\n    if(n%2 == 0){\n      n = n/2;\n    }else{\n      n = n*3 + 1;\n    }\n    if(n%2 == 1){\n      odd_collatz.push(n);\n    }\n  }\n  return odd_collatz.sort((a,b) => a-b);\n}\n\n### Explanation\n\nThis function takes an integer `n` as input and returns an array of odd numbers in the Collatz sequence starting from `n`. The Collatz sequence is generated by repeatedly applying the following rules: if `n` is even, divide it by 2, otherwise multiply it by 3 and add 1. The function first checks if `n` is odd, and if so, adds it to the `odd_collatz` array. It then applies the Collatz rules until `n` is 1, adding any odd numbers to the `odd_collatz` array along the way. Finally, it sorts the `odd_collatz` array in ascending order and returns it.\n\n\n### Racket version\n\n#lang racket\n\n(define (get_odd_collatz n)\n"}, {"name": "HumanEval_62_derivative", "language": "rkt", "prompt": "#lang racket\n\n(define (derivative xs)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_62_derivative.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate derivative))\n    (check-within (candidate (list 3 1 2 4 5)) (list 1 4 12 20) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 6) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 2 2) 0.001)\n    (check-within (candidate (list 3 2 1 0 4)) (list 2 2 0 16) 0.001)\n    (check-within (candidate (list 1)) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction derivative(xs){\n  return xs.map((x, i) => x*i).slice(1);\n}\n\n### Explanation\n\nThis function takes an array of numbers as input, and returns an array of the same length, where each element is the derivative of the corresponding element in the input array. The derivative of an element is the product of the element and its index in the input array, except for the first element, which is always 0. The `map` method is used to apply this calculation to each element in the input array, and the `slice` method is used to remove the first element from the resulting array.\n\n\n### Racket version\n\n#lang racket\n\n(define (derivative xs)\n"}, {"name": "HumanEval_63_fibfib", "language": "rkt", "prompt": "#lang racket\n\n(define (fibfib n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_63_fibfib.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 1) 0 0.001)\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 24 0.001)\n    (check-within (candidate 10) 81 0.001)\n    (check-within (candidate 12) 274 0.001)\n    (check-within (candidate 14) 927 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction fibfib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 0;\n  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\n### Explanation\n\nThis is a recursive function that calculates the nth number in the Fibonacci sequence. The base cases are when n is 0, 1, or 2, which return 0, 0, and 1, respectively. Otherwise, the function returns the sum of the previous three numbers in the sequence. \n\n\n### Racket version\n\n#lang racket\n\n(define (fibfib n)\n"}, {"name": "HumanEval_2_truncate_number", "language": "rkt", "prompt": "#lang racket\n\n(define (truncate_number number)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_2_truncate_number.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate truncate_number))\n    (check-within (candidate 3.5) 0.5 0.001)\n    (check-within (candidate 1.25) 0.25 0.001)\n    (check-within (candidate 123.0) 0.0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction truncate_number(number){\n  return number % 1;\n}\n\n### Explanation\n\nThis program defines a function called `truncate_number` that takes a number as an argument. The function returns the remainder of the number divided by 1. This is a way to extract the decimal part of a number. \n\n\n### Racket version\n\n#lang racket\n\n(define (truncate_number number)\n"}, {"name": "HumanEval_35_max_element", "language": "rkt", "prompt": "#lang racket\n\n(define (max_element l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_35_max_element.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n    (check-within (candidate (list 1 2 3)) 3 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction max_element(l){\n  let m = l[0];\n  for(let e of l){\n    if(e > m){\n      m = e;\n    }\n  }\n  return m;\n}\n\n### Explanation\n\nThis program defines a function `max_element` that takes a list `l` as input. The function initializes a variable `m` to the first element of the list. It then loops through the list and checks if each element is greater than `m`. If it is, it sets `m` to that element. Finally, it returns `m`, which is the maximum element in the list.\n\n\n### Racket version\n\n#lang racket\n\n(define (max_element l)\n"}, {"name": "HumanEval_99_closest_integer", "language": "rkt", "prompt": "#lang racket\n\n(define (closest_integer value)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_99_closest_integer.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-within (candidate \"10\") 10 0.001)\n    (check-within (candidate \"14.5\") 15 0.001)\n    (check-within (candidate \"-15.5\") -16 0.001)\n    (check-within (candidate \"15.3\") 15 0.001)\n    (check-within (candidate \"0\") 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction closest_integer(value){\n  if(value.split('.').length == 2){\n    while(value[value.length-1] == '0'){\n      value = value.slice(0, -1);\n    }\n  }\n  let num = parseFloat(value);\n  if(value.slice(-2) == '.5'){\n    if(num > 0){\n      return Math.ceil(num);\n    }else{\n      return Math.floor(num);\n    }\n  }else if(value.length > 0){\n    return Math.round(num);\n  }else{\n    return 0;\n  }\n}\n\n### Explanation\n\nThis function takes a string value as input and returns the closest integer to that value. If the input value has a decimal part, the function removes trailing zeros. If the decimal part of the input value is exactly 0.5, the function rounds up if the input value is positive, and rounds down if the input value is negative. If the input value is an empty string, the function returns 0.\n\n\n### Racket version\n\n#lang racket\n\n(define (closest_integer value)\n"}, {"name": "HumanEval_39_prime_fib", "language": "rkt", "prompt": "#lang racket\n\n(define (prime_fib n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_39_prime_fib.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n    (check-within (candidate 1) 2 0.001)\n    (check-within (candidate 2) 3 0.001)\n    (check-within (candidate 3) 5 0.001)\n    (check-within (candidate 4) 13 0.001)\n    (check-within (candidate 5) 89 0.001)\n    (check-within (candidate 6) 233 0.001)\n    (check-within (candidate 7) 1597 0.001)\n    (check-within (candidate 8) 28657 0.001)\n    (check-within (candidate 9) 514229 0.001)\n    (check-within (candidate 10) 433494437 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction prime_fib(n){\n  function is_prime(p){\n    if(p < 2){\n      return false;\n    }\n    for(let k=2; k<=Math.min(Math.floor(Math.sqrt(p))+1, p-1); k++){\n      if(p % k === 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  let f = [0, 1];\n  while(true){\n    f.push(f[f.length-1] + f[f.length-2]);\n    if(is_prime(f[f.length-1])){\n      n--;\n    }\n    if(n === 0){\n      return f[f.length-1];\n    }\n  }\n}\n\n### Explanation\n\nThis program generates the nth Fibonacci prime number. The function `is_prime` checks if a number is prime. The function `prime_fib` generates the Fibonacci sequence and checks if each number is prime. If a prime number is found, the counter `n` is decremented. When `n` reaches zero, the function returns the last prime number found.\n\n\n### Racket version\n\n#lang racket\n\n(define (prime_fib n)\n"}, {"name": "HumanEval_8_sum_product", "language": "rkt", "prompt": "#lang racket\n\n(define (sum_product numbers)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_8_sum_product.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n    (check-within (candidate (list )) (list 0 1) 0.001)\n    (check-within (candidate (list 1 1 1)) (list 3 1) 0.001)\n    (check-within (candidate (list 100 0)) (list 100 0) 0.001)\n    (check-within (candidate (list 3 5 7)) (list 15 105) 0.001)\n    (check-within (candidate (list 10)) (list 10 10) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sum_product(numbers){\n  let sum_value = 0;\n  let prod_value = 1;\n  \n  for(let n of numbers){\n    sum_value += n;\n    prod_value *= n;\n  }\n  \n  return [sum_value, prod_value];\n}\n\n### Explanation\n\nThis program defines a function `sum_product` that takes an array of numbers as an argument. The function initializes two variables, `sum_value` and `prod_value`, to 0 and 1, respectively. It then loops over each element in the input array, adding each element to `sum_value` and multiplying each element by `prod_value`. Finally, the function returns an array containing `sum_value` and `prod_value`.\n\n\n### Racket version\n\n#lang racket\n\n(define (sum_product numbers)\n"}, {"name": "HumanEval_117_select_words", "language": "rkt", "prompt": "#lang racket\n\n(define (select_words s n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_117_select_words.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-within (candidate \"Mary had a little lamb\" 4) (list \"little\") 0.001)\n    (check-within (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\") 0.001)\n    (check-within (candidate \"simple white space\" 2) (list ) 0.001)\n    (check-within (candidate \"Hello world\" 4) (list \"world\") 0.001)\n    (check-within (candidate \"Uncle sam\" 3) (list \"Uncle\") 0.001)\n    (check-within (candidate \"\" 4) (list ) 0.001)\n    (check-within (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction select_words(s, n){\n  let result = [];\n  s.split(\" \").forEach(word => {\n    let n_consonants = 0;\n    for(let i=0; i<word.length; i++){\n      if(![\"a\",\"e\",\"i\",\"o\",\"u\"].includes(word[i].toLowerCase())){\n        n_consonants++;\n      }\n    }\n    if(n_consonants === n){\n      result.push(word);\n    }\n  });\n  return result;\n}\n\n### Explanation\n\nThis program defines a function `select_words` that takes two arguments: a string `s` and a number `n`. The function returns an array of words from `s` that have exactly `n` consonants. A word is defined as a sequence of characters separated by spaces. The function first splits the input string into an array of words using the `split` method. It then iterates over each word in the array and counts the number of consonants in the word. A consonant is any letter that is not a vowel, which in this case are the letters \"a\", \"e\", \"i\", \"o\", and \"u\". If the number of consonants in the word is equal to `n`, the word is added to the result array. Finally, the function returns the result array.\n\n\n### Racket version\n\n#lang racket\n\n(define (select_words s n)\n"}, {"name": "HumanEval_122_add_elements", "language": "rkt", "prompt": "#lang racket\n\n(define (add_elements arr k)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_122_add_elements.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n    (check-within (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4 0.001)\n    (check-within (candidate (list 111 121 3 4000 5 6) 2) 0 0.001)\n    (check-within (candidate (list 11 21 3 90 5 6 7 8 9) 4) 125 0.001)\n    (check-within (candidate (list 111 21 3 4000 5 6 7 8 9) 4) 24 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction add_elements(arr, k){\n  return arr.slice(0,k).reduce((a,b) => (String(b).length <= 2) ? a+b : a, 0);\n}\n\n### Explanation\n\nThis function takes an array `arr` and a number `k` as input. It returns the sum of the first `k` elements of `arr` that have two or fewer digits. If there are no such elements, it returns 0.\n\n\n### Racket version\n\n#lang racket\n\n(define (add_elements arr k)\n"}, {"name": "HumanEval_159_eat", "language": "rkt", "prompt": "#lang racket\n\n(define (eat number need remaining)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_159_eat.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n    (check-within (candidate 5 6 10) (list 11 4) 0.001)\n    (check-within (candidate 4 8 9) (list 12 1) 0.001)\n    (check-within (candidate 1 10 10) (list 11 0) 0.001)\n    (check-within (candidate 2 11 5) (list 7 0) 0.001)\n    (check-within (candidate 4 5 7) (list 9 2) 0.001)\n    (check-within (candidate 4 5 1) (list 5 0) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction eat(number, need, remaining){\n  if(need <= remaining){\n    return [number + need, remaining-need];\n  }else{\n    return [number + remaining, 0];\n  }\n}\n\n### Explanation\n\nThis is a function that takes three arguments: `number`, `need`, and `remaining`. If `need` is less than or equal to `remaining`, it returns an array with two elements: the sum of `number` and `need`, and the difference between `remaining` and `need`. Otherwise, it returns an array with two elements: the sum of `number` and `remaining`, and `0`.\n\n\n### Racket version\n\n#lang racket\n\n(define (eat number need remaining)\n"}, {"name": "HumanEval_113_odd_count", "language": "rkt", "prompt": "#lang racket\n\n(define (odd_count lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_113_odd_count.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_count))\n    (check-within (candidate (list \"1234567\")) (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\") 0.001)\n    (check-within (candidate (list \"3\" \"11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\") 0.001)\n    (check-within (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction odd_count(lst){\n  let res = [];\n  for(let arr of lst){\n    let n = arr.split(\"\").filter(d => parseInt(d)%2 === 1).length;\n    res.push(\"the number of odd elements \" + n + \"n the str\"+ n +\"ng \"+ n +\" of the \"+ n +\"nput.\");\n  }\n  return res;\n}\n\n### Explanation\n\nThis program takes a list of strings as input. It then iterates over each string in the list and counts the number of odd digits in the string. It then appends the count to a string and pushes the string to an array. Finally, it returns the array of strings.\n\n\n### Racket version\n\n#lang racket\n\n(define (odd_count lst)\n"}, {"name": "HumanEval_90_next_smallest", "language": "rkt", "prompt": "#lang racket\n\n(define (next_smallest lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_90_next_smallest.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest))\n    (check-within (candidate (list 1 2 3 4 5)) 2 0.001)\n    (check-within (candidate (list 5 1 4 3 2)) 2 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list 1 1 1 1 0)) 1 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list -35 34 12 -45)) -35 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction next_smallest(lst){\n  lst = [...new Set(lst)].sort((a,b) => a-b);\n  return lst.length < 2 ? null : lst[1];\n}\n\n### Explanation\n\nThis function takes a list of numbers as input. It removes duplicates from the list, sorts it in ascending order, and then returns the second smallest number in the list. If there are less than two unique numbers in the list, it returns null.\n\n\n### Racket version\n\n#lang racket\n\n(define (next_smallest lst)\n"}, {"name": "HumanEval_87_get_row", "language": "rkt", "prompt": "#lang racket\n\n(define (get_row lst x)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_87_get_row.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)) 0.001)\n    (check-within (candidate (list ) 1) (list ) 0.001)\n    (check-within (candidate (list (list 1)) 2) (list ) 0.001)\n    (check-within (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list 2 2)) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction get_row(lst, x){\n  let coords = [];\n  for(let i=0; i<lst.length; i++){\n    for(let j=0; j<lst[i].length; j++){\n      if(lst[i][j] === x){\n        coords.push([i,j]);\n      }\n    }\n  }\n  return coords.sort((a,b) => a[0] - b[0] || b[1] - a[1]);\n}\n\n### Explanation\n\nThis function takes a list of lists (lst) and a value (x) as input. It then loops through all the elements of the list of lists and checks if the current element is equal to x. If it is, it adds the coordinates of that element to a list called coords. Finally, it sorts the list of coordinates first by the first element of each coordinate (i.e. the row number) and then by the second element (i.e. the column number) in descending order. The sorted list of coordinates is then returned.\n\n\n### Racket version\n\n#lang racket\n\n(define (get_row lst x)\n"}, {"name": "HumanEval_29_filter_by_prefix", "language": "rkt", "prompt": "#lang racket\n\n(define (filter_by_prefix strings prefix)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_29_filter_by_prefix.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n### Explanation\n\nThis program defines a function called `filter_by_prefix` that takes two arguments: an array of strings and a string prefix. The function returns a new array of strings that only contains the elements from the original array that start with the prefix.\n\n\n### Racket version\n\n#lang racket\n\n(define (filter_by_prefix strings prefix)\n"}, {"name": "HumanEval_102_choose_num", "language": "rkt", "prompt": "#lang racket\n\n(define (choose_num x y)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_102_choose_num.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n    (check-within (candidate 12 15) 14 0.001)\n    (check-within (candidate 13 12) -1 0.001)\n    (check-within (candidate 33 12354) 12354 0.001)\n    (check-within (candidate 5234 5233) -1 0.001)\n    (check-within (candidate 6 29) 28 0.001)\n    (check-within (candidate 27 10) -1 0.001)\n    (check-within (candidate 7 7) -1 0.001)\n    (check-within (candidate 546 546) 546 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction choose_num(x, y){\n  if(x > y){\n    return -1;\n  }\n  if(y % 2 === 0){\n    return y;\n  }\n  if(x === y){\n    return -1;\n  }\n  return y - 1;\n}\n\n### Explanation\n\nThis function takes two arguments, `x` and `y`. If `x` is greater than `y`, it returns `-1`. If `y` is even, it returns `y`. If `x` is equal to `y`, it returns `-1`. Otherwise, it returns `y - 1`. \n\n\n### Racket version\n\n#lang racket\n\n(define (choose_num x y)\n"}, {"name": "HumanEval_82_prime_length", "language": "rkt", "prompt": "#lang racket\n\n(define (prime_length string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_82_prime_length.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n    (check-within (candidate \"Hello\") #t 0.001)\n    (check-within (candidate \"abcdcba\") #t 0.001)\n    (check-within (candidate \"kittens\") #t 0.001)\n    (check-within (candidate \"orange\") #f 0.001)\n    (check-within (candidate \"wow\") #t 0.001)\n    (check-within (candidate \"world\") #t 0.001)\n    (check-within (candidate \"MadaM\") #t 0.001)\n    (check-within (candidate \"Wow\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"HI\") #t 0.001)\n    (check-within (candidate \"go\") #t 0.001)\n    (check-within (candidate \"gogo\") #f 0.001)\n    (check-within (candidate \"aaaaaaaaaaaaaaa\") #f 0.001)\n    (check-within (candidate \"Madam\") #t 0.001)\n    (check-within (candidate \"M\") #f 0.001)\n    (check-within (candidate \"0\") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction prime_length(string){\n  let l = string.length;\n  if(l == 0 || l == 1){\n    return false;\n  }\n  for(let i=2; i<l; i++){\n    if(l % i == 0){\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis program takes a string as input and returns true if the length of the string is a prime number, and false otherwise. The function first calculates the length of the string and checks if it is 0 or 1. If the length is 0 or 1, the function returns false. If the length is greater than 1, the function checks if the length is divisible by any number between 2 and the length-1. If the length is divisible by any number between 2 and the length-1, the function returns false. If the length is not divisible by any number between 2 and the length-1, the function returns true.\n\n\n### Racket version\n\n#lang racket\n\n(define (prime_length string)\n"}, {"name": "HumanEval_60_sum_to_n", "language": "rkt", "prompt": "#lang racket\n\n(define (sum_to_n n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_60_sum_to_n.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 6) 21 0.001)\n    (check-within (candidate 11) 66 0.001)\n    (check-within (candidate 30) 465 0.001)\n    (check-within (candidate 100) 5050 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sum_to_n(n){\n  return n*(n+1)/2;\n}\n\n### Explanation\n\nThis function takes a number `n` and returns the sum of all numbers from 1 to `n`. It does this by using the formula for the sum of an arithmetic series, which is `n*(n+1)/2`.\n\n\n### Racket version\n\n#lang racket\n\n(define (sum_to_n n)\n"}, {"name": "HumanEval_140_fix_spaces", "language": "rkt", "prompt": "#lang racket\n\n(define (fix_spaces text)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_140_fix_spaces.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n    (check-within (candidate \"Example\") \"Example\" 0.001)\n    (check-within (candidate \"Mudasir Hanif \") \"Mudasir_Hanif_\" 0.001)\n    (check-within (candidate \"Yellow Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\" 0.001)\n    (check-within (candidate \"Exa   mple\") \"Exa-mple\" 0.001)\n    (check-within (candidate \"   Exa 1 2 2 mple\") \"-Exa_1_2_2_mple\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction fix_spaces(text){\n  let new_text = \"\";\n  let i = 0;\n  let start = 0, end = 0;\n  while(i < text.length){\n    if(text[i] === \" \"){\n      end += 1;\n    }else{\n      if(end - start > 2){\n        new_text += \"-\"+text[i];\n      }else if(end - start > 0){\n        new_text += \"_\".repeat(end - start)+text[i];\n      }else{\n        new_text += text[i];\n      }\n      start = i+1;\n      end = i+1;\n    }\n    i+=1;\n  }\n  if(end - start > 2){\n    new_text += \"-\";\n  }else if(end - start > 0){\n    new_text += \"_\".repeat(end - start);\n  }\n  return new_text;\n}\n\n### Explanation\n\nThis function takes in a string as an argument and returns a new string. The new string is the same as the input string, except that spaces are replaced with underscores, and groups of more than two spaces are replaced with a hyphen followed by the next character. \n\nFor example, \"hello world\" would be transformed into \"hello_world\", and \"hello   world\" would be transformed into \"hello-w_orld\". \n\nThe function works by iterating through the input string character by character. If the current character is a space, it increments a counter called \"end\". If the current character is not a space, it checks the difference between \"end\" and \"start\". If this difference is greater than 2, it adds a hyphen followed by the current character to the new string. If the difference is greater than 0 but less than or equal to 2, it adds a number of underscores equal to the difference followed by the current character to the new string. If the difference is 0, it simply adds the current character to the new string. It then sets both \"start\" and \"end\" to the current index. \n\nAfter iterating through the entire string, it checks the difference between \"end\" and \"start\" one last time, and adds either a hyphen or a number of underscores to the new string as appropriate. Finally, it returns the new string. \n\n\n### Racket version\n\n#lang racket\n\n(define (fix_spaces text)\n"}, {"name": "HumanEval_9_rolling_max", "language": "rkt", "prompt": "#lang racket\n\n(define (rolling_max numbers)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_9_rolling_max.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 1)) (list 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction rolling_max(numbers){\n  let running_max = null;\n  let result = [];\n\n  for(let n of numbers){\n    if(running_max === null){\n      running_max = n;\n    } else {\n      running_max = Math.max(running_max, n);\n    }\n    result.push(running_max);\n  }\n  return result;\n}\n\n### Explanation\n\nThis program takes an array of numbers as input and returns an array of the same length where each element is the maximum of all the numbers up to that element in the input array. The program iterates over the input array and keeps track of the maximum value seen so far in a variable called `running_max`. For each element in the input array, the program updates `running_max` to be the maximum of `running_max` and the current element. The program then appends `running_max` to the output array. Finally, the program returns the output array.\n\n\n### Racket version\n\n#lang racket\n\n(define (rolling_max numbers)\n"}, {"name": "HumanEval_143_words_in_sentence", "language": "rkt", "prompt": "#lang racket\n\n(define (words_in_sentence sentence)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_143_words_in_sentence.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n    (check-within (candidate \"This is a test\") \"is\" 0.001)\n    (check-within (candidate \"lets go for swimming\") \"go for\" 0.001)\n    (check-within (candidate \"there is no place available here\") \"there is no place\" 0.001)\n    (check-within (candidate \"Hi I am Hussein\") \"Hi am Hussein\" 0.001)\n    (check-within (candidate \"go for it\") \"go for it\" 0.001)\n    (check-within (candidate \"here\") \"\" 0.001)\n    (check-within (candidate \"here is\") \"is\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction words_in_sentence(sentence){\n  let new_lst = [];\n  for(let word of sentence.split(\" \")){\n    let flg = 0;\n    if(word.length == 1){\n      flg = 1;\n    }\n    for(let i=2; i<word.length; i++){\n      if(word.length%i == 0){\n        flg = 1;\n      }\n    }\n    if(flg == 0 || word.length == 2){\n      new_lst.push(word);\n    }\n  }\n  return new_lst.join(\" \");\n}\n\n### Explanation\n\nThis function takes a string `sentence` as input, and returns a new string with only certain words from the original sentence. Specifically, the function only keeps words that have a length of 2 or that have a length that is not divisible by any integer greater than 1. The function first splits the input sentence into an array of words using the `split` method. It then loops through each word in the array, checking whether it meets the length criteria using a nested loop. If a word meets the criteria, it is added to a new array `new_lst`. Finally, the function returns the new array as a string, with the words joined together by spaces using the `join` method. \n\n\n### Racket version\n\n#lang racket\n\n(define (words_in_sentence sentence)\n"}, {"name": "HumanEval_118_get_closest_vowel", "language": "rkt", "prompt": "#lang racket\n\n(define (get_closest_vowel word)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_118_get_closest_vowel.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n    (check-within (candidate \"yogurt\") \"u\" 0.001)\n    (check-within (candidate \"full\") \"u\" 0.001)\n    (check-within (candidate \"easy\") \"\" 0.001)\n    (check-within (candidate \"eAsy\") \"\" 0.001)\n    (check-within (candidate \"ali\") \"\" 0.001)\n    (check-within (candidate \"bad\") \"a\" 0.001)\n    (check-within (candidate \"most\") \"o\" 0.001)\n    (check-within (candidate \"ab\") \"\" 0.001)\n    (check-within (candidate \"ba\") \"\" 0.001)\n    (check-within (candidate \"quick\") \"\" 0.001)\n    (check-within (candidate \"anime\") \"i\" 0.001)\n    (check-within (candidate \"Asia\") \"\" 0.001)\n    (check-within (candidate \"Above\") \"o\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction get_closest_vowel(word){\n  let vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n  if(word.length < 3){\n    return \"\";\n  }\n  for(let i=word.length-2; i>0; i--){\n    if(vowels.has(word[i])){\n      if(!vowels.has(word[i-1]) && !vowels.has(word[i+1])){\n        return word[i];\n      }\n    }\n  }\n  return \"\";\n}\n\n### Explanation\n\nThis function takes in a word and returns the closest vowel to a consonant in the word. If there is no such vowel, it returns an empty string. It does this by iterating through the word from the second to last character to the second character. If it finds a vowel, it checks if the characters before and after the vowel are not vowels. If they are not vowels, it returns the vowel. If it iterates through the whole loop without finding a vowel that meets the criteria, it returns an empty string. \n\n\n### Racket version\n\n#lang racket\n\n(define (get_closest_vowel word)\n"}, {"name": "HumanEval_152_compare", "language": "rkt", "prompt": "#lang racket\n\n(define (compare game guess)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_152_compare.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n    (check-within (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3) 0.001)\n    (check-within (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0) 0.001)\n    (check-within (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6) 0.001)\n    (check-within (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction compare(game, guess){\n  return game.map((x,i) => Math.abs(x-guess[i]));\n}\n\n### Explanation\n\nThis function takes two arrays, `game` and `guess`, and returns a new array with the absolute difference between each element of the two arrays. \n\n\n### Racket version\n\n#lang racket\n\n(define (compare game guess)\n"}, {"name": "HumanEval_26_remove_duplicates", "language": "rkt", "prompt": "#lang racket\n\n(define (remove_duplicates numbers)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_26_remove_duplicates.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction remove_duplicates(numbers){\n  let c = {};\n  numbers.forEach(n => c[n] = (c[n] || 0) + 1);\n  return numbers.filter(n => c[n] <= 1);\n}\n\n### Explanation\n\nThis program takes an array of numbers as input and returns a new array with all duplicates removed. It does this by creating a dictionary `c` to count the number of times each number appears in the input array. Then it filters the input array to only include numbers that appear once in the dictionary. \n\n\n### Racket version\n\n#lang racket\n\n(define (remove_duplicates numbers)\n"}, {"name": "HumanEval_6_parse_nested_parens", "language": "rkt", "prompt": "#lang racket\n\n(define (parse_nested_parens paren_string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_6_parse_nested_parens.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3) 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4) 0.001)\n    (check-within (candidate \"(()(())((())))\") (list 4) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction parse_nested_parens(paren_string){\n  function parse_paren_group(s){\n    let depth = 0;\n    let max_depth = 0;\n    for (let c of s){\n      if (c === '('){\n        depth += 1;\n        max_depth = Math.max(depth, max_depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ').filter(x => x).map(parse_paren_group);\n}\n\n### Explanation\n\nThis program takes a string of parentheses and returns an array of integers. Each integer in the array represents the maximum depth of nested parentheses for each group of parentheses in the input string. The function `parse_paren_group` takes a string of parentheses and returns the maximum depth of nested parentheses in that group. The function `parse_nested_parens` splits the input string into groups of parentheses, filters out any empty strings, and maps the `parse_paren_group` function over each group to get an array of maximum depths. \n\n\n### Racket version\n\n#lang racket\n\n(define (parse_nested_parens paren_string)\n"}, {"name": "HumanEval_155_even_odd_count", "language": "rkt", "prompt": "#lang racket\n\n(define (even_odd_count num)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_155_even_odd_count.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-within (candidate 7) (list 0 1) 0.001)\n    (check-within (candidate -78) (list 1 1) 0.001)\n    (check-within (candidate 3452) (list 2 2) 0.001)\n    (check-within (candidate 346211) (list 3 3) 0.001)\n    (check-within (candidate -345821) (list 3 3) 0.001)\n    (check-within (candidate -2) (list 1 0) 0.001)\n    (check-within (candidate -45347) (list 2 3) 0.001)\n    (check-within (candidate 0) (list 1 0) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction even_odd_count(num){\n  let even_count = 0;\n  let odd_count = 0;\n  for(let i of String(Math.abs(num))){\n    if(parseInt(i)%2 === 0){\n      even_count += 1;\n    }else{\n      odd_count += 1;\n    }\n  }\n  return [even_count, odd_count];\n}\n\n### Explanation\n\nThis program takes an integer as input and returns an array with two elements: the number of even digits and the number of odd digits in the input integer. The program first initializes two variables, even_count and odd_count, to zero. It then converts the input integer to a string and iterates over each character in the string. For each character, it checks if it is even or odd by converting it back to an integer and checking if it is divisible by 2. If it is even, it increments the even_count variable, otherwise it increments the odd_count variable. Finally, it returns an array with the even_count and odd_count variables. \n\n\n### Racket version\n\n#lang racket\n\n(define (even_odd_count num)\n"}, {"name": "HumanEval_67_fruit_distribution", "language": "rkt", "prompt": "#lang racket\n\n(define (fruit_distribution s n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_67_fruit_distribution.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n    (check-within (candidate \"5 apples and 6 oranges\" 19) 8 0.001)\n    (check-within (candidate \"5 apples and 6 oranges\" 21) 10 0.001)\n    (check-within (candidate \"0 apples and 1 oranges\" 3) 2 0.001)\n    (check-within (candidate \"1 apples and 0 oranges\" 3) 2 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 100) 95 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 5) 0 0.001)\n    (check-within (candidate \"1 apples and 100 oranges\" 120) 19 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction fruit_distribution(s, n){\n  let lis = []\n  for(let i of s.split(' ')){\n    if(i.match(/\\d+/)){\n      lis.push(parseInt(i))\n    }\n  }\n  return n - lis.reduce((a,b)=>a+b,0)\n}\n\n### Explanation\n\nThis program defines a function `fruit_distribution` that takes two arguments, a string `s` and a number `n`. The function splits the string `s` into an array of strings using the space character as a delimiter. It then iterates over each element of the array, and if the element is a number, it converts it to an integer and adds it to a new array called `lis`. Finally, the function returns the difference between `n` and the sum of the elements of `lis`.\n\n\n### Racket version\n\n#lang racket\n\n(define (fruit_distribution s n)\n"}, {"name": "HumanEval_11_string_xor", "language": "rkt", "prompt": "#lang racket\n\n(define (string_xor a b)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_11_string_xor.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n    (check-within (candidate \"111000\" \"101010\") \"010010\" 0.001)\n    (check-within (candidate \"1\" \"1\") \"0\" 0.001)\n    (check-within (candidate \"0101\" \"0000\") \"0101\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction string_xor(a, b){\n  let result = '';\n  for(let i=0; i<a.length; i++){\n    result += a[i] === b[i] ? '0' : '1';\n  }\n  return result;\n}\n\n### Explanation\n\nThis program defines a function `string_xor` that takes two strings `a` and `b` as input. It then initializes an empty string `result`. It then loops through the characters of `a` and compares each character to the corresponding character in `b`. If the characters are the same, it adds a `0` to `result`, otherwise it adds a `1`. Finally, it returns `result`. The function computes the bitwise XOR of the two strings. \n\n\n### Racket version\n\n#lang racket\n\n(define (string_xor a b)\n"}, {"name": "HumanEval_23_strlen", "language": "rkt", "prompt": "#lang racket\n\n(define (strlen string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_23_strlen.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"x\") 1 0.001)\n    (check-within (candidate \"asdasnakj\") 9 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction strlen(string){\n  return string.length;\n}\n\n### Explanation\n\nThis program defines a function called `strlen` which takes a string as an argument and returns the length of the string. The length of a string is the number of characters in the string. \n\n\n### Racket version\n\n#lang racket\n\n(define (strlen string)\n"}, {"name": "HumanEval_15_string_sequence", "language": "rkt", "prompt": "#lang racket\n\n(define (string_sequence n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_15_string_sequence.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-within (candidate 0) \"0\" 0.001)\n    (check-within (candidate 3) \"0 1 2 3\" 0.001)\n    (check-within (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction string_sequence(n){\n  return [...Array(n+1).keys()].join(' ');\n}\n\n### Explanation\n\nThis program defines a function `string_sequence` that takes an integer `n` as input. The function returns a string of numbers separated by spaces. The string contains all integers from 0 to `n` inclusive. The `join` method is used to concatenate the array of integers into a string with spaces between each integer.\n\n\n### Racket version\n\n#lang racket\n\n(define (string_sequence n)\n"}, {"name": "HumanEval_141_file_name_check", "language": "rkt", "prompt": "#lang racket\n\n(define (file_name_check file_name)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_141_file_name_check.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-within (candidate \"example.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"1example.dll\") \"No\" 0.001)\n    (check-within (candidate \"s1sdf3.asd\") \"No\" 0.001)\n    (check-within (candidate \"K.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"MY16FILE3.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"His12FILE94.exe\") \"No\" 0.001)\n    (check-within (candidate \"_Y.txt\") \"No\" 0.001)\n    (check-within (candidate \"?aREYA.exe\") \"No\" 0.001)\n    (check-within (candidate \"/this_is_valid.dll\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.wow\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"this_is_valid.txtexe\") \"No\" 0.001)\n    (check-within (candidate \"#this2_i4s_5valid.ten\") \"No\" 0.001)\n    (check-within (candidate \"@this1_is6_valid.exe\") \"No\" 0.001)\n    (check-within (candidate \"this_is_12valid.6exe4.txt\") \"No\" 0.001)\n    (check-within (candidate \"all.exe.txt\") \"No\" 0.001)\n    (check-within (candidate \"I563_No.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"Is3youfault.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"no_one#knows.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"1I563_Yes3.exe\") \"No\" 0.001)\n    (check-within (candidate \"I563_Yes3.txtt\") \"No\" 0.001)\n    (check-within (candidate \"final..txt\") \"No\" 0.001)\n    (check-within (candidate \"final132\") \"No\" 0.001)\n    (check-within (candidate \"_f4indsartal132.\") \"No\" 0.001)\n    (check-within (candidate \".txt\") \"No\" 0.001)\n    (check-within (candidate \"s.\") \"No\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction file_name_check(file_name){\n  let suf = ['txt', 'exe', 'dll'];\n  let lst = file_name.split('.');\n  if(lst.length != 2){\n    return 'No';\n  }\n  if(!suf.includes(lst[1])){\n    return 'No';\n  }\n  if(lst[0].length == 0 || !lst[0][0].match(/[a-zA-Z]/)){\n    return 'No';\n  }\n  let t = lst[0].match(/\\d/g);\n  if(t != null && t.length > 3){\n    return 'No';\n  }\n  return 'Yes';\n}\n\n### Explanation\n\nThis program checks if a file name is valid. A valid file name must have a suffix of 'txt', 'exe', or 'dll', and a prefix that starts with a letter and has at most 3 digits. If the file name is valid, the function returns 'Yes', otherwise it returns 'No'. \n\n\n### Racket version\n\n#lang racket\n\n(define (file_name_check file_name)\n"}, {"name": "HumanEval_135_can_arrange", "language": "rkt", "prompt": "#lang racket\n\n(define (can_arrange arr)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_135_can_arrange.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate can_arrange))\n    (check-within (candidate (list 1 2 4 3 5)) 3 0.001)\n    (check-within (candidate (list 1 2 4 5)) -1 0.001)\n    (check-within (candidate (list 1 4 2 5 6 7 8 9 10)) 2 0.001)\n    (check-within (candidate (list 4 8 5 7 3)) 4 0.001)\n    (check-within (candidate (list )) -1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction can_arrange(arr){\n  let ind=-1\n  let i=1\n  while (i<arr.length){\n    if (arr[i]<arr[i-1]){\n      ind=i\n    }\n    i+=1\n  }\n  return ind\n}\n\n### Explanation\n\nThis program takes an array of numbers as input and returns the index of the first element in the array that is smaller than the element before it. If no such element exists, the function returns -1.\n\n\n### Racket version\n\n#lang racket\n\n(define (can_arrange arr)\n"}, {"name": "HumanEval_85_add", "language": "rkt", "prompt": "#lang racket\n\n(define (add lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_85_add.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate (list 4 88)) 88 0.001)\n    (check-within (candidate (list 4 5 6 7 2 122)) 122 0.001)\n    (check-within (candidate (list 4 0 6 7)) 0 0.001)\n    (check-within (candidate (list 4 4 6 8)) 12 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction add(lst){\n  return lst.filter((x,i) => i%2==1 && x%2==0).reduce((a,b) => a+b,0)\n}\n\n### Explanation\n\nThis function takes a list as input and returns the sum of all even numbers at odd positions in the list. \n\nThe `filter` method is used to select only the elements that are even numbers at odd positions. The `reduce` method is then used to sum the filtered elements. \n\n\n### Racket version\n\n#lang racket\n\n(define (add lst)\n"}, {"name": "HumanEval_5_intersperse", "language": "rkt", "prompt": "#lang racket\n\n(define (intersperse numbers delimeter)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_5_intersperse.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n    (check-within (candidate (list ) 7) (list ) 0.001)\n    (check-within (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2) 0.001)\n    (check-within (candidate (list 2 2 2) 2) (list 2 2 2 2 2) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction intersperse(numbers, delimeter){\n  if (!numbers.length){\n    return [];\n  }\n\n  let result = [];\n\n  for (let i = 0; i < numbers.length - 1; i++){\n    result.push(numbers[i]);\n    result.push(delimeter);\n  }\n\n  result.push(numbers[numbers.length - 1]);\n\n  return result;\n}\n\n### Explanation\n\nThis program defines a function `intersperse` that takes two arguments: an array of numbers and a delimiter. If the array is empty, the function returns an empty array. Otherwise, it creates a new array called `result`, and loops over the input array, pushing each element and the delimiter onto `result`. Finally, it pushes the last element of the input array onto `result`, and returns it.\n\n\n### Racket version\n\n#lang racket\n\n(define (intersperse numbers delimeter)\n"}, {"name": "HumanEval_119_match_parens", "language": "rkt", "prompt": "#lang racket\n\n(define (match_parens lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_119_match_parens.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n    (check-within (candidate (list \"()(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \")\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(())\" \"())())\")) \"No\" 0.001)\n    (check-within (candidate (list \")())\" \"(()()(\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"(())))\" \"(()())((\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"()\" \"())\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(\" \"()))()\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"((((\" \"((())\")) \"No\" 0.001)\n    (check-within (candidate (list \")(()\" \"(()(\")) \"No\" 0.001)\n    (check-within (candidate (list \")(\" \")(\")) \"No\" 0.001)\n    (check-within (candidate (list \"(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \"(\")) \"Yes\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction match_parens(lst){\n  function check(s){\n    let val = 0;\n    for(let i of s){\n      if(i === '('){\n        val++;\n      }else{\n        val--;\n      }\n      if(val < 0){\n        return false;\n      }\n    }\n    return val === 0;\n  }\n  \n  let S1 = lst[0] + lst[1];\n  let S2 = lst[1] + lst[0];\n  \n  return check(S1) || check(S2) ? 'Yes' : 'No';\n}\n\n### Explanation\n\nThis function takes a list of two strings as input. It then concatenates the two strings in two different ways, and checks if either of the resulting strings have matching parentheses. If one of the strings have matching parentheses, the function returns 'Yes', otherwise it returns 'No'. \n\n\n### Racket version\n\n#lang racket\n\n(define (match_parens lst)\n"}, {"name": "HumanEval_7_filter_by_substring", "language": "rkt", "prompt": "#lang racket\n\n(define (filter_by_substring strings substring)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_7_filter_by_substring.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction filter_by_substring(strings, substring){\n  return strings.filter(x => x.includes(substring))\n}\n\n### Explanation\n\nThis program defines a function called `filter_by_substring` that takes two arguments: `strings` and `substring`. The function returns a new array that contains all the elements of `strings` that include the `substring`. \n\nThe function uses the `filter` method of the `strings` array to create a new array that only contains the elements that satisfy the condition of the callback function. The callback function is defined using an arrow function that takes one argument `x` and returns `true` if `x` includes the `substring`, and `false` otherwise.\n\n\n### Racket version\n\n#lang racket\n\n(define (filter_by_substring strings substring)\n"}, {"name": "HumanEval_158_find_max", "language": "rkt", "prompt": "#lang racket\n\n(define (find_max words)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_158_find_max.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-within (candidate (list \"name\" \"of\" \"string\")) \"string\" 0.001)\n    (check-within (candidate (list \"name\" \"enam\" \"game\")) \"enam\" 0.001)\n    (check-within (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\" 0.001)\n    (check-within (candidate (list \"abc\" \"cba\")) \"abc\" 0.001)\n    (check-within (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\" 0.001)\n    (check-within (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\" 0.001)\n    (check-within (candidate (list \"b\")) \"b\" 0.001)\n    (check-within (candidate (list \"play\" \"play\" \"play\")) \"play\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction find_max(words){\n  return words.sort((a, b) => {\n    return (new Set(b)).size - (new Set(a)).size || a.localeCompare(b);\n  })[0];\n}\n\n### Explanation\n\nThis function takes in an array of words and returns the word with the most unique characters. If there are multiple words with the same number of unique characters, it returns the word that comes first when sorted alphabetically. \n\n\n### Racket version\n\n#lang racket\n\n(define (find_max words)\n"}, {"name": "HumanEval_163_generate_integers", "language": "rkt", "prompt": "#lang racket\n\n(define (generate_integers a b)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_163_generate_integers.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate generate_integers))\n    (check-within (candidate 2 10) (list 2 4 6 8) 0.001)\n    (check-within (candidate 10 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 132 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 17 89) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction generate_integers(a, b){\n  let lower = Math.max(2, Math.min(a, b));\n  let upper = Math.min(8, Math.max(a, b));\n  \n  return Array.from({length: upper-lower+1}, (_, i) => i+lower).filter(i => i%2 === 0);\n}\n\n### Explanation\n\nThis function takes two arguments, `a` and `b`, and returns an array of even integers between `a` and `b`. If `a` is greater than `b`, it swaps them. If either `a` or `b` is less than 2, it sets it to 2. If either `a` or `b` is greater than 8, it sets it to 8. It then generates an array of length `upper-lower+1` using `Array.from`, and maps each element to its index plus `lower`. It then filters this array to only include even integers using `filter`.\n\n\n### Racket version\n\n#lang racket\n\n(define (generate_integers a b)\n"}, {"name": "HumanEval_110_exchange", "language": "rkt", "prompt": "#lang racket\n\n(define (exchange lst1 lst2)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_110_exchange.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate exchange))\n    (check-within (candidate (list 1 2 3 4) (list 1 2 3 4)) \"YES\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 1 5 3 4)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 2 1 4 3)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 4)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 3)) \"NO\" 0.001)\n    (check-within (candidate (list 3 2 6 1 8 9) (list 3 5 5 1 1 1)) \"NO\" 0.001)\n    (check-within (candidate (list 100 200) (list 200 200)) \"YES\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction exchange(lst1, lst2){\n  let odd = lst1.filter(i => i%2 === 1).length;\n  let even = lst2.filter(i => i%2 === 0).length;\n  return even >= odd ? \"YES\" : \"NO\";\n}\n\n### Explanation\n\nThis function takes two lists of integers as input. It then counts the number of odd numbers in the first list and the number of even numbers in the second list. If the number of even numbers is greater than or equal to the number of odd numbers, the function returns \"YES\", otherwise it returns \"NO\".\n\n\n### Racket version\n\n#lang racket\n\n(define (exchange lst1 lst2)\n"}, {"name": "HumanEval_156_int_to_mini_roman", "language": "rkt", "prompt": "#lang racket\n\n(define (int_to_mini_roman number)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_156_int_to_mini_roman.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n    (check-within (candidate 19) \"xix\" 0.001)\n    (check-within (candidate 152) \"clii\" 0.001)\n    (check-within (candidate 251) \"ccli\" 0.001)\n    (check-within (candidate 426) \"cdxxvi\" 0.001)\n    (check-within (candidate 500) \"d\" 0.001)\n    (check-within (candidate 1) \"i\" 0.001)\n    (check-within (candidate 4) \"iv\" 0.001)\n    (check-within (candidate 43) \"xliii\" 0.001)\n    (check-within (candidate 90) \"xc\" 0.001)\n    (check-within (candidate 94) \"xciv\" 0.001)\n    (check-within (candidate 532) \"dxxxii\" 0.001)\n    (check-within (candidate 900) \"cm\" 0.001)\n    (check-within (candidate 994) \"cmxciv\" 0.001)\n    (check-within (candidate 1000) \"m\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction int_to_mini_roman(number){\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n  let sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n  let i = 12;\n  let res = '';\n  while(number){\n    let div = Math.floor(number / num[i]);\n    number %= num[i];\n    while(div){\n      res += sym[i];\n      div--;\n    }\n    i--;\n  }\n  return res.toLowerCase();\n}\n\n### Explanation\n\nThis program takes an integer as input and returns a string of the integer in Roman numerals. The function int_to_mini_roman() creates two arrays, num and sym, which hold the integer values and their corresponding Roman numeral symbols. The function then initializes i to 12 and res to an empty string. The while loop runs as long as number is not zero. In each iteration, the program calculates the integer division of number by num[i] and stores the result in div. It then updates number to the remainder of number divided by num[i]. The program then enters another while loop that runs div times and appends sym[i] to res in each iteration. Finally, the program decrements i and repeats the process until number is zero. The function returns the lowercase string res. \n\n\n### Racket version\n\n#lang racket\n\n(define (int_to_mini_roman number)\n"}, {"name": "HumanEval_138_is_equal_to_sum_even", "language": "rkt", "prompt": "#lang racket\n\n(define (is_equal_to_sum_even n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_138_is_equal_to_sum_even.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 11) #f 0.001)\n    (check-within (candidate 12) #t 0.001)\n    (check-within (candidate 13) #f 0.001)\n    (check-within (candidate 16) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_equal_to_sum_even(n){\n  return n%2 == 0 && n >= 8;\n}\n\n### Explanation\n\nThis function takes in a number `n` and returns `true` if `n` is even and greater than or equal to 8. Otherwise, it returns `false`.\n\n\n### Racket version\n\n#lang racket\n\n(define (is_equal_to_sum_even n)\n"}, {"name": "HumanEval_79_decimal_to_binary", "language": "rkt", "prompt": "#lang racket\n\n(define (decimal_to_binary decimal)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_79_decimal_to_binary.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-within (candidate 0) \"db0db\" 0.001)\n    (check-within (candidate 32) \"db100000db\" 0.001)\n    (check-within (candidate 103) \"db1100111db\" 0.001)\n    (check-within (candidate 15) \"db1111db\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction decimal_to_binary(decimal){\n  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n### Explanation\n\nThis function takes a decimal number as input, converts it to binary, and returns a string that concatenates the string \"db\" with the binary representation of the decimal number. \n\n\n### Racket version\n\n#lang racket\n\n(define (decimal_to_binary decimal)\n"}, {"name": "HumanEval_33_sort_third", "language": "rkt", "prompt": "#lang racket\n\n(define (sort_third l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_33_sort_third.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_third))\n    (check-within (candidate (list 5 6 3 4 8 9 2)) (list 2 6 3 4 8 9 5) 0.001)\n    (check-within (candidate (list 5 8 3 4 6 9 2)) (list 2 8 3 4 6 9 5) 0.001)\n    (check-within (candidate (list 5 6 9 4 8 3 2)) (list 2 6 9 4 8 3 5) 0.001)\n    (check-within (candidate (list 5 6 3 4 8 9 2 1)) (list 2 6 3 4 8 9 5 1) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction sort_third(l){\n  l = l.slice()\n  l.filter((_, i) => i % 3 === 0).sort().forEach((x, i) => l[3 * i] = x)\n  return l\n}\n\n### Explanation\n\nThis program takes a list of numbers and sorts every third number in the list. It does this by first creating a copy of the list. It then filters the list to only include every third number, sorts that filtered list, and then replaces the original list's every third number with the sorted filtered list. Finally, it returns the original list with every third number sorted.\n\n\n### Racket version\n\n#lang racket\n\n(define (sort_third l)\n"}, {"name": "HumanEval_144_simplify", "language": "rkt", "prompt": "#lang racket\n\n(define (simplify x n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_144_simplify.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/6\" \"2/1\") #f 0.001)\n    (check-within (candidate \"5/1\" \"3/1\") #t 0.001)\n    (check-within (candidate \"7/10\" \"10/2\") #f 0.001)\n    (check-within (candidate \"2/10\" \"50/10\") #t 0.001)\n    (check-within (candidate \"7/2\" \"4/2\") #t 0.001)\n    (check-within (candidate \"11/6\" \"6/1\") #t 0.001)\n    (check-within (candidate \"2/3\" \"5/2\") #f 0.001)\n    (check-within (candidate \"5/2\" \"3/5\") #f 0.001)\n    (check-within (candidate \"2/4\" \"8/4\") #t 0.001)\n    (check-within (candidate \"2/4\" \"4/2\") #t 0.001)\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/5\" \"1/5\") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction simplify(x, n){\n  let [a, b] = x.split(\"/\");\n  let [c, d] = n.split(\"/\");\n  let numerator = parseInt(a) * parseInt(c);\n  let denom = parseInt(b) * parseInt(d);\n  return numerator/denom == parseInt(numerator/denom);\n}\n\n### Explanation\n\nThis function takes two strings, `x` and `n`, which represent fractions. It then splits each string into two parts, the numerator and the denominator, and stores them in the variables `a`, `b`, `c`, and `d`. It then multiplies the two numerators together and the two denominators together, and stores them in the variables `numerator` and `denom`. Finally, it checks if the result of dividing `numerator` by `denom` is equal to the integer result of that division. If it is, it returns `true`, otherwise it returns `false`.\n\n\n### Racket version\n\n#lang racket\n\n(define (simplify x n)\n"}, {"name": "HumanEval_161_solve", "language": "rkt", "prompt": "#lang racket\n\n(define (solve s)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_161_solve.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate \"AsDf\") \"aSdF\" 0.001)\n    (check-within (candidate \"1234\") \"4321\" 0.001)\n    (check-within (candidate \"ab\") \"AB\" 0.001)\n    (check-within (candidate \"#a@C\") \"#A@c\" 0.001)\n    (check-within (candidate \"#AsdfW^45\") \"#aSDFw^45\" 0.001)\n    (check-within (candidate \"#6@2\") \"2@6#\" 0.001)\n    (check-within (candidate \"#$a^D\") \"#$A^d\" 0.001)\n    (check-within (candidate \"#ccc\") \"#CCC\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction solve(s){\n  let flg = 0;\n  let idx = 0;\n  let new_str = s.split('');\n  \n  for(let i of s){\n    if(i.match(/[a-z]/i)){\n      new_str[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();\n      flg = 1;\n    }\n    idx++;\n  }\n  \n  if(flg === 0){\n    return new_str.reverse().join('');\n  }\n  \n  return new_str.join('');\n}\n\n### Explanation\n\nThis function takes in a string `s` and creates a new string `new_str` which is a copy of `s` split into an array of characters. It then iterates over each character in `s` and checks if it is a letter. If it is, it toggles the case of the letter and sets a flag `flg` to 1. It then returns the modified `new_str` if any letters were toggled, otherwise it returns the reversed `new_str`. \n\n\n### Racket version\n\n#lang racket\n\n(define (solve s)\n"}, {"name": "HumanEval_157_right_angle_triangle", "language": "rkt", "prompt": "#lang racket\n\n(define (right_angle_triangle a b c)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n    (check-within (candidate 3 4 5) #t 0.001)\n    (check-within (candidate 1 2 3) #f 0.001)\n    (check-within (candidate 10 6 8) #t 0.001)\n    (check-within (candidate 2 2 2) #f 0.001)\n    (check-within (candidate 7 24 25) #t 0.001)\n    (check-within (candidate 10 5 7) #f 0.001)\n    (check-within (candidate 5 12 13) #t 0.001)\n    (check-within (candidate 15 8 17) #t 0.001)\n    (check-within (candidate 48 55 73) #t 0.001)\n    (check-within (candidate 1 1 1) #f 0.001)\n    (check-within (candidate 2 2 10) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction right_angle_triangle(a, b, c){\n  return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b\n}\n\n### Explanation\n\nThis function takes three arguments, `a`, `b`, and `c`, which are the sides of a triangle. It returns `true` if the triangle is a right angle triangle, and `false` otherwise. A right angle triangle is a triangle where the square of one side is equal to the sum of the squares of the other two sides. This function checks if this condition is true for any of the three sides of the triangle.\n\n\n### Racket version\n\n#lang racket\n\n(define (right_angle_triangle a b c)\n"}, {"name": "HumanEval_151_double_the_difference", "language": "rkt", "prompt": "#lang racket\n\n(define (double_the_difference lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_151_double_the_difference.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 5.0 4.0)) 25 0.001)\n    (check-within (candidate (list 0.1 0.2 0.3)) 0 0.001)\n    (check-within (candidate (list -10.0 -20.0 -30.0)) 0 0.001)\n    (check-within (candidate (list -1.0 -2.0 8.0)) 0 0.001)\n    (check-within (candidate (list 0.2 3.0 5.0)) 34 0.001)\n    (check-within (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction double_the_difference(lst){\n  return lst.filter(i => i > 0 && i%2!=0 && !/\\./.test(i)).reduce((a,b) => a + b**2, 0)\n}\n\n### Explanation\n\nThis function takes a list of numbers as input and returns the sum of the squares of all the odd positive integers in the list. The function first filters out all the numbers that are not odd positive integers, and then squares and sums the remaining numbers.\n\n\n### Racket version\n\n#lang racket\n\n(define (double_the_difference lst)\n"}, {"name": "HumanEval_137_compare_one", "language": "rkt", "prompt": "#lang racket\n\n(define (compare_one a b)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_137_compare_one.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare_one))\n    (check-within (candidate 1 2) 2 0.001)\n    (check-within (candidate 1 2.5) 2.5 0.001)\n    (check-within (candidate 2 3) 3 0.001)\n    (check-within (candidate 5 6) 6 0.001)\n    (check-within (candidate 1 \"2,3\") \"2,3\" 0.001)\n    (check-within (candidate \"5,1\" \"6\") \"6\" 0.001)\n    (check-within (candidate \"1\" \"2\") \"2\" 0.001)\n    (check-within (candidate \"1\" 1) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction compare_one(a, b){\n  let temp_a = a, temp_b = b;\n  if(typeof temp_a === 'string') temp_a = temp_a.replace(',','.');\n  if(typeof temp_b === 'string') temp_b = temp_b.replace(',','.');\n  if(parseFloat(temp_a) == parseFloat(temp_b)) return null;\n  return parseFloat(temp_a) > parseFloat(temp_b) ? a : b;\n}\n\n### Explanation\n\nThis function takes two arguments, a and b. It first creates two variables, temp_a and temp_b, and sets them equal to a and b, respectively. If temp_a is a string, it replaces any commas with periods. If temp_b is a string, it also replaces any commas with periods. Then, it checks if the parsed float value of temp_a is equal to the parsed float value of temp_b. If they are equal, it returns null. Otherwise, it returns a if the parsed float value of temp_a is greater than the parsed float value of temp_b, and b otherwise.\n\n\n### Racket version\n\n#lang racket\n\n(define (compare_one a b)\n"}, {"name": "HumanEval_3_below_zero", "language": "rkt", "prompt": "#lang racket\n\n(define (below_zero operations)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_3_below_zero.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 2 -3 1 2 -3)) #f 0.001)\n    (check-within (candidate (list 1 2 -4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t 0.001)\n    (check-within (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction below_zero(operations){\n  let balance = 0;\n  \n  for(let op of operations){\n    balance += op;\n    if(balance < 0){\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n### Explanation\n\nThis program defines a function `below_zero` that takes an array of integers called `operations`. The function initializes a variable called `balance` to 0. It then loops through each integer in the `operations` array and adds it to the `balance` variable. If the `balance` variable ever becomes negative, the function returns `true`. If the loop completes without the `balance` variable ever becoming negative, the function returns `false`.\n\n\n### Racket version\n\n#lang racket\n\n(define (below_zero operations)\n"}, {"name": "HumanEval_13_greatest_common_divisor", "language": "rkt", "prompt": "#lang racket\n\n(define (greatest_common_divisor a b)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-within (candidate 3 7) 1 0.001)\n    (check-within (candidate 10 15) 5 0.001)\n    (check-within (candidate 49 14) 7 0.001)\n    (check-within (candidate 144 60) 12 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction greatest_common_divisor(a, b){\n  while(b){\n    [a, b] = [b, a % b]\n  }\n  return a\n}\n\n### Explanation\n\nThis function takes two numbers, `a` and `b`, and returns their greatest common divisor. It does this by repeatedly taking the remainder of `a` divided by `b` and swapping the values of `a` and `b` until `b` is zero. At this point, `a` will be the greatest common divisor of the original `a` and `b`.\n\n\n### Racket version\n\n#lang racket\n\n(define (greatest_common_divisor a b)\n"}, {"name": "HumanEval_106_f", "language": "rkt", "prompt": "#lang racket\n\n(define (f n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_106_f.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 5) (list 1 2 6 24 15) 0.001)\n    (check-within (candidate 7) (list 1 2 6 24 15 720 28) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n    (check-within (candidate 3) (list 1 2 6) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction f(n){\n  let ret = [];\n  for(let i=1;i<=n;i++){\n    if(i%2==0){\n      let x = 1;\n      for(let j=1;j<=i;j++) x *= j;\n      ret.push(x);\n    }else{\n      let x = 0;\n      for(let j=1;j<=i;j++) x += j;\n      ret.push(x);\n    }\n  }\n  return ret;\n}\n\n### Explanation\n\nThis function takes in a number `n` and returns an array of length `n`. The array contains the following values:\n- If the index of the array is even, then the value is the factorial of the index.\n- If the index of the array is odd, then the value is the sum of the integers from 1 to the index.\n\n\n### Racket version\n\n#lang racket\n\n(define (f n)\n"}, {"name": "HumanEval_57_monotonic", "language": "rkt", "prompt": "#lang racket\n\n(define (monotonic l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_57_monotonic.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-within (candidate (list 1 2 4 10)) #t 0.001)\n    (check-within (candidate (list 1 2 4 20)) #t 0.001)\n    (check-within (candidate (list 1 20 4 10)) #f 0.001)\n    (check-within (candidate (list 4 1 0 -10)) #t 0.001)\n    (check-within (candidate (list 4 1 1 0)) #t 0.001)\n    (check-within (candidate (list 1 2 3 2 5 60)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 60)) #t 0.001)\n    (check-within (candidate (list 9 9 9 9)) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction monotonic(l){\n  return l.every((x, i) => i == 0 || x >= l[i-1]) || l.every((x, i) => i == 0 || x <= l[i-1]);\n}\n\n### Explanation\n\nThis program takes a list of numbers and checks if it is monotonic. A list is monotonic if it is either entirely non-increasing or non-decreasing. The program checks if the list is non-decreasing or non-increasing by checking if every element is greater than or equal to the previous element or every element is less than or equal to the previous element.\n\n\n### Racket version\n\n#lang racket\n\n(define (monotonic l)\n"}, {"name": "HumanEval_105_by_length", "language": "rkt", "prompt": "#lang racket\n\n(define (by_length arr)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_105_by_length.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-within (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\") 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -1 55)) (list \"One\") 0.001)\n    (check-within (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\") 0.001)\n    (check-within (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction by_length(arr){\n  let dic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n  let sorted_arr = arr.sort((a,b) => b-a);\n  let new_arr = [];\n  for(let var_ of sorted_arr){\n    if(dic[var_]){\n      new_arr.push(dic[var_]);\n    }\n  }\n  return new_arr;\n}\n\n### Explanation\n\nThis program takes an array of integers as input and returns a new array with the length of the integers in the input array. The length is returned as a string. The returned array is sorted in descending order based on the length of the integers. If an integer has a length that is not in the dictionary, it is not included in the returned array. \n\n\n### Racket version\n\n#lang racket\n\n(define (by_length arr)\n"}, {"name": "HumanEval_134_check_if_last_char_is_a_letter", "language": "rkt", "prompt": "#lang racket\n\n(define (check_if_last_char_is_a_letter txt)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_if_last_char_is_a_letter))\n    (check-within (candidate \"apple\") #f 0.001)\n    (check-within (candidate \"apple pi e\") #t 0.001)\n    (check-within (candidate \"eeeee\") #f 0.001)\n    (check-within (candidate \"A\") #t 0.001)\n    (check-within (candidate \"Pumpkin pie \") #f 0.001)\n    (check-within (candidate \"Pumpkin pie 1\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"eeeee e \") #f 0.001)\n    (check-within (candidate \"apple pie\") #f 0.001)\n    (check-within (candidate \"apple pi e \") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction check_if_last_char_is_a_letter(txt){\n  let check = txt.split(' ').pop();\n  return check.length == 1 && check.toLowerCase().charCodeAt(0) >= 97 && check.toLowerCase().charCodeAt(0) <= 122;\n}\n\n### Explanation\n\nThis function takes a string as input and returns a boolean. It checks whether the last character of the last word in the string is a letter. If it is, it returns true. Otherwise, it returns false.\n\n\n### Racket version\n\n#lang racket\n\n(define (check_if_last_char_is_a_letter txt)\n"}, {"name": "HumanEval_77_iscube", "language": "rkt", "prompt": "#lang racket\n\n(define (iscube a)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_77_iscube.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate iscube))\n    (check-within (candidate 1) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate -1) #t 0.001)\n    (check-within (candidate 64) #t 0.001)\n    (check-within (candidate 180) #f 0.001)\n    (check-within (candidate 1000) #t 0.001)\n    (check-within (candidate 0) #t 0.001)\n    (check-within (candidate 1729) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction iscube(a){\n  a = Math.abs(a)\n  return Math.round(Math.pow(a, 1/3)) ** 3 == a\n}\n\n### Explanation\n\nThis function takes a number `a` as input and returns a boolean indicating whether or not `a` is a perfect cube. The function first takes the absolute value of `a`, then calculates the cube root of `a` using `Math.pow(a, 1/3)`, rounds the result using `Math.round()`, and cubes the rounded result using the exponentiation operator `**`. If the result of cubing the rounded cube root is equal to `a`, the function returns `true`, otherwise it returns `false`.\n\n\n### Racket version\n\n#lang racket\n\n(define (iscube a)\n"}, {"name": "HumanEval_112_reverse_delete", "language": "rkt", "prompt": "#lang racket\n\n(define (reverse_delete s c)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_112_reverse_delete.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_delete))\n    (check-within (candidate \"abcde\" \"ae\") (list \"bcd\" #f) 0.001)\n    (check-within (candidate \"abcdef\" \"b\") (list \"acdef\" #f) 0.001)\n    (check-within (candidate \"abcdedcba\" \"ab\") (list \"cdedc\" #t) 0.001)\n    (check-within (candidate \"dwik\" \"w\") (list \"dik\" #f) 0.001)\n    (check-within (candidate \"a\" \"a\") (list \"\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"v\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"vabba\" \"v\") (list \"abba\" #t) 0.001)\n    (check-within (candidate \"mamma\" \"mia\") (list \"\" #t) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction reverse_delete(s, c){\n  s = s.split('').filter(char => !c.includes(char)).join('')\n  return [s, s.split('').reverse().join('') === s]\n}\n\n### Explanation\n\nThis function takes two arguments, a string `s` and a string `c`. It removes all characters in `c` from `s`, then returns an array containing the modified string and a boolean indicating whether the modified string is a palindrome.\n\n\n### Racket version\n\n#lang racket\n\n(define (reverse_delete s c)\n"}, {"name": "HumanEval_4_mean_absolute_deviation", "language": "rkt", "prompt": "#lang racket\n\n(define (mean_absolute_deviation numbers)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_4_mean_absolute_deviation.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n    (check-within (candidate (list 1.0 2.0)) 0.5 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0)) 1.0 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction mean_absolute_deviation(numbers){\n  let mean = numbers.reduce((a,b) => a+b) / numbers.length;\n  return numbers.reduce((a,b) => a + Math.abs(b-mean), 0) / numbers.length;\n}\n\n### Explanation\n\nThis program takes an array of numbers and calculates the mean absolute deviation of the numbers. The mean is calculated by summing all the numbers in the array and dividing by the length of the array. The mean absolute deviation is calculated by subtracting the mean from each number in the array, taking the absolute value of the difference, and then summing all the differences. The sum of the differences is then divided by the length of the array to get the mean absolute deviation.\n\n\n### Racket version\n\n#lang racket\n\n(define (mean_absolute_deviation numbers)\n"}, {"name": "HumanEval_56_correct_bracketing", "language": "rkt", "prompt": "#lang racket\n\n(define (correct_bracketing brackets)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_56_correct_bracketing.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"<>\") #t 0.001)\n    (check-within (candidate \"<<><>>\") #t 0.001)\n    (check-within (candidate \"<><><<><>><>\") #t 0.001)\n    (check-within (candidate \"<><><<<><><>><>><<><><<>>>\") #t 0.001)\n    (check-within (candidate \"<<<><>>>>\") #f 0.001)\n    (check-within (candidate \"><<>\") #f 0.001)\n    (check-within (candidate \"<\") #f 0.001)\n    (check-within (candidate \"<<<<\") #f 0.001)\n    (check-within (candidate \">\") #f 0.001)\n    (check-within (candidate \"<<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>><<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>>><>\") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction correct_bracketing(brackets){\n  let depth = 0;\n  for(let b of brackets){\n    if(b === \"<\"){\n      depth++;\n    }else{\n      depth--;\n    }\n    if(depth < 0){\n      return false;\n    }\n  }\n  return depth === 0;\n}\n\n### Explanation\n\nThis program takes in a string of brackets and returns true if the brackets are balanced and false otherwise. The brackets are balanced if for every opening bracket there is a corresponding closing bracket. The program does this by iterating through the string of brackets and keeping track of the depth of the brackets. If the depth ever goes negative, then there is a closing bracket without a corresponding opening bracket and the function returns false. If the depth is zero at the end of the iteration, then the brackets are balanced and the function returns true.\n\n\n### Racket version\n\n#lang racket\n\n(define (correct_bracketing brackets)\n"}, {"name": "HumanEval_21_rescale_to_unit", "language": "rkt", "prompt": "#lang racket\n\n(define (rescale_to_unit numbers)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_21_rescale_to_unit.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-within (candidate (list 2.0 49.9)) (list 0.0 1.0) 0.001)\n    (check-within (candidate (list 100.0 49.9)) (list 1.0 0.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0) 0.001)\n    (check-within (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n    (check-within (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction rescale_to_unit(numbers){\n  let min_number = Math.min(...numbers);\n  let max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n### Explanation\n\nThis program defines a function `rescale_to_unit` that takes an array of numbers as input. It then finds the minimum and maximum values in the array using the `Math.min` and `Math.max` functions. It then maps over the input array and for each element, it subtracts the minimum value and divides by the range (max - min). The result is an array of the same length as the input array with values rescaled to the range [0, 1]. \n\n\n### Racket version\n\n#lang racket\n\n(define (rescale_to_unit numbers)\n"}, {"name": "HumanEval_127_intersection", "language": "rkt", "prompt": "#lang racket\n\n(define (intersection interval1 interval2)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_127_intersection.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersection))\n    (check-within (candidate (list 1 2) (list 2 3)) \"NO\" 0.001)\n    (check-within (candidate (list -1 1) (list 0 4)) \"NO\" 0.001)\n    (check-within (candidate (list -3 -1) (list -5 5)) \"YES\" 0.001)\n    (check-within (candidate (list -2 2) (list -4 0)) \"YES\" 0.001)\n    (check-within (candidate (list -11 2) (list -1 -1)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 3 5)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 1 2)) \"NO\" 0.001)\n    (check-within (candidate (list -2 -2) (list -3 -2)) \"NO\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction intersection(interval1, interval2){\n  function is_prime(num){\n    if(num == 1 || num == 0){\n      return false;\n    }\n    if(num == 2){\n      return true;\n    }\n    for(let i=2; i<num; i++){\n      if(num%i == 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  let l = Math.max(interval1[0], interval2[0]);\n  let r = Math.min(interval1[1], interval2[1]);\n  let length = r - l;\n  if(length > 0 && is_prime(length)){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\n### Explanation\n\nThis program defines a function `intersection` that takes two intervals as input and returns \"YES\" if the length of their intersection is a prime number, and \"NO\" otherwise. The function first defines an inner function `is_prime` that checks if a given number is prime. It then calculates the left and right endpoints of the intersection of the two intervals, and computes the length of the intersection. If the length is greater than zero and is prime, the function returns \"YES\". Otherwise, it returns \"NO\". \n\n\n### Racket version\n\n#lang racket\n\n(define (intersection interval1 interval2)\n"}, {"name": "HumanEval_78_hex_key", "language": "rkt", "prompt": "#lang racket\n\n(define (hex_key num)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_78_hex_key.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n    (check-within (candidate \"AB\") 1 0.001)\n    (check-within (candidate \"1077E\") 2 0.001)\n    (check-within (candidate \"ABED1A33\") 4 0.001)\n    (check-within (candidate \"2020\") 2 0.001)\n    (check-within (candidate \"123456789ABCDEF0\") 6 0.001)\n    (check-within (candidate \"112233445566778899AABBCCDDEEFF00\") 12 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction hex_key(num){\n  let primes = ['2', '3', '5', '7', 'B', 'D'];\n  let total = 0;\n  for(let i=0; i<num.length; i++){\n    if(primes.includes(num[i])){\n      total += 1;\n    }\n  }\n  return total;\n}\n\n### Explanation\n\nThis program defines a function `hex_key` that takes a string `num` as input. The function initializes an array of primes `primes` and a variable `total` to 0. It then loops through each character in `num` and checks if it is a prime by checking if it is included in the `primes` array. If the character is a prime, it increments the `total` variable by 1. Finally, the function returns the `total` variable. \n\nThe function counts the number of primes in the input string. \n\n\n### Racket version\n\n#lang racket\n\n(define (hex_key num)\n"}, {"name": "HumanEval_70_strange_sort_list", "language": "rkt", "prompt": "#lang racket\n\n(define (strange_sort_list lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_70_strange_sort_list.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-within (candidate (list 1 2 3 4)) (list 1 4 2 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7) 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7) 0.001)\n    (check-within (candidate (list 5 5 5 5)) (list 5 5 5 5) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5) 0.001)\n    (check-within (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2) 0.001)\n    (check-within (candidate (list 111111)) (list 111111) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction strange_sort_list(lst){\n  let res = [], switch_ = true;\n  while (lst.length > 0){\n    res.push(switch_ ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.slice(-1)[0]), 1);\n    switch_ = !switch_;\n  }\n  return res;\n}\n\n### Explanation\n\nThis function takes a list of numbers as input and returns a new list of the same numbers, but sorted in a strange way. The first element of the new list is the smallest element of the input list, the second element is the largest element of the input list, the third element is the second smallest element of the input list, the fourth element is the second largest element of the input list, and so on. The function works by repeatedly finding the smallest or largest element of the input list, adding it to the new list, and removing it from the input list. The switch_ variable keeps track of whether the function should be looking for the smallest or largest element. \n\n\n### Racket version\n\n#lang racket\n\n(define (strange_sort_list lst)\n"}, {"name": "HumanEval_91_is_bored", "language": "rkt", "prompt": "#lang racket\n\n(define (is_bored S)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_91_is_bored.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-within (candidate \"Hello world\") 0 0.001)\n    (check-within (candidate \"Is the sky blue?\") 0 0.001)\n    (check-within (candidate \"I love It !\") 1 0.001)\n    (check-within (candidate \"bIt\") 0 0.001)\n    (check-within (candidate \"I feel good today. I will be productive. will kill It\") 2 0.001)\n    (check-within (candidate \"You and I are going for a walk\") 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_bored(S){\n  let sentences = S.split(/[.?!]\\s*/);\n  return sentences.filter(sentence => sentence.slice(0,2) == 'I ').length;\n}\n\n### Explanation\n\nThis program defines a function called `is_bored` that takes a string `S` as input. The function splits the string into sentences using a regular expression that matches periods, exclamation marks, and question marks followed by any number of spaces. The function then filters the resulting array of sentences to only include those that start with the string \"I \" (capital i followed by a space). The function returns the length of the filtered array.\n\n\n### Racket version\n\n#lang racket\n\n(define (is_bored S)\n"}, {"name": "HumanEval_14_all_prefixes", "language": "rkt", "prompt": "#lang racket\n\n(define (all_prefixes string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_14_all_prefixes.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\") 0.001)\n    (check-within (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction all_prefixes(string){\n  let result = [];\n  for(let i=0; i<string.length; i++){\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n### Explanation\n\nThis program defines a function `all_prefixes` that takes a string as an argument. The function initializes an empty array called `result`. It then loops through the string, and for each character in the string, it slices the string from the beginning to the current index and pushes the resulting substring to the `result` array. Finally, the function returns the `result` array.\n\n\n### Racket version\n\n#lang racket\n\n(define (all_prefixes string)\n"}, {"name": "HumanEval_18_how_many_times", "language": "rkt", "prompt": "#lang racket\n\n(define (how_many_times string substring)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_18_how_many_times.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-within (candidate \"\" \"x\") 0 0.001)\n    (check-within (candidate \"xyxyxyx\" \"x\") 4 0.001)\n    (check-within (candidate \"cacacacac\" \"cac\") 4 0.001)\n    (check-within (candidate \"john doe\" \"john\") 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction how_many_times(string, substring){\n  let times = 0;\n  \n  for(let i=0; i<string.length-substring.length+1; i++){\n    if(string.slice(i, i+substring.length) === substring){\n      times++;\n    }\n  }\n  \n  return times;\n}\n\n### Explanation\n\nThis function takes two arguments, a string and a substring. It returns the number of times the substring appears in the string. It does this by initializing a counter variable, `times`, to 0. It then loops through the string, checking each substring of length `substring.length` to see if it matches the substring. If it does, it increments the `times` counter. Finally, it returns the `times` counter. \n\n\n### Racket version\n\n#lang racket\n\n(define (how_many_times string substring)\n"}, {"name": "HumanEval_121_solution", "language": "rkt", "prompt": "#lang racket\n\n(define (solution lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_121_solution.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-within (candidate (list 5 8 7 1)) 12 0.001)\n    (check-within (candidate (list 3 3 3 3 3)) 9 0.001)\n    (check-within (candidate (list 30 13 24 321)) 0 0.001)\n    (check-within (candidate (list 5 9)) 5 0.001)\n    (check-within (candidate (list 2 4 8)) 0 0.001)\n    (check-within (candidate (list 30 13 23 32)) 23 0.001)\n    (check-within (candidate (list 3 13 2 9)) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction solution(lst){\n  return lst.filter((x, i) => i%2 === 0 && x%2 === 1).reduce((a,b) => a+b, 0);\n}\n\n### Explanation\n\nThis function takes a list of numbers as input and returns the sum of all odd numbers at odd indices. \n\nIt does this by first filtering the input list to only include odd numbers at odd indices. It then reduces the filtered list to a single value by summing all the elements in the list. \n\n\n### Racket version\n\n#lang racket\n\n(define (solution lst)\n"}, {"name": "HumanEval_126_is_sorted", "language": "rkt", "prompt": "#lang racket\n\n(define (is_sorted lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_126_is_sorted.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n    (check-within (candidate (list 5)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 7)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n    (check-within (candidate (list 1)) #t 0.001)\n    (check-within (candidate (list 3 2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 2 2 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 3 3 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 2 3 3 4)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4)) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_sorted(lst){\n  let count_digit = {}\n  for (let i of lst){\n    count_digit[i] = (count_digit[i] || 0) + 1\n  }\n  if (lst.some(i => count_digit[i] > 2)){\n    return false\n  }\n  if (lst.slice(1).every((x, i) => x >= lst[i])){\n    return true\n  }\n  else{\n    return false\n  }\n}\n\n### Explanation\n\nThis function takes a list of numbers as an argument and returns `true` if the list is sorted in ascending order and no number appears more than twice in the list. Otherwise, it returns `false`. \n\nThe function first creates an empty object called `count_digit`. It then loops through each element of the input list and adds it to the `count_digit` object. If the element is already in the object, it increments the count by 1. \n\nNext, the function checks if any element in the list appears more than twice. If so, it returns `false`. \n\nFinally, the function checks if the list is sorted in ascending order. It does this by checking if every element in the list after the first is greater than or equal to the previous element. If so, it returns `true`. Otherwise, it returns `false`. \n\n\n### Racket version\n\n#lang racket\n\n(define (is_sorted lst)\n"}, {"name": "HumanEval_69_search", "language": "rkt", "prompt": "#lang racket\n\n(define (search lst)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_69_search.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n    (check-within (candidate (list 5 5 5 5 1)) 1 0.001)\n    (check-within (candidate (list 4 1 4 1 4 4)) 4 0.001)\n    (check-within (candidate (list 3 3)) -1 0.001)\n    (check-within (candidate (list 8 8 8 8 8 8 8 8)) 8 0.001)\n    (check-within (candidate (list 2 3 3 2 2)) 2 0.001)\n    (check-within (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1)) 1 0.001)\n    (check-within (candidate (list 3 2 8 2)) 2 0.001)\n    (check-within (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1 0.001)\n    (check-within (candidate (list 8 8 3 6 5 6 4)) -1 0.001)\n    (check-within (candidate (list 6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1 0.001)\n    (check-within (candidate (list 1 9 10 1 3)) 1 0.001)\n    (check-within (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10)) 5 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4 0.001)\n    (check-within (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2 0.001)\n    (check-within (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1 0.001)\n    (check-within (candidate (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4 0.001)\n    (check-within (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7)) 4 0.001)\n    (check-within (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1)) 2 0.001)\n    (check-within (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8)) -1 0.001)\n    (check-within (candidate (list 10)) -1 0.001)\n    (check-within (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2 0.001)\n    (check-within (candidate (list 5 4 10 2 1 1 10 3 6 1 8)) 1 0.001)\n    (check-within (candidate (list 7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1 0.001)\n    (check-within (candidate (list 3 10 10 9 2)) -1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction search(lst){\n  let frq = Array(Math.max(...lst)+1).fill(0);\n  lst.forEach(i => frq[i]++);\n  \n  let ans = -1;\n  for(let i=1; i<frq.length; i++){\n    if(frq[i] >= i){\n      ans = i;\n    }\n  }\n  \n  return ans;\n}\n\n### Explanation\n\nThis program takes in a list of integers and returns the smallest integer that appears at least as many times as its value. For example, if the input list is `[3, 8, 2, 3, 9, 1, 3, 2]`, the output will be `3`, since `3` appears three times and is the smallest integer that appears at least three times. The program accomplishes this by first creating an array `frq` of length `Math.max(...lst)+1` (the maximum value in the input list plus one) and filling it with zeros. It then iterates through the input list and increments the corresponding element of `frq` for each integer in the list. Finally, it iterates through the elements of `frq` and checks if the frequency of each integer is greater than or equal to the integer itself. If it is, the program updates the `ans` variable to the current integer. If no integer meets this condition, the program returns `-1`. \n\n\n### Racket version\n\n#lang racket\n\n(define (search lst)\n"}, {"name": "HumanEval_68_pluck", "language": "rkt", "prompt": "#lang racket\n\n(define (pluck arr)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_68_pluck.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-within (candidate (list 4 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5 0 3 0 4 2)) (list 0 1) 0.001)\n    (check-within (candidate (list 1 2 3 0 5 3)) (list 0 3) 0.001)\n    (check-within (candidate (list 5 4 8 4 8)) (list 4 1) 0.001)\n    (check-within (candidate (list 7 6 7 1)) (list 6 1) 0.001)\n    (check-within (candidate (list 7 9 7 1)) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction pluck(arr){\n  if(arr.length == 0) return []\n  evens = arr.filter(x => x%2 == 0)\n  if(evens.length == 0) return []\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))]\n}\n\n### Explanation\n\nThis function takes an array of integers as input. It filters out all even numbers and returns an array containing the smallest even number and its index in the original array. If there are no even numbers in the input array, the function returns an empty array.\n\n\n### Racket version\n\n#lang racket\n\n(define (pluck arr)\n"}, {"name": "HumanEval_43_pairs_sum_to_zero", "language": "rkt", "prompt": "#lang racket\n\n(define (pairs_sum_to_zero l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_43_pairs_sum_to_zero.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 5 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 30)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 31)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 30)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 31)) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction pairs_sum_to_zero(l){\n  for(let i=0; i<l.length; i++){\n    for(let j=i+1; j<l.length; j++){\n      if(l[i]+l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis function takes an array of numbers as input and returns true if there are any pairs of numbers in the array that sum to zero. It does this by checking every possible pair of numbers in the array and returning true if it finds a pair that sums to zero. If it checks every possible pair and doesn't find one that sums to zero, it returns false.\n\n\n### Racket version\n\n#lang racket\n\n(define (pairs_sum_to_zero l)\n"}, {"name": "HumanEval_10_make_palindrome", "language": "rkt", "prompt": "#lang racket\n\n(define (make_palindrome string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_10_make_palindrome.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"x\") \"x\" 0.001)\n    (check-within (candidate \"xyz\") \"xyzyx\" 0.001)\n    (check-within (candidate \"xyx\") \"xyx\" 0.001)\n    (check-within (candidate \"jerry\") \"jerryrrej\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction make_palindrome(string){\n  if (!string) return '';\n\n  let beginning_of_suffix = 0;\n\n  while (string.slice(beginning_of_suffix) !== string.slice(beginning_of_suffix).split('').reverse().join('')){\n    beginning_of_suffix += 1;\n  }\n\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n### Explanation\n\nThis program takes a string as an argument and returns a palindrome by adding the reverse of the string's suffix to the end of the original string. The suffix is the longest possible substring that is a palindrome. If the input string is empty, an empty string is returned.\n\n\n### Racket version\n\n#lang racket\n\n(define (make_palindrome string)\n"}, {"name": "HumanEval_83_starts_one_ends", "language": "rkt", "prompt": "#lang racket\n\n(define (starts_one_ends n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_83_starts_one_ends.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 2) 18 0.001)\n    (check-within (candidate 3) 180 0.001)\n    (check-within (candidate 4) 1800 0.001)\n    (check-within (candidate 5) 18000 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction starts_one_ends(n){\n  return n == 1 ? 1 : 18 * (10 ** (n - 2));\n}\n\n### Explanation\n\nThis function takes a number `n` and returns either 1 or 18 times 10 to the power of n minus 2. If `n` is equal to 1, the function returns 1. Otherwise, it returns 18 times 10 to the power of n minus 2.\n\n\n### Racket version\n\n#lang racket\n\n(define (starts_one_ends n)\n"}, {"name": "HumanEval_30_get_positive", "language": "rkt", "prompt": "#lang racket\n\n(define (get_positive l)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_30_get_positive.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-within (candidate (list -1 -2 4 5 6)) (list 4 5 6) 0.001)\n    (check-within (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1) 0.001)\n    (check-within (candidate (list -1 -2)) (list ) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction get_positive(l){\n  return l.filter(e => e > 0);\n}\n\n### Explanation\n\nThis program defines a function `get_positive` which takes a list `l` as an argument. The function returns a new list that contains only the positive elements of `l`. The `filter` method is used to create the new list. The `filter` method takes a function as an argument, which is used to determine whether an element should be included in the new list. In this case, the function checks whether an element is greater than 0, and only includes it in the new list if it is. \n\n\n### Racket version\n\n#lang racket\n\n(define (get_positive l)\n"}, {"name": "HumanEval_28_concatenate", "language": "rkt", "prompt": "#lang racket\n\n(define (concatenate strings)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_28_concatenate.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n    (check-within (candidate (list )) \"\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"xyz\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction concatenate(strings){\n  return strings.join('')\n}\n\n### Explanation\n\nThis program defines a function called `concatenate` which takes an array of strings as an argument. The function returns a single string which is the concatenation of all the strings in the input array. The `join` method is used to concatenate the strings.\n\n\n### Racket version\n\n#lang racket\n\n(define (concatenate strings)\n"}, {"name": "HumanEval_132_is_nested", "language": "rkt", "prompt": "#lang racket\n\n(define (is_nested string)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_132_is_nested.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n    (check-within (candidate \"[[]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]][[[[[]\") #f 0.001)\n    (check-within (candidate \"[][]\") #f 0.001)\n    (check-within (candidate \"[]\") #f 0.001)\n    (check-within (candidate \"[[[[]]]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]]]]]\") #f 0.001)\n    (check-within (candidate \"[][][[]]\") #t 0.001)\n    (check-within (candidate \"[[]\") #f 0.001)\n    (check-within (candidate \"[]]\") #f 0.001)\n    (check-within (candidate \"[[]][[\") #t 0.001)\n    (check-within (candidate \"[[][]]\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"[[[[[[[[\") #f 0.001)\n    (check-within (candidate \"]]]]]]]]\") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_nested(string){\n  let opening_bracket_index = [];\n  let closing_bracket_index = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === '['){\n      opening_bracket_index.push(i);\n    }else{\n      closing_bracket_index.push(i);\n    }\n  }\n  closing_bracket_index.reverse();\n  let cnt = 0;\n  let i = 0;\n  let l = closing_bracket_index.length;\n  for(let idx of opening_bracket_index){\n    if(i < l && idx < closing_bracket_index[i]){\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2;\n}\n\n### Explanation\n\nThis program checks if a string has at least two nested square brackets. It does this by iterating over the string and keeping track of the indices of opening and closing brackets. It then iterates over the opening brackets and checks if there is a corresponding closing bracket further down the string. If there are at least two such pairs, the function returns true, otherwise it returns false.\n\n\n### Racket version\n\n#lang racket\n\n(define (is_nested string)\n"}, {"name": "HumanEval_48_is_palindrome", "language": "rkt", "prompt": "#lang racket\n\n(define (is_palindrome text)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_48_is_palindrome.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_palindrome))\n    (check-within (candidate \"\") #t 0.001)\n    (check-within (candidate \"aba\") #t 0.001)\n    (check-within (candidate \"aaaaa\") #t 0.001)\n    (check-within (candidate \"zbcd\") #f 0.001)\n    (check-within (candidate \"xywyx\") #t 0.001)\n    (check-within (candidate \"xywyz\") #f 0.001)\n    (check-within (candidate \"xywzx\") #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_palindrome(text){\n  for(let i=0; i<text.length; i++){\n    if(text[i] != text[text.length-1-i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis program checks if a given string is a palindrome. A palindrome is a word that is spelled the same way forwards and backwards. The function iterates through the string and checks if the first letter is the same as the last letter, the second letter is the same as the second to last letter, and so on. If any of these comparisons fail, the function returns false. If all comparisons succeed, the function returns true.\n\n\n### Racket version\n\n#lang racket\n\n(define (is_palindrome text)\n"}, {"name": "HumanEval_108_count_nums", "language": "rkt", "prompt": "#lang racket\n\n(define (count_nums arr)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_108_count_nums.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list -1 -2 0)) 0 0.001)\n    (check-within (candidate (list 1 1 2 -2 3 4 5)) 6 0.001)\n    (check-within (candidate (list 1 6 9 -6 0 1 5)) 5 0.001)\n    (check-within (candidate (list 1 100 98 -7 1 -1)) 4 0.001)\n    (check-within (candidate (list 12 23 34 -45 -56 0)) 5 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction count_nums(arr){\n  function digits_sum(n){\n    let neg = 1;\n    if(n < 0){\n      n = -1 * n;\n      neg = -1;\n    }\n    n = Array.from(String(n), Number);\n    n[0] = n[0] * neg;\n    return n.reduce((a,b) => a+b, 0);\n  }\n  return arr.map(digits_sum).filter(x => x > 0).length;\n}\n\n### Explanation\n\nThis program defines a function `count_nums` that takes an array of numbers as input. The function then defines a nested function `digits_sum` that takes a number as input. The function `digits_sum` first checks if the input number is negative, and if so, it multiplies it by -1 and sets a flag `neg` to -1. It then converts the number to an array of digits using `Array.from(String(n), Number)`, and multiplies the first digit by the `neg` flag to restore the original sign of the number. Finally, it returns the sum of the digits using `reduce((a,b) => a+b, 0)`. The `count_nums` function then applies `digits_sum` to each element of the input array using `map`, filters out any results that are less than or equal to 0 using `filter(x => x > 0)`, and returns the length of the resulting array. The overall effect of the program is to count the number of positive integers in the input array whose digits sum to a positive number. \n\n\n### Racket version\n\n#lang racket\n\n(define (count_nums arr)\n"}, {"name": "HumanEval_25_factorize", "language": "rkt", "prompt": "#lang racket\n\n(define (factorize n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_25_factorize.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n    (check-within (candidate 2) (list 2) 0.001)\n    (check-within (candidate 4) (list 2 2) 0.001)\n    (check-within (candidate 8) (list 2 2 2) 0.001)\n    (check-within (candidate 57) (list 3 19) 0.001)\n    (check-within (candidate 3249) (list 3 3 19 19) 0.001)\n    (check-within (candidate 185193) (list 3 3 3 19 19 19) 0.001)\n    (check-within (candidate 20577) (list 3 19 19 19) 0.001)\n    (check-within (candidate 18) (list 2 3 3) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction factorize(n){\n  let fact = [];\n  let i = 2;\n  while(i <= Math.sqrt(n) + 1){\n    if(n % i == 0){\n      fact.push(i);\n      n /= i;\n    }else{\n      i++;\n    }\n  }\n  if(n > 1){\n    fact.push(n);\n  }\n  return fact;\n}\n\n### Explanation\n\nThis program takes an integer `n` and returns an array of its prime factors. It does this by initializing an empty array `fact` and an integer `i` to 2. It then loops through all integers from 2 to the square root of `n` plus 1. If `n` is divisible by `i`, it adds `i` to the `fact` array and divides `n` by `i`. If `n` is not divisible by `i`, it increments `i` by 1. If `n` is greater than 1 after the loop, it adds `n` to the `fact` array. Finally, it returns the `fact` array. \n\n\n### Racket version\n\n#lang racket\n\n(define (factorize n)\n"}, {"name": "HumanEval_59_largest_prime_factor", "language": "rkt", "prompt": "#lang racket\n\n(define (largest_prime_factor n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_59_largest_prime_factor.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n    (check-within (candidate 15) 5 0.001)\n    (check-within (candidate 27) 3 0.001)\n    (check-within (candidate 63) 7 0.001)\n    (check-within (candidate 330) 11 0.001)\n    (check-within (candidate 13195) 29 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction largest_prime_factor(n){\n  function is_prime(k){\n    if(k < 2){\n      return false;\n    }\n    for(let i=2; i<k; i++){\n      if(k % i == 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  let largest = 1;\n  for(let j=2; j<n+1; j++){\n    if(n % j == 0 && is_prime(j)){\n      largest = Math.max(largest, j);\n    }\n  }\n  return largest;\n}\n\n### Explanation\n\nThis program finds the largest prime factor of a given number. It does this by first defining a helper function called `is_prime` which returns true if a given number is prime and false otherwise. The main function then initializes a variable called `largest` to 1 and iterates through all numbers from 2 to the given number `n`. For each number, it checks if it is a factor of `n` and if it is prime using the `is_prime` function. If it is both a factor and prime, it updates the `largest` variable if the current number is larger than the current value of `largest`. Finally, it returns the value of `largest`. \n\n\n### Racket version\n\n#lang racket\n\n(define (largest_prime_factor n)\n"}, {"name": "HumanEval_147_get_max_triples", "language": "rkt", "prompt": "#lang racket\n\n(define (get_max_triples n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_147_get_max_triples.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-within (candidate 5) 1 0.001)\n    (check-within (candidate 6) 4 0.001)\n    (check-within (candidate 10) 36 0.001)\n    (check-within (candidate 100) 53361 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction get_max_triples(n){\n  let A = Array.from({length: n}, (v, i) => (i+1)*(i+1)-i);\n  let ans = [];\n  for(let i=0; i<n; i++){\n    for(let j=i+1; j<n; j++){\n      for(let k=j+1; k<n; k++){\n        if((A[i]+A[j]+A[k])%3 === 0){\n          ans.push([A[i], A[j], A[k]]);\n        }\n      }\n    }\n  }\n  return ans.length;\n}\n\n### Explanation\n\nThis program generates an array of length n, where each element is the square of the index plus the index, minus 1. It then loops over all possible combinations of 3 elements in the array, and checks if their sum is divisible by 3. If it is, the combination is added to an array. The function returns the length of the array of combinations.\n\n\n### Racket version\n\n#lang racket\n\n(define (get_max_triples n)\n"}, {"name": "HumanEval_86_anti_shuffle", "language": "rkt", "prompt": "#lang racket\n\n(define (anti_shuffle s)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_86_anti_shuffle.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate anti_shuffle))\n    (check-within (candidate \"Hi\") \"Hi\" 0.001)\n    (check-within (candidate \"hello\") \"ehllo\" 0.001)\n    (check-within (candidate \"number\") \"bemnru\" 0.001)\n    (check-within (candidate \"abcd\") \"abcd\" 0.001)\n    (check-within (candidate \"Hello World!!!\") \"Hello !!!Wdlor\" 0.001)\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hi. My name is Mister Robot. How are you?\") \".Hi My aemn is Meirst .Rboot How aer ?ouy\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction anti_shuffle(s){\n  return s.split(' ').map(i => [...i].sort().join('')).join(' ');\n}\n\n### Explanation\n\nThis function takes a string as input and returns the same string with the words sorted alphabetically. The function splits the string into an array of words, sorts each word, and then joins the words back together into a string.\n\n\n### Racket version\n\n#lang racket\n\n(define (anti_shuffle s)\n"}, {"name": "HumanEval_84_solve", "language": "rkt", "prompt": "#lang racket\n\n(define (solve N)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_84_solve.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate 1000) \"1\" 0.001)\n    (check-within (candidate 150) \"110\" 0.001)\n    (check-within (candidate 147) \"1100\" 0.001)\n    (check-within (candidate 333) \"1001\" 0.001)\n    (check-within (candidate 963) \"10010\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction solve(N){\n  return (N+'').split('').reduce((a,b) => +a + +b, 0).toString(2);\n}\n\n### Explanation\n\nThis program takes a number `N` and converts it to a binary string by first converting it to a string, then splitting the string into an array of characters, then reducing the array to a single value by adding each character together. The resulting sum is then converted to a binary string.\n\n\n### Racket version\n\n#lang racket\n\n(define (solve N)\n"}, {"name": "HumanEval_129_minPath", "language": "rkt", "prompt": "#lang racket\n\n(define (minPath grid k)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_129_minPath.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minPath))\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)\n    (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)\n    (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)\n    (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)\n    (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)\n    (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)\n    (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction minPath(grid, k){\n  let n = grid.length;\n  let val = n * n + 1;\n  for(let i=0; i<n; i++){\n    for(let j=0; j<n; j++){\n      if(grid[i][j] === 1){\n        let temp = [];\n        if(i != 0){\n          temp.push(grid[i-1][j]);\n        }\n        if(j != 0){\n          temp.push(grid[i][j-1]);\n        }\n        if(i != n-1){\n          temp.push(grid[i+1][j]);\n        }\n        if(j != n-1){\n          temp.push(grid[i][j+1]);\n        }\n        val = Math.min(...temp);\n      }\n    }\n  }\n  let ans = [];\n  for(let i=0; i<k; i++){\n    if(i % 2 === 0){\n      ans.push(1);\n    }else{\n      ans.push(val);\n    }\n  }\n  return ans;\n}\n\n### Explanation\n\nThis program takes in a 2D array of integers, `grid`, and an integer `k`. It then finds the minimum value of the neighboring cells of each cell with a value of 1 in the grid. It then creates an array `ans` of length `k`, where every even index is 1 and every odd index is the minimum value found earlier. The function then returns `ans`. \n\nTo rewrite this program in Racket, one would need to replace the `let` keyword with `define`, and replace the `for` loops with `for` loops in Racket syntax. Additionally, the `Math.min` function would need to be replaced with the `min` function in Racket. Here is the Racket version of the program:\n\n```racket\n(define (minPath grid k)\n  (let ((n (length grid))\n        (val (+ (* n n) 1)))\n    (for ((i (in-range n)))\n      (for ((j (in-range n)))\n        (if (= (list-ref (list-ref grid i) j) 1)\n            (let ((temp '()))\n              (if (not (= i 0))\n                  (set! temp (cons (list-ref (list-ref grid (- i 1)) j) temp)))\n              (if (not (= j 0))\n                  (set! temp (cons (list-ref (list-ref grid i) (- j 1)) temp)))\n              (if (not (= i (- n 1)))\n                  (set! temp (cons (list-ref (list-ref grid (+ i 1)) j) temp)))\n              (if (not (= j (- n 1)))\n                  (set! temp (cons (list-ref (list-ref grid i) (+ j 1)) temp)))\n              (set! val (apply min temp)))))\n    (let ((ans '()))\n      (for ((i (in-range k)))\n        (if (even? i)\n            (set! ans (cons 1 ans))\n            (set! ans (cons val ans)))))\n    (reverse ans)))\n```<|im_end|>\n\n### Racket version\n\n#lang racket\n\n(define (minPath grid k)\n"}, {"name": "HumanEval_89_encrypt", "language": "rkt", "prompt": "#lang racket\n\n(define (encrypt s)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_89_encrypt.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n    (check-within (candidate \"hi\") \"lm\" 0.001)\n    (check-within (candidate \"asdfghjkl\") \"ewhjklnop\" 0.001)\n    (check-within (candidate \"gf\") \"kj\" 0.001)\n    (check-within (candidate \"et\") \"ix\" 0.001)\n    (check-within (candidate \"faewfawefaewg\") \"jeiajeaijeiak\" 0.001)\n    (check-within (candidate \"hellomyfriend\") \"lippsqcjvmirh\" 0.001)\n    (check-within (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" 0.001)\n    (check-within (candidate \"a\") \"e\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction encrypt(s){\n  let d = 'abcdefghijklmnopqrstuvwxyz'\n  let out = ''\n  for (let c of s){\n    if (d.includes(c)){\n      out += d[(d.indexOf(c)+2*2) % 26]\n    } else {\n      out += c\n    }\n  }\n  return out\n}\n\n### Explanation\n\nThis program takes a string as input and returns a string as output. It encrypts the input string by shifting each letter two positions to the right in the alphabet. If a character is not a letter, it is left as is. The function uses a string of the alphabet to determine the position of each letter in the input string, and then shifts it by two positions to the right. If the letter is at the end of the alphabet, it wraps around to the beginning. The function then returns the encrypted string.\n\n\n### Racket version\n\n#lang racket\n\n(define (encrypt s)\n"}, {"name": "HumanEval_100_make_a_pile", "language": "rkt", "prompt": "#lang racket\n\n(define (make_a_pile n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_100_make_a_pile.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n    (check-within (candidate 3) (list 3 5 7) 0.001)\n    (check-within (candidate 4) (list 4 6 8 10) 0.001)\n    (check-within (candidate 5) (list 5 7 9 11 13) 0.001)\n    (check-within (candidate 6) (list 6 8 10 12 14 16) 0.001)\n    (check-within (candidate 8) (list 8 10 12 14 16 18 20 22) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction make_a_pile(n){\n  return Array.from({length: n}, (_, i) => n + 2*i);\n}\n\n### Explanation\n\nThis program defines a function called `make_a_pile` which takes a single argument `n`. The function returns an array of length `n` where each element is equal to `n` plus two times the index of the element in the array. The `Array.from` method is used to create the array. The first argument to `Array.from` is an object with a single property `length` which is set to `n`. The second argument is an arrow function which takes two arguments, the first is ignored and the second is the index of the current element. The arrow function returns `n + 2*i`.\n\n\n### Racket version\n\n#lang racket\n\n(define (make_a_pile n)\n"}, {"name": "HumanEval_31_is_prime", "language": "rkt", "prompt": "#lang racket\n\n(define (is_prime n)\n", "doctests": "keep", "original": "../datasets/originals/HumanEval_31_is_prime.py", "prompt_terminology": "remove", "source_program": "keep", "target_signature": "keep", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 101) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 13441) #t 0.001)\n    (check-within (candidate 61) #t 0.001)\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 1) #f 0.001)\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 17) #t 0.001)\n    (check-within (candidate 85) #f 0.001)\n    (check-within (candidate 77) #f 0.001)\n    (check-within (candidate 255379) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("], "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this JavaScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Racket.\n\n### JavaScript version\n\nfunction is_prime(n){\n  if(n < 2){\n    return false;\n  }\n  for(let k=2; k<n; k++){\n    if(n % k == 0){\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis program defines a function `is_prime` that takes an integer `n` as input. If `n` is less than 2, the function returns `false`. Otherwise, the function iterates over all integers `k` from 2 to `n-1`. If `n` is divisible by `k`, the function returns `false`. If no such `k` is found, the function returns `true`.\n\n\n### Racket version\n\n#lang racket\n\n(define (is_prime n)\n"}]