[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "pl",
    "prompt": "sub correct_bracketing {\n    my($brackets) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"()\"),1) || $candidate->(\"()\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1) || $candidate->(\"(()())\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()\"),1) || $candidate->(\"()()(()())()\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1) || $candidate->(\"()()((()()())())(()()(()))\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((()())))\"),\"\") || $candidate->(\"((()())))\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")(()\"),\"\") || $candidate->(\")(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\") || $candidate->(\"(\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((((\"),\"\") || $candidate->(\"((((\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")\"),\"\") || $candidate->(\")\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\") || $candidate->(\"(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())())(()\"),\"\") || $candidate->(\"()()(()())())(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\") || $candidate->(\"()()(()())()))()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n    depth=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ ${1:$i:1} == \"(\" ]]; then\n            (( depth++ ))\n        else\n            (( depth-- ))\n        fi\n        if (( depth < 0 )); then\n            echo \"false\"\n            return\n        fi\n    done\n    if (( depth == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "pl",
    "prompt": "sub triangle_area {\n    my($a, $h) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(5, 3),7.5) || $candidate->(5, 3)==7.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2),2.0) || $candidate->(2, 2)==2.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 8),40.0) || $candidate->(10, 8)==40.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n    echo \"scale=1; $1 * $2 / 2\" | bc\n}\n\n### Perl version\n\nsub triangle_area {\n    my($a, $h) = @_;\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "pl",
    "prompt": "sub special_factorial {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288) || $candidate->(4)==288) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560) || $candidate->(5)==34560) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000) || $candidate->(7)==125411328000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n    n=$1\n    fact_i=1\n    special_fact=1\n    for (( i=1; i<=$n; i++ )); do\n        ((fact_i*=i))\n        ((special_fact*=fact_i))\n    done\n    echo $special_fact\n}\n\n### Perl version\n\nsub special_factorial {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "pl",
    "prompt": "sub largest_smallest_integers {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1]) || $candidate->([2, 4, 1, 3, 5, 7])==[undef, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1]) || $candidate->([2, 4, 1, 3, 5, 7, 0])==[undef, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1]) || $candidate->([1, 3, 2, 4, 5, 6, -2])==[-2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2]) || $candidate->([4, 5, 3, 6, 2, 7, -7])==[-7, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]) || $candidate->([7, 3, 8, 4, 9, 2, 5, -9])==[-9, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef, undef]) || $candidate->([])==[undef, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),[undef, undef]) || $candidate->([0])==[undef, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef]) || $candidate->([-1, -3, -5, -6])==[-1, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef]) || $candidate->([-1, -3, -5, -6, 0])==[-1, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1]) || $candidate->([-6, -4, -4, -3, 1])==[-3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1]) || $candidate->([-6, -4, -4, -3, -100, 1])==[-3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local lst=($1)\n    local smallest=($(echo \"${lst[@]}\" | tr ' ' '\\n' | awk '$1 < 0' | sort -n | tail -n 1))\n    local largest=($(echo \"${lst[@]}\" | tr ' ' '\\n' | awk '$1 > 0' | sort -n | head -n 1))\n    echo \"$smallest $largest\"\n}\n\n### Perl version\n\nsub largest_smallest_integers {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "pl",
    "prompt": "sub move_one_ball {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1) || $candidate->([3, 4, 5, 1, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1) || $candidate->([3, 5, 10, 1, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 1, 2]),\"\") || $candidate->([4, 3, 1, 2])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\") || $candidate->([3, 5, 4, 1, 2])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1) || $candidate->([])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local min_value=${sorted_arr[0]}\n    local min_index=$(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -n $min_value | cut -d: -f1)\n    local my_arr=(\"${arr[@]:$min_index}\" \"${arr[@]:0:$min_index}\")\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        if [[ ${my_arr[i]} -ne ${sorted_arr[i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Perl version\n\nsub move_one_ball {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "pl",
    "prompt": "sub digits {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5) || $candidate->(5)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5) || $candidate->(54)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1) || $candidate->(120)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5) || $candidate->(5014)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315) || $candidate->(98765)==315) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625) || $candidate->(5576543)==2625) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0) || $candidate->(2468)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n    n=$1\n    product=1\n    odd_count=0\n    for digit in $(echo $n | grep -o .); do\n        if [[ $((digit%2)) -eq 1 ]]; then\n            ((product*=digit))\n            ((odd_count++))\n        fi\n    done\n    if [[ $odd_count -eq 0 ]]; then\n        echo 0\n    else\n        echo $product\n    fi\n}\n\n### Perl version\n\nsub digits {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "pl",
    "prompt": "sub fib4 {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4) || $candidate->(5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28) || $candidate->(8)==28) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104) || $candidate->(10)==104) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386) || $candidate->(12)==386) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n    results=(0 0 2 0)\n    if [ $1 -lt 4 ]; then\n        echo ${results[$1]}\n        return\n    fi\n\n    for ((i=4; i<=$1; i++)); do\n        results+=($((results[3] + results[2] + results[1] + results[0])))\n        unset results[0]\n        results=(\"${results[@]}\")\n    done\n\n    echo ${results[3]}\n}\n\n### Perl version\n\nsub fib4 {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "pl",
    "prompt": "sub sort_even {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_even;\n        if(eq_deeply($candidate->([1, 2, 3]),[1, 2, 3]) || $candidate->([1, 2, 3])==[1, 2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]) || $candidate->([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])==[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]) || $candidate->([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])==[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_even() {\n    evens=($(echo $1 | tr ' ' '\\n' | awk 'NR%2==1' | sort -n))\n    odds=($(echo $1 | tr ' ' '\\n' | awk 'NR%2==0'))\n    ans=()\n    for ((i=0; i<${#evens[@]}; i++)); do\n        ans+=(${evens[i]})\n        ans+=(${odds[i]})\n    done\n    if [ ${#evens[@]} -gt ${#odds[@]} ]; then\n        ans+=(${evens[-1]})\n    fi\n    echo ${ans[@]}\n}\n\n### Perl version\n\nsub sort_even {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "pl",
    "prompt": "sub order_by_points {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]) || $candidate->([1, 11, -1, -11, -12])==[-1, -11, 1, -12, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]) || $candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])==[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]) || $candidate->([1, -11, -32, 43, 54, -98, 2, -3])==[-3, -32, -98, -11, 1, 2, 43, 54]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]) || $candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])==[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]) || $candidate->([0, 6, 6, -76, -21, 23, 4])==[-76, -21, 0, 4, 23, 6, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\norder_by_points() {\n    nums=($1)\n    digits_sum() {\n        n=$1\n        neg=1\n        if [[ $n -lt 0 ]]; then\n            n=$((-1 * n))\n            neg=-1\n        fi\n        n=($(echo $n | grep -o .))\n        n[0]=$((n[0] * neg))\n        sum=0\n        for i in ${n[@]}; do\n            ((sum+=i))\n        done\n        echo $sum\n    }\n    for (( i=0; i<${#nums[@]}; i++ )); do\n        for (( j=i+1; j<${#nums[@]}; j++ )); do\n            if [[ $(digits_sum ${nums[$i]}) -gt $(digits_sum ${nums[$j]}) ]]; then\n                temp=${nums[$i]}\n                nums[$i]=${nums[$j]}\n                nums[$j]=$temp\n            fi\n        done\n    done\n    echo \"${nums[@]}\"\n}\n\n### Perl version\n\nsub order_by_points {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "pl",
    "prompt": "sub is_happy {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\") || $candidate->(\"a\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\") || $candidate->(\"aa\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1) || $candidate->(\"abcd\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\") || $candidate->(\"aabb\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1) || $candidate->(\"adb\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\") || $candidate->(\"xyy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1) || $candidate->(\"iopaxpoi\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\") || $candidate->(\"iopaxioi\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n  if [ ${#1} -lt 3 ]; then\n    echo \"false\"\n    return\n  fi\n\n  for (( i=0; i<${#1}-2; i++ )); do\n    if [[ ${1:i:1} == ${1:i+1:1} || ${1:i+1:1} == ${1:i+2:1} || ${1:i:1} == ${1:i+2:1} ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"\n}\n\n### Perl version\n\nsub is_happy {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "pl",
    "prompt": "sub circular_shift {\n    my($x, $shift) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n        if(eq_deeply($candidate->(100, 2),\"001\") || $candidate->(100, 2)==\"001\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\") || $candidate->(12, 2)==\"12\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97, 8),\"79\") || $candidate->(97, 8)==\"79\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 1),\"21\") || $candidate->(12, 1)==\"21\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\") || $candidate->(11, 101)==\"11\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n    s=$1\n    shift=$2\n    if [ $shift -gt ${#s} ]; then\n        echo $s | rev\n    else\n        echo ${s:$shift}${s:0:$shift}\n    fi\n}\n\n### Perl version\n\nsub circular_shift {\n    my($x, $shift) = @_;\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "pl",
    "prompt": "sub has_close_elements {\n    my($numbers, $threshold) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1) || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\") || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1) || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\") || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1) || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\"\") || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    arr=($1)\n    threshold=$2\n\n    for (( i=0; i<${#arr[@]}-1; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            if (( $(bc <<< \"${arr[$i]} - ${arr[$j]}\") < $threshold )); then\n                echo \"true\"\n                return\n            fi\n        done\n    done\n\n    echo \"false\"\n}\n\n### Perl version\n\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "pl",
    "prompt": "sub numerical_letter_grade {\n    my($grades) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]) || $candidate->([4.0, 3, 1.7, 2, 3.5])==[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"]) || $candidate->([1.2])==[\"D+\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"D-\"]) || $candidate->([0.5])==[\"D-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"E\"]) || $candidate->([0.0])==[\"E\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]) || $candidate->([1.0, 0.3, 1.5, 2.8, 3.3])==[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0, 0.7]),[\"E\", \"D-\"]) || $candidate->([0.0, 0.7])==[\"E\", \"D-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    for gpa in $1; do\n        if [ $gpa == 4.0 ]; then\n            letter_grade+=\"A+ \"\n        elif [ $(echo \"$gpa > 3.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"A \"\n        elif [ $(echo \"$gpa > 3.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"A- \"\n        elif [ $(echo \"$gpa > 3.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B+ \"\n        elif [ $(echo \"$gpa > 2.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B \"\n        elif [ $(echo \"$gpa > 2.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B- \"\n        elif [ $(echo \"$gpa > 2.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C+ \"\n        elif [ $(echo \"$gpa > 1.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C \"\n        elif [ $(echo \"$gpa > 1.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C- \"\n        elif [ $(echo \"$gpa > 1.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D+ \"\n        elif [ $(echo \"$gpa > 0.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D \"\n        elif [ $(echo \"$gpa > 0.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D- \"\n        else\n            letter_grade+=\"E \"\n        fi\n    done\n    echo $letter_grade\n}\n\n### Perl version\n\nsub numerical_letter_grade {\n    my($grades) = @_;\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "pl",
    "prompt": "sub x_or_y {\n    my($n, $x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&x_or_y;\n        if(eq_deeply($candidate->(7, 34, 12),34) || $candidate->(7, 34, 12)==34) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 5),5) || $candidate->(15, 8, 5)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 33, 5212),33) || $candidate->(3, 33, 5212)==33) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1259, 3, 52),3) || $candidate->(1259, 3, 52)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7919, -1, 12),-1) || $candidate->(7919, -1, 12)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3609, 1245, 583),583) || $candidate->(3609, 1245, 583)==583) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(91, 56, 129),129) || $candidate->(91, 56, 129)==129) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 34, 1234),1234) || $candidate->(6, 34, 1234)==1234) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 0),0) || $candidate->(1, 2, 0)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 0),2) || $candidate->(2, 2, 0)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    if [ $1 -eq 1 ]; then\n        echo $3\n    else\n        for ((i=2;i<$1;i++)); do\n            if [ $(($1 % $i)) -eq 0 ]; then\n                echo $3\n                break\n            fi\n        done\n        echo $2\n    fi\n}\n\n### Perl version\n\nsub x_or_y {\n    my($n, $x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "pl",
    "prompt": "sub specialFilter {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&specialFilter;\n        if(eq_deeply($candidate->([5, -2, 1, -5]),0) || $candidate->([5, -2, 1, -5])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, -73, 14, -15]),1) || $candidate->([15, -73, 14, -15])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2) || $candidate->([33, -2, -3, 45, 21, 109])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4) || $candidate->([43, -12, 93, 125, 121, 109])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3) || $candidate->([71, -2, -33, 75, 21, 19])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0) || $candidate->([1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nspecialFilter() {\n    local count=0\n    for num in $1; do\n        if [[ $num -gt 10 && $(echo $num | awk '{print substr($0,1,1) \" \" substr($0,length,1)}') =~ ^[13579]\\ [13579]$ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Perl version\n\nsub specialFilter {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "pl",
    "prompt": "sub parse_music {\n    my($music_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_music;\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o o o o\"),[4, 4, 4, 4]) || $candidate->(\"o o o o\")==[4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".| .| .| .|\"),[1, 1, 1, 1]) || $candidate->(\".| .| .| .|\")==[1, 1, 1, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]) || $candidate->(\"o| o| .| .| o o o o\")==[2, 2, 1, 1, 4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]) || $candidate->(\"o| .| o| .| o o| o o|\")==[2, 1, 2, 1, 4, 2, 4, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n    local music_string=\"$1\"\n    local note_map=(\"o\" \"4\" \"o|\" \"2\" \".|\" \"1\")\n    local notes=()\n    for x in $music_string; do\n        if [[ -n \"$x\" ]]; then\n            for i in \"${!note_map[@]}\"; do\n                if [[ \"${note_map[i]}\" == \"$x\" ]]; then\n                    notes+=(\"${note_map[i+1]}\")\n                fi\n            done\n        fi\n    done\n    echo \"${notes[@]}\"\n}\n\n### Perl version\n\nsub parse_music {\n    my($music_string) = @_;\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "pl",
    "prompt": "sub split_words {\n    my($txt) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_words;\n        if(eq_deeply($candidate->(\"Hello world!\"),[\"Hello\", \"world!\"]) || $candidate->(\"Hello world!\")==[\"Hello\", \"world!\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,world!\"),[\"Hello\", \"world!\"]) || $candidate->(\"Hello,world!\")==[\"Hello\", \"world!\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world,!\"),[\"Hello\", \"world,!\"]) || $candidate->(\"Hello world,!\")==[\"Hello\", \"world,!\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]) || $candidate->(\"Hello,Hello,world !\")==[\"Hello,Hello,world\", \"!\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\"),3) || $candidate->(\"abcdef\")==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaabb\"),2) || $candidate->(\"aaabb\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaBb\"),1) || $candidate->(\"aaaBb\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 == *\" \"* ]]; then\n        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 == *,* ]]; then\n        echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o '[a-z]' | grep -c '[02468]$'\n    fi\n}\n\n### Perl version\n\nsub split_words {\n    my($txt) = @_;\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "pl",
    "prompt": "sub count_distinct_characters {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5) || $candidate->(\"abcde\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdecadeCADE\"),5) || $candidate->(\"abcdecadeCADE\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1) || $candidate->(\"aaaaAAAAaaaa\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry jERRY JeRRRY\"),5) || $candidate->(\"Jerry jERRY JeRRRY\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_distinct_characters() {\n    lowerCaseString=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    uniqueCharacters=$(echo $lowerCaseString | grep -o . | sort -u | tr -d '\\n')\n    echo ${#uniqueCharacters}\n}\n\n### Perl version\n\nsub count_distinct_characters {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "pl",
    "prompt": "sub bf {\n    my($planet1, $planet2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n        if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]) || $candidate->(\"Jupiter\", \"Neptune\")==[\"Saturn\", \"Uranus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Mercury\"),[\"Venus\"]) || $candidate->(\"Earth\", \"Mercury\")==[\"Venus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]) || $candidate->(\"Mercury\", \"Uranus\")==[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]) || $candidate->(\"Neptune\", \"Venus\")==[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Earth\"),[]) || $candidate->(\"Earth\", \"Earth\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[]) || $candidate->(\"Mars\", \"Earth\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jupiter\", \"Makemake\"),[]) || $candidate->(\"Jupiter\", \"Makemake\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planet_names=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    if [[ ! \" ${planet_names[@]} \" =~ \" $1 \" ]] || [[ ! \" ${planet_names[@]} \" =~ \" $2 \" ]] || [ \"$1\" == \"$2\" ]; then\n        return\n    fi\n    planet1_index=$(echo \"${planet_names[@]}\" | grep -o \"$1\" | wc -l)\n    planet2_index=$(echo \"${planet_names[@]}\" | grep -o \"$2\" | wc -l)\n    if (( planet1_index < planet2_index )); then\n        echo \"${planet_names[@]:planet1_index + 1:planet2_index}\"\n    else\n        echo \"${planet_names[@]:planet2_index + 1:planet1_index}\"\n    fi\n}\n\n### Perl version\n\nsub bf {\n    my($planet1, $planet2) = @_;\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "pl",
    "prompt": "sub digitSum {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digitSum;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abAB\"),131) || $candidate->(\"abAB\")==131) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcCd\"),67) || $candidate->(\"abcCd\")==67) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"helloE\"),69) || $candidate->(\"helloE\")==69) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"woArBld\"),131) || $candidate->(\"woArBld\")==131) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aAaaaXa\"),153) || $candidate->(\"aAaaaXa\")==153) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" How are yOu?\"),151) || $candidate->(\" How are yOu?\")==151) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You arE Very Smart\"),327) || $candidate->(\"You arE Very Smart\")==327) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ndigitSum() {\n    s=$1\n    sum=0\n    for (( i=0; i<${#s}; i++ )); do\n        char=${s:i:1}\n        if [[ $char =~ [A-Z] ]]; then\n            ((sum+=`printf \"%d\" \"'$char\"`))\n        fi\n    done\n    echo \"$sum\"\n}\n\n### Perl version\n\nsub digitSum {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "pl",
    "prompt": "sub sum_squares {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1, 2, 3]),6) || $candidate->([1, 2, 3])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 9]),14) || $candidate->([1, 4, 9])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9) || $candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1])==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3) || $candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1])==-3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),0) || $candidate->([0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126) || $candidate->([-1, -5, 2, -1, -5])==-126) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030) || $candidate->([-56, -99, 1, 0, -2])==3030) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0) || $candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196) || $candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])==-14196) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448) || $candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])==-1448) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=($1)\n    local result=0\n    for (( i=0; i<${#lst[@]}; i++ )); do\n        if [[ $((i%3)) -eq 0 ]]; then\n            ((result+=lst[i]**2))\n        elif [[ $((i%4)) -eq 0 && $((i%3)) -ne 0 ]]; then\n            ((result+=lst[i]**3))\n        else\n            ((result+=lst[i]))\n        fi\n    done\n    echo \"$result\"\n}\n\n### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "pl",
    "prompt": "sub count_up_to {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_up_to;\n        if(eq_deeply($candidate->(5),[2, 3]) || $candidate->(5)==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[2, 3, 5]) || $candidate->(6)==[2, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[2, 3, 5]) || $candidate->(7)==[2, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),[2, 3, 5, 7]) || $candidate->(10)==[2, 3, 5, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[]) || $candidate->(0)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19]) || $candidate->(22)==[2, 3, 5, 7, 11, 13, 17, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[]) || $candidate->(1)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17]) || $candidate->(18)==[2, 3, 5, 7, 11, 13, 17]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) || $candidate->(47)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) || $candidate->(101)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n    n=$1\n    primes=()\n    for ((i=2;i<n;i++)); do\n        is_prime=true\n        for ((j=2;j<i;j++)); do\n            if ((i%j==0)); then\n                is_prime=false\n                break\n            fi\n        done\n        if $is_prime; then\n            primes+=($i)\n        fi\n    done\n    echo ${primes[@]}\n}\n\n### Perl version\n\nsub count_up_to {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "pl",
    "prompt": "sub sum_squares {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14) || $candidate->([1.0, 2.0, 3.0])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14) || $candidate->([1.0, 2.0, 3.0])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84) || $candidate->([1.0, 3.0, 5.0, 7.0])==84) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29) || $candidate->([1.4, 4.2, 0.0])==29) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6) || $candidate->([-2.4, 1.0, 1.0])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230) || $candidate->([100.0, 1.0, 15.0, 2.0])==10230) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000) || $candidate->([10000.0, 10000.0])==200000000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75) || $candidate->([-1.4, 4.6, 6.3])==75) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086) || $candidate->([-1.4, 17.9, 18.9, 19.9])==1086) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0) || $candidate->([0.0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1) || $candidate->([-1.0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2) || $candidate->([-1.0, 1.0, 0.0])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n    for i in $1; do\n        squared=$((squared + $(echo \"scale=0; $(echo \"scale=0; $i\" | bc) / 1\" | bc) ** 2))\n    done\n    echo $squared\n}\n\n### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "pl",
    "prompt": "sub unique {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]) || $candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123])==[0, 2, 3, 5, 9, 123]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n    local arr=($1)\n    local unique_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | uniq))\n    echo \"${unique_arr[@]}\"\n}\n\n### Perl version\n\nsub unique {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "pl",
    "prompt": "sub fib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55) || $candidate->(10)==55) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21) || $candidate->(8)==21) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89) || $candidate->(11)==89) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144) || $candidate->(12)==144) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\n### Perl version\n\nsub fib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "pl",
    "prompt": "sub fizz_buzz {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fizz_buzz;\n        if(eq_deeply($candidate->(50),0) || $candidate->(50)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(78),2) || $candidate->(78)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(79),3) || $candidate->(79)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),3) || $candidate->(100)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),6) || $candidate->(200)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4000),192) || $candidate->(4000)==192) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10000),639) || $candidate->(10000)==639) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100000),8026) || $candidate->(100000)==8026) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n    n=$1\n    ns=()\n    for (( i=0; i<$n; i++ )); do\n        if [[ $((i%11)) -eq 0 || $((i%13)) -eq 0 ]]; then\n            ns+=($i)\n        fi\n    done\n    s=$(echo ${ns[@]} | tr ' ' '\\n' | grep -o '7' | wc -l)\n    echo $s\n}\n\n### Perl version\n\nsub fizz_buzz {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "pl",
    "prompt": "sub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\") || $candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"])==\"Watashi.eIGHt8OKe\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\") || $candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"])==\"Boku123.YEs.WeCaNe\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\") || $candidate->(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"])==\"__YESIMHERE.NuLl__\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\") || $candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"])==\"K.TAR\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\") || $candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"])==\"__HAHA.123\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\") || $candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"])==\"YameRore.okIWILL123\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\") || $candidate->(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"])==\"finNNalLLly.WoW\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\") || $candidate->(\"_\", [\"Bb\", \"91245\"])==\"_.Bb\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\") || $candidate->(\"Sp\", [\"671235\", \"Bb\"])==\"Sp.671235\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    class_name=$1\n    extensions=($2)\n    strong=${extensions[0]}\n    my_val=$(echo \"${extensions[0]}\" | awk '{print gsub(/[A-Z]/,\"&\") - gsub(/[a-z]/,\"&\")}')\n    for s in \"${extensions[@]}\"; do\n        val=$(echo \"$s\" | awk '{print gsub(/[A-Z]/,\"&\") - gsub(/[a-z]/,\"&\")}')\n        if [[ $val -gt $my_val ]]; then\n            strong=$s\n            my_val=$val\n        fi\n    done\n    echo \"$class_name.$strong\"\n}\n\n### Perl version\n\nsub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "pl",
    "prompt": "sub find_closest_elements {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]) || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])==[3.9, 4.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]) || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0])==[5.0, 5.9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])==[2.0, 2.2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])==[2.0, 2.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]) || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1])==[2.2, 3.1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    arr=($1)\n    closest_pair=()\n    distance=\"\"\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            new_distance=$(echo \"${arr[i]} - ${arr[j]}\" | bc -l | tr -d '-')\n            if [[ -z $distance ]]; then\n                distance=$new_distance\n                closest_pair=(\"${arr[i]}\" \"${arr[j]}\")\n            elif (( $(echo \"$new_distance < $distance\" | bc -l) )); then\n                distance=$new_distance\n                closest_pair=(\"${arr[i]}\" \"${arr[j]}\")\n            fi\n        done\n    done\n    echo \"${closest_pair[@]}\"\n}\n\n### Perl version\n\nsub find_closest_elements {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "pl",
    "prompt": "sub valid_date {\n    my($date) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n        if(eq_deeply($candidate->(\"03-11-2000\"),1) || $candidate->(\"03-11-2000\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"),\"\") || $candidate->(\"15-01-2012\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-0-2040\"),\"\") || $candidate->(\"04-0-2040\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-04-2020\"),1) || $candidate->(\"06-04-2020\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"),1) || $candidate->(\"01-01-2007\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"03-32-2011\"),\"\") || $candidate->(\"03-32-2011\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\") || $candidate->(\"04-31-3000\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-06-2005\"),1) || $candidate->(\"06-06-2005\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"21-31-2000\"),\"\") || $candidate->(\"21-31-2000\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"),1) || $candidate->(\"04-12-2003\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04122003\"),\"\") || $candidate->(\"04122003\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"20030412\"),\"\") || $candidate->(\"20030412\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"),\"\") || $candidate->(\"2003-04\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04-12\"),\"\") || $candidate->(\"2003-04-12\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-2003\"),\"\") || $candidate->(\"04-2003\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvalid_date() {\n    date=$1\n    month=$(echo $date | awk -F'-' '{print $1}')\n    day=$(echo $date | awk -F'-' '{print $2}')\n    year=$(echo $date | awk -F'-' '{print $3}')\n    if [[ $month -lt 1 || $month -gt 12 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]] && [[ $day -lt 1 || $day -gt 31 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]] && [[ $day -lt 1 || $day -gt 30 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 2 ]] && [[ $day -lt 1 || $day -gt 29 ]]; then\n        echo \"false\"\n        return\n    fi\n    echo \"true\"\n}\n\n### Perl version\n\nsub valid_date {\n    my($date) = @_;\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "pl",
    "prompt": "sub add {\n    my($x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->(0, 1),1) || $candidate->(0, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 0),1) || $candidate->(1, 0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),5) || $candidate->(2, 3)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 7),12) || $candidate->(5, 7)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),12) || $candidate->(7, 5)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n    expr $1 + $2\n}\n\n### Perl version\n\nsub add {\n    my($x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "pl",
    "prompt": "sub triples_sum_to_zero {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\") || $candidate->([1, 3, 5, 0])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -1]),\"\") || $candidate->([1, 3, 5, -1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),1) || $candidate->([1, 3, -2, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\") || $candidate->([1, 2, 3, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 7]),\"\") || $candidate->([1, 2, 5, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1) || $candidate->([2, 4, -5, 3, 9, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\") || $candidate->([1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -100]),\"\") || $candidate->([1, 3, 5, -100])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\") || $candidate->([100, 3, 5, -100])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n    l=($1)\n    for (( i=0; i<${#l[@]}; i++ )); do\n        for (( j=i+1; j<${#l[@]}; j++ )); do\n            for (( k=j+1; k<${#l[@]}; k++ )); do\n                if (( l[i] + l[j] + l[k] == 0 )); then\n                    echo true\n                    return\n                fi\n            done\n        done\n    done\n    echo false\n}\n\n### Perl version\n\nsub triples_sum_to_zero {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "pl",
    "prompt": "sub largest_divisor {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n        if(eq_deeply($candidate->(3),1) || $candidate->(3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1) || $candidate->(7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5) || $candidate->(10)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50) || $candidate->(100)==50) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7) || $candidate->(49)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n  for (( i=$1-1; i>0; i-- )); do\n    if (( $1 % $i == 0 )); then\n      echo $i\n      return\n    fi\n  done\n}\n\n### Perl version\n\nsub largest_divisor {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "pl",
    "prompt": "sub sort_numbers {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\") || $candidate->(\"three\")==\"three\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\") || $candidate->(\"three five nine\")==\"three five nine\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"),\"zero four five seven eight nine\") || $candidate->(\"five zero four seven nine eight\")==\"zero four five seven eight nine\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three two one zero\"),\"zero one two three four five six\") || $candidate->(\"six five four three two one zero\")==\"zero one two three four five six\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n    value_map=(zero one two three four five six seven eight nine)\n    for word in $1; do\n        for i in ${!value_map[@]}; do\n            if [[ $word == ${value_map[$i]} ]]; then\n                echo $i\n            fi\n        done\n    done | sort | while read i; do\n        echo ${value_map[$i]}\n    done | tr '\\n' ' ' | sed 's/ $//'\n}\n\n### Perl version\n\nsub sort_numbers {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "pl",
    "prompt": "sub smallest_change {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&smallest_change;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4) || $candidate->([1, 2, 3, 5, 4, 7, 9, 6])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1) || $candidate->([1, 2, 3, 4, 3, 2, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2]),1) || $candidate->([1, 4, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 4, 2]),1) || $candidate->([1, 4, 4, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0) || $candidate->([1, 2, 3, 2, 1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 1, 1, 3]),0) || $candidate->([3, 1, 1, 3])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0) || $candidate->([1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1) || $candidate->([0, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n    arr=($1)\n    ans=0\n    for ((i=0; i<${#arr[@]}/2; i++)); do\n        if [[ ${arr[i]} -ne ${arr[${#arr[@]}-i-1]} ]]; then\n            ((ans++))\n        fi\n    done\n    echo $ans\n}\n\n### Perl version\n\nsub smallest_change {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "pl",
    "prompt": "sub below_threshold {\n    my($l, $t) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_threshold;\n        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1) || $candidate->([1, 2, 4, 10], 100)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 5),\"\") || $candidate->([1, 20, 4, 10], 5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1) || $candidate->([1, 20, 4, 10], 21)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1) || $candidate->([1, 20, 4, 10], 22)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1) || $candidate->([1, 8, 4, 10], 11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 10),\"\") || $candidate->([1, 8, 4, 10], 10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n    for e in $1; do\n        if [ $e -ge $2 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Perl version\n\nsub below_threshold {\n    my($l, $t) = @_;\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "pl",
    "prompt": "sub prod_signs {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9) || $candidate->([1, 2, 2, -4])==-9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0) || $candidate->([0, 1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10) || $candidate->([1, 1, 1, 2, 3, -1, 1])==-10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef) || $candidate->([])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20) || $candidate->([2, 4, 1, 2, -1, -1, 9])==20) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4) || $candidate->([-1, 1, -1, 1])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4) || $candidate->([-1, 1, 1, 1])==-4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 0]),0) || $candidate->([-1, 1, 1, 0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nprod_signs() {\n    arr=($1)\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        return\n    fi\n    if [[ ${arr[*]} =~ 0 ]]; then\n        echo 0\n        return\n    fi\n    negs=($(echo ${arr[*]} | sed 's/[^-]/0/g'))\n    prod=$(( ${#negs[@]} % 2 == 0 ? 1 : -1 ))\n    echo $(( prod * $(echo ${arr[*]} | sed 's/-//g' | tr ' ' '+' ) ))\n}\n\n### Perl version\n\nsub prod_signs {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "pl",
    "prompt": "sub modp {\n    my($n, $p) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3) || $candidate->(3, 5)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2) || $candidate->(1101, 101)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1) || $candidate->(0, 101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8) || $candidate->(3, 11)==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1) || $candidate->(100, 101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4) || $candidate->(30, 5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3) || $candidate->(31, 5)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n    ret=1\n    for ((i=0;i<$1;i++)); do\n        ret=$((2 * ret % $2))\n    done\n    echo $ret\n}\n\n### Perl version\n\nsub modp {\n    my($n, $p) = @_;\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "pl",
    "prompt": "sub count_upper {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n        if(eq_deeply($candidate->(\"aBCdEf\"),1) || $candidate->(\"aBCdEf\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0) || $candidate->(\"abcdefg\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dBBE\"),0) || $candidate->(\"dBBE\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"B\"),0) || $candidate->(\"B\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1) || $candidate->(\"U\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EEEE\"),2) || $candidate->(\"EEEE\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_upper() {\n    count=0\n    for ((i=0;i<${#1};i+=2)); do\n        if [[ \"${1:i:1}\" == [AEIOU] ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Perl version\n\nsub count_upper {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "pl",
    "prompt": "sub multiply {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n        if(eq_deeply($candidate->(148, 412),16) || $candidate->(148, 412)==16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72) || $candidate->(19, 28)==72) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020, 1851),0) || $candidate->(2020, 1851)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14, -15),20) || $candidate->(14, -15)==20) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42) || $candidate->(76, 67)==42) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 27),49) || $candidate->(17, 27)==49) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 1),0) || $candidate->(0, 1)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0) || $candidate->(0, 0)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    echo $(( ${1: -1} * ${2: -1} ))\n}\n\n### Perl version\n\nsub multiply {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "pl",
    "prompt": "sub unique_digits {\n    my($x) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33]) || $candidate->([15, 33, 1422, 1])==[1, 15, 33]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[]) || $candidate->([152, 323, 1422, 10])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]) || $candidate->([12345, 2033, 111, 151])==[111, 151]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]) || $candidate->([135, 103, 31])==[31, 135]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n    local arr=($1)\n    local odd_digit_elements=()\n    for i in \"${arr[@]}\"; do\n        if [[ $(echo $i | grep -E \"^[13579]+$\") ]]; then\n            odd_digit_elements+=($i)\n        fi\n    done\n    echo $(echo \"${odd_digit_elements[@]}\" | tr ' ' '\\n' | sort -n)\n}\n\n### Perl version\n\nsub unique_digits {\n    my($x) = @_;\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "pl",
    "prompt": "sub will_it_fly {\n    my($q, $w) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n        if(eq_deeply($candidate->([3, 2, 3], 9),1) || $candidate->([3, 2, 3], 9)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\") || $candidate->([1, 2], 5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3], 5),1) || $candidate->([3], 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3], 1),\"\") || $candidate->([3, 2, 3], 1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], 6),\"\") || $candidate->([1, 2, 3], 6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1) || $candidate->([5], 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n    q=($1)\n    w=$2\n    if (( $(echo \"${q[@]}\" | tr ' ' '+' | bc) > $w )); then\n        echo \"false\"\n        return\n    fi\n\n    i=0\n    j=${#q[@]}-1\n    while (( $i<$j )); do\n        if (( ${q[$i]} != ${q[$j]} )); then\n            echo \"false\"\n            return\n        fi\n        (( i++ ))\n        (( j-- ))\n    done\n    echo \"true\"\n}\n\n### Perl version\n\nsub will_it_fly {\n    my($q, $w) = @_;\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "pl",
    "prompt": "sub maximum {\n    my($arr, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]) || $candidate->([-3, -4, 5], 3)==[-4, -3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4]) || $candidate->([4, -4, 4], 2)==[4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2]) || $candidate->([-3, 2, 1, 2, -1, -2, 1], 1)==[2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]) || $candidate->([123, -123, 20, 0, 1, 2, -3], 3)==[2, 20, 123]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]) || $candidate->([-123, 20, 0, 1, 2, -3], 4)==[0, 1, 2, 20]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]) || $candidate->([5, 15, 0, 3, -13, -8, 0], 7)==[-13, -8, 0, 0, 3, 5, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]) || $candidate->([-1, 0, 2, 5, 3, -10], 2)==[3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5]) || $candidate->([1, 0, 5, -7], 1)==[5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4]) || $candidate->([4, -4], 2)==[-4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10]) || $candidate->([-10, 10], 2)==[-10, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]) || $candidate->([1, 2, 3, -23, 243, -400, 0], 0)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    if [[ $2 -eq 0 ]]; then\n        return 0\n    fi\n    sorted=$(echo $1 | tr ' ' '\\n' | sort -n)\n    echo $sorted | tr ' ' '\\n' | tail -$2\n}\n\n### Perl version\n\nsub maximum {\n    my($arr, $k) = @_;\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "pl",
    "prompt": "sub separate_paren_groups {\n    my($paren_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&separate_paren_groups;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]) || $candidate->(\"(()()) ((())) () ((())()())\")==[\"(()())\", \"((()))\", \"()\", \"((())()())\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]) || $candidate->(\"() (()) ((())) (((())))\")==[\"()\", \"(())\", \"((()))\", \"(((())))\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[\"(()(())((())))\"]) || $candidate->(\"(()(())((())))\")==[\"(()(())((())))\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]) || $candidate->(\"( ) (( )) (( )( ))\")==[\"()\", \"(())\", \"(()())\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n    result=()\n    current_string=\"\"\n    current_depth=0\n\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $c == '(' ]]; then\n            (( current_depth++ ))\n            current_string+=$c\n        elif [[ $c == ')' ]]; then\n            (( current_depth-- ))\n            current_string+=$c\n\n            if [[ $current_depth == 0 ]]; then\n                result+=(\"$current_string\")\n                current_string=\"\"\n            fi\n        fi\n    done\n\n    echo \"${result[@]}\"\n}\n\n### Perl version\n\nsub separate_paren_groups {\n    my($paren_string) = @_;\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "pl",
    "prompt": "sub filter_integers {\n    my($values) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]) || $candidate->([4, {}, [], 23.2, 9, \"adasd\"])==[4, 9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]) || $candidate->([3, \"c\", 3, 3, \"a\", \"b\"])==[3, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfilter_integers() {\n    result=()\n    for x in $1; do\n        if [[ $x =~ ^-?[0-9]+$ ]]; then\n            result+=($x)\n        fi\n    done\n    echo ${result[@]}\n}\n\n### Perl version\n\nsub filter_integers {\n    my($values) = @_;\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "pl",
    "prompt": "sub skjkasdkd {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10) || $candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25) || $candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])==25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13) || $candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])==13) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11) || $candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])==11) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3) || $candidate->([0, 81, 12, 3, 1, 21])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7) || $candidate->([0, 8, 1, 2, 1, 7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191]),19) || $candidate->([8191])==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19) || $candidate->([8191, 123456, 127, 7])==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([127, 97, 8192]),10) || $candidate->([127, 97, 8192])==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nskjkasdkd() {\n    arr=($1)\n    maxx=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $maxx ]]; then\n            is_prime=true\n            for (( j=2; j<$i; j++ )); do\n                if [[ $((i%j)) -eq 0 ]]; then\n                    is_prime=false\n                    break\n                fi\n            done\n            if $is_prime; then\n                maxx=$i\n            fi\n        fi\n    done\n    result=0\n    for (( i=0; i<${#maxx}; i++ )); do\n        result=$((result+${maxx:i:1}))\n    done\n    echo \"$result\"\n}\n\n### Perl version\n\nsub skjkasdkd {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "pl",
    "prompt": "sub total_match {\n    my($lst1, $lst2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&total_match;\n        if(eq_deeply($candidate->([], []),[]) || $candidate->([], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"])==[\"hi\", \"hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]) || $candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])==[\"hi\", \"admin\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]) || $candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])==[\"4\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"])==[\"hI\", \"Hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])==[\"hI\", \"hi\", \"hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"])==[\"hi\", \"admin\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], [\"this\"]),[]) || $candidate->([], [\"this\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\"], []),[]) || $candidate->([\"this\"], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    l1=0\n    for st in $1; do\n        l1=$((l1+${#st}))\n    done\n\n    l2=0\n    for st in $2; do\n        l2=$((l2+${#st}))\n    done\n\n    if [ $l1 -le $l2 ]; then\n        echo $1\n    else\n        echo $2\n    fi\n}\n\n### Perl version\n\nsub total_match {\n    my($lst1, $lst2) = @_;\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "pl",
    "prompt": "sub string_to_md5 {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_md5;\n        if(eq_deeply($candidate->(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\") || $candidate->(\"Hello world\")==\"3e25960a79dbc69b674cd4ec67a72c62\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),undef) || $candidate->(\"\")==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\") || $candidate->(\"A B C\")==\"0ef78513b0cb8cef12743f5aeb35f888\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\") || $candidate->(\"password\")==\"5f4dcc3b5aa765d61d8327deb882cf99\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstring_to_md5() {\n    echo -n \"$1\" | md5sum | awk '{print $1}'\n}\n\n### Perl version\n\nsub string_to_md5 {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "pl",
    "prompt": "sub car_race_collision {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n        if(eq_deeply($candidate->(2),4) || $candidate->(2)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),9) || $candidate->(3)==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16) || $candidate->(4)==16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64) || $candidate->(8)==64) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100) || $candidate->(10)==100) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n    echo $(($1*$1))\n}\n\n### Perl version\n\nsub car_race_collision {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "pl",
    "prompt": "sub is_simple_power {\n    my($x, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n        if(eq_deeply($candidate->(16, 2),1) || $candidate->(16, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\") || $candidate->(143214, 16)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),1) || $candidate->(4, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),1) || $candidate->(9, 3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 4),1) || $candidate->(16, 4)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24, 2),\"\") || $candidate->(24, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(128, 4),\"\") || $candidate->(128, 4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\") || $candidate->(12, 6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1),1) || $candidate->(1, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 12),1) || $candidate->(1, 12)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n    x=$1\n    n=$2\n    if [[ $n -eq 1 ]]; then\n        if [[ $x -eq 1 ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\n        fi\n        return\n    fi\n    power=1\n    while [[ $power -lt $x ]]; do\n        ((power*=n))\n    done\n    if [[ $power -eq $x ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Perl version\n\nsub is_simple_power {\n    my($x, $n) = @_;\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "pl",
    "prompt": "sub incr_list {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]) || $candidate->([3, 2, 1])==[4, 3, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]) || $candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123])==[6, 3, 6, 3, 4, 4, 10, 1, 124]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n    echo $(echo $1 | tr ' ' '\\n' | awk '{print $1+1}' | tr '\\n' ' ')\n}\n\n### Perl version\n\nsub incr_list {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "pl",
    "prompt": "sub flip_case {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\") || $candidate->(\"Hello!\")==\"hELLO!\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") || $candidate->(\"These violent delights have violent ends\")==\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nflip_case() {\n    echo $1 | tr '[:upper:][:lower:]' '[:lower:][:upper:]'\n}\n\n### Perl version\n\nsub flip_case {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "pl",
    "prompt": "sub vowels_count {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n        if(eq_deeply($candidate->(\"abcde\"),2) || $candidate->(\"abcde\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3) || $candidate->(\"Alone\")==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"key\"),2) || $candidate->(\"key\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bye\"),1) || $candidate->(\"bye\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2) || $candidate->(\"keY\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bYe\"),1) || $candidate->(\"bYe\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ACEDY\"),3) || $candidate->(\"ACEDY\")==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n    s=$1\n    vowels=\"aeiouAEIOU\"\n    n_vowels=$(echo $s | grep -io \"[aeiou]\" | wc -l)\n    if [[ ${s: -1} == [yY] ]]; then\n        ((n_vowels++))\n    fi\n    echo $n_vowels\n}\n\n### Perl version\n\nsub vowels_count {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "pl",
    "prompt": "sub sorted_list_sum {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"]) || $candidate->([\"aa\", \"a\", \"aaa\"])==[\"aa\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]) || $candidate->([\"school\", \"AI\", \"asdf\", \"b\"])==[\"AI\", \"asdf\", \"school\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"b\", \"c\", \"a\"]),[]) || $candidate->([\"d\", \"b\", \"c\", \"a\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]) || $candidate->([\"d\", \"dcba\", \"abcd\", \"a\"])==[\"abcd\", \"dcba\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]) || $candidate->([\"AI\", \"ai\", \"au\"])==[\"AI\", \"ai\", \"au\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]) || $candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]) || $candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"])==[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsorted_list_sum() {\n    lst=($1)\n    sorted_lst=($(echo \"${lst[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    new_lst=()\n    for i in \"${sorted_lst[@]}\"; do\n        if (( ${#i} % 2 == 0 )); then\n            new_lst+=($i)\n        fi\n    done\n    sorted_new_lst=($(echo \"${new_lst[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    sorted_by_length=($(echo \"${sorted_new_lst[@]}\" | tr ' ' '\\n' | awk '{print length, $0}' | sort -n -s | cut -d\" \" -f2-))\n    echo \"${sorted_by_length[@]}\"\n}\n\n### Perl version\n\nsub sorted_list_sum {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "pl",
    "prompt": "sub words_string {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]) || $candidate->(\"Hi, my name is John\")==[\"Hi\", \"my\", \"name\", \"is\", \"John\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) || $candidate->(\"One, two, three, four, five, six\")==[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]) || $candidate->(\"Hi, my name\")==[\"Hi\", \"my\", \"name\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) || $candidate->(\"One,, two, three, four, five, six,\")==[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]) || $candidate->(\"ahmed     , gamal\")==[\"ahmed\", \"gamal\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_string() {\n    echo \"$1\" | tr ',' ' ' | awk '{$1=$1};1'\n}\n\n### Perl version\n\nsub words_string {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "pl",
    "prompt": "sub even_odd_palindrome {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n        if(eq_deeply($candidate->(123),[8, 13]) || $candidate->(123)==[8, 13]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6]) || $candidate->(12)==[4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2]) || $candidate->(3)==[1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6, 8]) || $candidate->(63)==[6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5, 6]) || $candidate->(25)==[5, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4, 6]) || $candidate->(19)==[4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4, 5]) || $candidate->(9)==[4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0, 1]) || $candidate->(1)==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n    is_palindrome() {\n        [[ $1 == $(echo $1 | rev) ]]\n    }\n\n    even_palindrome_count=0\n    odd_palindrome_count=0\n\n    for i in $(seq 1 $1); do\n        if (( i%2 == 1 )) && is_palindrome $i; then\n            (( odd_palindrome_count++ ))\n        elif (( i%2 == 0 )) && is_palindrome $i; then\n            (( even_palindrome_count++ ))\n        fi\n    done\n    echo \"$even_palindrome_count $odd_palindrome_count\"\n}\n\n### Perl version\n\nsub even_odd_palindrome {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "pl",
    "prompt": "sub triangle_area {\n    my($a, $b, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(3, 4, 5),6.0) || $candidate->(3, 4, 5)==6.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 10),-1) || $candidate->(1, 2, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 5),8.18) || $candidate->(4, 8, 5)==8.18) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),1.73) || $candidate->(2, 2, 2)==1.73) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),-1) || $candidate->(1, 2, 3)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),16.25) || $candidate->(10, 5, 7)==16.25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 3),-1) || $candidate->(2, 6, 3)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),0.43) || $candidate->(1, 1, 1)==0.43) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),-1) || $candidate->(2, 2, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n    if (( $1 + $2 <= $3 || $1 + $3 <= $2 || $2 + $3 <= $1 )); then\n        echo \"-1\"\n        return\n    fi\n    s=$(( ($1 + $2 + $3) / 2 ))\n    area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\" | bc)\n    echo $area\n}\n\n### Perl version\n\nsub triangle_area {\n    my($a, $b, $c) = @_;\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "pl",
    "prompt": "sub check_dict_case {\n    my($dict) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"}),1) || $candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"})==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\") || $candidate->({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"})==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\") || $candidate->({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"})==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\") || $candidate->({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1) || $candidate->({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}),1) || $candidate->({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"})==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\") || $candidate->({})==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    while IFS=, read -r key value; do\n        if [[ $key == \"\" ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $key != *[[:lower:]]* ]] && [[ $value != *[[:lower:]]* ]]; then\n            echo \"true\"\n            return\n        elif [[ $key != *[[:upper:]]* ]] && [[ $value != *[[:upper:]]* ]]; then\n            echo \"true\"\n            return\n        else\n            echo \"false\"\n            return\n        fi\n    done <<< \"$1\"\n}\n\n### Perl version\n\nsub check_dict_case {\n    my($dict) = @_;\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "pl",
    "prompt": "sub tri {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n        if(eq_deeply($candidate->(3),[1, 3, 2, 8]) || $candidate->(3)==[1, 3, 2, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3]) || $candidate->(4)==[1, 3, 2, 8, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15]) || $candidate->(5)==[1, 3, 2, 8, 3, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4]) || $candidate->(6)==[1, 3, 2, 8, 3, 15, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24]) || $candidate->(7)==[1, 3, 2, 8, 3, 15, 4, 24]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]) || $candidate->(8)==[1, 3, 2, 8, 3, 15, 4, 24, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]) || $candidate->(9)==[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]) || $candidate->(20)==[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1]) || $candidate->(0)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1, 3]) || $candidate->(1)==[1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"1\"\n        return\n    fi\n\n    my_tri=(1 3)\n    for (( i=2; i<=$1; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            my_tri+=(\"$((i/2+1))\")\n        else\n            my_tri+=(\"$((my_tri[i-1]+my_tri[i-2]+(i+3)/2))\")\n        fi\n    done\n\n    echo \"${my_tri[@]}\"\n}\n\n### Perl version\n\nsub tri {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "pl",
    "prompt": "sub median {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3) || $candidate->([3, 1, 2, 4, 5])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0) || $candidate->([-10, 4, 6, 1000, 10, 20])==8.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),5) || $candidate->([5])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5) || $candidate->([6, 5])==5.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7) || $candidate->([8, 1, 3, 9, 9, 2, 7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n    l=($(echo $1 | tr ' ' '\\n' | sort -n))\n    len=${#l[@]}\n    if (( len % 2 == 1 )); then\n        echo ${l[len/2]}\n    else\n        echo $(( (${l[len/2-1]} + ${l[len/2]}) / 2 ))\n    fi\n}\n\n### Perl version\n\nsub median {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "pl",
    "prompt": "sub change_base {\n    my($x, $base) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n        if(eq_deeply($candidate->(8, 3),\"22\") || $candidate->(8, 3)==\"22\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\") || $candidate->(9, 3)==\"100\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234, 2),\"11101010\") || $candidate->(234, 2)==\"11101010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 2),\"10000\") || $candidate->(16, 2)==\"10000\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\") || $candidate->(8, 2)==\"1000\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 2),\"111\") || $candidate->(7, 2)==\"111\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),\"2\") || $candidate->(2, 3)==\"2\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\") || $candidate->(3, 4)==\"3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),\"4\") || $candidate->(4, 5)==\"4\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),\"5\") || $candidate->(5, 6)==\"5\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\") || $candidate->(6, 7)==\"6\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 8),\"7\") || $candidate->(7, 8)==\"7\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    x=$1\n    base=$2\n    ret=\"\"\n    while [[ $x -gt 0 ]]; do\n        ret=\"${x%$base}$ret\"\n        x=$((x/base))\n    done\n    echo $ret\n}\n\n### Perl version\n\nsub change_base {\n    my($x, $base) = @_;\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "pl",
    "prompt": "sub longest {\n    my($strings) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n        if(eq_deeply($candidate->([]),undef) || $candidate->([])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"x\") || $candidate->([\"x\", \"y\", \"z\"])==\"x\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\") || $candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"])==\"zzzz\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlongest() {\n  if [ -z \"$1\" ]; then\n    echo \"None\"\n    return\n  fi\n\n  maxlen=0\n  for s in $1; do\n    len=${#s}\n    if [ $len -gt $maxlen ]; then\n      maxlen=$len\n      longest=$s\n    fi\n  done\n\n  echo $longest\n}\n\n### Perl version\n\nsub longest {\n    my($strings) = @_;\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "pl",
    "prompt": "sub sort_array {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]) || $candidate->([1, 5, 2, 3, 4])==[1, 2, 4, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]) || $candidate->([-2, -3, -4, -5, -6])==[-4, -2, -6, -5, -3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]) || $candidate->([1, 0, 2, 3, 4])==[0, 1, 2, 4, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]) || $candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])==[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]) || $candidate->([3, 6, 44, 12, 32, 5])==[32, 3, 5, 6, 12, 44]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]) || $candidate->([2, 4, 8, 16, 32])==[2, 4, 8, 16, 32]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]) || $candidate->([2, 4, 8, 16, 32])==[2, 4, 8, 16, 32]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n    arr=($1)\n    sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    sorted_by_ones=($(echo \"${sorted_arr[@]}\" | tr ' ' '\\n' | awk '{print $1 \" \" $0}' | sort -n -k2 | awk '{print $1}'))\n    echo \"${sorted_by_ones[@]}\"\n}\n\n### Perl version\n\nsub sort_array {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "pl",
    "prompt": "sub common {\n    my($l1, $l2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]) || $candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])==[1, 5, 653]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3]) || $candidate->([5, 3, 2, 8], [3, 2])==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]) || $candidate->([4, 3, 2, 8], [3, 2, 4])==[2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[]) || $candidate->([4, 3, 2, 8], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n    ret=()\n    for e1 in $1; do\n        for e2 in $2; do\n            if [ $e1 -eq $e2 ]; then\n                ret+=($e1)\n            fi\n        done\n    done\n    echo \"${ret[@]}\" | tr ' ' '\\n' | sort -n\n}\n\n### Perl version\n\nsub common {\n    my($l1, $l2) = @_;\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "pl",
    "prompt": "sub cycpattern_check {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cycpattern_check;\n        if(eq_deeply($candidate->(\"xyzw\", \"xyw\"),\"\") || $candidate->(\"xyzw\", \"xyw\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"yello\", \"ell\"),1) || $candidate->(\"yello\", \"ell\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"whattup\", \"ptut\"),\"\") || $candidate->(\"whattup\", \"ptut\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"efef\", \"fee\"),1) || $candidate->(\"efef\", \"fee\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abab\", \"aabb\"),\"\") || $candidate->(\"abab\", \"aabb\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"winemtt\", \"tinem\"),1) || $candidate->(\"winemtt\", \"tinem\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n    l=${#2}\n    pat=\"$2$2\"\n    for (( i=0; i<${#1}-l+1; i++ )); do\n        for (( j=0; j<l+1; j++ )); do\n            if [[ \"${1:$i:$l}\" == \"${pat:$j:$l}\" ]]; then\n                echo true\n                return\n            fi\n        done\n    done\n    echo false\n}\n\n### Perl version\n\nsub cycpattern_check {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "pl",
    "prompt": "sub minSubArraySum {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minSubArraySum;\n        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1) || $candidate->([2, 3, 4, 1, 2, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3]),-6) || $candidate->([-1, -2, -3])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14) || $candidate->([-1, -2, -3, 2, -10])==-14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999) || $candidate->([-9999999999999999])==-9999999999999999) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0) || $candidate->([0, 10, 20, 1000000])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6) || $candidate->([-1, -2, -3, 10, -5])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6) || $candidate->([100, -1, -2, -3, 10, -5])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3) || $candidate->([10, 11, 13, 8, 3, 4])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33) || $candidate->([100, -33, 32, -1, 0, -2])==-33) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10]),-10) || $candidate->([-10])==-10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7]),7) || $candidate->([7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1]),-1) || $candidate->([1, -1])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n    max_sum=0\n    s=0\n    for num in $1; do\n        s+=-$num\n        if ((s < 0)); then\n            s=0\n        fi\n        max_sum=$((s > max_sum ? s : max_sum))\n    done\n    if ((max_sum == 0)); then\n        max_sum=$(echo $1 | tr ' ' '\\n' | awk '{print -$1}' | sort -n | head -n 1)\n    fi\n    min_sum=-$max_sum\n    echo $min_sum\n}\n\n### Perl version\n\nsub minSubArraySum {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "pl",
    "prompt": "sub sort_array {\n    my($array) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]) || $candidate->([5])==[5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]) || $candidate->([2, 4, 3, 0, 1, 5])==[0, 1, 2, 3, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]) || $candidate->([2, 4, 3, 0, 1, 5, 6])==[6, 5, 4, 3, 2, 1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1]),[1, 2]) || $candidate->([2, 1])==[1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]) || $candidate->([15, 42, 87, 32, 11, 0])==[0, 11, 15, 32, 42, 87]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11]) || $candidate->([21, 14, 23, 11])==[23, 21, 14, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n#\n#\n# $1 is a space-separated list\nsort_array() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\n' | sort -n))\n    local sorted_by_ones=($(echo \"${sorted_arr[@]}\" | tr ' ' '\n' | awk '{print $1 \" \" $0}' | sort -n -k2 | awk '{print $1}'))\n    echo \"${sorted_by_ones[@]}\"\n}\n\n### Perl version\n\nsub sort_array {\n    my($array) = @_;\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "pl",
    "prompt": "sub get_odd_collatz {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_odd_collatz;\n        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17]) || $candidate->(14)==[1, 5, 7, 11, 13, 17]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 5]) || $candidate->(5)==[1, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[1, 3, 5]) || $candidate->(12)==[1, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1]) || $candidate->(1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n    n=$1\n    if ((n%2==0)); then\n        odd_collatz=()\n    else\n        odd_collatz=($n)\n    fi\n    while ((n > 1)); do\n        if ((n%2==0)); then\n            n=$((n/2))\n        else\n            n=$((n*3+1))\n        fi\n        if ((n%2==1)); then\n            odd_collatz+=($n)\n        fi\n    done\n    printf '%s\\n' \"${odd_collatz[@]}\" | sort -n\n}\n\n### Perl version\n\nsub get_odd_collatz {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "pl",
    "prompt": "sub derivative {\n    my($xs) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20]) || $candidate->([3, 1, 2, 4, 5])==[1, 4, 12, 20]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 6]) || $candidate->([1, 2, 3])==[2, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[2, 2]) || $candidate->([3, 2, 1])==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16]) || $candidate->([3, 2, 1, 0, 4])==[2, 2, 0, 16]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),[]) || $candidate->([1])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n  xs=($1)\n  for ((i=1; i<${#xs[@]}; i++)); do\n    echo $((i * ${xs[i]}))\n  done\n}\n\n### Perl version\n\nsub derivative {\n    my($xs) = @_;\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "pl",
    "prompt": "sub fibfib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n        if(eq_deeply($candidate->(2),1) || $candidate->(2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),0) || $candidate->(1)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4) || $candidate->(5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24) || $candidate->(8)==24) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81) || $candidate->(10)==81) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274) || $candidate->(12)==274) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927) || $candidate->(14)==927) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1 ]]; then\n    echo 0\n  elif [[ $1 -eq 2 ]]; then\n    echo 1\n  else\n    echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n  fi\n}\n\n### Perl version\n\nsub fibfib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "pl",
    "prompt": "sub max_element {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n        if(eq_deeply($candidate->([1, 2, 3]),3) || $candidate->([1, 2, 3])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124) || $candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])==124) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n    l=($1)\n    m=${l[0]}\n    for e in ${l[@]}; do\n        if ((e > m)); then\n            m=$e\n        fi\n    done\n    echo $m\n}\n\n### Perl version\n\nsub max_element {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "pl",
    "prompt": "sub closest_integer {\n    my($value) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10) || $candidate->(\"10\")==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15) || $candidate->(\"14.5\")==15) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16) || $candidate->(\"-15.5\")==-16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15) || $candidate->(\"15.3\")==15) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0) || $candidate->(\"0\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nclosest_integer() {\n    # TODO: implement me\n    echo 0\n}\n\n### Perl version\n\nsub closest_integer {\n    my($value) = @_;\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "pl",
    "prompt": "sub sum_product {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n        if(eq_deeply($candidate->([]),[0, 1]) || $candidate->([])==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1]) || $candidate->([1, 1, 1])==[3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 0]),[100, 0]) || $candidate->([100, 0])==[100, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 7]),[15, 105]) || $candidate->([3, 5, 7])==[15, 105]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10, 10]) || $candidate->([10])==[10, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n    local sum=0\n    local prod=1\n    for n in $1; do\n        ((sum += n))\n        ((prod *= n))\n    done\n    echo \"$sum $prod\"\n}\n\n### Perl version\n\nsub sum_product {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "pl",
    "prompt": "sub select_words {\n    my($s, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"]) || $candidate->(\"Mary had a little lamb\", 4)==[\"little\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]) || $candidate->(\"Mary had a little lamb\", 3)==[\"Mary\", \"lamb\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]) || $candidate->(\"simple white space\", 2)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"]) || $candidate->(\"Hello world\", 4)==[\"world\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"]) || $candidate->(\"Uncle sam\", 3)==[\"Uncle\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\", 4),[]) || $candidate->(\"\", 4)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]) || $candidate->(\"a b c d e f\", 1)==[\"b\", \"c\", \"d\", \"f\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    s=$1\n    n=$2\n    result=()\n    for word in $s; do\n        n_consonants=$(echo $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [[ $n_consonants -eq $n ]]; then\n            result+=(\"$word\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\n### Perl version\n\nsub select_words {\n    my($s, $n) = @_;\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "pl",
    "prompt": "sub add_elements {\n    my($arr, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_elements;\n        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4) || $candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)==-4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0) || $candidate->([111, 121, 3, 4000, 5, 6], 2)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125) || $candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)==125) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24) || $candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)==24) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1], 1),1) || $candidate->([1], 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n  arr=($1)\n  k=$2\n  sum=0\n  for ((i=0; i<k; i++)); do\n    elem=${arr[$i]}\n    if (( ${#elem} <= 2 )); then\n      ((sum+=elem))\n    fi\n  done\n  echo $sum\n}\n\n### Perl version\n\nsub add_elements {\n    my($arr, $k) = @_;\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "pl",
    "prompt": "sub eat {\n    my($number, $need, $remaining) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n        if(eq_deeply($candidate->(5, 6, 10),[11, 4]) || $candidate->(5, 6, 10)==[11, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1]) || $candidate->(4, 8, 9)==[12, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 10, 10),[11, 0]) || $candidate->(1, 10, 10)==[11, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 11, 5),[7, 0]) || $candidate->(2, 11, 5)==[7, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2]) || $candidate->(4, 5, 7)==[9, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 1),[5, 0]) || $candidate->(4, 5, 1)==[5, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [[ $2 -le $3 ]]\n  then\n    echo $(( $1 + $2 )) $(( $3 - $2 ))\n  else\n    echo $(( $1 + $3 )) 0\n  fi\n}\n\n### Perl version\n\nsub eat {\n    my($number, $need, $remaining) = @_;\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "pl",
    "prompt": "sub next_smallest {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2) || $candidate->([1, 2, 3, 4, 5])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2) || $candidate->([5, 1, 4, 3, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef) || $candidate->([])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef) || $candidate->([1, 1])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1) || $candidate->([1, 1, 1, 1, 0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef) || $candidate->([1, 1])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35) || $candidate->([-35, 34, 12, -45])==-35) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnext_smallest() {\n    echo \"$1\" | tr ' ' '\\n' | sort -n | uniq | sed -n 2p\n}\n\n### Perl version\n\nsub next_smallest {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "pl",
    "prompt": "sub choose_num {\n    my($x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n        if(eq_deeply($candidate->(12, 15),14) || $candidate->(12, 15)==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1) || $candidate->(13, 12)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33, 12354),12354) || $candidate->(33, 12354)==12354) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5234, 5233),-1) || $candidate->(5234, 5233)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28) || $candidate->(6, 29)==28) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27, 10),-1) || $candidate->(27, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 7),-1) || $candidate->(7, 7)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546) || $candidate->(546, 546)==546) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $(($2 % 2)) -eq 0 ]; then\n        echo $2\n    elif [ $1 -eq $2 ]; then\n        echo -1\n    else\n        echo $(($2 - 1))\n    fi\n}\n\n### Perl version\n\nsub choose_num {\n    my($x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "pl",
    "prompt": "sub prime_length {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n        if(eq_deeply($candidate->(\"Hello\"),1) || $candidate->(\"Hello\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1) || $candidate->(\"abcdcba\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"kittens\"),1) || $candidate->(\"kittens\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"orange\"),\"\") || $candidate->(\"orange\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1) || $candidate->(\"wow\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"world\"),1) || $candidate->(\"world\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MadaM\"),1) || $candidate->(\"MadaM\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1) || $candidate->(\"Wow\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"HI\"),1) || $candidate->(\"HI\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1) || $candidate->(\"go\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gogo\"),\"\") || $candidate->(\"gogo\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\") || $candidate->(\"aaaaaaaaaaaaaaa\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"),1) || $candidate->(\"Madam\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"M\"),\"\") || $candidate->(\"M\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),\"\") || $candidate->(\"0\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n  l=${#1}\n  if [ $l -eq 0 ] || [ $l -eq 1 ]\n  then\n    echo \"false\"\n    return 1\n  fi\n  for (( i=2; i<$l; i++ ))\n  do\n    if [ $(( $l % $i )) -eq 0 ]\n    then\n      echo \"false\"\n      return 1\n    fi\n  done\n  echo \"true\"\n  return 0\n}\n\n### Perl version\n\nsub prime_length {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "pl",
    "prompt": "sub sum_to_n {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),21) || $candidate->(6)==21) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66) || $candidate->(11)==66) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465) || $candidate->(30)==465) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050) || $candidate->(100)==5050) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n  echo $(( $1 * ($1 + 1) / 2 ))\n}\n\n### Perl version\n\nsub sum_to_n {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "pl",
    "prompt": "sub fix_spaces {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fix_spaces;\n        if(eq_deeply($candidate->(\"Example\"),\"Example\") || $candidate->(\"Example\")==\"Example\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir Hanif \"),\"Mudasir_Hanif_\") || $candidate->(\"Mudasir Hanif \")==\"Mudasir_Hanif_\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\") || $candidate->(\"Yellow Yellow  Dirty  Fellow\")==\"Yellow_Yellow__Dirty__Fellow\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Exa   mple\"),\"Exa-mple\") || $candidate->(\"Exa   mple\")==\"Exa-mple\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\") || $candidate->(\"   Exa 1 2 2 mple\")==\"-Exa_1_2_2_mple\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfix_spaces() {\n    new_text=\"\"\n    i=0\n    start=0\n    end=0\n    while [ $i -lt ${#1} ]; do\n        if [ \"${1:$i:1}\" == \" \" ]; then\n            end=$((end+1))\n        else\n            if [ $((end-start)) -gt 2 ]; then\n                new_text+=\"-${1:$i:1}\"\n            elif [ $((end-start)) -gt 0 ]; then\n                new_text+=$(printf '_%.0s' $(seq 1 $((end-start))))${1:$i:1}\n            else\n                new_text+=\"${1:$i:1}\"\n            fi\n            start=$((i+1))\n            end=$((i+1))\n        fi\n        i=$((i+1))\n    done\n    if [ $((end-start)) -gt 2 ]; then\n        new_text+=\"-\"\n    elif [ $((end-start)) -gt 0 ]; then\n        new_text+=\"_\"\n    fi\n    echo $new_text\n}\n\n### Perl version\n\nsub fix_spaces {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "pl",
    "prompt": "sub rolling_max {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4]) || $candidate->([1, 2, 3, 4])==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4]) || $candidate->([4, 3, 2, 1])==[4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]) || $candidate->([3, 2, 3, 100, 3])==[3, 3, 3, 100, 100]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n    numbers=($1)\n    running_max=${numbers[0]}\n    result=()\n\n    for n in \"${numbers[@]}\"; do\n        if [[ $running_max -lt $n ]]; then\n            running_max=$n\n        fi\n        result+=($running_max)\n    done\n    echo \"${result[@]}\"\n}\n\n### Perl version\n\nsub rolling_max {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "pl",
    "prompt": "sub words_in_sentence {\n    my($sentence) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_in_sentence;\n        if(eq_deeply($candidate->(\"This is a test\"),\"is\") || $candidate->(\"This is a test\")==\"is\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lets go for swimming\"),\"go for\") || $candidate->(\"lets go for swimming\")==\"go for\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"there is no place available here\"),\"there is no place\") || $candidate->(\"there is no place available here\")==\"there is no place\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi I am Hussein\"),\"Hi am Hussein\") || $candidate->(\"Hi I am Hussein\")==\"Hi am Hussein\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go for it\"),\"go for it\") || $candidate->(\"go for it\")==\"go for it\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here\"),\"\") || $candidate->(\"here\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here is\"),\"is\") || $candidate->(\"here is\")==\"is\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n    new_lst=()\n    for word in $1; do\n        flg=0\n        if [[ ${#word} -eq 1 ]]; then\n            flg=1\n        fi\n        for (( i=2; i<${#word}; i++ )); do\n            if [[ ${#word}%i -eq 0 ]]; then\n                flg=1\n            fi\n        done\n        if [[ $flg -eq 0 || ${#word} -eq 2 ]]; then\n            new_lst+=($word)\n        fi\n    done\n    echo \"${new_lst[@]}\"\n}\n\n### Perl version\n\nsub words_in_sentence {\n    my($sentence) = @_;\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "pl",
    "prompt": "sub get_closest_vowel {\n    my($word) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\") || $candidate->(\"yogurt\")==\"u\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"),\"u\") || $candidate->(\"full\")==\"u\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"),\"\") || $candidate->(\"easy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\") || $candidate->(\"eAsy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\") || $candidate->(\"ali\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bad\"),\"a\") || $candidate->(\"bad\")==\"a\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\") || $candidate->(\"most\")==\"o\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\") || $candidate->(\"ab\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ba\"),\"\") || $candidate->(\"ba\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\") || $candidate->(\"quick\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\") || $candidate->(\"anime\")==\"i\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Asia\"),\"\") || $candidate->(\"Asia\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\") || $candidate->(\"Above\")==\"o\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nget_closest_vowel() {\n    word=$1\n    vowels=\"aeiouAEIOU\"\n    for (( i=${#word}-2; i>0; i-- )); do\n        if [[ $vowels == *\"${word:$i:1}\"* ]]; then\n            if [[ $vowels != *\"${word:$((i+1)):1}\"* ]] && [[ $vowels != *\"${word:$((i-1)):1}\"* ]]; then\n                echo \"${word:$i:1}\"\n                return\n            fi\n        fi\n    done\n    echo \"\"\n}\n\n### Perl version\n\nsub get_closest_vowel {\n    my($word) = @_;\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "pl",
    "prompt": "sub compare {\n    my($game, $guess) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]) || $candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])==[0, 0, 0, 0, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]) || $candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])==[0, 0, 0, 0, 0, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6]) || $candidate->([1, 2, 3], [-1, -2, -3])==[2, 4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]) || $candidate->([1, 2, 3, 5], [-1, 2, 3, 4])==[2, 0, 0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local game=($1)\n    local guess=($2)\n    local result=()\n    for ((i=0;i<${#game[@]};++i)); do\n        result+=($((${game[$i]}-${guess[$i]})))\n    done\n    echo ${result[@]}\n}\n\n### Perl version\n\nsub compare {\n    my($game, $guess) = @_;\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "pl",
    "prompt": "sub remove_duplicates {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4]) || $candidate->([1, 2, 3, 4])==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]) || $candidate->([1, 2, 3, 2, 4, 3, 5])==[1, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local arr=($1)\n    local c=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort | uniq -c | awk '{if ($1 == 1) print $2}'))\n    echo \"${c[@]}\"\n}\n\n### Perl version\n\nsub remove_duplicates {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "pl",
    "prompt": "sub same_chars {\n    my($s0, $s1) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&same_chars;\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),1) || $candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabc\"),1) || $candidate->(\"abcd\", \"dddddddabc\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dddddddabc\", \"abcd\"),1) || $candidate->(\"dddddddabc\", \"abcd\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcd\", \"dddddddabc\"),\"\") || $candidate->(\"eabcd\", \"dddddddabc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabcf\"),\"\") || $candidate->(\"abcd\", \"dddddddabcf\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\"\") || $candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\", \"aaccc\"),\"\") || $candidate->(\"aabb\", \"aaccc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n    if [[ $(echo $1 | grep -o . | sort | tr -d '\\n') == $(echo $2 | grep -o . | sort | tr -d '\\n') ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\n### Perl version\n\nsub same_chars {\n    my($s0, $s1) = @_;\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "pl",
    "prompt": "sub parse_nested_parens {\n    my($paren_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]) || $candidate->(\"(()()) ((())) () ((())()())\")==[2, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]) || $candidate->(\"() (()) ((())) (((())))\")==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4]) || $candidate->(\"(()(())((())))\")==[4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n  local IFS=' '\n  local -a arr=($1)\n  for x in \"${arr[@]}\"; do\n    if [[ -n \"$x\" ]]; then\n      depth=0\n      max_depth=0\n      for (( i=0; i<${#x}; i++ )); do\n        c=\"${x:i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n          depth=$((depth+1))\n          max_depth=$((depth>max_depth?depth:max_depth))\n        else\n          depth=$((depth-1))\n        fi\n      done\n      echo \"$max_depth\"\n    fi\n  done\n}\n\n### Perl version\n\nsub parse_nested_parens {\n    my($paren_string) = @_;\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "pl",
    "prompt": "sub even_odd_count {\n    my($num) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n        if(eq_deeply($candidate->(7),[0, 1]) || $candidate->(7)==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1]) || $candidate->(-78)==[1, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2, 2]) || $candidate->(3452)==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3, 3]) || $candidate->(346211)==[3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3, 3]) || $candidate->(-345821)==[3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1, 0]) || $candidate->(-2)==[1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2, 3]) || $candidate->(-45347)==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1, 0]) || $candidate->(0)==[1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n    even_count=0\n    odd_count=0\n    for i in $(echo ${1#-} | grep -o .); do\n        if (( $i % 2 == 0 )); then\n            (( even_count++ ))\n        else\n            (( odd_count++ ))\n        fi\n    done\n    echo \"$even_count $odd_count\"\n}\n\n### Perl version\n\nsub even_odd_count {\n    my($num) = @_;\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "pl",
    "prompt": "sub fruit_distribution {\n    my($s, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8) || $candidate->(\"5 apples and 6 oranges\", 19)==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 21),10) || $candidate->(\"5 apples and 6 oranges\", 21)==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2) || $candidate->(\"0 apples and 1 oranges\", 3)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 0 oranges\", 3),2) || $candidate->(\"1 apples and 0 oranges\", 3)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95) || $candidate->(\"2 apples and 3 oranges\", 100)==95) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 5),0) || $candidate->(\"2 apples and 3 oranges\", 5)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19) || $candidate->(\"1 apples and 100 oranges\", 120)==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n    echo $1 | tr ' ' '\\n' | grep -Eo '[0-9]+' | awk -v n=\"$2\" '{sum+=$1} END {print n-sum}'\n}\n\n### Perl version\n\nsub fruit_distribution {\n    my($s, $n) = @_;\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "pl",
    "prompt": "sub string_xor {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\") || $candidate->(\"111000\", \"101010\")==\"010010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"1\"),\"0\") || $candidate->(\"1\", \"1\")==\"0\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\") || $candidate->(\"0101\", \"0000\")==\"0101\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    a=$1\n    b=$2\n    result=\"\"\n    for ((i=0; i<${#a}; i++)); do\n        if [[ \"${a:$i:1}\" == \"${b:$i:1}\" ]]; then\n            result+=\"0\"\n        else\n            result+=\"1\"\n        fi\n    done\n    echo $result\n}\n\n### Perl version\n\nsub string_xor {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "pl",
    "prompt": "sub strlen {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1) || $candidate->(\"x\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdasnakj\"),9) || $candidate->(\"asdasnakj\")==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstrlen() {\n    echo ${#1}\n}\n\n### Perl version\n\nsub strlen {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "pl",
    "prompt": "sub string_sequence {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n        if(eq_deeply($candidate->(0),\"0\") || $candidate->(0)==\"0\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\") || $candidate->(3)==\"0 1 2 3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"0 1 2 3 4 5 6 7 8 9 10\") || $candidate->(10)==\"0 1 2 3 4 5 6 7 8 9 10\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n    echo $(seq 0 $1)\n}\n\n### Perl version\n\nsub string_sequence {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "pl",
    "prompt": "sub file_name_check {\n    my($file_name) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&file_name_check;\n        if(eq_deeply($candidate->(\"example.txt\"),\"Yes\") || $candidate->(\"example.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1example.dll\"),\"No\") || $candidate->(\"1example.dll\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s1sdf3.asd\"),\"No\") || $candidate->(\"s1sdf3.asd\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K.dll\"),\"Yes\") || $candidate->(\"K.dll\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MY16FILE3.exe\"),\"Yes\") || $candidate->(\"MY16FILE3.exe\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"His12FILE94.exe\"),\"No\") || $candidate->(\"His12FILE94.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_Y.txt\"),\"No\") || $candidate->(\"_Y.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"?aREYA.exe\"),\"No\") || $candidate->(\"?aREYA.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"/this_is_valid.dll\"),\"No\") || $candidate->(\"/this_is_valid.dll\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.wow\"),\"No\") || $candidate->(\"this_is_valid.wow\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txt\"),\"Yes\") || $candidate->(\"this_is_valid.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txtexe\"),\"No\") || $candidate->(\"this_is_valid.txtexe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#this2_i4s_5valid.ten\"),\"No\") || $candidate->(\"#this2_i4s_5valid.ten\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"@this1_is6_valid.exe\"),\"No\") || $candidate->(\"@this1_is6_valid.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_12valid.6exe4.txt\"),\"No\") || $candidate->(\"this_is_12valid.6exe4.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"all.exe.txt\"),\"No\") || $candidate->(\"all.exe.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_No.exe\"),\"Yes\") || $candidate->(\"I563_No.exe\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is3youfault.txt\"),\"Yes\") || $candidate->(\"Is3youfault.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"no_one#knows.dll\"),\"Yes\") || $candidate->(\"no_one#knows.dll\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1I563_Yes3.exe\"),\"No\") || $candidate->(\"1I563_Yes3.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_Yes3.txtt\"),\"No\") || $candidate->(\"I563_Yes3.txtt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final..txt\"),\"No\") || $candidate->(\"final..txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final132\"),\"No\") || $candidate->(\"final132\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_f4indsartal132.\"),\"No\") || $candidate->(\"_f4indsartal132.\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".txt\"),\"No\") || $candidate->(\".txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s.\"),\"No\") || $candidate->(\"s.\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfile_name_check() {\n    suf=(txt exe dll)\n    lst=(${1//./ })\n    if [ ${#lst[@]} -ne 2 ]; then\n        echo \"No\"\n        return\n    fi\n    if [[ ! \" ${suf[@]} \" =~ \" ${lst[1]} \" ]]; then\n        echo \"No\"\n        return\n    fi\n    if [ ${#lst[0]} -eq 0 ] || [[ ! ${lst[0]:0:1} =~ [a-zA-Z] ]]; then\n        echo \"No\"\n        return\n    fi\n    t=$(echo ${lst[0]} | grep -o '[0-9]' | wc -l)\n    if [ $t -gt 3 ]; then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"\n}\n\n### Perl version\n\nsub file_name_check {\n    my($file_name) = @_;\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "pl",
    "prompt": "sub can_arrange {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3) || $candidate->([1, 2, 4, 3, 5])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5]),-1) || $candidate->([1, 2, 4, 5])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2) || $candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4) || $candidate->([4, 8, 5, 7, 3])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),-1) || $candidate->([])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n  arr=($1)\n  ind=-1\n  i=1\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] < arr[i-1] )); then\n      ind=$i\n    fi\n    (( i++ ))\n  done\n  echo $ind\n}\n\n### Perl version\n\nsub can_arrange {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "pl",
    "prompt": "sub add {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88) || $candidate->([4, 88])==88) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122) || $candidate->([4, 5, 6, 7, 2, 122])==122) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0) || $candidate->([4, 0, 6, 7])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12) || $candidate->([4, 4, 6, 8])==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n    echo $1 | awk '{for(i=2;i<=NF;i+=2) if($i%2==0) sum+=$i} END {print sum}'\n}\n\n### Perl version\n\nsub add {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "pl",
    "prompt": "sub intersperse {\n    my($numbers, $delimeter) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersperse;\n        if(eq_deeply($candidate->([], 7),[]) || $candidate->([], 7)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]) || $candidate->([5, 6, 3, 2], 8)==[5, 8, 6, 8, 3, 8, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2]) || $candidate->([2, 2, 2], 2)==[2, 2, 2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n    if [ -z \"$1\" ]; then\n        return\n    fi\n\n    result=()\n\n    for n in ${1% *} ; do\n        result+=($n)\n        result+=($2)\n    done\n\n    result+=(${1##* })\n\n    echo \"${result[@]}\"\n}\n\n### Perl version\n\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "pl",
    "prompt": "sub match_parens {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\") || $candidate->([\"()(\", \")\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \")\"]),\"No\") || $candidate->([\")\", \")\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\") || $candidate->([\"(()(())\", \"())())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")())\", \"(()()(\"]),\"Yes\") || $candidate->([\")())\", \"(()()(\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\") || $candidate->([\"(())))\", \"(()())((\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"()\", \"())\"]),\"No\") || $candidate->([\"()\", \"())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\") || $candidate->([\"(()(\", \"()))()\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"((((\", \"((())\"]),\"No\") || $candidate->([\"((((\", \"((())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\") || $candidate->([\")(()\", \"(()(\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(\", \")(\"]),\"No\") || $candidate->([\")(\", \")(\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\") || $candidate->([\"(\", \")\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \"(\"]),\"Yes\") || $candidate->([\")\", \"(\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n    lst=($1)\n    S1=${lst[0]}${lst[1]}\n    S2=${lst[1]}${lst[0]}\n    if [[ $(echo $S1 | grep -o '(' | wc -l) -eq $(echo $S1 | grep -o ')' | wc -l) ]] || [[ $(echo $S2 | grep -o '(' | wc -l) -eq $(echo $S2 | grep -o ')' | wc -l) ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n### Perl version\n\nsub match_parens {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "pl",
    "prompt": "sub any_int {\n    my($x, $y, $z) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&any_int;\n        if(eq_deeply($candidate->(2, 3, 1),1) || $candidate->(2, 3, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.5, 2, 3),\"\") || $candidate->(2.5, 2, 3)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.5, 5, 3.5),\"\") || $candidate->(1.5, 5, 3.5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 2),\"\") || $candidate->(2, 6, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 2),1) || $candidate->(4, 2, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.2, 2.2, 2.2),\"\") || $candidate->(2.2, 2.2, 2.2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-4, 6, 2),1) || $candidate->(-4, 6, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 1, 1),1) || $candidate->(2, 1, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4, 7),1) || $candidate->(3, 4, 7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3.0, 4, 7),\"\") || $candidate->(3.0, 4, 7)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  if [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n    if (( $1 + $2 == $3 )) || (( $1 + $3 == $2 )) || (( $2 + $3 == $1 )); then\n      echo true\n    else\n      echo false\n    fi\n  else\n    echo false\n  fi\n}\n\n### Perl version\n\nsub any_int {\n    my($x, $y, $z) = @_;\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "pl",
    "prompt": "sub find_max {\n    my($words) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\") || $candidate->([\"name\", \"of\", \"string\"])==\"string\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\") || $candidate->([\"name\", \"enam\", \"game\"])==\"enam\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\") || $candidate->([\"aaaaaaa\", \"bb\", \"cc\"])==\"aaaaaaa\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\") || $candidate->([\"abc\", \"cba\"])==\"abc\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\") || $candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"])==\"footbott\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\") || $candidate->([\"we\", \"are\", \"gonna\", \"rock\"])==\"gonna\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\") || $candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"])==\"nation\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\") || $candidate->([\"this\", \"is\", \"a\", \"prrk\"])==\"this\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\") || $candidate->([\"b\"])==\"b\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\") || $candidate->([\"play\", \"play\", \"play\"])==\"play\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_max() {\n    echo $1 | tr ' ' '\\n' | sort -u | sort -rn | head -1\n}\n\n### Perl version\n\nsub find_max {\n    my($words) = @_;\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "pl",
    "prompt": "sub generate_integers {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&generate_integers;\n        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8]) || $candidate->(2, 10)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8]) || $candidate->(10, 2)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8]) || $candidate->(132, 2)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 89),[]) || $candidate->(17, 89)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n    lower=$(( $1 < $2 ? $1 : $2 ))\n    upper=$(( $1 > $2 ? $1 : $2 ))\n    lower=$(( $lower > 2 ? $lower : 2 ))\n    upper=$(( $upper < 8 ? $upper : 8 ))\n    for ((i=$lower; i<=$upper; i+=2)); do\n        echo $i\n    done\n}\n\n### Perl version\n\nsub generate_integers {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "pl",
    "prompt": "sub exchange {\n    my($lst1, $lst2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\") || $candidate->([1, 2, 3, 4], [1, 2, 3, 4])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\") || $candidate->([1, 2, 3, 4], [1, 5, 3, 4])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\") || $candidate->([1, 2, 3, 4], [2, 1, 4, 3])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),\"YES\") || $candidate->([5, 7, 3], [2, 6, 4])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\") || $candidate->([5, 7, 3], [2, 6, 3])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\") || $candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200, 200]),\"YES\") || $candidate->([100, 200], [200, 200])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    lst1=($1)\n    lst2=($2)\n    odd=0\n    even=0\n    for i in \"${lst1[@]}\"; do\n        if ((i%2 == 1)); then\n            odd=$((odd+1))\n        fi\n    done\n    for i in \"${lst2[@]}\"; do\n        if ((i%2 == 0)); then\n            even=$((even+1))\n        fi\n    done\n    if ((even >= odd)); then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi\n}\n\n### Perl version\n\nsub exchange {\n    my($lst1, $lst2) = @_;\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "pl",
    "prompt": "sub int_to_mini_roman {\n    my($number) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n        if(eq_deeply($candidate->(19),\"xix\") || $candidate->(19)==\"xix\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\") || $candidate->(152)==\"clii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"ccli\") || $candidate->(251)==\"ccli\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"cdxxvi\") || $candidate->(426)==\"cdxxvi\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(500),\"d\") || $candidate->(500)==\"d\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\") || $candidate->(1)==\"i\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"iv\") || $candidate->(4)==\"iv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"xliii\") || $candidate->(43)==\"xliii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"xc\") || $candidate->(90)==\"xc\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"xciv\") || $candidate->(94)==\"xciv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"dxxxii\") || $candidate->(532)==\"dxxxii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(900),\"cm\") || $candidate->(900)==\"cm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\") || $candidate->(994)==\"cmxciv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"m\") || $candidate->(1000)==\"m\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n    num=(1 4 5 9 10 40 50 90 100 400 500 900 1000)\n    sym=(\"I\" \"IV\" \"V\" \"IX\" \"X\" \"XL\" \"L\" \"XC\" \"C\" \"CD\" \"D\" \"CM\" \"M\")\n    i=12\n    res=\"\"\n    number=$1\n    while [ $number -ne 0 ]; do\n        div=$((number / num[i]))\n        number=$((number % num[i]))\n        while [ $div -ne 0 ]; do\n            res+=\"${sym[i]}\"\n            div=$((div - 1))\n        done\n        i=$((i - 1))\n    done\n    echo $res | tr '[:upper:]' '[:lower:]'\n}\n\n### Perl version\n\nsub int_to_mini_roman {\n    my($number) = @_;\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "pl",
    "prompt": "sub is_equal_to_sum_even {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_equal_to_sum_even;\n        if(eq_deeply($candidate->(4),\"\") || $candidate->(4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),\"\") || $candidate->(6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1) || $candidate->(8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),1) || $candidate->(10)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),\"\") || $candidate->(11)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),1) || $candidate->(12)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),\"\") || $candidate->(13)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16),1) || $candidate->(16)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n    if (( $1 % 2 == 0 && $1 >= 8 )); then\n        echo true\n    else\n        echo false\n    fi\n}\n\n### Perl version\n\nsub is_equal_to_sum_even {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "pl",
    "prompt": "sub decimal_to_binary {\n    my($decimal) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(0),\"db0db\") || $candidate->(0)==\"db0db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),\"db100000db\") || $candidate->(32)==\"db100000db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(103),\"db1100111db\") || $candidate->(103)==\"db1100111db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),\"db1111db\") || $candidate->(15)==\"db1111db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\n### Perl version\n\nsub decimal_to_binary {\n    my($decimal) = @_;\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "pl",
    "prompt": "sub sort_third {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_third;\n        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]) || $candidate->([5, 6, 3, 4, 8, 9, 2])==[2, 6, 3, 4, 8, 9, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]) || $candidate->([5, 8, 3, 4, 6, 9, 2])==[2, 8, 3, 4, 6, 9, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]) || $candidate->([5, 6, 9, 4, 8, 3, 2])==[2, 6, 9, 4, 8, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]) || $candidate->([5, 6, 3, 4, 8, 9, 2, 1])==[2, 6, 3, 4, 8, 9, 5, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_third() {\n    l=($1)\n    for (( i=2; i<${#l[@]}; i+=3 )); do\n        j=$((i-2))\n        while (( j>=0 && l[j+3]<l[j] )); do\n            tmp=${l[j]}\n            l[j]=${l[j+3]}\n            l[j+3]=$tmp\n            j=$((j-3))\n        done\n    done\n    echo \"${l[@]}\"\n}\n\n### Perl version\n\nsub sort_third {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "pl",
    "prompt": "sub simplify {\n    my($x, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1) || $candidate->(\"1/5\", \"5/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\", \"2/1\"),\"\") || $candidate->(\"1/6\", \"2/1\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1) || $candidate->(\"5/1\", \"3/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\", \"10/2\"),\"\") || $candidate->(\"7/10\", \"10/2\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1) || $candidate->(\"2/10\", \"50/10\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\", \"4/2\"),1) || $candidate->(\"7/2\", \"4/2\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1) || $candidate->(\"11/6\", \"6/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\", \"5/2\"),\"\") || $candidate->(\"2/3\", \"5/2\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\") || $candidate->(\"5/2\", \"3/5\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"8/4\"),1) || $candidate->(\"2/4\", \"8/4\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1) || $candidate->(\"2/4\", \"4/2\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1) || $candidate->(\"1/5\", \"5/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"1/5\"),\"\") || $candidate->(\"1/5\", \"1/5\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n    IFS=\"/\" read -ra x <<< \"$1\"\n    IFS=\"/\" read -ra n <<< \"$2\"\n    numerator=$(( ${x[0]} * ${n[0]} ))\n    denom=$(( ${x[1]} * ${n[1]} ))\n    if (( $numerator % $denom == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Perl version\n\nsub simplify {\n    my($x, $n) = @_;\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "pl",
    "prompt": "sub solve {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\") || $candidate->(\"AsDf\")==\"aSdF\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"),\"4321\") || $candidate->(\"1234\")==\"4321\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"AB\") || $candidate->(\"ab\")==\"AB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\") || $candidate->(\"#a@C\")==\"#A@c\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#AsdfW^45\"),\"#aSDFw^45\") || $candidate->(\"#AsdfW^45\")==\"#aSDFw^45\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\") || $candidate->(\"#6@2\")==\"2@6#\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#$a^D\"),\"#$A^d\") || $candidate->(\"#$a^D\")==\"#$A^d\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\") || $candidate->(\"#ccc\")==\"#CCC\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsolve() {\n    flg=0\n    idx=0\n    new_str=($1)\n    for i in $1; do\n        if [[ $i =~ [a-zA-Z] ]]; then\n            new_str[$idx]=$(echo $i | tr '[:upper:][:lower:]' '[:lower:][:upper:]')\n            flg=1\n        fi\n        ((idx++))\n    done\n    s=\"\"\n    for i in ${new_str[@]}; do\n        s+=$i\n    done\n    if [[ $flg -eq 0 ]]; then\n        echo $s | rev\n    else\n        echo $s\n    fi\n}\n\n### Perl version\n\nsub solve {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "pl",
    "prompt": "sub right_angle_triangle {\n    my($a, $b, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1) || $candidate->(3, 4, 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\") || $candidate->(1, 2, 3)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1) || $candidate->(10, 6, 8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\") || $candidate->(2, 2, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1) || $candidate->(7, 24, 25)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\") || $candidate->(10, 5, 7)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1) || $candidate->(5, 12, 13)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1) || $candidate->(15, 8, 17)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1) || $candidate->(48, 55, 73)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\") || $candidate->(1, 1, 1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\") || $candidate->(2, 2, 10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n    if [[ $(($1*$1)) -eq $(($2*$2+$3*$3)) || $(($2*$2)) -eq $(($1*$1+$3*$3)) || $(($3*$3)) -eq $(($1*$1+$2*$2)) ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Perl version\n\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "pl",
    "prompt": "sub compare_one {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare_one;\n        if(eq_deeply($candidate->(1, 2),2) || $candidate->(1, 2)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2.5),2.5) || $candidate->(1, 2.5)==2.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),3) || $candidate->(2, 3)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),6) || $candidate->(5, 6)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, \"2,3\"),\"2,3\") || $candidate->(1, \"2,3\")==\"2,3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5,1\", \"6\"),\"6\") || $candidate->(\"5,1\", \"6\")==\"6\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"2\"),\"2\") || $candidate->(\"1\", \"2\")==\"2\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", 1),undef) || $candidate->(\"1\", 1)==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    local a=$1\n    local b=$2\n    if [[ $a == *,* ]]; then\n        a=${a/,/.}\n    fi\n    if [[ $b == *,* ]]; then\n        b=${b/,/.}\n    fi\n    if (( $(echo \"$a > $b\" | bc -l) )); then\n        echo $a\n    elif (( $(echo \"$a < $b\" | bc -l) )); then\n        echo $b\n    else\n        echo \"None\"\n    fi\n}\n\n### Perl version\n\nsub compare_one {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "pl",
    "prompt": "sub below_zero {\n    my($operations) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n        if(eq_deeply($candidate->([]),\"\") || $candidate->([])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),\"\") || $candidate->([1, 2, -3, 1, 2, -3])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1) || $candidate->([1, 2, -4, 5, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),\"\") || $candidate->([1, -1, 2, -2, 5, -5, 4, -4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1) || $candidate->([1, -1, 2, -2, 5, -5, 4, -5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1) || $candidate->([1, -2, 2, -2, 5, -5, 4, -4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n    balance=0\n    for op in $1; do\n        ((balance+=op))\n        if [[ $balance -lt 0 ]]; then\n            echo true\n            return 0\n        fi\n    done\n    echo false\n}\n\n### Perl version\n\nsub below_zero {\n    my($operations) = @_;\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "pl",
    "prompt": "sub greatest_common_divisor {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&greatest_common_divisor;\n        if(eq_deeply($candidate->(3, 7),1) || $candidate->(3, 7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 15),5) || $candidate->(10, 15)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49, 14),7) || $candidate->(49, 14)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(144, 60),12) || $candidate->(144, 60)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n    a=$1\n    b=$2\n    while [[ $b -ne 0 ]]; do\n        tmp=$b\n        b=$((a%b))\n        a=$tmp\n    done\n    echo $a\n}\n\n### Perl version\n\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "pl",
    "prompt": "sub f {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15]) || $candidate->(5)==[1, 2, 6, 24, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28]) || $candidate->(7)==[1, 2, 6, 24, 15, 720, 28]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1]) || $candidate->(1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2, 6]) || $candidate->(3)==[1, 2, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n    ret=()\n    for ((i=1;i<=$1;i++)); do\n        if ((i%2==0)); then\n            x=1\n            for ((j=1;j<=i;j++)); do ((x*=j)); done\n            ret+=($x)\n        else\n            x=0\n            for ((j=1;j<=i;j++)); do ((x+=j)); done\n            ret+=($x)\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\n### Perl version\n\nsub f {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "pl",
    "prompt": "sub monotonic {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1) || $candidate->([1, 2, 4, 10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1) || $candidate->([1, 2, 4, 20])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\") || $candidate->([1, 20, 4, 10])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 0, -10]),1) || $candidate->([4, 1, 0, -10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1, 0]),1) || $candidate->([4, 1, 1, 0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\") || $candidate->([1, 2, 3, 2, 5, 60])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1) || $candidate->([1, 2, 3, 4, 5, 60])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1) || $candidate->([9, 9, 9, 9])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmonotonic() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local sorted_arr_reverse=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -nr))\n    if [[ \"${arr[*]}\" == \"${sorted_arr[*]}\" ]] || [[ \"${arr[*]}\" == \"${sorted_arr_reverse[*]}\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Perl version\n\nsub monotonic {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "pl",
    "prompt": "sub by_length {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]) || $candidate->([2, 1, 1, 4, 5, 8, 2, 3])==[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 55]),[\"One\"]) || $candidate->([1, -1, 55])==[\"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]) || $candidate->([1, -1, 3, 2])==[\"Three\", \"Two\", \"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]) || $candidate->([9, 4, 8])==[\"Nine\", \"Eight\", \"Four\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n    dic=( One Two Three Four Five Six Seven Eight Nine )\n    sorted_arr=($(echo \"$1\" | tr ' ' '\\n' | sort -nr))\n    new_arr=()\n    for var in \"${sorted_arr[@]}\"; do\n        if [[ $var -ge 1 && $var -le 9 ]]; then\n            new_arr+=(\"${dic[var-1]}\")\n        fi\n    done\n    echo \"${new_arr[@]}\"\n}\n\n### Perl version\n\nsub by_length {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "pl",
    "prompt": "sub remove_vowels {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"),\"bcdf\nghjklm\") || $candidate->(\"abcdef\nghijklm\")==\"bcdf\nghjklm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\") || $candidate->(\"fedcba\")==\"fdcb\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\") || $candidate->(\"eeeee\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"acBAA\"),\"cB\") || $candidate->(\"acBAA\")==\"cB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\") || $candidate->(\"EcBOO\")==\"cB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"),\"ybcd\") || $candidate->(\"ybcd\")==\"ybcd\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n  echo $1 | tr -d 'aeiouAEIOU'\n}\n\n### Perl version\n\nsub remove_vowels {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "pl",
    "prompt": "sub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n        if(eq_deeply($candidate->(\"apple\"),\"\") || $candidate->(\"apple\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1) || $candidate->(\"apple pi e\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\") || $candidate->(\"eeeee\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A\"),1) || $candidate->(\"A\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\") || $candidate->(\"Pumpkin pie \")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie 1\"),\"\") || $candidate->(\"Pumpkin pie 1\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\") || $candidate->(\"eeeee e \")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pie\"),\"\") || $candidate->(\"apple pie\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e \"),\"\") || $candidate->(\"apple pi e \")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  check=$(echo $1 | awk '{print $NF}')\n  if [[ ${#check} -eq 1 && $(printf '%d' \"'${check,,}\") -ge 97 && $(printf '%d' \"'${check,,}\") -le 122 ]]; then\n    echo true\n  else\n    echo false\n  fi\n}\n\n### Perl version\n\nsub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "pl",
    "prompt": "sub iscube {\n    my($a) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\") || $candidate->(2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1) || $candidate->(-1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1) || $candidate->(64)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\") || $candidate->(180)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1) || $candidate->(1000)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1) || $candidate->(0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\") || $candidate->(1729)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n    a=$(echo $1 | tr -d '-')\n    if [ $(echo \"scale=0; $a^(1/3)\" | bc) -eq $a ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Perl version\n\nsub iscube {\n    my($a) = @_;\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "pl",
    "prompt": "sub reverse_delete {\n    my($s, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"]) || $candidate->(\"abcde\", \"ae\")==[\"bcd\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\", \"b\"),[\"acdef\", \"\"]) || $candidate->(\"abcdef\", \"b\")==[\"acdef\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\", 1]) || $candidate->(\"abcdedcba\", \"ab\")==[\"cdedc\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dwik\", \"w\"),[\"dik\", \"\"]) || $candidate->(\"dwik\", \"w\")==[\"dik\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1]) || $candidate->(\"a\", \"a\")==[\"\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"\"),[\"abcdedcba\", 1]) || $candidate->(\"abcdedcba\", \"\")==[\"abcdedcba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"abcdedcba\", 1]) || $candidate->(\"abcdedcba\", \"v\")==[\"abcdedcba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1]) || $candidate->(\"vabba\", \"v\")==[\"abba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"mamma\", \"mia\"),[\"\", 1]) || $candidate->(\"mamma\", \"mia\")==[\"\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    s=$(echo $1 | tr -d $2)\n    if [ $s = $(echo $s | rev) ]; then\n        echo \"$s true\"\n    else\n        echo \"$s false\"\n    fi\n}\n\n### Perl version\n\nsub reverse_delete {\n    my($s, $c) = @_;\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "pl",
    "prompt": "sub correct_bracketing {\n    my($brackets) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1) || $candidate->(\"<>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1) || $candidate->(\"<<><>>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1) || $candidate->(\"<><><<><>><>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1) || $candidate->(\"<><><<<><><>><>><<><><<>>>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\") || $candidate->(\"<<<><>>>>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\") || $candidate->(\"><<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\") || $candidate->(\"<\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\") || $candidate->(\"<<<<\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\") || $candidate->(\">\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\") || $candidate->(\"<<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\") || $candidate->(\"<><><<><>><>><<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\") || $candidate->(\"<><><<><>><>>><>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n    depth=0\n    for (( i=0; i<${#1}; i++ )); do\n        b=${1:$i:1}\n        if [[ $b == \"<\" ]]; then\n            (( depth++ ))\n        else\n            (( depth-- ))\n        fi\n        if (( depth < 0 )); then\n            echo \"false\"\n            return\n        fi\n    done\n    if (( depth == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "pl",
    "prompt": "sub intersection {\n    my($interval1, $interval2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\") || $candidate->([1, 2], [2, 3])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1], [0, 4]),\"NO\") || $candidate->([-1, 1], [0, 4])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\") || $candidate->([-3, -1], [-5, 5])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, 2], [-4, 0]),\"YES\") || $candidate->([-2, 2], [-4, 0])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\") || $candidate->([-11, 2], [-1, -1])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 5]),\"NO\") || $candidate->([1, 2], [3, 5])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\") || $candidate->([1, 2], [1, 2])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -2], [-3, -2]),\"NO\") || $candidate->([-2, -2], [-3, -2])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    is_prime() {\n        if [ $1 -eq 1 ] || [ $1 -eq 0 ]; then\n            return 1\n        fi\n        if [ $1 -eq 2 ]; then\n            return 0\n        fi\n        for (( i=2; i<$1; i++ )); do\n            if [ $(( $1 % $i )) -eq 0 ]; then\n                return 1\n            fi\n        done\n        return 0\n    }\n\n    l=$(echo $1 | cut -d' ' -f1)\n    r=$(echo $2 | cut -d' ' -f2)\n    length=$(( $r - $l ))\n    if [ $length -gt 0 ] && is_prime $length; then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi\n}\n\n### Perl version\n\nsub intersection {\n    my($interval1, $interval2) = @_;\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "pl",
    "prompt": "sub hex_key {\n    my($num) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1) || $candidate->(\"AB\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2) || $candidate->(\"1077E\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4) || $candidate->(\"ABED1A33\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2) || $candidate->(\"2020\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6) || $candidate->(\"123456789ABCDEF0\")==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"),12) || $candidate->(\"112233445566778899AABBCCDDEEFF00\")==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n    primes=\"2357BD\"\n    total=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ $primes == *\"${1:i:1}\"* ]]; then\n            (( total++ ))\n        fi\n    done\n    echo $total\n}\n\n### Perl version\n\nsub hex_key {\n    my($num) = @_;\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "pl",
    "prompt": "sub strange_sort_list {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3]) || $candidate->([1, 2, 3, 4])==[1, 4, 2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]) || $candidate->([5, 6, 7, 8, 9])==[5, 9, 6, 8, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]) || $candidate->([1, 2, 3, 4, 5])==[1, 5, 2, 4, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]) || $candidate->([5, 6, 7, 8, 9, 1])==[1, 9, 5, 8, 6, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5]) || $candidate->([5, 5, 5, 5])==[5, 5, 5, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]) || $candidate->([1, 2, 3, 4, 5, 6, 7, 8])==[1, 8, 2, 7, 3, 6, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]) || $candidate->([0, 2, 2, 2, 5, 5, -5, -5])==[-5, 5, -5, 5, 0, 2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111]) || $candidate->([111111])==[111111]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local lst=$1\n    local res=()\n    local switch=true\n    while [ -n \"$lst\" ]; do\n        if $switch; then\n            res+=($(echo $lst | tr ' ' '\\n' | sort -n | head -n 1))\n        else\n            res+=($(echo $lst | tr ' ' '\\n' | sort -n | tail -n 1))\n        fi\n        lst=$(echo $lst | sed \"s/${res[-1]}//\")\n        switch=!$switch\n    done\n    echo \"${res[@]}\"\n}\n\n### Perl version\n\nsub strange_sort_list {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "pl",
    "prompt": "sub is_bored {\n    my($S) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_bored;\n        if(eq_deeply($candidate->(\"Hello world\"),0) || $candidate->(\"Hello world\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is the sky blue?\"),0) || $candidate->(\"Is the sky blue?\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I love It !\"),1) || $candidate->(\"I love It !\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bIt\"),0) || $candidate->(\"bIt\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I feel good today. I will be productive. will kill It\"),2) || $candidate->(\"I feel good today. I will be productive. will kill It\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You and I are going for a walk\"),0) || $candidate->(\"You and I are going for a walk\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n    # TODO: Implement this function.\n    echo 0\n}\n\n### Perl version\n\nsub is_bored {\n    my($S) = @_;\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "pl",
    "prompt": "sub all_prefixes {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]) || $candidate->(\"asdfgh\")==[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\", \"WW\", \"WWW\"]) || $candidate->(\"WWW\")==[\"W\", \"WW\", \"WWW\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nall_prefixes() {\n    result=()\n    for (( i=0; i<${#1}; i++ )); do\n        result+=(${1:0:i+1})\n    done\n    echo ${result[@]}\n}\n\n### Perl version\n\nsub all_prefixes {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "pl",
    "prompt": "sub how_many_times {\n    my($string, $substring) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&how_many_times;\n        if(eq_deeply($candidate->(\"\", \"x\"),0) || $candidate->(\"\", \"x\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyxyxyx\", \"x\"),4) || $candidate->(\"xyxyxyx\", \"x\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"cacacacac\", \"cac\"),4) || $candidate->(\"cacacacac\", \"cac\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"john doe\", \"john\"),1) || $candidate->(\"john doe\", \"john\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    times=0\n    for ((i=0; i<${#1}-${#2}+1; i++)); do\n        if [[ ${1:i:${#2}} == $2 ]]; then\n            ((times++))\n        fi\n    done\n    echo $times\n}\n\n### Perl version\n\nsub how_many_times {\n    my($string, $substring) = @_;\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "pl",
    "prompt": "sub solution {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n        if(eq_deeply($candidate->([5, 8, 7, 1]),12) || $candidate->([5, 8, 7, 1])==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9) || $candidate->([3, 3, 3, 3, 3])==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 24, 321]),0) || $candidate->([30, 13, 24, 321])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 9]),5) || $candidate->([5, 9])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0) || $candidate->([2, 4, 8])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 23, 32]),23) || $candidate->([30, 13, 23, 32])==23) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 13, 2, 9]),3) || $candidate->([3, 13, 2, 9])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n    echo $1 | tr ' ' '\\n' | awk '{if(NR%2==1&&$1%2==1)sum+=$1}END{print sum}'\n}\n\n### Perl version\n\nsub solution {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "pl",
    "prompt": "sub is_sorted {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n        if(eq_deeply($candidate->([5]),1) || $candidate->([5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1) || $candidate->([1, 2, 3, 4, 5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),\"\") || $candidate->([1, 3, 2, 4, 5])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1) || $candidate->([1, 2, 3, 4, 5, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1) || $candidate->([1, 2, 3, 4, 5, 6, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\") || $candidate->([1, 3, 2, 4, 5, 6, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1) || $candidate->([])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),\"\") || $candidate->([3, 2, 1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\") || $candidate->([1, 2, 2, 2, 3, 4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),\"\") || $candidate->([1, 2, 3, 3, 3, 4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1) || $candidate->([1, 2, 2, 3, 3, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),1) || $candidate->([1, 2, 3, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n    lst=($1)\n    declare -A count_digit\n    for i in \"${lst[@]}\"; do\n        ((count_digit[$i]++))\n    done\n    for i in \"${lst[@]}\"; do\n        if [[ ${count_digit[$i]} -gt 2 ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    for (( i=1; i<${#lst[@]}; i++ )); do\n        if [[ ${lst[i-1]} -gt ${lst[i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Perl version\n\nsub is_sorted {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "pl",
    "prompt": "sub search {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1) || $candidate->([5, 5, 5, 5, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4) || $candidate->([4, 1, 4, 1, 4, 4])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3]),-1) || $candidate->([3, 3])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8) || $candidate->([8, 8, 8, 8, 8, 8, 8, 8])==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2) || $candidate->([2, 3, 3, 2, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1) || $candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8, 2]),2) || $candidate->([3, 2, 8, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1) || $candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1) || $candidate->([8, 8, 3, 6, 5, 6, 4])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1) || $candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1) || $candidate->([1, 9, 10, 1, 3])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5) || $candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4) || $candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2) || $candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1) || $candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4) || $candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4) || $candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2) || $candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1) || $candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1) || $candidate->([10])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2) || $candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1) || $candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1) || $candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1) || $candidate->([3, 10, 10, 9, 2])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n    lst=($1)\n    frq=()\n    for i in ${lst[@]}; do\n        frq[$i]=$((frq[$i]+1))\n    done\n\n    ans=-1\n    for ((i=1; i<${#frq[@]}; i++)); do\n        if [[ ${frq[$i]} -ge $i ]]; then\n            ans=$i\n        fi\n    done\n\n    echo $ans\n}\n\n### Perl version\n\nsub search {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "pl",
    "prompt": "sub pluck {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n        if(eq_deeply($candidate->([4, 2, 3]),[2, 1]) || $candidate->([4, 2, 3])==[2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 1]) || $candidate->([1, 2, 3])==[2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1]) || $candidate->([5, 0, 3, 0, 4, 2])==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3]) || $candidate->([1, 2, 3, 0, 5, 3])==[0, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1]) || $candidate->([5, 4, 8, 4, 8])==[4, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1]) || $candidate->([7, 6, 7, 1])==[6, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 7, 1]),[]) || $candidate->([7, 9, 7, 1])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npluck() {\n    local arr=($1)\n    local evens=($(echo \"${arr[@]}\" | tr ' ' '\\n' | awk '{if($1%2==0) print $1}' | sort -n))\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"\"\n    else\n        echo \"${evens[0]} $(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -n \"${evens[0]}\" | cut -d':' -f1 | head -n1)\"\n    fi\n}\n\n### Perl version\n\nsub pluck {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "pl",
    "prompt": "sub pairs_sum_to_zero {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\") || $candidate->([1, 3, 5, 0])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),\"\") || $candidate->([1, 3, -2, 1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\") || $candidate->([1, 2, 3, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1) || $candidate->([2, 4, -5, 3, 5, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\") || $candidate->([1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1) || $candidate->([-3, 9, -1, 3, 2, 30])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1) || $candidate->([-3, 9, -1, 3, 2, 31])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),\"\") || $candidate->([-3, 9, -1, 4, 2, 30])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\") || $candidate->([-3, 9, -1, 4, 2, 31])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n    l=($1)\n    for ((i=0; i<${#l[@]}; i++)); do\n        for ((j=i+1; j<${#l[@]}; j++)); do\n            if ((l[i] + l[j] == 0)); then\n                echo true\n                return\n            fi\n        done\n    done\n    echo false\n}\n\n### Perl version\n\nsub pairs_sum_to_zero {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "pl",
    "prompt": "sub make_palindrome {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\") || $candidate->(\"x\")==\"x\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyz\"),\"xyzyx\") || $candidate->(\"xyz\")==\"xyzyx\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyx\"),\"xyx\") || $candidate->(\"xyx\")==\"xyx\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\") || $candidate->(\"jerry\")==\"jerryrrej\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nmake_palindrome() {\n    local string=$1\n    local beginning_of_suffix=0\n\n    while [[ ${string:$beginning_of_suffix} != $(echo ${string:$beginning_of_suffix} | rev) ]]; do\n        ((beginning_of_suffix++))\n    done\n\n    echo \"$string$(echo ${string:0:$beginning_of_suffix} | rev)\"\n}\n\n### Perl version\n\nsub make_palindrome {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "pl",
    "prompt": "sub starts_one_ends {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),18) || $candidate->(2)==18) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180) || $candidate->(3)==180) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800) || $candidate->(4)==1800) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000) || $candidate->(5)==18000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n    if [[ $1 -eq 1 ]]; then echo 1; return; fi\n    echo $(( 18 * (10 ** ($1 - 2)) ))\n}\n\n### Perl version\n\nsub starts_one_ends {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "pl",
    "prompt": "sub get_positive {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6]) || $candidate->([-1, -2, 4, 5, 6])==[4, 5, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]) || $candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])==[5, 3, 2, 3, 3, 9, 123, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2]),[]) || $candidate->([-1, -2])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n  echo $1 | tr ' ' '\\n' | awk '$1 > 0 {print $1}'\n}\n\n### Perl version\n\nsub get_positive {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "pl",
    "prompt": "sub concatenate {\n    my($strings) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate;\n        if(eq_deeply($candidate->([]),\"\") || $candidate->([])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"xyz\") || $candidate->([\"x\", \"y\", \"z\"])==\"xyz\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\") || $candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"])==\"xyzwk\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n    echo \"$1\" | tr -d ' '\n}\n\n### Perl version\n\nsub concatenate {\n    my($strings) = @_;\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "pl",
    "prompt": "sub is_nested {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n        if(eq_deeply($candidate->(\"[[]]\"),1) || $candidate->(\"[[]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"),\"\") || $candidate->(\"[]]]]]]][[[[[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][]\"),\"\") || $candidate->(\"[][]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]\"),\"\") || $candidate->(\"[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1) || $candidate->(\"[[[[]]]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]]]]]\"),\"\") || $candidate->(\"[]]]]]]]]]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1) || $candidate->(\"[][][[]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"),\"\") || $candidate->(\"[[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]\"),\"\") || $candidate->(\"[]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]][[\"),1) || $candidate->(\"[[]][[\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1) || $candidate->(\"[[][]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\") || $candidate->(\"[[[[[[[[\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\") || $candidate->(\"]]]]]]]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_nested() {\n    string=$1\n    opening_bracket_index=()\n    closing_bracket_index=()\n    for (( i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} == \"[\" ]]; then\n            opening_bracket_index+=($i)\n        else\n            closing_bracket_index+=($i)\n        fi\n    done\n    closing_bracket_index=($(echo \"${closing_bracket_index[@]}\" | tr ' ' '\\n' | tac | tr '\\n' ' '))\n    cnt=0\n    i=0\n    l=${#closing_bracket_index[@]}\n    for idx in ${opening_bracket_index[@]}; do\n        if [[ $i -lt $l && $idx -lt ${closing_bracket_index[$i]} ]]; then\n            cnt=$((cnt+1))\n            i=$((i+1))\n        fi\n    done\n    [[ $cnt -ge 2 ]] && echo true || echo false\n}\n\n### Perl version\n\nsub is_nested {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "pl",
    "prompt": "sub is_palindrome {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n        if(eq_deeply($candidate->(\"\"),1) || $candidate->(\"\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1) || $candidate->(\"aba\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaa\"),1) || $candidate->(\"aaaaa\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zbcd\"),\"\") || $candidate->(\"zbcd\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1) || $candidate->(\"xywyx\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyz\"),\"\") || $candidate->(\"xywyz\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywzx\"),\"\") || $candidate->(\"xywzx\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n    text=$1\n    for (( i=0; i<${#text}; i++ )); do\n        if [[ ${text:i:1} != ${text: -1 -i:1} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Perl version\n\nsub is_palindrome {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "pl",
    "prompt": "sub count_nums {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_nums;\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 0]),0) || $candidate->([-1, -2, 0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 2, -2, 3, 4, 5]),6) || $candidate->([1, 1, 2, -2, 3, 4, 5])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5) || $candidate->([1, 6, 9, -6, 0, 1, 5])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 100, 98, -7, 1, -1]),4) || $candidate->([1, 100, 98, -7, 1, -1])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5) || $candidate->([12, 23, 34, -45, -56, 0])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1) || $candidate->([0, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncount_nums() {\n    local arr=($1)\n    local count=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n            local digits_sum=$(echo $i | sed 's/./&+/g' | sed 's/.$//' | bc)\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Perl version\n\nsub count_nums {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "pl",
    "prompt": "sub factorize {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n        if(eq_deeply($candidate->(2),[2]) || $candidate->(2)==[2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2]) || $candidate->(4)==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2, 2, 2]) || $candidate->(8)==[2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3, 19]) || $candidate->(57)==[3, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3, 3, 19, 19]) || $candidate->(3249)==[3, 3, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19]) || $candidate->(185193)==[3, 3, 3, 19, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3, 19, 19, 19]) || $candidate->(20577)==[3, 19, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 3]) || $candidate->(18)==[2, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n    n=$1\n    fact=()\n    i=2\n    while [[ $i -le $((n/2+1)) ]]; do\n        if [[ $((n%i)) -eq 0 ]]; then\n            fact+=($i)\n            n=$((n/i))\n        else\n            ((i++))\n        fi\n    done\n    if [[ $n -gt 1 ]]; then\n        fact+=($n)\n    fi\n    echo \"${fact[@]}\"\n}\n\n### Perl version\n\nsub factorize {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "pl",
    "prompt": "sub largest_prime_factor {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5) || $candidate->(15)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3) || $candidate->(27)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7) || $candidate->(63)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11) || $candidate->(330)==11) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29) || $candidate->(13195)==29) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n    largest=1\n    for ((j=2; j<=$1; j++)); do\n        if (( $1 % $j == 0 )) && is_prime $j; then\n            largest=$(( $largest > $j ? $largest : $j ))\n        fi\n    done\n    echo $largest\n}\n\nis_prime() {\n    if (( $1 < 2 )); then\n        return 1\n    fi\n    for ((i=2; i<$1; i++)); do\n        if (( $1 % $i == 0 )); then\n            return 1\n        fi\n    done\n    return 0\n}\n\n### Perl version\n\nsub largest_prime_factor {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "pl",
    "prompt": "sub get_max_triples {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n        if(eq_deeply($candidate->(5),1) || $candidate->(5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),4) || $candidate->(6)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36) || $candidate->(10)==36) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361) || $candidate->(100)==53361) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n    n=$1\n    ans=0\n    for (( i=1; i<n; i++ )); do\n        for (( j=i+1; j<n; j++ )); do\n            for (( k=j+1; k<=n; k++ )); do\n                if (( (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 )); then\n                    (( ans++ ))\n                fi\n            done\n        done\n    done\n    echo \"$ans\"\n}\n\n### Perl version\n\nsub get_max_triples {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "pl",
    "prompt": "sub anti_shuffle {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&anti_shuffle;\n        if(eq_deeply($candidate->(\"Hi\"),\"Hi\") || $candidate->(\"Hi\")==\"Hi\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hello\"),\"ehllo\") || $candidate->(\"hello\")==\"ehllo\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"number\"),\"bemnru\") || $candidate->(\"number\")==\"bemnru\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),\"abcd\") || $candidate->(\"abcd\")==\"abcd\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello World!!!\"),\"Hello !!!Wdlor\") || $candidate->(\"Hello World!!!\")==\"Hello !!!Wdlor\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\") || $candidate->(\"Hi. My name is Mister Robot. How are you?\")==\".Hi My aemn is Meirst .Rboot How aer ?ouy\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nanti_shuffle() {\n  echo \"$1\" | tr ' ' '\\n' | while read word; do\n    echo \"$word\" | grep -o . | sort | tr -d '\\n'\n    echo -n ' '\n  done | sed 's/ $//'\n}\n\n### Perl version\n\nsub anti_shuffle {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "pl",
    "prompt": "sub solve {\n    my($N) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(1000),\"1\") || $candidate->(1000)==\"1\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(150),\"110\") || $candidate->(150)==\"110\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(147),\"1100\") || $candidate->(147)==\"1100\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(333),\"1001\") || $candidate->(333)==\"1001\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(963),\"10010\") || $candidate->(963)==\"10010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n    echo \"obase=2; $(echo $1 | sed 's/./&+/g; s/.$//')\" | bc\n}\n\n### Perl version\n\nsub solve {\n    my($N) = @_;\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "pl",
    "prompt": "sub minPath {\n    my($grid, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]) || $candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)==[1, 2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]) || $candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]) || $candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)==[1, 2, 1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]) || $candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)==[1, 10, 1, 10, 1, 10, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]) || $candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)==[1, 7, 1, 7, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]) || $candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)==[1, 6, 1, 6, 1, 6, 1, 6, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]) || $candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)==[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]) || $candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)==[1, 3, 1, 3, 1, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]) || $candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)==[1, 5, 1, 5, 1, 5, 1, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) || $candidate->([[1, 2], [3, 4]], 10)==[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) || $candidate->([[1, 3], [3, 2]], 10)==[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=($(echo \"$1\" | tr ' ' '\\n'))\n    local k=$2\n    local n=${#grid[@]}\n    local val=$((n * n + 1))\n    for (( i=0; i<$n; i++ )); do\n        for (( j=0; j<$n; j++ )); do\n            if [[ ${grid[$i]:$j:1} -eq 1 ]]; then\n                temp=()\n                if [[ $i -ne 0 ]]; then\n                    temp+=(${grid[$((i-1))]:$j:1})\n                fi\n                if [[ $j -ne 0 ]]; then\n                    temp+=(${grid[$i]:$((j-1)):1})\n                fi\n                if [[ $i -ne $((n-1)) ]]; then\n                    temp+=(${grid[$((i+1))]:$j:1})\n                fi\n                if [[ $j -ne $((n-1)) ]]; then\n                    temp+=(${grid[$i]:$((j+1)):1})\n                fi\n                val=$(echo \"${temp[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n            fi\n        done\n    done\n    ans=()\n    for (( i=0; i<$k; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            ans+=(\"1\")\n        else\n            ans+=(\"$val\")\n        fi\n    done\n    echo \"${ans[@]}\"\n}\n\n### Perl version\n\nsub minPath {\n    my($grid, $k) = @_;\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "pl",
    "prompt": "sub encrypt {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n        if(eq_deeply($candidate->(\"hi\"),\"lm\") || $candidate->(\"hi\")==\"lm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"ewhjklnop\") || $candidate->(\"asdfghjkl\")==\"ewhjklnop\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gf\"),\"kj\") || $candidate->(\"gf\")==\"kj\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\") || $candidate->(\"et\")==\"ix\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"faewfawefaewg\"),\"jeiajeaijeiak\") || $candidate->(\"faewfawefaewg\")==\"jeiajeaijeiak\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\") || $candidate->(\"hellomyfriend\")==\"lippsqcjvmirh\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") || $candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),\"e\") || $candidate->(\"a\")==\"e\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nencrypt() {\n    d='abcdefghijklmnopqrstuvwxyz'\n    out=''\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $d == *\"$c\"* ]]; then\n            out+=\"${d:(( ${d%%$c*} + 4 ) % 26 ):1}\"\n        else\n            out+=\"$c\"\n        fi\n    done\n    echo \"$out\"\n}\n\n### Perl version\n\nsub encrypt {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "pl",
    "prompt": "sub make_a_pile {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n        if(eq_deeply($candidate->(3),[3, 5, 7]) || $candidate->(3)==[3, 5, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10]) || $candidate->(4)==[4, 6, 8, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13]) || $candidate->(5)==[5, 7, 9, 11, 13]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16]) || $candidate->(6)==[6, 8, 10, 12, 14, 16]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22]) || $candidate->(8)==[8, 10, 12, 14, 16, 18, 20, 22]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n    n=$1\n    for (( i=0; i<$n; i++ )); do\n        (( pile[i]=n+2*i ))\n    done\n    echo \"${pile[@]}\"\n}\n\n### Perl version\n\nsub make_a_pile {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "pl",
    "prompt": "sub is_prime {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n        if(eq_deeply($candidate->(6),\"\") || $candidate->(6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),1) || $candidate->(101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1) || $candidate->(11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1) || $candidate->(13441)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1) || $candidate->(61)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\") || $candidate->(4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\") || $candidate->(1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1) || $candidate->(5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1) || $candidate->(11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1) || $candidate->(17)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\") || $candidate->(85)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\") || $candidate->(77)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\") || $candidate->(255379)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n    if [ $1 -lt 2 ]; then\n        echo \"false\"\n        return\n    fi\n    for (( k=2; k<$1; k++ )); do\n        if [ $(( $1 % $k )) -eq 0 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Perl version\n\nsub is_prime {\n    my($n) = @_;\n"
  }
]