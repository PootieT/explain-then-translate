[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "rs",
    "prompt": "fn correct_bracketing(brackets: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n  let depth = 0;\n  for (let b of brackets) {\n    if (b === \"(\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n}\n\n### Rust version\n\nfn correct_bracketing(brackets: String) -> bool {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "rs",
    "prompt": "fn triangle_area(a: isize, h: isize) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction triangle_area(a: number, h: number): number {\n  return a * h / 2;\n}\n\n### Rust version\n\nfn triangle_area(a: isize, h: isize) -> f64 {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "rs",
    "prompt": "fn special_factorial(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction special_factorial(n: number): number {\n  let fact_i = 1;\n  let special_fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact_i *= i;\n    special_fact *= fact_i;\n  }\n  return special_fact;\n}\n\n### Rust version\n\nfn special_factorial(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "rs",
    "prompt": "fn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]), (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]), (Some(-3), Some(1)));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  const smallest = lst.filter(x => x < 0)\n  const largest = lst.filter(x => x > 0)\n  return [smallest.length ? Math.max(...smallest) : undefined, largest.length ? Math.min(...largest) : undefined]\n}\n\n### Rust version\n\nfn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>) {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "rs",
    "prompt": "fn move_one_ball(arr: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = move_one_ball;\n    assert_eq!(candidate(vec![3, 4, 5, 1, 2]), true);\n    assert_eq!(candidate(vec![3, 5, 10, 1, 2]), true);\n    assert_eq!(candidate(vec![4, 3, 1, 2]), false);\n    assert_eq!(candidate(vec![3, 5, 4, 1, 2]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction move_one_ball(arr: number[]): boolean {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted_array = [...arr].sort((a, b) => a - b);\n  const min_value = Math.min(...arr);\n  const min_index = arr.indexOf(min_value);\n  const my_arr = [...arr.slice(min_index), ...arr.slice(0, min_index)];\n  return my_arr.every((val, idx) => val === sorted_array[idx]);\n}\n\n### Rust version\n\nfn move_one_ball(arr: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "rs",
    "prompt": "fn digits(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction digits(n: number): number {\n  let product = 1;\n  let odd_count = 0;\n  for (const digit of String(n)) {\n    const int_digit = Number(digit);\n    if (int_digit % 2 === 1) {\n      product *= int_digit;\n      odd_count += 1;\n    }\n  }\n  return odd_count === 0 ? 0 : product;\n}\n\n### Rust version\n\nfn digits(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "rs",
    "prompt": "fn fib4(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction fib4(n: number): number {\n  const results = [0, 0, 2, 0];\n  if (n < 4) {\n    return results[n];\n  }\n\n  for (let i = 4; i <= n; i++) {\n    results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);\n    results.shift();\n  }\n\n  return results[results.length - 1];\n}\n\n### Rust version\n\nfn fib4(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "rs",
    "prompt": "fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction order_by_points(nums: number[]): number[] {\n  function digits_sum(n: number): number {\n    const neg = n < 0 ? -1 : 1;\n    n = Math.abs(n);\n    const digits = Array.from(String(n), Number);\n    digits[0] *= neg;\n    return digits.reduce((acc, cur) => acc + cur, 0);\n  }\n  return nums.sort((a, b) => digits_sum(a) - digits_sum(b));\n}\n\n### Rust version\n\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "rs",
    "prompt": "fn is_happy(s: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n  }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i+1] || s[i+1] === s[i+2] || s[i] === s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Rust version\n\nfn is_happy(s: String) -> bool {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "rs",
    "prompt": "fn circular_shift(x: isize, shift: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction circular_shift(x: number, shift: number): string {\n  const s = String(x);\n  if (shift > s.length) {\n    return s.split('').reverse().join('');\n  } else {\n    return s.slice(s.length - shift) + s.slice(0, s.length - shift);\n  }\n}\n\n### Rust version\n\nfn circular_shift(x: isize, shift: isize) -> String {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "rs",
    "prompt": "fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction max_fill(grid: number[][], capacity: number): number {\n  return grid.reduce((acc, cur) => acc + Math.ceil(cur.reduce((a, b) => a + b) / capacity), 0);\n}\n\n### Rust version\n\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "rs",
    "prompt": "fn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n  for (let idx = 0; idx < numbers.length; idx++) {\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        const distance = Math.abs(numbers[idx] - numbers[idx2]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\n### Rust version\n\nfn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "rs",
    "prompt": "fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const letter_grade = [];\n  for (const gpa of grades) {\n    if (gpa === 4.0) {\n      letter_grade.push('A+');\n    } else if (gpa > 3.7) {\n      letter_grade.push('A');\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-');\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+');\n    } else if (gpa > 2.7) {\n      letter_grade.push('B');\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-');\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+');\n    } else if (gpa > 1.7) {\n      letter_grade.push('C');\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-');\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+');\n    } else if (gpa > 0.7) {\n      letter_grade.push('D');\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-');\n    } else {\n      letter_grade.push('E');\n    }\n  }\n  return letter_grade;\n}\n\n### Rust version\n\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "rs",
    "prompt": "fn x_or_y(n: isize, x: isize, y: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = x_or_y;\n    assert_eq!(candidate(7, 34, 12), 34);\n    assert_eq!(candidate(15, 8, 5), 5);\n    assert_eq!(candidate(3, 33, 5212), 33);\n    assert_eq!(candidate(1259, 3, 52), 3);\n    assert_eq!(candidate(7919, -1, 12), -1);\n    assert_eq!(candidate(3609, 1245, 583), 583);\n    assert_eq!(candidate(91, 56, 129), 129);\n    assert_eq!(candidate(6, 34, 1234), 1234);\n    assert_eq!(candidate(1, 2, 0), 0);\n    assert_eq!(candidate(2, 2, 0), 2);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction x_or_y(n: number, x: number, y: number): number {\n  if (n === 1) {\n    return y;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return y;\n    }\n  }\n  return x;\n}\n\n### Rust version\n\nfn x_or_y(n: isize, x: isize, y: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "rs",
    "prompt": "fn specialFilter(nums: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction specialFilter(nums: number[]): number {\n  let count = 0;\n  for (const num of nums) {\n    if (num > 10) {\n      const odd_digits = new Set([1, 3, 5, 7, 9]);\n      const number_as_string = String(num);\n      if (odd_digits.has(Number(number_as_string[0])) && odd_digits.has(Number(number_as_string[number_as_string.length - 1]))) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n### Rust version\n\nfn specialFilter(nums: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "rs",
    "prompt": "fn parse_music(music_string: String) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction parse_music(music_string: string): number[] {\n    const note_map = {'o': 4, 'o|': 2, '.|': 1};\n    return music_string.split(' ').filter(x => x).map(x => note_map[x]);\n}\n\n### Rust version\n\nfn parse_music(music_string: String) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "rs",
    "prompt": "fn count_distinct_characters(string: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction count_distinct_characters(string: string): number {\n  return new Set(string.toLowerCase()).size;\n}\n\n### Rust version\n\nfn count_distinct_characters(string: String) -> isize {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "rs",
    "prompt": "fn digitSum(s: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction digitSum(s: string): number {\n  if (s === \"\") return 0;\n  return s.split(\"\").reduce((acc, cur) => {\n    if (cur.match(/[A-Z]/)) {\n      acc += cur.charCodeAt(0);\n    }\n    return acc;\n  }, 0);\n}\n\n### Rust version\n\nfn digitSum(s: String) -> isize {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "rs",
    "prompt": "fn sum_squares(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n  const result =[];\n  for (let i = 0; i < lst.length; i++) {\n    if (i %3 === 0) {\n      result.push(lst[i]**2);\n    } else if (i % 4 === 0 && i%3 !== 0) {\n      result.push(lst[i]**3);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result.reduce((a, b) => a + b, 0);\n}\n\n### Rust version\n\nfn sum_squares(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "rs",
    "prompt": "fn count_up_to(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = count_up_to;\n    assert_eq!(candidate(5), vec![2, 3]);\n    assert_eq!(candidate(6), vec![2, 3, 5]);\n    assert_eq!(candidate(7), vec![2, 3, 5]);\n    assert_eq!(candidate(10), vec![2, 3, 5, 7]);\n    assert_eq!(candidate(0), Vec::<isize>::new());\n    assert_eq!(candidate(22), vec![2, 3, 5, 7, 11, 13, 17, 19]);\n    assert_eq!(candidate(1), Vec::<isize>::new());\n    assert_eq!(candidate(18), vec![2, 3, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(47), vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n    assert_eq!(candidate(101), vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction count_up_to(n: number): number[] {\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    let is_prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\n### Rust version\n\nfn count_up_to(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "rs",
    "prompt": "fn sum_squares(lst: Vec<f64>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]), 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n  let squared = 0;\n  for (let i of lst) {\n    squared += Math.ceil(i) ** 2;\n  }\n  return squared;\n}\n\n### Rust version\n\nfn sum_squares(lst: Vec<f64>) -> isize {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "rs",
    "prompt": "fn unique(l: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction unique(l: number[]): number[] {\n  return [...new Set(l)].sort((a, b) => a - b);\n}\n\n### Rust version\n\nfn unique(l: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "rs",
    "prompt": "fn fib(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction fib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\n### Rust version\n\nfn fib(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "rs",
    "prompt": "fn fizz_buzz(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction fizz_buzz(n: number): number {\n  const ns = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      ns.push(i);\n    }\n  }\n  const s = ns.join('');\n  let ans = 0;\n  for (const c of s) {\n    ans += c === '7' ? 1 : 0;\n  }\n  return ans;\n}\n\n### Rust version\n\nfn fizz_buzz(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "rs",
    "prompt": "fn Strongest_Extension(class_name: String, extensions: Vec<String>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"__YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]), String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"), vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"-_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]), String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"_\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n    let strong = extensions[0];\n    let my_val = extensions[0].replace(/[^A-Z]/g, \"\").length - extensions[0].replace(/[^a-z]/g, \"\").length;\n    for (let s of extensions) {\n        const val = s.replace(/[^A-Z]/g, \"\").length - s.replace(/[^a-z]/g, \"\").length;\n        if (val > my_val) {\n            strong = s;\n            my_val = val;\n        }\n    }\n\n    const ans = `${class_name}.${strong}`;\n    return ans;\n}\n\n### Rust version\n\nfn Strongest_Extension(class_name: String, extensions: Vec<String>) -> String {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "rs",
    "prompt": "fn find_closest_elements(numbers: Vec<f64>) -> (f64, f64) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = find_closest_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2]), (3.9, 4.0));\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0]), (5.0, 5.9));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2]), (2.0, 2.2));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0]), (2.0, 2.0));\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1]), (2.2, 3.1));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let closest_pair: [number, number] | null = null;\n  let distance: number | null = null;\n\n  for (let idx = 0; idx < numbers.length; idx++) {\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        const elem = numbers[idx];\n        const elem2 = numbers[idx2];\n        if (distance === null) {\n          distance = Math.abs(elem - elem2);\n          closest_pair = [Math.min(elem, elem2), Math.max(elem, elem2)];\n        } else {\n          const new_distance = Math.abs(elem - elem2);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(elem, elem2), Math.max(elem, elem2)];\n          }\n        }\n      }\n    }\n  }\n\n  return closest_pair as [number, number];\n}\n\n### Rust version\n\nfn find_closest_elements(numbers: Vec<f64>) -> (f64, f64) {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "rs",
    "prompt": "fn valid_date(date: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction valid_date(date: string): boolean {\n  try {\n    const [month, day, year] = date.split('-').map(Number);\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    if (\n      [1, 3, 5, 7, 8, 10, 12].includes(month) &&\n      (day < 1 || day > 31)\n    ) {\n      return false;\n    }\n    if ([4, 6, 9, 11].includes(month) && (day < 1 || day > 30)) {\n      return false;\n    }\n    if (month === 2 && (day < 1 || day > 29)) {\n      return false;\n    }\n  } catch {\n    return false;\n  }\n  return true;\n}\n\n### Rust version\n\nfn valid_date(date: String) -> bool {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "rs",
    "prompt": "fn add(x: isize, y: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n\n### Rust version\n\nfn add(x: isize, y: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "rs",
    "prompt": "fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction triples_sum_to_zero(l: number[]): boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n### Rust version\n\nfn triples_sum_to_zero(l: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "rs",
    "prompt": "fn largest_divisor(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction largest_divisor(n: number): number {\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}\n\n### Rust version\n\nfn largest_divisor(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "rs",
    "prompt": "fn sort_numbers(numbers: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sort_numbers(numbers: string): string {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').filter(x => x).sort((a, b) => value_map[a] - value_map[b]).join(' ');\n}\n\n### Rust version\n\nfn sort_numbers(numbers: String) -> String {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "rs",
    "prompt": "fn smallest_change(arr: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction smallest_change(arr: number[]): number {\n  let ans = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !== arr[arr.length - i - 1]) {\n      ans += 1;\n    }\n  }\n  return ans;\n}\n\n### Rust version\n\nfn smallest_change(arr: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "rs",
    "prompt": "fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction below_threshold(l: number[], t: number): boolean {\n  return l.every((e) => e < t);\n}\n\n### Rust version\n\nfn below_threshold(l: Vec<isize>, t: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "rs",
    "prompt": "fn prod_signs(arr: Vec<isize>) -> Option<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction prod_signs(arr: number[]): number | undefined {\n  if (!arr.length) return undefined;\n  const prod = arr.includes(0) ? 0 : (-1) ** arr.filter(x => x < 0).length;\n  return prod * arr.map(Math.abs).reduce((a, b) => a + b);\n}\n\n### Rust version\n\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "rs",
    "prompt": "fn modp(n: isize, p: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!(candidate(3, 5), 3);\n    assert_eq!(candidate(1101, 101), 2);\n    assert_eq!(candidate(0, 101), 1);\n    assert_eq!(candidate(3, 11), 8);\n    assert_eq!(candidate(100, 101), 1);\n    assert_eq!(candidate(30, 5), 4);\n    assert_eq!(candidate(31, 5), 3);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction modp(n: number, p: number): number {\n  let ret = 1;\n  for (let i = 0; i < n; i++) {\n    ret = (2 * ret) % p;\n  }\n  return ret;\n}\n\n### Rust version\n\nfn modp(n: isize, p: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "rs",
    "prompt": "fn count_upper(s: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction count_upper(s: string): number {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].match(/[AEIOU]/)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n### Rust version\n\nfn count_upper(s: String) -> isize {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "rs",
    "prompt": "fn multiply(a: isize, b: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction multiply(a: number, b: number): number {\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n\n### Rust version\n\nfn multiply(a: isize, b: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "rs",
    "prompt": "fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction unique_digits(x: number[]): number[] {\n  const odd_digit_elements: number[] = [];\n  for (const i of x) {\n    if (String(i).split(\"\").every((c) => Number(c) % 2 === 1)) {\n      odd_digit_elements.push(i);\n    }\n  }\n  return odd_digit_elements.sort((a, b) => a - b);\n}\n\n### Rust version\n\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "rs",
    "prompt": "fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction will_it_fly(q: number[], w: number): boolean {\n  if (q.reduce((a, b) => a + b, 0) > w) {\n    return false;\n  }\n\n  let i = 0;\n  let j = q.length - 1;\n  while (i < j) {\n    if (q[i] !== q[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n### Rust version\n\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "rs",
    "prompt": "fn is_multiply_prime(a: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_multiply_prime(a: number): boolean {\n  function is_prime(n: number): boolean {\n    for (let j = 2; j < n; j++) {\n      if (n % j === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!is_prime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!is_prime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!is_prime(k)) continue;\n        if (i * j * k === a) return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Rust version\n\nfn is_multiply_prime(a: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "rs",
    "prompt": "fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction maximum(arr: number[], k: number): number[] {\n  if (k === 0) {\n    return [];\n  }\n  arr.sort((a, b) => a - b);\n  const ans = arr.slice(-k);\n  return ans;\n}\n\n### Rust version\n\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "rs",
    "prompt": "fn separate_paren_groups(paren_string: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![String::from(\"(()())\"), String::from(\"((()))\"), String::from(\"()\"), String::from(\"((())()())\")]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\")), vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"((()))\"), String::from(\"(((())))\")]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![String::from(\"(()(())((())))\")]);\n    assert_eq!(candidate(String::from(\"( ) (( )) (( )( ))\")), vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"(()())\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction separate_paren_groups(paren_string: string): string[] {\n  const result = [];\n  const current_string = [];\n  let current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c === '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c === ')') {\n      current_depth -= 1;\n      current_string.push(c);\n\n      if (current_depth === 0) {\n        result.push(current_string.join(''));\n        current_string.length = 0;\n      }\n    }\n  }\n\n  return result;\n}\n\n### Rust version\n\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "rs",
    "prompt": "fn skjkasdkd(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191, 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction skjkasdkd(lst: number[]): number {\n  function isPrime(n: number): boolean {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let maxx = 0;\n  for (const num of lst) {\n    if (num > maxx && isPrime(num)) {\n      maxx = num;\n    }\n  }\n\n  return maxx === 0 ? 0 : maxx.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n}\n\n### Rust version\n\nfn skjkasdkd(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "rs",
    "prompt": "fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  const l1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const l2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return l1 <= l2 ? lst1 : lst2;\n}\n\n### Rust version\n\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "rs",
    "prompt": "fn string_to_md5(text: String) -> Option<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction string_to_md5(text: string): string | undefined {\n  const crypto = require('crypto');\n  return text ? crypto.createHash('md5').update(text).digest('hex') : undefined;\n}\n\n### Rust version\n\nfn string_to_md5(text: String) -> Option<String> {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "rs",
    "prompt": "fn car_race_collision(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 9);\n    assert_eq!(candidate(4), 16);\n    assert_eq!(candidate(8), 64);\n    assert_eq!(candidate(10), 100);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction car_race_collision(n: number): number {\n    return n**2;\n}\n\n### Rust version\n\nfn car_race_collision(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "rs",
    "prompt": "fn is_simple_power(x: isize, n: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return x === 1;\n  }\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n}\n\n### Rust version\n\nfn is_simple_power(x: isize, n: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "rs",
    "prompt": "fn encode(message: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction encode(message: string): string {\n  const vowels = \"aeiouAEIOU\";\n  const vowelsReplace = Object.fromEntries([...vowels].map(i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]));\n  message = message.split('').map(i => i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase()).join('');\n  return message.split('').map(i => vowelsReplace[i] || i).join('');\n}\n\n### Rust version\n\nfn encode(message: String) -> String {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "rs",
    "prompt": "fn incr_list(l: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction incr_list(l: number[]): number[] {\n  return l.map(e => e + 1);\n}\n\n### Rust version\n\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "rs",
    "prompt": "fn flip_case(string: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction flip_case(string: string): string {\n  return string.replace(/./g, (c) => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase());\n}\n\n### Rust version\n\nfn flip_case(string: String) -> String {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "rs",
    "prompt": "fn vowels_count(s: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction vowels_count(s: string): number {\n    const vowels = \"aeiouAEIOU\";\n    let n_vowels = s.split('').filter(c => vowels.includes(c)).length;\n    if (s.slice(-1) === 'y' || s.slice(-1) === 'Y') {\n        n_vowels += 1;\n    }\n    return n_vowels;\n}\n\n### Rust version\n\nfn vowels_count(s: String) -> isize {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "rs",
    "prompt": "fn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]), vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"bbbb\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sorted_list_sum(lst: string[]): string[] {\n  lst.sort();\n  const new_lst = [];\n  for (const i of lst) {\n    if (i.length % 2 === 0) {\n      new_lst.push(i);\n    }\n  }\n  return new_lst.sort((a, b) => a.length - b.length);\n}\n\n### Rust version\n\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "rs",
    "prompt": "fn words_string(s: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction words_string(s: string): string[] {\n  if (!s) {\n    return [];\n  }\n\n  const s_list: string[] = [];\n\n  for (const letter of s) {\n    if (letter === ',') {\n      s_list.push(' ');\n    } else {\n      s_list.push(letter);\n    }\n  }\n\n  const result = s_list.join('').split(' ');\n\n  return result.filter((word) => word !== '');\n}\n\n### Rust version\n\nfn words_string(s: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "rs",
    "prompt": "fn even_odd_palindrome(n: isize) -> (isize, isize) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = even_odd_palindrome;\n    assert_eq!(candidate(123), (8, 13));\n    assert_eq!(candidate(12), (4, 6));\n    assert_eq!(candidate(3), (1, 2));\n    assert_eq!(candidate(63), (6, 8));\n    assert_eq!(candidate(25), (5, 6));\n    assert_eq!(candidate(19), (4, 6));\n    assert_eq!(candidate(9), (4, 5));\n    assert_eq!(candidate(1), (0, 1));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction even_odd_palindrome(n: number): [number, number] {\n  function is_palindrome(n: number): boolean {\n    return String(n) === String(n).split(\"\").reverse().join(\"\");\n  }\n\n  let even_palindrome_count = 0;\n  let odd_palindrome_count = 0;\n\n  for (let i = 1; i < n + 1; i++) {\n    if (i % 2 === 1 && is_palindrome(i)) {\n      odd_palindrome_count += 1;\n    } else if (i % 2 === 0 && is_palindrome(i)) {\n      even_palindrome_count += 1;\n    }\n  }\n  return [even_palindrome_count, odd_palindrome_count];\n}\n\n### Rust version\n\nfn even_odd_palindrome(n: isize) -> (isize, isize) {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "rs",
    "prompt": "fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction triangle_area(a: number, b: number, c: number): number {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = (s * (s - a) * (s - b) * (s - c)) ** 0.5;\n  return Number(area.toFixed(2));\n}\n\n### Rust version\n\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "rs",
    "prompt": "use std::collections::HashMap;\n\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\")), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")), (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"), String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])), true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  } else {\n    let state = 'start';\n    for (const key in dict) {\n      if (typeof key !== 'string') {\n        state = 'mixed';\n        break;\n      }\n      if (state === 'start') {\n        if (key.toUpperCase() === key) {\n          state = 'upper';\n        } else if (key.toLowerCase() === key) {\n          state = 'lower';\n        } else {\n          break;\n        }\n      } else if ((state === 'upper' && key.toUpperCase() !== key) || (state === 'lower' && key.toLowerCase() !== key)) {\n        state = 'mixed';\n        break;\n      } else {\n        continue;\n      }\n    }\n    return state === 'upper' || state === 'lower';\n  }\n}\n\n### Rust version\n\nuse std::collections::HashMap;\n\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "rs",
    "prompt": "fn tri(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction tri(n: number): number[] {\n  if (n === 0) {\n    return [1];\n  }\n  const my_tri = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      my_tri.push(i / 2 + 1);\n    } else {\n      my_tri.push(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2);\n    }\n  }\n  return my_tri;\n}\n\n### Rust version\n\nfn tri(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "rs",
    "prompt": "fn median(l: Vec<isize>) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction median(l: number[]): number {\n  l.sort((a, b) => a - b);\n  if (l.length % 2 === 1) {\n    return l[Math.floor(l.length / 2)];\n  } else {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  }\n}\n\n### Rust version\n\nfn median(l: Vec<isize>) -> f64 {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "rs",
    "prompt": "fn change_base(x: isize, base: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction change_base(x: number, base: number): string {\n  let ret = \"\";\n  while (x > 0) {\n    ret = String(x % base) + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n### Rust version\n\nfn change_base(x: isize, base: isize) -> String {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "rs",
    "prompt": "fn longest(strings: Vec<String>) -> Option<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction longest(strings: string[]): string | undefined {\n  if (!strings) {\n    return undefined;\n  }\n\n  const maxlen = Math.max(...strings.map((s) => s.length));\n  for (const s of strings) {\n    if (s.length === maxlen) {\n      return s;\n    }\n  }\n}\n\n### Rust version\n\nfn longest(strings: Vec<String>) -> Option<String> {\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "rs",
    "prompt": "fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const countBits = (n: number) => n.toString(2).match(/1/g)?.length ?? 0;\n    return countBits(a) - countBits(b) || a - b;\n  });\n}\n\n### Rust version\n\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "rs",
    "prompt": "fn common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction common(l1: number[], l2: number[]): number[] {\n  const ret = new Set<number>()\n  for (const e1 of l1) {\n    for (const e2 of l2) {\n      if (e1 === e2) {\n        ret.add(e1)\n      }\n    }\n  }\n  return Array.from(ret).sort()\n}\n\n### Rust version\n\nfn common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "rs",
    "prompt": "fn cycpattern_check(a: String, b: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = cycpattern_check;\n    assert_eq!(candidate(String::from(\"xyzw\"), String::from(\"xyw\")), false);\n    assert_eq!(candidate(String::from(\"yello\"), String::from(\"ell\")), true);\n    assert_eq!(candidate(String::from(\"whattup\"), String::from(\"ptut\")), false);\n    assert_eq!(candidate(String::from(\"efef\"), String::from(\"fee\")), true);\n    assert_eq!(candidate(String::from(\"abab\"), String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"winemtt\"), String::from(\"tinem\")), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction cycpattern_check(a: string, b: string): boolean {\n  const l = b.length;\n  const pat = b + b;\n  for (let i = 0; i <= a.length - l; i++) {\n    for (let j = 0; j <= l; j++) {\n      if (a.slice(i, i + l) === pat.slice(j, j + l)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Rust version\n\nfn cycpattern_check(a: String, b: String) -> bool {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "rs",
    "prompt": "fn minSubArraySum(nums: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction minSubArraySum(nums: number[]): number {\n  let max_sum = 0;\n  let s = 0;\n  for (let num of nums) {\n    s += -num;\n    if (s < 0) {\n      s = 0;\n    }\n    max_sum = Math.max(s, max_sum);\n  }\n  if (max_sum === 0) {\n    max_sum = Math.max(...nums.map(i => -i));\n  }\n  const min_sum = -max_sum;\n  return min_sum;\n}\n\n### Rust version\n\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "rs",
    "prompt": "fn sort_array(array: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sort_array(array: number[]): number[] {\n  return array.length === 0 ? [] : array.sort((a, b) => (array[0] + array[array.length - 1]) % 2 === 0 ? b - a : a - b);\n}\n\n### Rust version\n\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "rs",
    "prompt": "use std::collections::HashMap;\n\nfn histogram(test: String) -> HashMap<String, isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")), HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"a\"), 1)]));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction histogram(test: string): {[key: string]: number} {\n  const dict1: {[key: string]: number} = {}\n  const list1 = test.split(\" \")\n  let t = 0\n\n  for (const i of list1) {\n    if (list1.filter(x => x === i).length > t && i !== '') {\n      t = list1.filter(x => x === i).length\n    }\n  }\n  if (t > 0) {\n    for (const i of list1) {\n      if (list1.filter(x => x === i).length === t) {\n        dict1[i] = t\n      }\n    }\n  }\n  return dict1\n}\n\n### Rust version\n\nuse std::collections::HashMap;\n\nfn histogram(test: String) -> HashMap<String, isize> {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "rs",
    "prompt": "fn get_odd_collatz(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction get_odd_collatz(n: number): number[] {\n  const odd_collatz = n % 2 === 0 ? [] : [n];\n  while (n > 1) {\n    if (n % 2 === 0) {\n      n /= 2;\n    } else {\n      n = n * 3 + 1;\n    }\n\n    if (n % 2 === 1) {\n      odd_collatz.push(n);\n    }\n  }\n\n  return odd_collatz.sort((a, b) => a - b);\n}\n\n### Rust version\n\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "rs",
    "prompt": "fn derivative(xs: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction derivative(xs: number[]): number[] {\n  return xs.map((x, i) => i * x).slice(1);\n}\n\n### Rust version\n\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "rs",
    "prompt": "fn fibfib(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n### Rust version\n\nfn fibfib(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "rs",
    "prompt": "fn truncate_number(number: f64) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction truncate_number(number: number): number {\n  return number % 1;\n}\n\n### Rust version\n\nfn truncate_number(number: f64) -> f64 {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "rs",
    "prompt": "fn max_element(l: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction max_element(l: number[]): number {\n  let m = l[0];\n  for (let e of l) {\n    if (e > m) {\n      m = e;\n    }\n  }\n  return m;\n}\n\n### Rust version\n\nfn max_element(l: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "rs",
    "prompt": "fn closest_integer(value: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = closest_integer;\n    assert_eq!(candidate(String::from(\"10\")), 10);\n    assert_eq!(candidate(String::from(\"14.5\")), 15);\n    assert_eq!(candidate(String::from(\"-15.5\")), -16);\n    assert_eq!(candidate(String::from(\"15.3\")), 15);\n    assert_eq!(candidate(String::from(\"0\")), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  if (value.endsWith('.5')) {\n    return num > 0 ? Math.ceil(num) : Math.floor(num);\n  } else {\n    return Math.round(num);\n  }\n}\n\n### Rust version\n\nfn closest_integer(value: String) -> isize {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "rs",
    "prompt": "fn prime_fib(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = prime_fib;\n    assert_eq!(candidate(1), 2);\n    assert_eq!(candidate(2), 3);\n    assert_eq!(candidate(3), 5);\n    assert_eq!(candidate(4), 13);\n    assert_eq!(candidate(5), 89);\n    assert_eq!(candidate(6), 233);\n    assert_eq!(candidate(7), 1597);\n    assert_eq!(candidate(8), 28657);\n    assert_eq!(candidate(9), 514229);\n    assert_eq!(candidate(10), 433494437);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction prime_fib(n: number): number {\n  function is_prime(p: number): boolean {\n    if (p < 2) {\n      return false;\n    }\n    for (let k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n      if (p % k === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const f = [0, 1];\n  while (true) {\n    f.push(f[f.length - 1] + f[f.length - 2]);\n    if (is_prime(f[f.length - 1])) {\n      n -= 1;\n    }\n    if (n === 0) {\n      return f[f.length - 1];\n    }\n  }\n}\n\n### Rust version\n\nfn prime_fib(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "rs",
    "prompt": "fn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sum_product(numbers: number[]): [number, number] {\n  let sum_value = 0;\n  let prod_value = 1;\n\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n\n  return [sum_value, prod_value];\n}\n\n### Rust version\n\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "rs",
    "prompt": "fn select_words(s: String, n: isize) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\")]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction select_words(s: string, n: number): string[] {\n  const result: string[] = [];\n  for (const word of s.split(' ')) {\n    let n_consonants = 0;\n    for (const c of word) {\n      if (!['a', 'e', 'i', 'o', 'u'].includes(c.toLowerCase())) {\n        n_consonants += 1;\n      }\n    }\n    if (n_consonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\n### Rust version\n\nfn select_words(s: String, n: isize) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "rs",
    "prompt": "fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction add_elements(arr: number[], k: number): number {\n  return arr.slice(0, k).reduce((acc, cur) => (String(cur).length <= 2 ? acc + cur : acc), 0);\n}\n\n### Rust version\n\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "rs",
    "prompt": "fn eat(number: isize, need: isize, remaining: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction eat(number: number, need: number, remaining: number): number[] {\n  if(need <= remaining) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}\n\n### Rust version\n\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "rs",
    "prompt": "fn odd_count(lst: Vec<String>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!(candidate(vec![String::from(\"1234567\")]), vec![String::from(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]);\n    assert_eq!(candidate(vec![String::from(\"3\"), String::from(\"11111111\")]), vec![String::from(\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]);\n    assert_eq!(candidate(vec![String::from(\"271\"), String::from(\"137\"), String::from(\"314\")]), vec![String::from(\"the number of odd elements 2n the str2ng 2 of the 2nput.\"), String::from(\"the number of odd elements 3n the str3ng 3 of the 3nput.\"), String::from(\"the number of odd elements 2n the str2ng 2 of the 2nput.\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction odd_count(lst: string[]): string[] {\n  const res: string[] = [];\n  for (const arr of lst) {\n    const n = arr.split('').filter(d => Number(d) % 2 === 1).length;\n    res.push(`the number of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.`);\n  }\n  return res;\n}\n\n### Rust version\n\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "rs",
    "prompt": "fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction next_smallest(lst: number[]): number | undefined {\n  lst = [...new Set(lst)].sort((a, b) => a - b);\n  return lst.length < 2 ? undefined : lst[1];\n}\n\n### Rust version\n\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "rs",
    "prompt": "fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5, 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1), Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]], 3), vec![(2, 2)]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction get_row(lst: number[][], x: number): [number, number][] {\n  const coords: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        coords.push([i, j]);\n      }\n    }\n  }\n  return coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n\n### Rust version\n\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "rs",
    "prompt": "fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n  return strings.filter(x => x.startsWith(prefix));\n}\n\n### Rust version\n\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "rs",
    "prompt": "fn choose_num(x: isize, y: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction choose_num(x: number, y: number): number {\n  if (x > y) {\n    return -1;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x === y) {\n    return -1;\n  }\n  return y - 1;\n}\n\n### Rust version\n\nfn choose_num(x: isize, y: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "rs",
    "prompt": "fn prime_length(string: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction prime_length(string: string): boolean {\n  const l = string.length;\n  if (l === 0 || l === 1) {\n    return false;\n  }\n  for (let i = 2; i < l; i++) {\n    if (l % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Rust version\n\nfn prime_length(string: String) -> bool {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "rs",
    "prompt": "fn sum_to_n(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sum_to_n;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(6), 21);\n    assert_eq!(candidate(11), 66);\n    assert_eq!(candidate(30), 465);\n    assert_eq!(candidate(100), 5050);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sum_to_n(n: number): number {\n  return (n * (n + 1)) / 2;\n}\n\n### Rust version\n\nfn sum_to_n(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "rs",
    "prompt": "fn fix_spaces(text: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction fix_spaces(text: string): string {\n  let new_text = \"\";\n  let i = 0;\n  let start = 0, end = 0;\n  while (i < text.length) {\n    if (text[i] == \" \") {\n      end += 1;\n    } else {\n      if (end - start > 2) {\n        new_text += \"-\"+text[i];\n      } else if (end - start > 0) {\n        new_text += \"_\".repeat(end - start)+text[i];\n      } else {\n        new_text += text[i];\n      }\n      start = i+1;\n      end = i+1;\n    }\n    i+=1;\n  }\n  if (end - start > 2) {\n    new_text += \"-\";\n  } else if (end - start > 0) {\n    new_text += \"_\";\n  }\n  return new_text;\n}\n\n### Rust version\n\nfn fix_spaces(text: String) -> String {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "rs",
    "prompt": "fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction rolling_max(numbers: number[]): number[] {\n  let running_max: number | null = null;\n  const result: number[] = [];\n\n  for (const n of numbers) {\n    if (running_max === null) {\n      running_max = n;\n    } else {\n      running_max = Math.max(running_max, n);\n    }\n\n    result.push(running_max);\n  }\n\n  return result;\n}\n\n### Rust version\n\nfn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "rs",
    "prompt": "fn words_in_sentence(sentence: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction words_in_sentence(sentence: string): string {\n  const new_lst: string[] = [];\n  for (const word of sentence.split(' ')) {\n    let flg = 0;\n    if (word.length === 1) {\n      flg = 1;\n    }\n    for (let i = 2; i < word.length; i++) {\n      if (word.length % i === 0) {\n        flg = 1;\n      }\n    }\n    if (flg === 0 || word.length === 2) {\n      new_lst.push(word);\n    }\n  }\n  return new_lst.join(' ');\n}\n\n### Rust version\n\nfn words_in_sentence(sentence: String) -> String {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "rs",
    "prompt": "fn get_closest_vowel(word: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction get_closest_vowel(word: string): string {\n  if (word.length < 3) {\n    return \"\";\n  }\n\n  const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I']);\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.has(word[i])) {\n      if (!vowels.has(word[i+1]) && !vowels.has(word[i-1])) {\n        return word[i];\n      }\n    }\n  }\n  return \"\";\n}\n\n### Rust version\n\nfn get_closest_vowel(word: String) -> String {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "rs",
    "prompt": "fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction compare(game: number[], guess: number[]): number[] {\n  return game.map((x, i) => Math.abs(x - guess[i]));\n}\n\n### Rust version\n\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "rs",
    "prompt": "fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction remove_duplicates(numbers: number[]): number[] {\n  const c = new Map<number, number>();\n  numbers.forEach(n => c.set(n, (c.get(n) || 0) + 1));\n  return numbers.filter(n => c.get(n) <= 1);\n}\n\n### Rust version\n\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "rs",
    "prompt": "fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![4]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction parse_nested_parens(paren_string: string): number[] {\n  function parse_paren_group(s: string): number {\n    let depth = 0;\n    let max_depth = 0;\n    for (const c of s) {\n      if (c === '(') {\n        depth += 1;\n        max_depth = Math.max(depth, max_depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n\n  return paren_string.split(' ').filter((x) => x).map(parse_paren_group);\n}\n\n### Rust version\n\nfn parse_nested_parens(paren_string: String) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "rs",
    "prompt": "fn even_odd_count(num: isize) -> (isize, isize) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  for (let i of Math.abs(num).toString()) {\n    if (parseInt(i)%2==0) {\n      even_count +=1;\n    } else {\n      odd_count +=1;\n    }\n  }\n  return [even_count, odd_count];\n}\n\n### Rust version\n\nfn even_odd_count(num: isize) -> (isize, isize) {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "rs",
    "prompt": "fn fruit_distribution(s: String, n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction fruit_distribution(s: string, n: number): number {\n  const lis = [];\n  for (const i of s.split(' ')) {\n    if (i.match(/\\d+/)) {\n      lis.push(parseInt(i));\n    }\n  }\n  return n - lis.reduce((a, b) => a + b, 0);\n}\n\n### Rust version\n\nfn fruit_distribution(s: String, n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "rs",
    "prompt": "fn string_xor(a: String, b: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = string_xor;\n    assert_eq!(candidate(String::from(\"111000\"), String::from(\"101010\")), String::from(\"010010\"));\n    assert_eq!(candidate(String::from(\"1\"), String::from(\"1\")), String::from(\"0\"));\n    assert_eq!(candidate(String::from(\"0101\"), String::from(\"0000\")), String::from(\"0101\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction string_xor(a: string, b: string): string {\n  const xor = (i: string, j: string) => (i === j ? '0' : '1');\n  return a.split('').map((x, idx) => xor(x, b[idx])).join('');\n}\n\n### Rust version\n\nfn string_xor(a: String, b: String) -> String {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "rs",
    "prompt": "fn strlen(string: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction strlen(string: string): number {\n  return string.length;\n}\n\n### Rust version\n\nfn strlen(string: String) -> isize {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "rs",
    "prompt": "fn string_sequence(n: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction string_sequence(n: number): string {\n  return [...Array(n + 1).keys()].join(' ');\n}\n\n### Rust version\n\nfn string_sequence(n: isize) -> String {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "rs",
    "prompt": "fn file_name_check(file_name: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!(candidate(String::from(\"example.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1example.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"s1sdf3.asd\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"K.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"MY16FILE3.exe\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"His12FILE94.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_Y.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"?aREYA.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"/this_is_valid.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.wow\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txtexe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"#this2_i4s_5valid.ten\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"@this1_is6_valid.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_12valid.6exe4.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"all.exe.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_No.exe\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"Is3youfault.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"no_one#knows.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1I563_Yes3.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_Yes3.txtt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final..txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final132\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_f4indsartal132.\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\".txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"s.\")), String::from(\"No\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction file_name_check(file_name: string): string {\n  const suf = ['txt', 'exe', 'dll'];\n  const lst = file_name.split('.');\n  if (lst.length !== 2) {\n    return 'No';\n  }\n  if (!suf.includes(lst[1])) {\n    return 'No';\n  }\n  if (lst[0].length === 0 || !lst[0][0].match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n  const t = lst[0].split('').filter((x) => x.match(/\\d/)).length;\n  if (t > 3) {\n    return 'No';\n  }\n  return 'Yes';\n}\n\n### Rust version\n\nfn file_name_check(file_name: String) -> String {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "rs",
    "prompt": "fn can_arrange(arr: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction can_arrange(arr: number[]): number {\n  let ind=-1;\n  let i=1;\n  while (i<arr.length) {\n    if (arr[i]<arr[i-1]) {\n      ind=i;\n    }\n    i+=1;\n  }\n  return ind;\n}\n\n### Rust version\n\nfn can_arrange(arr: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "rs",
    "prompt": "fn add(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction add(lst: number[]): number {\n    return lst.filter((x, i) => i % 2 == 1 && x % 2 == 0).reduce((a, b) => a + b, 0);\n}\n\n### Rust version\n\nfn add(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "rs",
    "prompt": "fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n  if (!numbers.length) {\n    return [];\n  }\n\n  const result: number[] = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i], delimeter);\n  }\n\n  result.push(numbers[numbers.length - 1]);\n\n  return result;\n}\n\n### Rust version\n\nfn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "rs",
    "prompt": "fn match_parens(lst: Vec<String>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"(())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction match_parens(lst: string[]): string {\n  function check(s: string): boolean {\n    let val = 0;\n    for (const i of s) {\n      if (i === '(') {\n        val += 1;\n      } else {\n        val -= 1;\n      }\n      if (val < 0) {\n        return false;\n      }\n    }\n    return val === 0;\n  }\n\n  const S1 = lst[0] + lst[1];\n  const S2 = lst[1] + lst[0];\n  return check(S1) || check(S2) ? 'Yes' : 'No';\n}\n\n### Rust version\n\nfn match_parens(lst: Vec<String>) -> String {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "rs",
    "prompt": "fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n  return strings.filter(x => x.includes(substring))\n}\n\n### Rust version\n\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "rs",
    "prompt": "fn find_max(words: Vec<String>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"game\")]), String::from(\"enam\"));\n    assert_eq!(candidate(vec![String::from(\"aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"));\n    assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]), String::from(\"abc\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"footbott\")]), String::from(\"footbott\"));\n    assert_eq!(candidate(vec![String::from(\"we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]), String::from(\"gonna\"));\n    assert_eq!(candidate(vec![String::from(\"we\"), String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"nation\")]), String::from(\"nation\"));\n    assert_eq!(candidate(vec![String::from(\"this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"this\"));\n    assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"b\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"), String::from(\"play\")]), String::from(\"play\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction find_max(words: string[]): string {\n    return words.sort((a, b) => {\n        return (new Set(b)).size - (new Set(a)).size || a.localeCompare(b);\n    })[0];\n}\n\n### Rust version\n\nfn find_max(words: Vec<String>) -> String {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "rs",
    "prompt": "fn generate_integers(a: isize, b: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction generate_integers(a: number, b: number): number[] {\n  const lower = Math.max(2, Math.min(a, b));\n  const upper = Math.min(8, Math.max(a, b));\n\n  return Array.from({ length: upper - lower + 1 }, (_, i) => i + lower).filter((i) => i % 2 === 0);\n}\n\n### Rust version\n\nfn generate_integers(a: isize, b: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "rs",
    "prompt": "fn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = exchange;\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![1, 2, 3, 4]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![1, 5, 3, 4]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![2, 1, 4, 3]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![5, 7, 3], vec![2, 6, 4]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![5, 7, 3], vec![2, 6, 3]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![3, 2, 6, 1, 8, 9], vec![3, 5, 5, 1, 1, 1]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![100, 200], vec![200, 200]), String::from(\"YES\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction exchange(lst1: number[], lst2: number[]): string {\n  const odd = lst1.filter((i) => i % 2 === 1).length;\n  const even = lst2.filter((i) => i % 2 === 0).length;\n  return even >= odd ? 'YES' : 'NO';\n}\n\n### Rust version\n\nfn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "rs",
    "prompt": "fn is_equal_to_sum_even(n: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_equal_to_sum_even(n: number): boolean {\n  return n%2 === 0 && n >= 8;\n}\n\n### Rust version\n\nfn is_equal_to_sum_even(n: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "rs",
    "prompt": "fn decimal_to_binary(decimal: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction decimal_to_binary(decimal: number): string {\n  return `db${decimal.toString(2)}db`;\n}\n\n### Rust version\n\nfn decimal_to_binary(decimal: isize) -> String {\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "rs",
    "prompt": "fn sort_third(l: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sort_third;\n    assert_eq!(candidate(vec![5, 6, 3, 4, 8, 9, 2]), vec![2, 6, 3, 4, 8, 9, 5]);\n    assert_eq!(candidate(vec![5, 8, 3, 4, 6, 9, 2]), vec![2, 8, 3, 4, 6, 9, 5]);\n    assert_eq!(candidate(vec![5, 6, 9, 4, 8, 3, 2]), vec![2, 6, 9, 4, 8, 3, 5]);\n    assert_eq!(candidate(vec![5, 6, 3, 4, 8, 9, 2, 1]), vec![2, 6, 3, 4, 8, 9, 5, 1]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction sort_third(l: number[]): number[] {\n  l = [...l];\n  l.filter((_, i) => i % 3 === 0).sort().forEach((v, i) => (l[i * 3] = v));\n  return l;\n}\n\n### Rust version\n\nfn sort_third(l: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "rs",
    "prompt": "fn simplify(x: String, n: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = simplify;\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"5/1\")), true);\n    assert_eq!(candidate(String::from(\"1/6\"), String::from(\"2/1\")), false);\n    assert_eq!(candidate(String::from(\"5/1\"), String::from(\"3/1\")), true);\n    assert_eq!(candidate(String::from(\"7/10\"), String::from(\"10/2\")), false);\n    assert_eq!(candidate(String::from(\"2/10\"), String::from(\"50/10\")), true);\n    assert_eq!(candidate(String::from(\"7/2\"), String::from(\"4/2\")), true);\n    assert_eq!(candidate(String::from(\"11/6\"), String::from(\"6/1\")), true);\n    assert_eq!(candidate(String::from(\"2/3\"), String::from(\"5/2\")), false);\n    assert_eq!(candidate(String::from(\"5/2\"), String::from(\"3/5\")), false);\n    assert_eq!(candidate(String::from(\"2/4\"), String::from(\"8/4\")), true);\n    assert_eq!(candidate(String::from(\"2/4\"), String::from(\"4/2\")), true);\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"5/1\")), true);\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"1/5\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction simplify(x: string, n: string): boolean {\n  const [a, b] = x.split(\"/\");\n  const [c, d] = n.split(\"/\");\n  const numerator = parseInt(a) * parseInt(c);\n  const denom = parseInt(b) * parseInt(d);\n  return numerator % denom === 0;\n}\n\n### Rust version\n\nfn simplify(x: String, n: String) -> bool {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "rs",
    "prompt": "fn solve(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction solve(s: string): string {\n  let flg = 0;\n  let idx = 0;\n  const new_str = s.split('');\n  for (const i of s) {\n    if (i.match(/[a-z]/i)) {\n      new_str[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();\n      flg = 1;\n    }\n    idx += 1;\n  }\n  if (flg === 0) {\n    return new_str.reverse().join('');\n  }\n  return new_str.join('');\n}\n\n### Rust version\n\nfn solve(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "rs",
    "prompt": "fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n  return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n}\n\n### Rust version\n\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "rs",
    "prompt": "fn double_the_difference(lst: Vec<f64>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction double_the_difference(lst: number[]): number {\n  return lst.filter(i => i > 0 && i%2!=0 && !/\\./.test(String(i))).reduce((a, b) => a + b**2, 0);\n}\n\n### Rust version\n\nfn double_the_difference(lst: Vec<f64>) -> isize {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "rs",
    "prompt": "fn below_zero(operations: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction below_zero(operations: number[]): boolean {\n  let balance = 0;\n\n  for (let op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n### Rust version\n\nfn below_zero(operations: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "rs",
    "prompt": "fn greatest_common_divisor(a: isize, b: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction greatest_common_divisor(a: number, b: number): number {\n  while (b) {\n    [a, b] = [b, a % b];\n  }\n  return a;\n}\n\n### Rust version\n\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "rs",
    "prompt": "fn f(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction f(n: number): number[] {\n  const ret: number[] = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let x = 1\n      for (let j = 1; j <= i; j++) x *= j\n      ret.push(x)\n    } else {\n      let x = 0\n      for (let j = 1; j <= i; j++) x += j\n      ret.push(x)\n    }\n  }\n  return ret\n}\n\n### Rust version\n\nfn f(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "rs",
    "prompt": "fn monotonic(l: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction monotonic(l: number[]): boolean {\n  return l.every((_, i) => i === 0 || l[i] >= l[i - 1]) || l.every((_, i) => i === 0 || l[i] <= l[i - 1]);\n}\n\n### Rust version\n\nfn monotonic(l: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "rs",
    "prompt": "fn by_length(arr: Vec<isize>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction by_length(arr: number[]): string[] {\n  const dic: Record<number, string> = {\n    1: 'One',\n    2: 'Two',\n    3: 'Three',\n    4: 'Four',\n    5: 'Five',\n    6: 'Six',\n    7: 'Seven',\n    8: 'Eight',\n    9: 'Nine',\n  };\n  const sorted_arr = arr.sort((a, b) => b - a);\n  const new_arr: string[] = [];\n  for (const var_ of sorted_arr) {\n    if (dic[var_]) {\n      new_arr.push(dic[var_]);\n    }\n  }\n  return new_arr;\n}\n\n### Rust version\n\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "rs",
    "prompt": "fn remove_vowels(text: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction remove_vowels(text: string): string {\n  return text.split('').filter(s => !['a', 'e', 'i', 'o', 'u'].includes(s.toLowerCase())).join('')\n}\n\n### Rust version\n\nfn remove_vowels(text: String) -> String {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "rs",
    "prompt": "fn check_if_last_char_is_a_letter(txt: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n  const check = txt.split(' ').pop();\n  return check.length === 1 && /[a-z]/i.test(check);\n}\n\n### Rust version\n\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "rs",
    "prompt": "fn iscube(a: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction iscube(a: number): boolean {\n  a = Math.abs(a);\n  return Math.round(Math.pow(a, 1/3)) ** 3 == a;\n}\n\n### Rust version\n\nfn iscube(a: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "rs",
    "prompt": "fn reverse_delete(s: String, c: String) -> (String, bool) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = reverse_delete;\n    assert_eq!(candidate(String::from(\"abcde\"), String::from(\"ae\")), (String::from(\"bcd\"), false));\n    assert_eq!(candidate(String::from(\"abcdef\"), String::from(\"b\")), (String::from(\"acdef\"), false));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"ab\")), (String::from(\"cdedc\"), true));\n    assert_eq!(candidate(String::from(\"dwik\"), String::from(\"w\")), (String::from(\"dik\"), false));\n    assert_eq!(candidate(String::from(\"a\"), String::from(\"a\")), (String::from(\"\"), true));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"\")), (String::from(\"abcdedcba\"), true));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"v\")), (String::from(\"abcdedcba\"), true));\n    assert_eq!(candidate(String::from(\"vabba\"), String::from(\"v\")), (String::from(\"abba\"), true));\n    assert_eq!(candidate(String::from(\"mamma\"), String::from(\"mia\")), (String::from(\"\"), true));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n  s = [...s].filter((char) => !c.includes(char)).join('');\n  return [s, s.split('').reverse().join('') === s];\n}\n\n### Rust version\n\nfn reverse_delete(s: String, c: String) -> (String, bool) {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "rs",
    "prompt": "fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction mean_absolute_deviation(numbers: number[]): number {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n}\n\n### Rust version\n\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "rs",
    "prompt": "fn correct_bracketing(brackets: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n  let depth = 0;\n  for (let b of brackets) {\n    if (b == \"<\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth == 0;\n}\n\n### Rust version\n\nfn correct_bracketing(brackets: String) -> bool {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "rs",
    "prompt": "fn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction rescale_to_unit(numbers: number[]): number[] {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n### Rust version\n\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "rs",
    "prompt": "fn intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1, 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)), String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)), String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"NO\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n  function is_prime(num: number): boolean {\n    if (num === 1 || num === 0) {\n      return false;\n    }\n    if (num === 2) {\n      return true;\n    }\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const l = Math.max(interval1[0], interval2[0]);\n  const r = Math.min(interval1[1], interval2[1]);\n  const length = r - l;\n  if (length > 0 && is_prime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\n### Rust version\n\nfn intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "rs",
    "prompt": "fn hex_key(num: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!(candidate(String::from(\"AB\")), 1);\n    assert_eq!(candidate(String::from(\"1077E\")), 2);\n    assert_eq!(candidate(String::from(\"ABED1A33\")), 4);\n    assert_eq!(candidate(String::from(\"2020\")), 2);\n    assert_eq!(candidate(String::from(\"123456789ABCDEF0\")), 6);\n    assert_eq!(candidate(String::from(\"112233445566778899AABBCCDDEEFF00\")), 12);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction hex_key(num: string): number {\n  const primes = new Set(['2', '3', '5', '7', 'B', 'D']);\n  let total = 0;\n  for (const c of num) {\n    if (primes.has(c)) {\n      total += 1;\n    }\n  }\n  return total;\n}\n\n### Rust version\n\nfn hex_key(num: String) -> isize {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "rs",
    "prompt": "fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction strange_sort_list(lst: number[]): number[] {\n  const res: number[] = [];\n  let switch_ = true;\n  while (lst.length) {\n    res.push(switch_ ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res[res.length - 1]), 1);\n    switch_ = !switch_;\n  }\n  return res;\n}\n\n### Rust version\n\nfn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "rs",
    "prompt": "fn is_bored(S: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are going for a walk\")), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_bored(S: string): number {\n    const sentences = S.split(/[.?!]\\s*/)\n    return sentences.filter(sentence => sentence.startsWith('I ')).length\n}\n\n### Rust version\n\nfn is_bored(S: String) -> isize {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "rs",
    "prompt": "fn all_prefixes(string: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction all_prefixes(string: string): string[] {\n  const result = [];\n\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n### Rust version\n\nfn all_prefixes(string: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "rs",
    "prompt": "fn how_many_times(string: String, substring: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"john\")), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction how_many_times(string: string, substring: string): number {\n  let times = 0;\n\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.slice(i, i + substring.length) === substring) {\n      times += 1;\n    }\n  }\n\n  return times;\n}\n\n### Rust version\n\nfn how_many_times(string: String, substring: String) -> isize {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "rs",
    "prompt": "fn solution(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3, 13, 2, 9]), 3);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction solution(lst: number[]): number {\n  return lst.filter((x, idx) => idx%2==0 && x%2==1).reduce((a, b) => a+b, 0);\n}\n\n### Rust version\n\nfn solution(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "rs",
    "prompt": "fn is_sorted(lst: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_sorted(lst: number[]): boolean {\n  const count_digit = lst.reduce((acc, cur) => {\n    acc[cur] = (acc[cur] || 0) + 1;\n    return acc;\n  }, {});\n  if (lst.some((i) => count_digit[i] > 2)) {\n    return false;\n  }\n  if (lst.slice(1).every((x, i) => x >= lst[i])) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n### Rust version\n\nfn is_sorted(lst: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "rs",
    "prompt": "fn search(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5, 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n    assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8, 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n    assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3, 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1, 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]), 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]), -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]), 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction search(lst: number[]): number {\n  const frq = Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst) {\n    frq[i] += 1;\n  }\n\n  let ans = -1;\n  for (let i = 1; i < frq.length; i++) {\n    if (frq[i] >= i) {\n      ans = i;\n    }\n  }\n\n  return ans;\n}\n\n### Rust version\n\nfn search(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "rs",
    "prompt": "fn pluck(arr: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4, 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]), vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n    assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7, 9, 7, 1]), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction pluck(arr: number[]): number[] {\n  if(arr.length == 0) return []\n  let evens = arr.filter(x => x%2 == 0)\n  if(evens.length == 0) return []\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))]\n}\n\n### Rust version\n\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "rs",
    "prompt": "fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Rust version\n\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "rs",
    "prompt": "fn make_palindrome(string: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"x\")), String::from(\"x\"));\n    assert_eq!(candidate(String::from(\"xyz\")), String::from(\"xyzyx\"));\n    assert_eq!(candidate(String::from(\"xyx\")), String::from(\"xyx\"));\n    assert_eq!(candidate(String::from(\"jerry\")), String::from(\"jerryrrej\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction make_palindrome(string: string): string {\n  if (!string) {\n    return '';\n  }\n\n  let beginning_of_suffix = 0;\n\n  while (string.slice(beginning_of_suffix) !== string.slice(beginning_of_suffix).split('').reverse().join('')) {\n    beginning_of_suffix += 1;\n  }\n\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n### Rust version\n\nfn make_palindrome(string: String) -> String {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "rs",
    "prompt": "fn starts_one_ends(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction starts_one_ends(n: number): number {\n  return n === 1 ? 1 : 18 * (10 ** (n - 2));\n}\n\n### Rust version\n\nfn starts_one_ends(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "rs",
    "prompt": "fn get_positive(l: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction get_positive(l: number[]): number[] {\n  return l.filter(e => e > 0);\n}\n\n### Rust version\n\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "rs",
    "prompt": "fn concatenate(strings: Vec<String>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction concatenate(strings: string[]): string {\n  return strings.join('');\n}\n\n### Rust version\n\nfn concatenate(strings: Vec<String>) -> String {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "rs",
    "prompt": "fn is_nested(string: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_nested(string: string): boolean {\n  const opening_bracket_index: number[] = [];\n  const closing_bracket_index: number[] = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      opening_bracket_index.push(i);\n    } else {\n      closing_bracket_index.push(i);\n    }\n  }\n  closing_bracket_index.reverse();\n  let cnt = 0;\n  let i = 0;\n  const l = closing_bracket_index.length;\n  for (const idx of opening_bracket_index) {\n    if (i < l && idx < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2;\n}\n\n### Rust version\n\nfn is_nested(string: String) -> bool {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "rs",
    "prompt": "fn is_palindrome(text: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_palindrome(text: string): boolean {\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] !== text[text.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Rust version\n\nfn is_palindrome(text: String) -> bool {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "rs",
    "prompt": "fn count_nums(arr: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction count_nums(arr: number[]): number {\n  function digits_sum(n: number): number {\n    const neg = n < 0 ? -1 : 1;\n    n = Math.abs(n);\n    const digits = Array.from(String(n), Number);\n    digits[0] *= neg;\n    return digits.reduce((acc, cur) => acc + cur, 0);\n  }\n  return arr.filter((i) => digits_sum(i) > 0).length;\n}\n\n### Rust version\n\nfn count_nums(arr: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "rs",
    "prompt": "fn factorize(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction factorize(n: number): number[] {\n  const fact: number[] = [];\n  let i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i === 0) {\n      fact.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n}\n\n### Rust version\n\nfn factorize(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "rs",
    "prompt": "fn largest_prime_factor(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction largest_prime_factor(n: number): number {\n  function is_prime(k: number): boolean {\n    if (k < 2) {\n      return false;\n    }\n    for (let i = 2; i < k; i++) {\n      if (k % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  let largest = 1;\n  for (let j = 2; j <= n; j++) {\n    if (n % j === 0 && is_prime(j)) {\n      largest = Math.max(largest, j);\n    }\n  }\n  return largest;\n}\n\n### Rust version\n\nfn largest_prime_factor(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "rs",
    "prompt": "fn get_max_triples(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction get_max_triples(n: number): number {\n    const A: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        A.push(i*i - i + 1);\n    }\n    const ans: [number, number, number][] = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = i+1; j < n; j++) {\n            for (let k = j+1; k < n; k++) {\n                if ((A[i]+A[j]+A[k])%3 === 0) {\n                    ans.push([A[i],A[j],A[k]]);\n                }\n            }\n        }\n    }\n    return ans.length;\n}\n\n### Rust version\n\nfn get_max_triples(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "rs",
    "prompt": "fn anti_shuffle(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction anti_shuffle(s: string): string {\n  return s.split(' ').map(i => [...i].sort().join('')).join(' ')\n}\n\n### Rust version\n\nfn anti_shuffle(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "rs",
    "prompt": "fn solve(N: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction solve(N: number): string {\n  return (N.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0)).toString(2);\n}\n\n### Rust version\n\nfn solve(N: isize) -> String {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "rs",
    "prompt": "fn minPath(grid: Vec<Vec<isize>>, k: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = minPath;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3), vec![1, 2, 1]);\n    assert_eq!(candidate(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1), vec![1]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12], vec![13, 14, 15, 16]], 4), vec![1, 2, 1, 2]);\n    assert_eq!(candidate(vec![vec![6, 4, 13, 10], vec![5, 7, 12, 1], vec![3, 16, 11, 15], vec![8, 14, 9, 2]], 7), vec![1, 10, 1, 10, 1, 10, 1]);\n    assert_eq!(candidate(vec![vec![8, 14, 9, 2], vec![6, 4, 13, 15], vec![5, 7, 1, 12], vec![3, 10, 11, 16]], 5), vec![1, 7, 1, 7, 1]);\n    assert_eq!(candidate(vec![vec![11, 8, 7, 2], vec![5, 16, 14, 4], vec![9, 3, 15, 6], vec![12, 13, 10, 1]], 9), vec![1, 6, 1, 6, 1, 6, 1, 6, 1]);\n    assert_eq!(candidate(vec![vec![12, 13, 10, 1], vec![9, 3, 15, 6], vec![5, 16, 14, 4], vec![11, 8, 7, 2]], 12), vec![1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n    assert_eq!(candidate(vec![vec![2, 7, 4], vec![3, 1, 5], vec![6, 8, 9]], 8), vec![1, 3, 1, 3, 1, 3, 1, 3]);\n    assert_eq!(candidate(vec![vec![6, 1, 5], vec![3, 8, 9], vec![2, 7, 4]], 8), vec![1, 5, 1, 5, 1, 5, 1, 5]);\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4]], 10), vec![1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n    assert_eq!(candidate(vec![vec![1, 3], vec![3, 2]], 10), vec![1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction minPath(grid: number[][], k: number): number[] {\n  const n = grid.length;\n  let val = n * n + 1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        const temp = [];\n        if (i !== 0) {\n          temp.push(grid[i - 1][j]);\n        }\n        if (j !== 0) {\n          temp.push(grid[i][j - 1]);\n        }\n        if (i !== n - 1) {\n          temp.push(grid[i + 1][j]);\n        }\n        if (j !== n - 1) {\n          temp.push(grid[i][j + 1]);\n        }\n        val = Math.min(...temp);\n      }\n    }\n  }\n  const ans = [];\n  for (let i = 0; i < k; i++) {\n    if (i % 2 === 0) {\n      ans.push(1);\n    } else {\n      ans.push(val);\n    }\n  }\n  return ans;\n}\n\n### Rust version\n\nfn minPath(grid: Vec<Vec<isize>>, k: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "rs",
    "prompt": "fn encrypt(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\")), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\")), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")), String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction encrypt(s: string): string {\n  const d = 'abcdefghijklmnopqrstuvwxyz';\n  let out = '';\n  for (let c of s) {\n    if (d.includes(c)) {\n      out += d[(d.indexOf(c)+2*2) % 26];\n    } else {\n      out += c;\n    }\n  }\n  return out;\n}\n\n### Rust version\n\nfn encrypt(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "rs",
    "prompt": "fn make_a_pile(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction make_a_pile(n: number): number[] {\n  return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n\n### Rust version\n\nfn make_a_pile(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "rs",
    "prompt": "fn is_prime(n: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### TypeScript version\n\nfunction is_prime(n: number): boolean {\n  if (n < 2) {\n    return false;\n  }\n  for (let k = 2; k < n; k++) {\n    if (n % k === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Rust version\n\nfn is_prime(n: isize) -> bool {\n"
  }
]