[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function correct_bracketing(brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $depth = 0;\n    for my $b (split //, $brackets) {\n        if ($b eq '(') {\n            $depth++;\n        } else {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return 0;\n        }\n    }\n    return $depth == 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function correct_bracketing(brackets)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function triangle_area(a, h)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub triangle_area {\n    my($a, $h) = @_;\n    return $a * $h / 2.0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function triangle_area(a, h)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function special_factorial(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub special_factorial {\n    my($n) = @_;\n    my $fact_i = 1;\n    my $special_fact = 1;\n    for my $i (1..$n) {\n        $fact_i *= $i;\n        $special_fact *= $fact_i;\n    }\n    return $special_fact;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function special_factorial(n)\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function largest_smallest_integers(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}), {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n    lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub largest_smallest_integers {\n    my($lst) = @_;\n    my @smallest = grep { $_ < 0 } @$lst;\n    my @largest = grep { $_ > 0 } @$lst;\n    my @output = (scalar(@smallest) ? (sort {$b <=> $a} @smallest)[0] : undef, scalar(@largest) ? (sort {$a <=> $b} @largest)[0] : undef);\n    return \\@output;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function largest_smallest_integers(lst)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function move_one_ball(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub move_one_ball {\n    my($arr) = @_;\n    return 1 if scalar @$arr == 0;\n    my @sorted_array = sort { $a <=> $b } @$arr;\n\n    my $min_value = $arr->[0];\n    my $min_index = 0;\n    for my $i (1 .. @$arr - 1) {\n        if ($arr->[$i] < $min_value) {\n            $min_value = $arr->[$i];\n            $min_index = $i;\n        }\n    }\n\n    my @my_arr = (@$arr[$min_index .. @$arr - 1], @$arr[0 .. $min_index - 1]);\n\n    for my $i (0 .. @$arr - 1) {\n        if ($my_arr[$i] != $sorted_array[$i]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function move_one_ball(arr)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function digits(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub digits {\n    my($n) = @_;\n    my $product = 1;\n    my $odd_count = 0;\n    for my $digit (split //, $n) {\n        my $int_digit = int($digit);\n        if ($int_digit%2 == 1) {\n            $product= $product*$int_digit;\n            $odd_count+=1;\n        }\n    }\n    if ($odd_count ==0) {\n        return 0;\n    }\n    else {\n        return $product;\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function digits(n)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function fib4(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub fib4 {\n    my($n) = @_;\n    my @results = (0, 0, 2, 0);\n    if ($n < 4) {\n        return $results[$n];\n    }\n\n    for (my $i = 4; $i <= $n; $i++) {\n        push @results, $results[-1] + $results[-2] + $results[-3] + $results[-4];\n        shift @results;\n    }\n\n    return $results[-1];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function fib4(n)\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sort_even(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sort_even {\n    my($l) = @_;\n    my @evens = @$l[ grep { $_ % 2 == 0 } 0 .. $#$l ];\n    my @odds = @$l[ grep { $_ % 2 == 1 } 0 .. $#$l ];\n    @evens = sort { $a <=> $b } @evens;\n    my @ans;\n    while (@evens && @odds) {\n        push @ans, shift @evens, shift @odds;\n    }\n    push @ans, pop @evens if @evens;\n    return \\@ans;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sort_even(l)\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function order_by_points(nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub order_by_points {\n    my($nums) = @_;\n    sub digits_sum {\n        my($n) = @_;\n        my $neg = 1;\n        if ($n < 0) { $n = -1 * $n; $neg = -1 }\n        my @n = split //, $n;\n        $n[0] = $n[0] * $neg;\n        my $sum = 0;\n        $sum += $_ for @n;\n        return $sum;\n    }\n    return [sort { digits_sum($a) <=> digits_sum($b) } @$nums];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function order_by_points(nums)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_happy(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_happy {\n    my($s) = @_;\n    if (length($s) < 3) {\n        return 0;\n    }\n    for my $i (0..length($s)-3) {\n        if (substr($s, $i, 1) eq substr($s, $i+1, 1) || substr($s, $i+1, 1) eq substr($s, $i+2, 1) || substr($s, $i, 1) eq substr($s, $i+2, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_happy(s)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function circular_shift(x, shift)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub circular_shift {\n    my($x, $shift) = @_;\n    my $s = \"$x\";\n    if ($shift > length($s)) {\n        return scalar reverse $s;\n    } else {\n        return substr($s, length($s) - $shift) . substr($s, 0, length($s) - $shift);\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function circular_shift(x, shift)\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function max_fill(grid, capacity)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub max_fill {\n    my($grid, $capacity) = @_;\n    my $total = 0;\n    foreach my $arr (@$grid) {\n        my $sum = 0;\n        foreach my $num (@$arr) {\n            $sum += $num;\n        }\n        $total += int(($sum + $capacity - 1) / $capacity);\n    }\n    return $total;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function max_fill(grid, capacity)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function has_close_elements(numbers, threshold)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n    for my $i (0..$#{$numbers}) {\n        for my $j (0..$#{$numbers}) {\n            next if $i == $j;\n            my $distance = abs($numbers->[$i] - $numbers->[$j]);\n            return 1 if $distance < $threshold;\n        }\n    }\n    return 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function has_close_elements(numbers, threshold)\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function numerical_letter_grade(grades)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub numerical_letter_grade {\n    my($grades) = @_;\n    my @letter_grade = ();\n    foreach my $gpa (@$grades) {\n        if($gpa == 4.0) {\n            push @letter_grade, \"A+\";\n        } elsif($gpa > 3.7) {\n            push @letter_grade, \"A\";\n        } elsif($gpa > 3.3) {\n            push @letter_grade, \"A-\";\n        } elsif($gpa > 3.0) {\n            push @letter_grade, \"B+\";\n        } elsif($gpa > 2.7) {\n            push @letter_grade, \"B\";\n        } elsif($gpa > 2.3) {\n            push @letter_grade, \"B-\";\n        } elsif($gpa > 2.0) {\n            push @letter_grade, \"C+\";\n        } elsif($gpa > 1.7) {\n            push @letter_grade, \"C\";\n        } elsif($gpa > 1.3) {\n            push @letter_grade, \"C-\";\n        } elsif($gpa > 1.0) {\n            push @letter_grade, \"D+\";\n        } elsif($gpa > 0.7) {\n            push @letter_grade, \"D\";\n        } elsif($gpa > 0.0) {\n            push @letter_grade, \"D-\";\n        } else {\n            push @letter_grade, \"E\";\n        }\n    }\n    return \\@letter_grade;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function numerical_letter_grade(grades)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function x_or_y(n, x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = x_or_y\n    lu.assertEquals(candidate(7, 34, 12), 34)\n    lu.assertEquals(candidate(15, 8, 5), 5)\n    lu.assertEquals(candidate(3, 33, 5212), 33)\n    lu.assertEquals(candidate(1259, 3, 52), 3)\n    lu.assertEquals(candidate(7919, -1, 12), -1)\n    lu.assertEquals(candidate(3609, 1245, 583), 583)\n    lu.assertEquals(candidate(91, 56, 129), 129)\n    lu.assertEquals(candidate(6, 34, 1234), 1234)\n    lu.assertEquals(candidate(1, 2, 0), 0)\n    lu.assertEquals(candidate(2, 2, 0), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub x_or_y {\n    my($n, $x, $y) = @_;\n    if ($n == 1) {\n        return $y;\n    }\n    for my $i (2..$n-1) {\n        if ($n % $i == 0) {\n            return $y;\n            last;\n        }\n    }\n    return $x;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function x_or_y(n, x, y)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function specialFilter(nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub specialFilter {\n    my($nums) = @_;\n    my $count = 0;\n    for my $num (@$nums) {\n        if ($num > 10) {\n            my @odd_digits = (1, 3, 5, 7, 9);\n            my $number_as_string = \"$num\";\n            if (grep { $_ == int(substr($number_as_string, 0, 1)) } @odd_digits and\n                grep { $_ == int(substr($number_as_string, -1)) } @odd_digits) {\n                $count += 1;\n            }\n        }\n    }\n    return $count;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function specialFilter(nums)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function parse_music(music_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub parse_music {\n    my($music_string) = @_;\n    my %note_map = ('o' => 4, 'o|' => 2, '.|' => 1);\n    return [map { $note_map{$_} } grep { $_ } split(' ', $music_string)];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function parse_music(music_string)\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function split_words(txt)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub split_words {\n    my($txt) = @_;\n    if ($txt =~ / /) {\n        return [split / /, $txt];\n    } elsif ($txt =~ /,/) {\n        return [split / /, $txt =~ s/,/ /gr];\n    } else {\n        return scalar grep { /[a-z]/ && ord($_) % 2 == 0 } split //, $txt;\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function split_words(txt)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function count_distinct_characters(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub count_distinct_characters {\n    my($string) = @_;\n    my %seen;\n    $seen{lc $_}++ for split //, $string;\n    return scalar keys %seen;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function count_distinct_characters(string)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function digitSum(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub digitSum {\n    my($s) = @_;\n    return 0 if $s eq \"\";\n    my $sum = 0;\n    for my $char (split //, $s) {\n        $sum += ord($char) if $char =~ /[A-Z]/;\n    }\n    return $sum;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function digitSum(s)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sum_squares(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1, 2, 3}), 6)\n    lu.assertEquals(candidate({1, 4, 9}), 14)\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 1, 1, 1, 1, 1, 1}), 9)\n    lu.assertEquals(candidate({-1, -1, -1, -1, -1, -1, -1, -1, -1}), -3)\n    lu.assertEquals(candidate({0}), 0)\n    lu.assertEquals(candidate({-1, -5, 2, -1, -5}), -126)\n    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)\n    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)\n    lu.assertEquals(candidate({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)\n    lu.assertEquals(candidate({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), -1448)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n    my @result = ();\n    for(my $i=0; $i<scalar(@$lst); $i++) {\n        if($i % 3 == 0) {\n            push @result, $lst->[$i]**2;\n        } elsif($i % 4 == 0 && $i % 3 != 0) {\n            push @result, $lst->[$i]**3;\n        } else {\n            push @result, $lst->[$i];\n        }\n    }\n    my $sum = 0;\n    foreach my $num (@result) {\n        $sum += $num;\n    }\n    return $sum;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sum_squares(lst)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function count_up_to(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub count_up_to {\n    my($n) = @_;\n    my @primes = ();\n    for my $i (2..$n-1) {\n        my $is_prime = 1;\n        for my $j (2..$i-1) {\n            if ($i % $j == 0) {\n                $is_prime = 0;\n                last;\n            }\n        }\n        if ($is_prime) {\n            push @primes, $i;\n        }\n    }\n    return \\@primes;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function count_up_to(n)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sum_squares(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}), 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n    use POSIX;\n    my $squared = 0;\n    foreach my $i (@$lst) {\n        $squared += ceil($i)**2;\n    }\n    return $squared;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sum_squares(lst)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function unique(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub unique {\n    my($l) = @_;\n    my %hash = map { $_ => 1 } @$l;\n    my @output = sort { $a <=> $b } keys %hash;\n    return \\@output;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function unique(l)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function fib(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function fib(n)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function fizz_buzz(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub fizz_buzz {\n    my($n) = @_;\n    my @ns;\n    for my $i (0..$n-1) {\n        if ($i % 11 == 0 or $i % 13 == 0) {\n            push @ns, $i;\n        }\n    }\n    my $s = join '', @ns;\n    my $ans = 0;\n    for my $c (split //, $s) {\n        $ans += ($c eq '7');\n    }\n    return $ans;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function fizz_buzz(n)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function Strongest_Extension(class_name, extensions)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n    my $strong = $extensions->[0];\n    my $my_val = scalar(grep { /[A-Z]/ && !/[a-z]/ } split //, $extensions->[0]) - scalar(grep { /[a-z]/ && !/[A-Z]/ } split //, $extensions->[0]);\n    for my $s (@$extensions) {\n        my $val = scalar(grep { /[A-Z]/ && !/[a-z]/ } split //, $s) - scalar(grep { /[a-z]/ && !/[A-Z]/ } split //, $s);\n        if ($val > $my_val) {\n            $strong = $s;\n            $my_val = $val;\n        }\n    }\n    my $ans = $class_name . \".\" . $strong;\n    return $ans;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function Strongest_Extension(class_name, extensions)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function find_closest_elements(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub find_closest_elements {\n    my($numbers) = @_;\n    my $closest_pair = undef;\n    my $distance = undef;\n\n    for my $idx (0..$#{$numbers}) {\n        my $elem = $numbers->[$idx];\n        for my $idx2 (0..$#{$numbers}) {\n            my $elem2 = $numbers->[$idx2];\n            if ($idx != $idx2) {\n                if (!defined $distance) {\n                    $distance = abs($elem - $elem2);\n                    $closest_pair = [sort($elem, $elem2)];\n                } else {\n                    my $new_distance = abs($elem - $elem2);\n                    if ($new_distance < $distance) {\n                        $distance = $new_distance;\n                        $closest_pair = [sort($elem, $elem2)];\n                    }\n                }\n            }\n        }\n    }\n\n    return $closest_pair;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function find_closest_elements(numbers)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function valid_date(date)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub valid_date {\n    my($date) = @_;\n    eval {\n        $date =~ s/^\\s+|\\s+$//g;\n        my($month, $day, $year) = split /-/, $date;\n        die unless $month >= 1 && $month <= 12;\n        if ($month == 2) {\n            die unless $day >= 1 && $day <= 29;\n        } elsif ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n            die unless $day >= 1 && $day <= 30;\n        } else {\n            die unless $day >= 1 && $day <= 31;\n        }\n    };\n    return !$@;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function valid_date(date)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function add(x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub add {\n    my($x, $y) = @_;\n    return $x + $y;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function add(x, y)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function triples_sum_to_zero(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1, 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub triples_sum_to_zero {\n    my($l) = @_;\n    for my $i (0..$#{$l}) {\n        for my $j ($i+1..$#{$l}) {\n            for my $k ($j+1..$#{$l}) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function triples_sum_to_zero(l)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function largest_divisor(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub largest_divisor {\n    my($n) = @_;\n    for my $i (reverse(0..$n-1)) {\n        return $i if $n % $i == 0;\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function largest_divisor(n)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sort_numbers(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sort_numbers {\n    my($numbers) = @_;\n    my %value_map = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    );\n    return join(' ', sort { $value_map{$a} <=> $value_map{$b} } grep { $_ } split(/ /, $numbers));\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sort_numbers(numbers)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function smallest_change(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3, 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0, 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub smallest_change {\n    my($arr) = @_;\n    my $ans = 0;\n    for my $i (0 .. int(@$arr / 2) - 1) {\n        if ($arr->[$i] != $arr->[@$arr - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function smallest_change(arr)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function below_threshold(l, t)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = below_threshold\n    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}, 5), false)\n    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)\n    lu.assertEquals(candidate({1, 8, 4, 10}, 11), true)\n    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub below_threshold {\n    my($l, $t) = @_;\n    for my $e (@$l) {\n        if ($e >= $t) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function below_threshold(l, t)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function prod_signs(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1, 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub prod_signs {\n    my($arr) = @_;\n    if (!$arr) { return undef; }\n    my $prod = 0;\n    if (!grep { $_ == 0 } @$arr) {\n        $prod = (-1) ** scalar(grep { $_ < 0 } @$arr);\n    }\n    my $sum = 0;\n    for my $i (@$arr) {\n        $sum += abs($i);\n    }\n    return $prod * $sum;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function prod_signs(arr)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function modp(n, p)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub modp {\n    my($n, $p) = @_;\n    my $ret = 1;\n    for my $i (0..$n-1) {\n        $ret = (2 * $ret) % $p;\n    }\n    return $ret;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function modp(n, p)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function count_upper(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub count_upper {\n    my($s) = @_;\n    my $count = 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n        if(index(\"AEIOU\", substr($s, $i, 1)) != -1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function count_upper(s)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function multiply(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub multiply {\n    my($a, $b) = @_;\n    return abs($a % 10) * abs($b % 10);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function multiply(a, b)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function unique_digits(x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub unique_digits {\n    my($x) = @_;\n    my @odd_digit_elements;\n    foreach my $i (@$x) {\n        if ($i !~ /[02468]/) {\n            push @odd_digit_elements, $i;\n        }\n    }\n    return [ sort { $a <=> $b } @odd_digit_elements ];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function unique_digits(x)\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function will_it_fly(q, w)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub will_it_fly {\n    my($q, $w) = @_;\n    my $sum = 0;\n    $sum += $_ for @$q;\n    return 0 if $sum > $w;\n\n    my($i, $j) = (0, scalar @$q - 1);\n    while ($i < $j) {\n        return 0 if $q->[$i] != $q->[$j];\n        $i++;\n        $j--;\n    }\n    return 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function will_it_fly(q, w)\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_multiply_prime(a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_multiply_prime {\n    my($a) = @_;\n    sub is_prime {\n        my($n) = @_;\n        for my $j (2..$n-1) {\n            return 0 if $n % $j == 0;\n        }\n        return 1;\n    }\n    for my $i (2..100) {\n        next unless is_prime($i);\n        for my $j (2..100) {\n            next unless is_prime($j);\n            for my $k (2..100) {\n                next unless is_prime($k);\n                return 1 if $i*$j*$k == $a;\n            }\n        }\n    }\n    return 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_multiply_prime(a)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function maximum(arr, k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub maximum {\n    my($arr, $k) = @_;\n    if ($k == 0) {\n        return [];\n    }\n    @$arr = sort { $a <=> $b } @$arr;\n    my $ans = [ @$arr[-$k..-1] ];\n    return $ans;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function maximum(arr, k)\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function separate_paren_groups(paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub separate_paren_groups {\n    my($paren_string) = @_;\n    my @result;\n    my @current_string;\n    my $current_depth = 0;\n\n    for my $c (split //, $paren_string) {\n        if ($c eq '(') {\n            $current_depth += 1;\n            push @current_string, $c;\n        } elsif ($c eq ')') {\n            $current_depth -= 1;\n            push @current_string, $c;\n\n            if ($current_depth == 0) {\n                push @result, join('', @current_string);\n                @current_string = ();\n            }\n        }\n    }\n\n    return \\@result;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function separate_paren_groups(paren_string)\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function filter_integers(values)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub filter_integers {\n    my($values) = @_;\n    return [grep { $_ if $_ =~ /^\\d+$/ } @$values];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function filter_integers(values)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function skjkasdkd(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = skjkasdkd\n    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n    lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub skjkasdkd {\n    my($lst) = @_;\n    sub isPrime {\n        my($n) = @_;\n        for my $i (2..int($n**0.5)+1) {\n            if ($n % $i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    my $maxx = 0;\n    my $i = 0;\n    while ($i < scalar @$lst) {\n        if($lst->[$i] > $maxx and isPrime($lst->[$i])) {\n            $maxx = $lst->[$i];\n        }\n        $i += 1;\n    }\n    my $result = 0;\n    for my $digit (split //, $maxx) {\n        $result += $digit;\n    }\n    return $result;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function skjkasdkd(lst)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function total_match(lst1, lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub total_match {\n    my($lst1, $lst2) = @_;\n    my $l1 = 0;\n    for my $st (@$lst1) {\n        $l1 += length($st);\n    }\n    my $l2 = 0;\n    for my $st (@$lst2) {\n        $l2 += length($st);\n    }\n    if ($l1 <= $l2) {\n        return $lst1;\n    } else {\n        return $lst2;\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function total_match(lst1, lst2)\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function string_to_md5(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub string_to_md5 {\n    my($text) = @_;\n    use Digest::MD5 qw(md5_hex);\n    return $text ? md5_hex($text) : undef;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function string_to_md5(text)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function car_race_collision(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub car_race_collision {\n    my($n) = @_;\n    return $n**2;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function car_race_collision(n)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_simple_power(x, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_simple_power {\n    my($x, $n) = @_;\n    if ($n == 1) {\n        return ($x == 1);\n    }\n    my $power = 1;\n    while ($power < $x) {\n        $power = $power * $n;\n    }\n    return ($power == $x);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_simple_power(x, n)\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function encode(message)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub encode {\n    my($message) = @_;\n    my $vowels = \"aeiouAEIOU\";\n    my %vowels_replace = map { $_ => chr(ord($_) + 2) } split //, $vowels;\n    $message = lc($message) ^ uc($message) ^ $message;\n    return join '', map { exists $vowels_replace{$_} ? $vowels_replace{$_} : $_ } split //, $message;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function encode(message)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function incr_list(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub incr_list {\n    my($l) = @_;\n    return [map { $_ + 1 } @$l];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function incr_list(l)\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function flip_case(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'), 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub flip_case {\n    my($string) = @_;\n    return $string =~ tr/A-Za-z/a-zA-Z/r;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function flip_case(string)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function vowels_count(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub vowels_count {\n    my($s) = @_;\n    my $vowels = \"aeiouAEIOU\";\n    my $n_vowels = () = $s =~ /[$vowels]/g;\n    if (substr($s, -1) eq 'y' or substr($s, -1) eq 'Y') {\n        $n_vowels += 1;\n    }\n    return $n_vowels;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function vowels_count(s)\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sorted_list_sum(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sorted_list_sum {\n    my($lst) = @_;\n    my @new_lst;\n    for my $i (@$lst) {\n        if (length($i) % 2 == 0) {\n            push @new_lst, $i;\n        }\n    }\n    return [ sort { length($a) <=> length($b) } sort @new_lst ];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sorted_list_sum(lst)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function words_string(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub words_string {\n    my($s) = @_;\n    return [] if !$s;\n    $s =~ s/,/ /g;\n    return [ split ' ', $s ];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function words_string(s)\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function even_odd_palindrome(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_palindrome\n    lu.assertEquals(candidate(123), {8, 13})\n    lu.assertEquals(candidate(12), {4, 6})\n    lu.assertEquals(candidate(3), {1, 2})\n    lu.assertEquals(candidate(63), {6, 8})\n    lu.assertEquals(candidate(25), {5, 6})\n    lu.assertEquals(candidate(19), {4, 6})\n    lu.assertEquals(candidate(9), {4, 5})\n    lu.assertEquals(candidate(1), {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub even_odd_palindrome {\n    my($n) = @_;\n    sub is_palindrome {\n        my($n) = @_;\n        return $n eq reverse $n;\n    }\n    my $even_palindrome_count = 0;\n    my $odd_palindrome_count = 0;\n    for my $i (1..$n) {\n        if ($i % 2 == 1 && is_palindrome($i)) {\n            $odd_palindrome_count += 1;\n        } elsif ($i % 2 == 0 && is_palindrome($i)) {\n            $even_palindrome_count += 1;\n        }\n    }\n    my @output = ($even_palindrome_count, $odd_palindrome_count);\n    return \\@output\n}\n\n### Lua version\n\nmath = require('math')\nlocal function even_odd_palindrome(n)\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function triangle_area(a, b, c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub triangle_area {\n    my($a, $b, $c) = @_;\n    if ($a + $b <= $c or $a + $c <= $b or $b + $c <= $a) {\n        return -1;\n    }\n    my $s = ($a + $b + $c)/2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    $area = sprintf(\"%.2f\", $area);\n    return $area;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function triangle_area(a, b, c)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function check_dict_case(dict)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub check_dict_case {\n    my($dict) = @_;\n    if (scalar keys %$dict == 0) {\n        return 0;\n    } else {\n        my $state = \"start\";\n        for my $key (keys %$dict) {\n            if (ref $key ne \"\") {\n                $state = \"mixed\";\n                last;\n            }\n            if ($state eq \"start\") {\n                if ($key =~ /^[A-Z]+$/) {\n                    $state = \"upper\";\n                } elsif ($key =~ /^[a-z]+$/) {\n                    $state = \"lower\";\n                } else {\n                    last;\n                }\n            } elsif (($state eq \"upper\" && $key !~ /^[A-Z]+$/) || ($state eq \"lower\" && $key !~ /^[a-z]+$/)) {\n                $state = \"mixed\";\n                last;\n            }\n        }\n        return $state eq \"upper\" || $state eq \"lower\";\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function check_dict_case(dict)\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function tri(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub tri {\n    my($n) = @_;\n    if ($n == 0) {\n        return [1];\n    }\n    my @my_tri = (1, 3);\n    for my $i (2..$n) {\n        if ($i % 2 == 0) {\n            push @my_tri, $i / 2 + 1;\n        } else {\n            push @my_tri, $my_tri[$i - 1] + $my_tri[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return \\@my_tri;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function tri(n)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function median(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub median {\n    my($l) = @_;\n    my @sorted = sort {$a <=> $b} @$l;\n    my $len = scalar(@sorted);\n    if ($len % 2 == 1) {\n        return $sorted[$len / 2];\n    } else {\n        return ($sorted[$len / 2 - 1] + $sorted[$len / 2]) / 2.0;\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function median(l)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function change_base(x, base)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub change_base {\n    my($x, $base) = @_;\n    my $ret = \"\";\n    while ($x > 0) {\n        $ret = ($x % $base) . $ret;\n        $x = int($x / $base);\n    }\n    return $ret;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function change_base(x, base)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function longest(strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub longest {\n    my($strings) = @_;\n    if (!@$strings) {\n        return undef;\n    }\n\n    my $maxlen = 0;\n    for my $s (@$strings) {\n        if (length($s) > $maxlen) {\n            $maxlen = length($s);\n        }\n    }\n\n    for my $s (@$strings) {\n        if (length($s) == $maxlen) {\n            return $s;\n        }\n    }\n    return undef;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function longest(strings)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function common(l1, l2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub common {\n    my($l1, $l2) = @_;\n    my %ret;\n    for my $e1 (@$l1) {\n        for my $e2 (@$l2) {\n            if ($e1 == $e2) {\n                $ret{$e1} = 1;\n            }\n        }\n    }\n    return [sort keys %ret];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function common(l1, l2)\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function cycpattern_check(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cycpattern_check\n    lu.assertEquals(candidate('xyzw', 'xyw'), false)\n    lu.assertEquals(candidate('yello', 'ell'), true)\n    lu.assertEquals(candidate('whattup', 'ptut'), false)\n    lu.assertEquals(candidate('efef', 'fee'), true)\n    lu.assertEquals(candidate('abab', 'aabb'), false)\n    lu.assertEquals(candidate('winemtt', 'tinem'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub cycpattern_check {\n    my($a, $b) = @_;\n    my $l = length $b;\n    my $pat = $b . $b;\n    for my $i (0..length($a) - $l) {\n        for my $j (0..$l) {\n            if (substr($a, $i, $l) eq substr($pat, $j, $l)) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function cycpattern_check(a, b)\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sort_array(array)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sort_array {\n    my($array) = @_;\n    return [] if scalar @$array == 0;\n    my $sum = $array->[0] + $array->[-1];\n    return [ sort { $sum % 2 == 0 ? $b <=> $a : $a <=> $b } @$array ];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sort_array(array)\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function histogram(test)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub histogram {\n    my($test) = @_;\n    my %dict1;\n    my @list1 = split / /, $test;\n    my $t = 0;\n\n    foreach my $i (@list1) {\n        if (scalar(grep { $_ eq $i } @list1) > $t and $i ne '') {\n            $t = scalar(grep { $_ eq $i } @list1);\n        }\n    }\n    if ($t > 0) {\n        foreach my $i (@list1) {\n            if (scalar(grep { $_ eq $i } @list1) == $t) {\n                $dict1{$i} = $t;\n            }\n        }\n    }\n    return \\%dict1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function histogram(test)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function get_odd_collatz(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_odd_collatz\n    lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(5), {1, 5})\n    lu.assertEquals(candidate(12), {1, 3, 5})\n    lu.assertEquals(candidate(1), {1})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub get_odd_collatz {\n    my($n) = @_;\n    my @odd_collatz = $n % 2 == 0 ? () : ($n);\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n /= 2;\n        } else {\n            $n = $n * 3 + 1;\n        }\n        if ($n % 2 == 1) {\n            push @odd_collatz, $n;\n        }\n    }\n    return [ sort { $a <=> $b } @odd_collatz ];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function get_odd_collatz(n)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function derivative(xs)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3, 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub derivative {\n    my($xs) = @_;\n    return [map { $_ * $xs->[$_] } 1..$#$xs];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function derivative(xs)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function fibfib(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub fibfib {\n    my($n) = @_;\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function fibfib(n)\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function truncate_number(number)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub truncate_number {\n    my($number) = @_;\n    return $number - int($number);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function truncate_number(number)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function max_element(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub max_element {\n    my($l) = @_;\n    my $m = $l->[0];\n    for my $e (@$l) {\n        if ($e > $m) {\n            $m = $e;\n        }\n    }\n    return $m;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function max_element(l)\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function closest_integer(value)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_integer\n    lu.assertEquals(candidate('10'), 10)\n    lu.assertEquals(candidate('14.5'), 15)\n    lu.assertEquals(candidate('-15.5'), -16)\n    lu.assertEquals(candidate('15.3'), 15)\n    lu.assertEquals(candidate('0'), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub closest_integer {\n    my($value) = @_;\n    my $num = $value + 0;\n    if ($value =~ /\\.\\d*5$/) {\n        if ($num > 0) {\n            return int($num + 0.5);\n        } else {\n            return int($num - 0.5);\n        }\n    } elsif (length($value) > 0) {\n        return int($num + 0.5);\n    } else {\n        return 0;\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function closest_integer(value)\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function prime_fib(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub prime_fib {\n    my($n) = @_;\n    use Math::Prime::Util qw(is_prime);\n    my @f = (0, 1);\n    while (1) {\n        push @f, $f[-1] + $f[-2];\n        if (is_prime($f[-1])) {\n            $n -= 1;\n        }\n        if ($n == 0) {\n            return $f[-1];\n        }\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function prime_fib(n)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sum_product(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sum_product {\n    my($numbers) = @_;\n    my $sum_value = 0;\n    my $prod_value = 1;\n    for my $n (@$numbers) {\n        $sum_value += $n;\n        $prod_value *= $n;\n    }\n    my @output = ($sum_value, $prod_value);\n    return \\@output\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sum_product(numbers)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function select_words(s, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub select_words {\n    my($s, $n) = @_;\n    my @result = ();\n    for my $word (split / /, $s) {\n        my $n_consonants = 0;\n        for my $i (0 .. length($word) - 1) {\n            if (lc(substr($word, $i, 1)) !~ /[aeiou]/) {\n                $n_consonants++;\n            }\n        }\n        if ($n_consonants == $n) {\n            push @result, $word;\n        }\n    }\n    return \\@result;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function select_words(s, n)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function add_elements(arr, k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub add_elements {\n    my($arr, $k) = @_;\n    my $sum = 0;\n    for my $elem (@$arr[0..$k-1]) {\n        $sum += $elem if length($elem) <= 2;\n    }\n    return $sum;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function add_elements(arr, k)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function eat(number, need, remaining)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub eat {\n    my($number, $need, $remaining) = @_;\n    if($need <= $remaining) {\n        return [$number + $need, $remaining - $need];\n    } else {\n        return [$number + $remaining, 0];\n    }\n}\n\n### Lua version\n\nmath = require('math')\nlocal function eat(number, need, remaining)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function next_smallest(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub next_smallest {\n    my($lst) = @_;\n    my @sorted = sort { $a <=> $b } keys %{{ map { $_ => 1 } @$lst }};\n    return undef if scalar @sorted < 2;\n    return $sorted[1];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function next_smallest(lst)\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function get_row(lst, x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub get_row {\n    my($lst, $x) = @_;\n    my @coords = ();\n    for my $i (0 .. @$lst - 1) {\n        for my $j (0 .. @{$lst->[$i]} - 1) {\n            if ($lst->[$i][$j] == $x) {\n                push @coords, [$i, $j];\n            }\n        }\n    }\n    my @sorted_coords = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @coords;\n    return [ map { [ @$_ ] } @sorted_coords ];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function get_row(lst, x)\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function filter_by_prefix(strings, prefix)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n    return [grep { $_ =~ /^$prefix/ } @$strings];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function filter_by_prefix(strings, prefix)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function choose_num(x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub choose_num {\n    my($x, $y) = @_;\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x == $y) {\n        return -1;\n    }\n    return $y - 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function choose_num(x, y)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function prime_length(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub prime_length {\n    my($string) = @_;\n    my $l = length($string);\n    return 0 if $l == 0 or $l == 1;\n    for my $i (2..$l-1) {\n        return 0 if $l % $i == 0;\n    }\n    return 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function prime_length(string)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sum_to_n(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sum_to_n {\n    my($n) = @_;\n    my $sum = 0;\n    for (my $i = 0; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sum_to_n(n)\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function fix_spaces(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub fix_spaces {\n    my($text) = @_;\n    my $new_text = \"\";\n    my $i = 0;\n    my($start, $end) = (0, 0);\n    while ($i < length($text)) {\n        if (substr($text, $i, 1) eq \" \") {\n            $end += 1;\n        } else {\n            if ($end - $start > 2) {\n                $new_text .= \"-\".substr($text, $i, 1);\n            } elsif ($end - $start > 0) {\n                $new_text .= \"_\" x ($end - $start).substr($text, $i, 1);\n            } else {\n                $new_text .= substr($text, $i, 1);\n            }\n            ($start, $end) = ($i+1, $i+1);\n        }\n        $i+=1;\n    }\n    if ($end - $start > 2) {\n        $new_text .= \"-\";\n    } elsif ($end - $start > 0) {\n        $new_text .= \"_\";\n    }\n    return $new_text;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function fix_spaces(text)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function rolling_max(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub rolling_max {\n    my($numbers) = @_;\n    my $running_max = undef;\n    my @result = ();\n\n    foreach my $n (@$numbers) {\n        if (!defined($running_max)) {\n            $running_max = $n;\n        } else {\n            $running_max = ($running_max > $n) ? $running_max : $n;\n        }\n\n        push @result, $running_max;\n    }\n\n    return \\@result;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function rolling_max(numbers)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function words_in_sentence(sentence)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub words_in_sentence {\n    my($sentence) = @_;\n    my @new_lst = ();\n    for my $word (split /\\s+/, $sentence) {\n        my $flg = 0;\n        if (length($word) == 1) {\n            $flg = 1;\n        }\n        for my $i (2..length($word)-1) {\n            if (length($word)%$i == 0) {\n                $flg = 1;\n            }\n        }\n        if ($flg == 0 or length($word) == 2) {\n            push @new_lst, $word;\n        }\n    }\n    return join(\" \", @new_lst);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function words_in_sentence(sentence)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function get_closest_vowel(word)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub get_closest_vowel {\n    my($word) = @_;\n    if (length($word) < 3) {\n        return \"\";\n    }\n\n    my %vowels = map { $_ => 1 } qw(a e i o u A E O U I);\n    for (my $i = length($word)-2; $i > 0; $i--) {\n        if (exists $vowels{substr($word, $i, 1)}) {\n            if (!exists $vowels{substr($word, $i+1, 1)} && !exists $vowels{substr($word, $i-1, 1)}) {\n                return substr($word, $i, 1);\n            }\n        }\n    }\n    return \"\";\n}\n\n### Lua version\n\nmath = require('math')\nlocal function get_closest_vowel(word)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function compare(game, guess)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0, 0, 0, 3, 3})\n    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}), {0, 0, 0, 0, 0, 0})\n    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}), {2, 4, 6})\n    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0, 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub compare {\n    my($game, $guess) = @_;\n    return [map { abs($game->[$_] - $guess->[$_]) } 0..$#$game];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function compare(game, guess)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function remove_duplicates(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub remove_duplicates {\n    my($numbers) = @_;\n    my %count;\n    $count{$_}++ for @$numbers;\n    return [grep { $count{$_} == 1 } @$numbers];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function remove_duplicates(numbers)\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function same_chars(s0, s1)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub same_chars {\n    my($s0, $s1) = @_;\n    my %set0 = map { $_ => 1 } split //, $s0;\n    my %set1 = map { $_ => 1 } split //, $s1;\n    return scalar(keys %set0) == scalar(keys %set1) && scalar(grep { $set0{$_} } keys %set1) == scalar(keys %set0);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function same_chars(s0, s1)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function parse_nested_parens(paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub parse_nested_parens {\n    my($paren_string) = @_;\n    sub parse_paren_group {\n        my($s) = @_;\n        my $depth = 0;\n        my $max_depth = 0;\n        foreach my $c (split //, $s) {\n            if ($c eq '(') {\n                $depth += 1;\n                $max_depth = $depth if $depth > $max_depth;\n            } else {\n                $depth -= 1;\n            }\n        }\n        return $max_depth;\n    }\n    return [map { parse_paren_group($_) } grep { $_ } split / /, $paren_string];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function parse_nested_parens(paren_string)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function even_odd_count(num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub even_odd_count {\n    my($num) = @_;\n    my $even_count = 0;\n    my $odd_count = 0;\n    for my $i (split //, abs $num) {\n        if ($i % 2 == 0) {\n            $even_count += 1;\n        } else {\n            $odd_count += 1;\n        }\n    }\n    return [$even_count, $odd_count];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function even_odd_count(num)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function string_xor(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub string_xor {\n    my($a, $b) = @_;\n    my @a = split //, $a;\n    my @b = split //, $b;\n    my @result;\n    for my $i (0 .. $#a) {\n        push @result, $a[$i] eq $b[$i] ? '0' : '1';\n    }\n    return join('', @result);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function string_xor(a, b)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function strlen(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub strlen {\n    my($string) = @_;\n    return length($string);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function strlen(string)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function string_sequence(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub string_sequence {\n    my($n) = @_;\n    return join(' ', map { $_ } 0..$n);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function string_sequence(n)\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function file_name_check(file_name)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'), 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'), 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'), 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'), 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'), 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub file_name_check {\n    my($file_name) = @_;\n    my @suf = ('txt', 'exe', 'dll');\n    my @lst = split(/\\./, $file_name);\n    if (@lst != 2) {\n        return 'No';\n    }\n    if (!grep {$_ eq $lst[1]} @suf) {\n        return 'No';\n    }\n    if (length($lst[0]) == 0) {\n        return 'No';\n    }\n    if ($lst[0] !~ /^[a-zA-Z]/) {\n        return 'No';\n    }\n    my $t = () = $lst[0] =~ /\\d/g;\n    if ($t > 3) {\n        return 'No';\n    }\n    return 'Yes';\n}\n\n### Lua version\n\nmath = require('math')\nlocal function file_name_check(file_name)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function can_arrange(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub can_arrange {\n    my($arr) = @_;\n    my $ind = -1;\n    my $i = 1;\n    while ($i < scalar @$arr) {\n        if ($arr->[$i] < $arr->[$i-1]) {\n            $ind = $i;\n        }\n        $i++;\n    }\n    return $ind;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function can_arrange(arr)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function add(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub add {\n    my($lst) = @_;\n    my $sum = 0;\n    for(my $i = 1; $i < scalar(@$lst); $i += 2) {\n        if($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function add(lst)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function intersperse(numbers, delimeter)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n    return [] unless @$numbers;\n\n    my @result;\n\n    for my $n (@$numbers[0..$#$numbers-1]) {\n        push @result, $n, $delimeter;\n    }\n\n    push @result, $numbers->[-1];\n\n    return \\@result;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function intersperse(numbers, delimeter)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function match_parens(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')', ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n    lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n    lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((', '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n    lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub match_parens {\n    my($lst) = @_;\n    sub check {\n        my($s) = @_;\n        my $val = 0;\n        for my $i (split //, $s) {\n            if ($i eq '(') {\n                $val = $val + 1;\n            } else {\n                $val = $val - 1;\n            }\n            if ($val < 0) {\n                return 0;\n            }\n        }\n        return $val == 0 ? 1 : 0;\n    }\n    my $S1 = $lst->[0] . $lst->[1];\n    my $S2 = $lst->[1] . $lst->[0];\n    return check($S1) || check($S2) ? 'Yes' : 'No';\n}\n\n### Lua version\n\nmath = require('math')\nlocal function match_parens(lst)\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function filter_by_substring(strings, substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub filter_by_substring {\n    my($strings, $substring) = @_;\n    return [grep { $_ =~ $substring } @$strings];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function filter_by_substring(strings, substring)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function find_max(words)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub find_max {\n    my($words) = @_;\n    my $len_set = sub { scalar keys %{{ map { $_ => 1 } split //, $_[0] }} };\n    return (sort { $len_set->($b) <=> $len_set->($a) || $a cmp $b } @$words)[0];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function find_max(words)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function exchange(lst1, lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub exchange {\n    my($lst1, $lst2) = @_;\n    my $odd = 0;\n    my $even = 0;\n    foreach my $i (@$lst1) {\n        if ($i%2 == 1) {\n            $odd += 1;\n        }\n    }\n    foreach my $i (@$lst2) {\n        if ($i%2 == 0) {\n            $even += 1;\n        }\n    }\n    if ($even >= $odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n### Lua version\n\nmath = require('math')\nlocal function exchange(lst1, lst2)\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function int_to_mini_roman(number)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub int_to_mini_roman {\n    my($number) = @_;\n    my @num = (1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n    my @sym = (\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n    my $i = 12;\n    my $res = '';\n    while ($number) {\n        my $div = int($number / $num[$i]);\n        $number %= $num[$i];\n        while ($div) {\n            $res .= $sym[$i];\n            $div--;\n        }\n        $i--;\n    }\n    return lc($res);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function int_to_mini_roman(number)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_equal_to_sum_even(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_equal_to_sum_even\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(11), false)\n    lu.assertEquals(candidate(12), true)\n    lu.assertEquals(candidate(13), false)\n    lu.assertEquals(candidate(16), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_equal_to_sum_even {\n    my($n) = @_;\n    return $n%2 == 0 && $n >= 8;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_equal_to_sum_even(n)\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function decimal_to_binary(decimal)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub decimal_to_binary {\n    my($decimal) = @_;\n    return \"db\".sprintf(\"%b\", $decimal).\"db\";\n}\n\n### Lua version\n\nmath = require('math')\nlocal function decimal_to_binary(decimal)\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function sort_third(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_third\n    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})\n    lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})\n    lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})\n    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub sort_third {\n    my($l) = @_;\n    my @l = @$l;\n    @l[map { $_ * 3 } 0..$#l/3] = sort @l[map { $_ * 3 } 0..$#l/3];\n    return \\@l;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function sort_third(l)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function simplify(x, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = simplify\n    lu.assertEquals(candidate('1/5', '5/1'), true)\n    lu.assertEquals(candidate('1/6', '2/1'), false)\n    lu.assertEquals(candidate('5/1', '3/1'), true)\n    lu.assertEquals(candidate('7/10', '10/2'), false)\n    lu.assertEquals(candidate('2/10', '50/10'), true)\n    lu.assertEquals(candidate('7/2', '4/2'), true)\n    lu.assertEquals(candidate('11/6', '6/1'), true)\n    lu.assertEquals(candidate('2/3', '5/2'), false)\n    lu.assertEquals(candidate('5/2', '3/5'), false)\n    lu.assertEquals(candidate('2/4', '8/4'), true)\n    lu.assertEquals(candidate('2/4', '4/2'), true)\n    lu.assertEquals(candidate('1/5', '5/1'), true)\n    lu.assertEquals(candidate('1/5', '1/5'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub simplify {\n    my($x, $n) = @_;\n    my($a, $b) = split \"/\", $x;\n    my($c, $d) = split \"/\", $n;\n    my $numerator = $a * $c;\n    my $denom = $b * $d;\n    if ($numerator/$denom == int($numerator/$denom)) {\n        return 1;\n    }\n    return 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function simplify(x, n)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function right_angle_triangle(a, b, c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    return $a*$a == $b*$b + $c*$c || $b*$b == $a*$a + $c*$c || $c*$c == $a*$a + $b*$b;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function right_angle_triangle(a, b, c)\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function double_the_difference(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub double_the_difference {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i > 0 && $i % 2 != 0 && $i !~ /\\./) {\n            $sum += $i ** 2;\n        }\n    }\n    return $sum;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function double_the_difference(lst)\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function compare_one(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare_one\n    lu.assertEquals(candidate(1, 2), 2)\n    lu.assertEquals(candidate(1, 2.5), 2.5)\n    lu.assertEquals(candidate(2, 3), 3)\n    lu.assertEquals(candidate(5, 6), 6)\n    lu.assertEquals(candidate(1, '2,3'), '2,3')\n    lu.assertEquals(candidate('5,1', '6'), '6')\n    lu.assertEquals(candidate('1', '2'), '2')\n    lu.assertEquals(candidate('1', 1), None)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub compare_one {\n    my($a, $b) = @_;\n    my($temp_a, $temp_b) = ($a, $b);\n    $temp_a =~ s/,/./g if $temp_a =~ /str/;\n    $temp_b =~ s/,/./g if $temp_b =~ /str/;\n    return undef if $temp_a == $temp_b;\n    return $a if $temp_a > $temp_b;\n    return $b;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function compare_one(a, b)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function below_zero(operations)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = below_zero\n    lu.assertEquals(candidate({}), false)\n    lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)\n    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)\n    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)\n    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)\n    lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub below_zero {\n    my($operations) = @_;\n    my $balance = 0;\n    for my $op (@$operations) {\n        $balance += $op;\n        if ($balance < 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function below_zero(operations)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function greatest_common_divisor(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n    while ($b) {\n        ($a, $b) = ($b, $a % $b);\n    }\n    return $a;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function greatest_common_divisor(a, b)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function f(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub f {\n    my($n) = @_;\n    my @ret;\n    for my $i (1..$n) {\n        if ($i % 2 == 0) {\n            my $x = 1;\n            for my $j (1..$i) { $x *= $j }\n            push @ret, $x;\n        } else {\n            my $x = 0;\n            for my $j (1..$i) { $x += $j }\n            push @ret, $x;\n        }\n    }\n    return \\@ret;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function f(n)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function monotonic(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub monotonic {\n    my($l) = @_;\n    return 1 if @$l == 1;\n    return 1 if $l ~~ [ sort { $a <=> $b } @$l ];\n    return 1 if $l ~~ [ sort { $b <=> $a } @$l ];\n    return 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function monotonic(l)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function by_length(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub by_length {\n    my($arr) = @_;\n    my %dic = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    my @sorted_arr = sort { $b <=> $a } @$arr;\n    my @new_arr;\n    foreach my $var (@sorted_arr) {\n        push @new_arr, $dic{$var} if exists $dic{$var};\n    }\n    return \\@new_arr;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function by_length(arr)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function remove_vowels(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub remove_vowels {\n    my($text) = @_;\n    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function remove_vowels(text)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function iscube(a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub iscube {\n    my($a) = @_;\n    $a = abs($a);\n    return int($a ** (1/3) + 0.5) ** 3 == $a;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function iscube(a)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function correct_bracketing(brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $depth = 0;\n    for my $b (split //, $brackets) {\n        if ($b eq '<') {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return 0;\n        }\n    }\n    return $depth == 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function correct_bracketing(brackets)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function intersection(interval1, interval2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub intersection {\n    my($interval1, $interval2) = @_;\n    sub is_prime {\n        my($num) = @_;\n        if ($num == 1 || $num == 0) {\n            return 0;\n        }\n        if ($num == 2) {\n            return 1;\n        }\n        for my $i (2..$num-1) {\n            if ($num%$i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    my $l = $interval1->[0] > $interval2->[0] ? $interval1->[0] : $interval2->[0];\n    my $r = $interval1->[1] < $interval2->[1] ? $interval1->[1] : $interval2->[1];\n    my $length = $r - $l;\n    if ($length > 0 && is_prime($length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n### Lua version\n\nmath = require('math')\nlocal function intersection(interval1, interval2)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function hex_key(num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub hex_key {\n    my($num) = @_;\n    my @primes = ('2', '3', '5', '7', 'B', 'D');\n    my $total = 0;\n    for my $i (0..length($num)-1) {\n        if (grep { $_ eq substr($num, $i, 1) } @primes) {\n            $total += 1;\n        }\n    }\n    return $total;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function hex_key(num)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function strange_sort_list(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}), {111111})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub strange_sort_list {\n    my($lst) = @_;\n    my $res = [];\n    my $switch = 1;\n    while (@$lst) {\n        push @$res, $switch ? (sort { $a <=> $b } @$lst)[0] : (sort { $b <=> $a } @$lst)[0];\n        splice @$lst, (grep { $lst->[$_] == $res->[-1] } 0..$#$lst)[0], 1;\n        $switch = !$switch;\n    }\n    return $res;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function strange_sort_list(lst)\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_bored(S)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_bored {\n    my($S) = @_;\n    my @sentences = split /[.?!]\\s*/, $S;\n    return scalar grep { substr($_, 0, 2) eq 'I ' } @sentences;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_bored(S)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function all_prefixes(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub all_prefixes {\n    my($string) = @_;\n    my @result = ();\n    for my $i (0..length($string)-1) {\n        push @result, substr($string, 0, $i+1);\n    }\n    return \\@result\n}\n\n### Lua version\n\nmath = require('math')\nlocal function all_prefixes(string)\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function how_many_times(string, substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub how_many_times {\n    my($string, $substring) = @_;\n    my $times = 0;\n\n    for my $i (0..length($string) - length($substring)) {\n        if (substr($string, $i, length($substring)) eq $substring) {\n            $times += 1;\n        }\n    }\n\n    return $times;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function how_many_times(string, substring)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function solution(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3, 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub solution {\n    my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 1;\n    }\n    return $sum;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function solution(lst)\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_sorted(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_sorted {\n    my ($lst) = @_;\n\n    my %count_digit;\n    foreach my $i (@$lst) {\n        $count_digit{$i}++;\n    }\n\n    if (grep { $count_digit{$_} > 2 } @$lst) {\n        return 0;\n    }\n\n    for my $i (1 .. @$lst - 1) {\n        if ($lst->[$i - 1] > $lst->[$i]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_sorted(lst)\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function pluck(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub pluck {\n    my($arr) = @_;\n    if(@$arr == 0){ return [] }\n    my @evens = grep { $_ % 2 == 0 } @$arr;\n    if(@evens == 0){ return [] }\n    my $min = (sort { $a <=> $b } @evens)[0];\n    my $index = 0;\n    for(my $i = 0; $i < @$arr; $i++){\n        if($arr->[$i] == $min){\n            $index = $i;\n            last;\n        }\n    }\n    return [$min, $index];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function pluck(arr)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function pairs_sum_to_zero(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub pairs_sum_to_zero {\n    my($l) = @_;\n    for my $i (0..$#{$l}) {\n        for my $j ($i+1..$#{$l}) {\n            if ($l->[$i] + $l->[$j] == 0) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function pairs_sum_to_zero(l)\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function make_palindrome(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub make_palindrome {\n    my($string) = @_;\n    if (!$string) {\n        return '';\n    }\n\n    my $beginning_of_suffix = 0;\n\n    while (substr($string, $beginning_of_suffix) ne reverse(substr($string, $beginning_of_suffix))) {\n        $beginning_of_suffix += 1;\n    }\n\n    return $string . reverse(substr($string, 0, $beginning_of_suffix));\n}\n\n### Lua version\n\nmath = require('math')\nlocal function make_palindrome(string)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function starts_one_ends(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub starts_one_ends {\n    my($n) = @_;\n    return 1 if $n == 1;\n    return 18 * (10 ** ($n - 2));\n}\n\n### Lua version\n\nmath = require('math')\nlocal function starts_one_ends(n)\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function get_positive(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub get_positive {\n    my($l) = @_;\n    return [grep { $_ > 0 } @$l];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function get_positive(l)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function concatenate(strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub concatenate {\n    my($strings) = @_;\n    return join('', @$strings);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function concatenate(strings)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_nested(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_nested {\n    my($string) = @_;\n    my @opening_bracket_index;\n    my @closing_bracket_index;\n    for my $i (0..length($string)-1) {\n        if (substr($string, $i, 1) eq '[') {\n            push @opening_bracket_index, $i;\n        } else {\n            push @closing_bracket_index, $i;\n        }\n    }\n    @closing_bracket_index = reverse @closing_bracket_index;\n    my $cnt = 0;\n    my $i = 0;\n    my $l = scalar @closing_bracket_index;\n    for my $idx (@opening_bracket_index) {\n        if ($i < $l && $idx < $closing_bracket_index[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_nested(string)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_palindrome(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_palindrome {\n    my($text) = @_;\n    for my $i (0 .. length($text) - 1) {\n        if (substr($text, $i, 1) ne substr($text, -1 - $i, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_palindrome(text)\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function count_nums(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub count_nums {\n    my($arr) = @_;\n    sub digits_sum {\n        my($n) = @_;\n        my $neg = 1;\n        if ($n < 0) {\n            $n = -1 * $n;\n            $neg = -1;\n        }\n        my @n = split //, $n;\n        $n[0] = $n[0] * $neg;\n        my $sum = 0;\n        $sum += $_ for @n;\n        return $sum;\n    }\n    my @filtered = grep { $_ > 0 } map { digits_sum($_) } @$arr;\n    return scalar @filtered;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function count_nums(arr)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function factorize(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub factorize {\n    my($n) = @_;\n    my @fact;\n    my $i = 2;\n    while ($i <= sqrt($n) + 1) {\n        if ($n % $i == 0) {\n            push @fact, $i;\n            $n /= $i;\n        } else {\n            $i += 1;\n        }\n    }\n    if ($n > 1) {\n        push @fact, $n;\n    }\n    return \\@fact;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function factorize(n)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function largest_prime_factor(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub largest_prime_factor {\n    my($n) = @_;\n    sub is_prime {\n        my($k) = @_;\n        if ($k < 2) {\n            return 0;\n        }\n        for (my $i = 2; $i < $k; $i++) {\n            if ($k % $i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    my $largest = 1;\n    for (my $j = 2; $j < $n+1; $j++) {\n        if ($n % $j == 0 && is_prime($j)) {\n            $largest = $j > $largest ? $j : $largest;\n        }\n    }\n    return $largest;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function largest_prime_factor(n)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function get_max_triples(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub get_max_triples {\n    my($n) = @_;\n    my @A = map { $_*$_ - $_ + 1 } 1..$n;\n    my @ans;\n    for my $i (0..$n-1) {\n        for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n-1) {\n                push @ans, [$A[$i], $A[$j], $A[$k]] if ($A[$i]+$A[$j]+$A[$k])%3 == 0;\n            }\n        }\n    }\n    return scalar(@ans);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function get_max_triples(n)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function anti_shuffle(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub anti_shuffle {\n    my($s) = @_;\n    return join ' ', map { join '', sort split // } split / /, $s;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function anti_shuffle(s)\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function solve(N)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub solve {\n    my($N) = @_;\n    return sprintf(\"%b\", eval join \"+\", split //, $N);\n}\n\n### Lua version\n\nmath = require('math')\nlocal function solve(N)\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function encrypt(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'), 'e')\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub encrypt {\n    my($s) = @_;\n    my $d = 'abcdefghijklmnopqrstuvwxyz';\n    my $out = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $out .= substr($d, (index($d, $c)+2*2) % 26, 1);\n        } else {\n            $out .= $c;\n        }\n    }\n    return $out;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function encrypt(s)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function make_a_pile(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub make_a_pile {\n    my($n) = @_;\n    return [map { $n + 2*$_ } 0..$n-1];\n}\n\n### Lua version\n\nmath = require('math')\nlocal function make_a_pile(n)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "lua",
    "prompt": "math = require('math')\nlocal function is_prime(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())",
    "stop_tokens": [
      "\n--",
      "\n#",
      "\nend"
    ],
    "translation_prompt": "### Perl version\n\nsub is_prime {\n    my($n) = @_;\n    return 0 if $n < 2;\n    for my $k (2 .. $n - 1) {\n        if ($n % $k == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n### Lua version\n\nmath = require('math')\nlocal function is_prime(n)\n"
  }
]