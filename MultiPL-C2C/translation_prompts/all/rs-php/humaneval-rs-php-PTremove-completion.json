[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "php",
    "prompt": "<?php\nfunction correct_bracketing($brackets) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn correct_bracketing(brackets: String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n\n### PHP version\n\n<?php\nfunction correct_bracketing($brackets) {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "php",
    "prompt": "<?php\nfunction triangle_area($a, $h) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return triangle_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 3) !== 7.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2) !== 2.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 8) !== 40.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn triangle_area(a: isize, h: isize) -> f64 {\n    (a * h) as f64 / 2.0\n}\n\n### PHP version\n\n<?php\nfunction triangle_area($a, $h) {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "php",
    "prompt": "<?php\nfunction special_factorial($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn special_factorial(n: isize) -> isize {\n    let mut fact_i = 1;\n    let mut special_fact = 1;\n    for i in 1..=n {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    special_fact\n}\n\n### PHP version\n\n<?php\nfunction special_factorial($n) {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "php",
    "prompt": "<?php\nfunction largest_smallest_integers($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let smallest = lst.iter().filter(|&x| x < &0).max().cloned();\n    let largest = lst.iter().filter(|&x| x > &0).min().cloned();\n    (smallest, largest)\n}\n\n### PHP version\n\n<?php\nfunction largest_smallest_integers($lst) {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "php",
    "prompt": "<?php\nfunction move_one_ball($arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn move_one_ball(arr: Vec<isize>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n\n    let sorted_array = {\n        let mut arr = arr.clone();\n        arr.sort_unstable();\n        arr\n    };\n\n    let min_value = *arr.iter().min().unwrap();\n    let min_index = arr.iter().position(|&x| x == min_value).unwrap();\n    let mut my_arr = arr[min_index..].to_vec();\n    my_arr.extend(&arr[..min_index]);\n\n    my_arr == sorted_array\n}\n\n### PHP version\n\n<?php\nfunction move_one_ball($arr) {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "php",
    "prompt": "<?php\nfunction digits($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765) !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543) !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn digits(n: isize) -> isize {\n    let mut product = 1;\n    let mut odd_count = 0;\n    for digit in n.to_string().chars() {\n        let int_digit = digit.to_digit(10).unwrap() as isize;\n        if int_digit % 2 == 1 {\n            product *= int_digit;\n            odd_count += 1;\n        }\n    }\n    if odd_count == 0 {\n        0\n    } else {\n        product\n    }\n}\n\n### PHP version\n\n<?php\nfunction digits($n) {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "php",
    "prompt": "<?php\nfunction fib4($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn fib4(n: isize) -> isize {\n    let mut results = vec![0, 0, 2, 0];\n    if n < 4 {\n        return results[n as usize];\n    }\n\n    for _ in 4..=n {\n        let next = results.iter().sum();\n        results.push(next);\n        results.remove(0);\n    }\n\n    *results.last().unwrap()\n}\n\n### PHP version\n\n<?php\nfunction fib4($n) {\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "php",
    "prompt": "<?php\nfunction sort_even($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut evens = l.iter().step_by(2).copied().collect::<Vec<_>>();\n    let mut odds = l.iter().skip(1).step_by(2).copied().collect::<Vec<_>>();\n    evens.sort_unstable();\n    let mut ans = vec![];\n    for (e, o) in evens.iter().zip(odds.iter()) {\n        ans.push(*e);\n        ans.push(*o);\n    }\n    if evens.len() > odds.len() {\n        ans.push(evens[evens.len() - 1]);\n    }\n    ans\n}\n\n### PHP version\n\n<?php\nfunction sort_even($l) {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "php",
    "prompt": "<?php\nfunction order_by_points($nums) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return order_by_points(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1, -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !== array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    fn digits_sum(n: isize) -> isize {\n        let neg = if n < 0 { -1 } else { 1 };\n        let mut n = n.abs().to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n        n[0] *= neg;\n        n.iter().sum()\n    }\n    let mut nums = nums.clone();\n    nums.sort_unstable_by_key(|&n| digits_sum(n));\n    nums\n}\n\n### PHP version\n\n<?php\nfunction order_by_points($nums) {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "php",
    "prompt": "<?php\nfunction is_happy($s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n\n    for i in 0..s.len()-2 {\n        if s[i..i+1] == s[i+1..i+2] || s[i+1..i+2] == s[i+2..i+3] || s[i..i+1] == s[i+2..i+3] {\n            return false;\n        }\n    }\n    true\n}\n\n### PHP version\n\n<?php\nfunction is_happy($s) {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "php",
    "prompt": "<?php\nfunction circular_shift($x, $shift) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn circular_shift(x: isize, shift: isize) -> String {\n    let s = x.to_string();\n    if shift > s.len() as isize {\n        s.chars().rev().collect()\n    } else {\n        s[(s.len() - shift as usize)..].to_string() + &s[..(s.len() - shift as usize)]\n    }\n}\n\n### PHP version\n\n<?php\nfunction circular_shift($x, $shift) {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "php",
    "prompt": "<?php\nfunction max_fill($grid, $capacity) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().map(|arr| (arr.iter().sum::<isize>() as f64 / capacity as f64).ceil() as isize).sum()\n}\n\n### PHP version\n\n<?php\nfunction max_fill($grid, $capacity) {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "php",
    "prompt": "<?php\nfunction has_close_elements($numbers, $threshold) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return has_close_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.95) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.8) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 1.0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 0.5) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n    for (idx, elem) in numbers.iter().enumerate() {\n        for (idx2, elem2) in numbers.iter().enumerate() {\n            if idx != idx2 {\n                let distance = (elem - elem2).abs();\n                if distance < threshold {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n\n### PHP version\n\n<?php\nfunction has_close_elements($numbers, $threshold) {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "php",
    "prompt": "<?php\nfunction numerical_letter_grade($grades) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let mut letter_grade = vec![];\n    for gpa in grades {\n        if gpa == 4.0 {\n            letter_grade.push(\"A+\".to_string());\n        } else if gpa > 3.7 {\n            letter_grade.push(\"A\".to_string());\n        } else if gpa > 3.3 {\n            letter_grade.push(\"A-\".to_string());\n        } else if gpa > 3.0 {\n            letter_grade.push(\"B+\".to_string());\n        } else if gpa > 2.7 {\n            letter_grade.push(\"B\".to_string());\n        } else if gpa > 2.3 {\n            letter_grade.push(\"B-\".to_string());\n        } else if gpa > 2.0 {\n            letter_grade.push(\"C+\".to_string());\n        } else if gpa > 1.7 {\n            letter_grade.push(\"C\".to_string());\n        } else if gpa > 1.3 {\n            letter_grade.push(\"C-\".to_string());\n        } else if gpa > 1.0 {\n            letter_grade.push(\"D+\".to_string());\n        } else if gpa > 0.7 {\n            letter_grade.push(\"D\".to_string());\n        } else if gpa > 0.0 {\n            letter_grade.push(\"D-\".to_string());\n        } else {\n            letter_grade.push(\"E\".to_string());\n        }\n    }\n    letter_grade\n}\n\n### PHP version\n\n<?php\nfunction numerical_letter_grade($grades) {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "php",
    "prompt": "<?php\nfunction x_or_y($n, $x, $y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return x_or_y(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7, 34, 12) !== 34) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 8, 5) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 33, 5212) !== 33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1259, 3, 52) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7919, -1, 12) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3609, 1245, 583) !== 583) { throw new Exception(\"Test failed!\"); }\n    if (candidate(91, 56, 129) !== 129) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 34, 1234) !== 1234) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 0) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn x_or_y(n: isize, x: isize, y: isize) -> isize {\n    if n == 1 {\n        return y;\n    }\n    for i in 2..n {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n\n### PHP version\n\n<?php\nfunction x_or_y($n, $x, $y) {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "php",
    "prompt": "<?php\nfunction specialFilter($nums) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return specialFilter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, -2, 1, -5)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15, -73, 14, -15)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(33, -2, -3, 45, 21, 109)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(43, -12, 93, 125, 121, 109)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(71, -2, -33, 75, 21, 19)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&num| {\n        if *num > 10 {\n            let odd_digits = [1, 3, 5, 7, 9];\n            let number_as_string = num.to_string();\n            let first_digit = number_as_string.chars().next().unwrap().to_digit(10).unwrap() as isize;\n            let last_digit = number_as_string.chars().last().unwrap().to_digit(10).unwrap() as isize;\n            odd_digits.contains(&first_digit) && odd_digits.contains(&last_digit)\n        } else {\n            false\n        }\n    }).count() as isize\n}\n\n### PHP version\n\n<?php\nfunction specialFilter($nums) {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "php",
    "prompt": "<?php\nfunction parse_music($music_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn parse_music(music_string: String) -> Vec<isize> {\n    let note_map = vec![(\"o\", 4), (\"o|\", 2), (\".|\", 1)];\n    music_string.split(' ').filter(|&x| x != \"\").map(|x| note_map.iter().find(|&&y| y.0 == x).unwrap().1).collect()\n}\n\n### PHP version\n\n<?php\nfunction parse_music($music_string) {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "php",
    "prompt": "<?php\nfunction count_distinct_characters($string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return count_distinct_characters(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcde\") !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdecadeCADE\") !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaaAAAAaaaa\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jerry jERRY JeRRRY\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().collect::<std::collections::HashSet<char>>().len() as isize\n}\n\n### PHP version\n\n<?php\nfunction count_distinct_characters($string) {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "php",
    "prompt": "<?php\nfunction digitSum($s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return digitSum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abAB\") !== 131) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcCd\") !== 67) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"helloE\") !== 69) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"woArBld\") !== 131) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aAaaaXa\") !== 153) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\" How are yOu?\") !== 151) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You arE Very Smart\") !== 327) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn digitSum(s: String) -> isize {\n    if s == \"\" { return 0 }\n    s.chars().map(|c| if c.is_uppercase() { c as isize } else { 0 }).sum()\n}\n\n### PHP version\n\n<?php\nfunction digitSum($s) {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "php",
    "prompt": "<?php\nfunction sum_squares($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sum_squares(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().map(|(i, &x)| {\n        if i % 3 == 0 {\n            x.pow(2)\n        } else if i % 4 == 0 {\n            x.pow(3)\n        } else {\n            x\n        }\n    }).sum()\n}\n\n### PHP version\n\n<?php\nfunction sum_squares($lst) {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "php",
    "prompt": "<?php\nfunction count_up_to($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn count_up_to(n: isize) -> Vec<isize> {\n    let mut primes = vec![];\n    for i in 2..n {\n        let mut is_prime = true;\n        for j in 2..i {\n            if i % j == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            primes.push(i);\n        }\n    }\n    primes\n}\n\n### PHP version\n\n<?php\nfunction count_up_to($n) {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "php",
    "prompt": "<?php\nfunction sum_squares($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 3.0, 5.0, 7.0)) !== 84) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.4, 4.2, 0.0)) !== 29) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2.4, 1.0, 1.0)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 1.0, 15.0, 2.0)) !== 10230) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10000.0, 10000.0)) !== 200000000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.4, 4.6, 6.3)) !== 75) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.4, 17.9, 18.9, 19.9)) !== 1086) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0, 1.0, 0.0)) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n### PHP version\n\n<?php\nfunction sum_squares($lst) {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "php",
    "prompt": "<?php\nfunction unique($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn unique(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n### PHP version\n\n<?php\nfunction unique($l) {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "php",
    "prompt": "<?php\nfunction fib($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn fib(n: isize) -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n}\n\n### PHP version\n\n<?php\nfunction fib($n) {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "php",
    "prompt": "<?php\nfunction fizz_buzz($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return fizz_buzz(...$args);\n}\n\nfunction test(): void {\n    if (candidate(50) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(78) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(79) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(200) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4000) !== 192) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10000) !== 639) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100000) !== 8026) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn fizz_buzz(n: isize) -> isize {\n    let ns = (0..n).filter(|i| i % 11 == 0 || i % 13 == 0);\n    let s = ns.map(|i| i.to_string()).collect::<String>();\n    s.chars().filter(|&c| c == '7').count() as isize\n}\n\n### PHP version\n\n<?php\nfunction fizz_buzz($n) {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "php",
    "prompt": "<?php\nfunction Strongest_Extension($class_name, $extensions) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn Strongest_Extension(class_name: String, extensions: Vec<String>) -> String {\n    let mut strong = extensions[0].clone();\n    let mut my_val = extensions[0].chars().filter(|c| c.is_uppercase()).count() as isize - extensions[0].chars().filter(|c| c.is_lowercase()).count() as isize;\n    for s in extensions {\n        let val = s.chars().filter(|c| c.is_uppercase()).count() as isize - s.chars().filter(|c| c.is_lowercase()).count() as isize;\n        if val > my_val {\n            strong = s;\n            my_val = val;\n        }\n    }\n\n    format!(\"{}.{}\", class_name, strong)\n}\n\n### PHP version\n\n<?php\nfunction Strongest_Extension($class_name, $extensions) {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "php",
    "prompt": "<?php\nfunction find_closest_elements($numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn find_closest_elements(numbers: Vec<f64>) -> (f64, f64) {\n    let mut closest_pair: Option<(f64, f64)> = None;\n    let mut distance: Option<f64> = None;\n\n    for (idx, elem) in numbers.iter().enumerate() {\n        for (idx2, elem2) in numbers.iter().enumerate() {\n            if idx != idx2 {\n                if distance.is_none() {\n                    distance = Some((elem - elem2).abs());\n                    closest_pair = Some((elem.min(*elem2), elem.max(*elem2)));\n                } else {\n                    let new_distance = (elem - elem2).abs();\n                    if new_distance < distance.unwrap() {\n                        distance = Some(new_distance);\n                        closest_pair = Some((elem.min(*elem2), elem.max(*elem2)));\n                    }\n                }\n            }\n        }\n    }\n\n    closest_pair.unwrap()\n}\n\n### PHP version\n\n<?php\nfunction find_closest_elements($numbers) {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "php",
    "prompt": "<?php\nfunction valid_date($date) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn valid_date(date: String) -> bool {\n    let date = date.trim();\n    let parts: Vec<&str> = date.split('-').collect();\n    if parts.len() != 3 {\n        return false;\n    }\n    let month = parts[0].parse::<isize>().unwrap_or(0);\n    let day = parts[1].parse::<isize>().unwrap_or(0);\n    let year = parts[2].parse::<isize>().unwrap_or(0);\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false;\n        }\n        if year % 4 != 0 && day > 28 {\n            return false;\n        }\n    } else if [4, 6, 9, 11].contains(&month) {\n        if day < 1 || day > 30 {\n            return false;\n        }\n    } else {\n        if day < 1 || day > 31 {\n            return false;\n        }\n    }\n    true\n}\n\n### PHP version\n\n<?php\nfunction valid_date($date) {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "php",
    "prompt": "<?php\nfunction add($x, $y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return add(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0, 1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 0) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 7) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 5) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\n### PHP version\n\n<?php\nfunction add($x, $y) {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "php",
    "prompt": "<?php\nfunction triples_sum_to_zero($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return triples_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 5, -1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 9, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 5, -100)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 3, 5, -100)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len() {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n\n### PHP version\n\n<?php\nfunction triples_sum_to_zero($l) {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "php",
    "prompt": "<?php\nfunction largest_divisor($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev() {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    1\n}\n\n### PHP version\n\n<?php\nfunction largest_divisor($n) {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "php",
    "prompt": "<?php\nfunction sort_numbers($numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !== \"zero one two three four five six\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sort_numbers(numbers: String) -> String {\n    let value_map = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ]\n    .iter()\n    .cloned()\n    .collect::<std::collections::HashMap<_, _>>();\n\n    let mut numbers = numbers.split(' ').filter(|x| !x.is_empty()).collect::<Vec<_>>();\n    numbers.sort_by_key(|x| value_map[x]);\n\n    numbers.join(\" \")\n}\n\n### PHP version\n\n<?php\nfunction sort_numbers($numbers) {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "php",
    "prompt": "<?php\nfunction smallest_change($arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return smallest_change(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 5, 4, 7, 9, 6)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 3, 2, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 4, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 1, 1, 3)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n\n### PHP version\n\n<?php\nfunction smallest_change($arr) {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "php",
    "prompt": "<?php\nfunction below_threshold($l, $t) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return below_threshold(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 10), 100) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 21) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 22) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 8, 4, 10), 11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 8, 4, 10), 10) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&e| e < t)\n}\n\n### PHP version\n\n<?php\nfunction below_threshold($l, $t) {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "php",
    "prompt": "<?php\nfunction modp($n, $p) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn modp(n: isize, p: isize) -> isize {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (2 * ret) % p;\n    }\n    ret\n}\n\n### PHP version\n\n<?php\nfunction modp($n, $p) {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "php",
    "prompt": "<?php\nfunction count_upper($s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return count_upper(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"aBCdEf\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdefg\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dBBE\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"B\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"U\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"EEEE\") !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn count_upper(s: String) -> isize {\n    s.chars()\n        .step_by(2)\n        .filter(|c| \"AEIOU\".contains(*c))\n        .count() as isize\n}\n\n### PHP version\n\n<?php\nfunction count_upper($s) {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "php",
    "prompt": "<?php\nfunction multiply($a, $b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\n### PHP version\n\n<?php\nfunction multiply($a, $b) {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "php",
    "prompt": "<?php\nfunction unique_digits($x) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut odd_digit_elements = vec![];\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1) {\n            odd_digit_elements.push(i);\n        }\n    }\n    odd_digit_elements.sort();\n    odd_digit_elements\n}\n\n### PHP version\n\n<?php\nfunction unique_digits($x) {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "php",
    "prompt": "<?php\nfunction will_it_fly($q, $w) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return will_it_fly(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 2, 3), 9) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), 5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3), 5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 3), 1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5), 5) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    if q.iter().sum::<isize>() > w {\n        return false;\n    }\n\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i < j {\n        if q[i] != q[j] {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\n### PHP version\n\n<?php\nfunction will_it_fly($q, $w) {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "php",
    "prompt": "<?php\nfunction is_multiply_prime($a) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return is_multiply_prime(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(125) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(105) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(126) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(729) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(891) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1001) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn is_multiply_prime(a: isize) -> bool {\n    fn is_prime(n: isize) -> bool {\n        for j in 2..n {\n            if n % j == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    for i in 2..101 {\n        if !is_prime(i) {\n            continue;\n        }\n        for j in 2..101 {\n            if !is_prime(j) {\n                continue;\n            }\n            for k in 2..101 {\n                if !is_prime(k) {\n                    continue;\n                }\n                if i * j * k == a {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n\n### PHP version\n\n<?php\nfunction is_multiply_prime($a) {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "php",
    "prompt": "<?php\nfunction maximum($arr, $k) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    if k == 0 {\n        return vec![];\n    }\n    let mut arr = arr;\n    arr.sort();\n    arr[arr.len() - k as usize..].to_vec()\n}\n\n### PHP version\n\n<?php\nfunction maximum($arr, $k) {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "php",
    "prompt": "<?php\nfunction separate_paren_groups($paren_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n    let mut result = vec![];\n    let mut current_string = vec![];\n    let mut current_depth = 0;\n\n    for c in paren_string.chars() {\n        if c == '(' {\n            current_depth += 1;\n            current_string.push(c);\n        } else if c == ')' {\n            current_depth -= 1;\n            current_string.push(c);\n\n            if current_depth == 0 {\n                result.push(current_string.iter().collect());\n                current_string.clear();\n            }\n        }\n    }\n\n    result\n}\n\n### PHP version\n\n<?php\nfunction separate_paren_groups($paren_string) {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "php",
    "prompt": "<?php\nfunction skjkasdkd($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return skjkasdkd(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) !== 25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 81, 12, 3, 1, 21)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 8, 1, 2, 1, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8191)) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8191, 123456, 127, 7)) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(127, 97, 8192)) !== 10) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn skjkasdkd(lst: Vec<isize>) -> isize {\n    fn is_prime(n: isize) -> bool {\n        for i in 2..=(n as f64).sqrt() as isize {\n            if n % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    let mut maxx = 0;\n    for i in lst {\n        if i > maxx && is_prime(i) {\n            maxx = i;\n        }\n    }\n\n    maxx.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum()\n}\n\n### PHP version\n\n<?php\nfunction skjkasdkd($lst) {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "php",
    "prompt": "<?php\nfunction total_match($lst1, $lst2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return total_match(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hi\", \"hi\")) !== array(\"hi\", \"hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hi\", \"hi\", \"admin\", \"project\")) !== array(\"hi\", \"admin\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"4\"), array(\"1\", \"2\", \"3\", \"4\", \"5\")) !== array(\"4\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"Hi\")) !== array(\"hI\", \"Hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hi\")) !== array(\"hI\", \"hi\", \"hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hii\")) !== array(\"hi\", \"admin\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), array(\"this\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\"), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let l1: usize = lst1.iter().map(|s| s.len()).sum();\n    let l2: usize = lst2.iter().map(|s| s.len()).sum();\n    if l1 <= l2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\n### PHP version\n\n<?php\nfunction total_match($lst1, $lst2) {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "php",
    "prompt": "<?php\nfunction car_race_collision($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return car_race_collision(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 100) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn car_race_collision(n: isize) -> isize {\n    n * n\n}\n\n### PHP version\n\n<?php\nfunction car_race_collision($n) {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "php",
    "prompt": "<?php\nfunction is_simple_power($x, $n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn is_simple_power(x: isize, n: isize) -> bool {\n    if n == 1 {\n        return x == 1\n    }\n    let mut power = 1;\n    while power < x {\n        power *= n;\n    }\n    power == x\n}\n\n### PHP version\n\n<?php\nfunction is_simple_power($x, $n) {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "php",
    "prompt": "<?php\nfunction incr_list($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n    l.iter().map(|e| e + 1).collect()\n}\n\n### PHP version\n\n<?php\nfunction incr_list($l) {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "php",
    "prompt": "<?php\nfunction flip_case($string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn flip_case(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() }).collect()\n}\n\n### PHP version\n\n<?php\nfunction flip_case($string) {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "php",
    "prompt": "<?php\nfunction vowels_count($s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return vowels_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcde\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Alone\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"key\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bye\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"keY\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bYe\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ACEDY\") !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn vowels_count(s: String) -> isize {\n    let vowels = \"aeiouAEIOU\";\n    let mut n_vowels = s.chars().filter(|c| vowels.contains(*c)).count() as isize;\n    if s.ends_with('y') || s.ends_with('Y') {\n        n_vowels += 1;\n    }\n    n_vowels\n}\n\n### PHP version\n\n<?php\nfunction vowels_count($s) {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "php",
    "prompt": "<?php\nfunction sorted_list_sum($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut lst = lst;\n    lst.sort();\n    let mut new_lst = vec![];\n    for i in lst {\n        if i.len() % 2 == 0 {\n            new_lst.push(i);\n        }\n    }\n    new_lst.sort_by_key(|x| x.len());\n    new_lst\n}\n\n### PHP version\n\n<?php\nfunction sorted_list_sum($lst) {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "php",
    "prompt": "<?php\nfunction words_string($s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return words_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hi, my name is John\") !== array(\"Hi\", \"my\", \"name\", \"is\", \"John\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"One, two, three, four, five, six\") !== array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi, my name\") !== array(\"Hi\", \"my\", \"name\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"One,, two, three, four, five, six,\") !== array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ahmed     , gamal\") !== array(\"ahmed\", \"gamal\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn words_string(s: String) -> Vec<String> {\n    if s.is_empty() {\n        return vec![];\n    }\n\n    let s_list = s.chars().map(|c| if c == ',' { ' ' } else { c }).collect::<String>();\n    s_list.split_whitespace().map(|s| s.to_string()).collect()\n}\n\n### PHP version\n\n<?php\nfunction words_string($s) {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "php",
    "prompt": "<?php\nfunction even_odd_palindrome($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return even_odd_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(123) !== array(8, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== array(4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== array(6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(25) !== array(5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19) !== array(4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn even_odd_palindrome(n: isize) -> (isize, isize) {\n    fn is_palindrome(n: isize) -> bool {\n        n.to_string() == n.to_string().chars().rev().collect::<String>()\n    }\n\n    let mut even_palindrome_count = 0;\n    let mut odd_palindrome_count = 0;\n\n    for i in 1..=n {\n        if i%2 == 1 && is_palindrome(i) {\n            odd_palindrome_count += 1;\n        } else if i%2 == 0 && is_palindrome(i) {\n            even_palindrome_count += 1;\n        }\n    }\n    (even_palindrome_count, odd_palindrome_count)\n}\n\n### PHP version\n\n<?php\nfunction even_odd_palindrome($n) {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "php",
    "prompt": "<?php\nfunction triangle_area($a, $b, $c) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return triangle_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== 6.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 5) !== 8.18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 2) !== 1.73) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 3) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 5, 7) !== 16.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 3) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1, 1) !== 0.43) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n    let s = (a + b + c) as f64 / 2.0;\n    let area = (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n    (area * 100.0).round() / 100.0\n}\n\n### PHP version\n\n<?php\nfunction triangle_area($a, $b, $c) {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "php",
    "prompt": "<?php\nfunction check_dict_case($dict) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return check_dict_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"p\" => \"pineapple\", \"b\" => \"banana\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nuse std::collections::HashMap;\n\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n    if dict.is_empty() {\n        return false;\n    }\n    let mut state = \"start\";\n    for key in dict.keys() {\n        if !key.is_ascii() {\n            state = \"mixed\";\n            break;\n        }\n        if state == \"start\" {\n            if key.chars().all(|c| c.is_uppercase()) {\n                state = \"upper\";\n            } else if key.chars().all(|c| c.is_lowercase()) {\n                state = \"lower\";\n            } else {\n                break;\n            }\n        } else if (state == \"upper\" && !key.chars().all(|c| c.is_uppercase()))\n            || (state == \"lower\" && !key.chars().all(|c| c.is_lowercase()))\n        {\n            state = \"mixed\";\n            break;\n        }\n    }\n    state == \"upper\" || state == \"lower\"\n}\n\n### PHP version\n\n<?php\nfunction check_dict_case($dict) {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "php",
    "prompt": "<?php\nfunction tri($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut my_tri = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            my_tri.push(i / 2 + 1);\n        } else {\n            my_tri.push(my_tri[(i - 1) as usize] + my_tri[(i - 2) as usize] + (i + 3) / 2);\n        }\n    }\n    my_tri\n}\n\n### PHP version\n\n<?php\nfunction tri($n) {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "php",
    "prompt": "<?php\nfunction median($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    if l.len() % 2 == 1 {\n        l[l.len() / 2] as f64\n    } else {\n        (l[l.len() / 2 - 1] + l[l.len() / 2]) as f64 / 2.0\n    }\n}\n\n### PHP version\n\n<?php\nfunction median($l) {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "php",
    "prompt": "<?php\nfunction change_base($x, $base) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return change_base(...$args);\n}\n\nfunction test(): void {\n    if (candidate(8, 3) !== \"22\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 3) !== \"100\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(234, 2) !== \"11101010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(16, 2) !== \"10000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(8, 2) !== \"1000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 2) !== \"111\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== \"2\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 4) !== \"3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5) !== \"4\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 6) !== \"5\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 7) !== \"6\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 8) !== \"7\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn change_base(x: isize, base: isize) -> String {\n    let mut ret = String::new();\n    let mut x = x;\n    while x > 0 {\n        ret = format!(\"{}{}\", x % base, ret);\n        x /= base;\n    }\n    ret\n}\n\n### PHP version\n\n<?php\nfunction change_base($x, $base) {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "php",
    "prompt": "<?php\nfunction longest($strings) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn longest(strings: Vec<String>) -> Option<String> {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let maxlen = strings.iter().map(|s| s.len()).max().unwrap();\n    strings.iter().find(|s| s.len() == maxlen).cloned()\n}\n\n### PHP version\n\n<?php\nfunction longest($strings) {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "php",
    "prompt": "<?php\nfunction common($l1, $l2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut ret = std::collections::HashSet::new();\n    for e1 in l1 {\n        for e2 in &l2 {\n            if e1 == *e2 {\n                ret.insert(e1);\n            }\n        }\n    }\n    let mut ret = ret.into_iter().collect::<Vec<_>>();\n    ret.sort();\n    ret\n}\n\n### PHP version\n\n<?php\nfunction common($l1, $l2) {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "php",
    "prompt": "<?php\nfunction cycpattern_check($a, $b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return cycpattern_check(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xyzw\", \"xyw\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"yello\", \"ell\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"whattup\", \"ptut\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"efef\", \"fee\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abab\", \"aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"winemtt\", \"tinem\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn cycpattern_check(a: String, b: String) -> bool {\n    let l = b.len();\n    let pat = b.clone() + &b;\n    for i in 0..=a.len() - l {\n        for j in 0..=l {\n            if a[i..i+l] == pat[j..j+l] {\n                return true;\n            }\n        }\n    }\n    false\n}\n\n### PHP version\n\n<?php\nfunction cycpattern_check($a, $b) {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "php",
    "prompt": "<?php\nfunction minSubArraySum($nums) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7)) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n    let mut max_sum = 0;\n    let mut s = 0;\n    for num in nums.iter() {\n        s += -num;\n        if s < 0 {\n            s = 0;\n        }\n        max_sum = max_sum.max(s);\n    }\n    if max_sum == 0 {\n        max_sum = nums.iter().map(|&i| -i).max().unwrap();\n    }\n    let min_sum = -max_sum;\n    min_sum\n}\n\n### PHP version\n\n<?php\nfunction minSubArraySum($nums) {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "php",
    "prompt": "<?php\nfunction sort_array($array) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n    let reverse = (array[0] + array[array.len() - 1]) % 2 == 0;\n    let mut array = array;\n    array.sort_unstable();\n    if reverse {\n        array.reverse();\n    }\n    array\n}\n\n### PHP version\n\n<?php\nfunction sort_array($array) {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "php",
    "prompt": "<?php\nfunction histogram($test) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nuse std::collections::HashMap;\n\nfn histogram(test: String) -> HashMap<String, isize> {\n    let mut dict1 = HashMap::new();\n    let list1: Vec<&str> = test.split(\" \").collect();\n    let mut t = 0;\n\n    for i in &list1 {\n        if list1.iter().filter(|&x| x == i).count() > t && i != &\"\" {\n            t = list1.iter().filter(|&x| x == i).count();\n        }\n    }\n\n    if t > 0 {\n        for i in &list1 {\n            if list1.iter().filter(|&x| x == i).count() == t {\n                dict1.insert(i.to_string(), t as isize);\n            }\n        }\n    }\n\n    dict1\n}\n\n### PHP version\n\n<?php\nfunction histogram($test) {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "php",
    "prompt": "<?php\nfunction get_odd_collatz($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return get_odd_collatz(...$args);\n}\n\nfunction test(): void {\n    if (candidate(14) !== array(1, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== array(1, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n    let mut odd_collatz = if n % 2 == 0 { vec![] } else { vec![n] };\n\n    let mut n = n;\n    while n > 1 {\n        n = if n % 2 == 0 { n / 2 } else { n * 3 + 1 };\n        if n % 2 == 1 {\n            odd_collatz.push(n);\n        }\n    }\n\n    odd_collatz.sort();\n    odd_collatz\n}\n\n### PHP version\n\n<?php\nfunction get_odd_collatz($n) {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "php",
    "prompt": "<?php\nfunction derivative($xs) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    (1..xs.len()).map(|i| i as isize * xs[i]).collect()\n}\n\n### PHP version\n\n<?php\nfunction derivative($xs) {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "php",
    "prompt": "<?php\nfunction fibfib($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn fibfib(n: isize) -> isize {\n    match n {\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3),\n    }\n}\n\n### PHP version\n\n<?php\nfunction fibfib($n) {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "php",
    "prompt": "<?php\nfunction truncate_number($number) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn truncate_number(number: f64) -> f64 {\n    number % 1.0\n}\n\n### PHP version\n\n<?php\nfunction truncate_number($number) {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "php",
    "prompt": "<?php\nfunction max_element($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return max_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)) !== 124) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for e in l {\n        if e > m {\n            m = e;\n        }\n    }\n    m\n}\n\n### PHP version\n\n<?php\nfunction max_element($l) {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "php",
    "prompt": "<?php\nfunction closest_integer($value) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn closest_integer(value: String) -> isize {\n    let num = value.parse::<f64>().unwrap();\n    let res = if value.ends_with(\".5\") {\n        if num > 0.0 {\n            num.ceil()\n        } else {\n            num.floor()\n        }\n    } else {\n        num.round()\n    };\n    res as isize\n}\n\n### PHP version\n\n<?php\nfunction closest_integer($value) {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "php",
    "prompt": "<?php\nfunction sum_product($numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let mut sum_value = 0;\n    let mut prod_value = 1;\n\n    for n in numbers {\n        sum_value += n;\n        prod_value *= n;\n    }\n    (sum_value, prod_value)\n}\n\n### PHP version\n\n<?php\nfunction sum_product($numbers) {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "php",
    "prompt": "<?php\nfunction select_words($s, $n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn select_words(s: String, n: isize) -> Vec<String> {\n    s.split_whitespace()\n        .filter(|word| {\n            word.chars()\n                .filter(|c| !matches!(c.to_ascii_lowercase(), 'a' | 'e' | 'i' | 'o' | 'u'))\n                .count() == n as usize\n        })\n        .map(|word| word.to_string())\n        .collect()\n}\n\n### PHP version\n\n<?php\nfunction select_words($s, $n) {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "php",
    "prompt": "<?php\nfunction add_elements($arr, $k) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return add_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111, 121, 3, 4000, 5, 6), 2) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) !== 125) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1), 1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k as usize).filter(|&elem| elem < &100).sum()\n}\n\n### PHP version\n\n<?php\nfunction add_elements($arr, $k) {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "php",
    "prompt": "<?php\nfunction eat($number, $need, $remaining) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize> {\n    if need <= remaining {\n        vec![number + need, remaining - need]\n    } else {\n        vec![number + remaining, 0]\n    }\n}\n\n### PHP version\n\n<?php\nfunction eat($number, $need, $remaining) {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "php",
    "prompt": "<?php\nfunction odd_count($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return odd_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"1234567\")) !== array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"3\", \"11111111\")) !== array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"271\", \"137\", \"314\")) !== array(\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let mut res = vec![];\n    for arr in lst {\n        let n = arr.chars().filter(|c| c.to_digit(10).unwrap() % 2 == 1).count();\n        res.push(format!(\"the number of odd elements {}n the str{}ng {} of the {}nput.\", n, n, n, n));\n    }\n    res\n}\n\n### PHP version\n\n<?php\nfunction odd_count($lst) {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "php",
    "prompt": "<?php\nfunction next_smallest($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return next_smallest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 1, 4, 3, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 0)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-35, 34, 12, -45)) !== -35) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        None\n    } else {\n        Some(lst[1])\n    }\n}\n\n### PHP version\n\n<?php\nfunction next_smallest($lst) {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "php",
    "prompt": "<?php\nfunction get_row($lst, $x) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n    let mut coords = vec![];\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n                coords.push((i as isize, j as isize));\n            }\n        }\n    }\n    coords.sort_by_key(|&x| (x.0, -x.1));\n    coords\n}\n\n### PHP version\n\n<?php\nfunction get_row($lst, $x) {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "php",
    "prompt": "<?php\nfunction filter_by_prefix($strings, $prefix) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()\n}\n\n### PHP version\n\n<?php\nfunction filter_by_prefix($strings, $prefix) {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "php",
    "prompt": "<?php\nfunction choose_num($x, $y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return choose_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(12, 15) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13, 12) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(33, 12354) !== 12354) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5234, 5233) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 29) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 7) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(546, 546) !== 546) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    if x == y {\n        return -1;\n    }\n    y - 1\n}\n\n### PHP version\n\n<?php\nfunction choose_num($x, $y) {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "php",
    "prompt": "<?php\nfunction prime_length($string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return prime_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdcba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"kittens\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"orange\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"wow\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"world\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"MadaM\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Wow\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"HI\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gogo\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaaaaaaaaaaaaa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Madam\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"M\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn prime_length(string: String) -> bool {\n    let l = string.len();\n    if l == 0 || l == 1 {\n        return false;\n    }\n    for i in 2..l {\n        if l % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n### PHP version\n\n<?php\nfunction prime_length($string) {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "php",
    "prompt": "<?php\nfunction sum_to_n($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sum_to_n(n: isize) -> isize {\n    (0..=n).sum()\n}\n\n### PHP version\n\n<?php\nfunction sum_to_n($n) {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "php",
    "prompt": "<?php\nfunction fix_spaces($text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return fix_spaces(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Example\") !== \"Example\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mudasir Hanif \") !== \"Mudasir_Hanif_\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Yellow Yellow  Dirty  Fellow\") !== \"Yellow_Yellow__Dirty__Fellow\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Exa   mple\") !== \"Exa-mple\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"   Exa 1 2 2 mple\") !== \"-Exa_1_2_2_mple\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn fix_spaces(text: String) -> String {\n    let mut new_text = String::new();\n    let mut i = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut chars = text.chars();\n    while let Some(c) = chars.next() {\n        if c == ' ' {\n            end += 1;\n        } else {\n            if end - start > 2 {\n                new_text.push('-');\n                new_text.push(c);\n            } else if end - start > 0 {\n                new_text.push_str(&\"_\".repeat(end - start));\n                new_text.push(c);\n            } else {\n                new_text.push(c);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if end - start > 2 {\n        new_text.push('-');\n    } else if end - start > 0 {\n        new_text.push_str(&\"_\".repeat(end - start));\n    }\n    new_text\n}\n\n### PHP version\n\n<?php\nfunction fix_spaces($text) {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "php",
    "prompt": "<?php\nfunction rolling_max($numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    let mut running_max = None;\n    let mut result = vec![];\n\n    for n in numbers {\n        running_max = match running_max {\n            None => Some(n),\n            Some(rm) => Some(rm.max(n)),\n        };\n\n        result.push(running_max.unwrap());\n    }\n\n    result\n}\n\n### PHP version\n\n<?php\nfunction rolling_max($numbers) {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "php",
    "prompt": "<?php\nfunction words_in_sentence($sentence) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn words_in_sentence(sentence: String) -> String {\n    let mut new_lst = vec![];\n    for word in sentence.split_whitespace() {\n        let mut flg = 0;\n        if word.len() == 1 {\n            flg = 1;\n        }\n        for i in 2..word.len() {\n            if word.len() % i == 0 {\n                flg = 1;\n            }\n        }\n        if flg == 0 || word.len() == 2 {\n            new_lst.push(word);\n        }\n    }\n    new_lst.join(\" \")\n}\n\n### PHP version\n\n<?php\nfunction words_in_sentence($sentence) {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "php",
    "prompt": "<?php\nfunction get_closest_vowel($word) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn get_closest_vowel(word: String) -> String {\n    if word.len() < 3 {\n        return \"\".to_string();\n    }\n\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"];\n    for i in (1..word.len()-1).rev() {\n        if vowels.contains(&&word[i..i+1]) {\n            if !vowels.contains(&&word[i-1..i]) && !vowels.contains(&&word[i+1..i+2]) {\n                return word[i..i+1].to_string();\n            }\n        }\n    }\n\n    \"\".to_string()\n}\n\n### PHP version\n\n<?php\nfunction get_closest_vowel($word) {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "php",
    "prompt": "<?php\nfunction compare($game, $guess) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()\n}\n\n### PHP version\n\n<?php\nfunction compare($game, $guess) {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "php",
    "prompt": "<?php\nfunction remove_duplicates($numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    let mut c = std::collections::HashMap::new();\n    for n in numbers.iter() {\n        let count = c.entry(n).or_insert(0);\n        *count += 1;\n    }\n    numbers.iter().filter(|&n| c[n] <= 1).cloned().collect()\n}\n\n### PHP version\n\n<?php\nfunction remove_duplicates($numbers) {\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "php",
    "prompt": "<?php\nfunction same_chars($s0, $s1) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return same_chars(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\", \"dddddddabc\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dddddddabc\", \"abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eabcd\", \"dddddddabc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\", \"dddddddabcf\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\", \"aaccc\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn same_chars(s0: String, s1: String) -> bool {\n    s0.chars().collect::<std::collections::HashSet<_>>() == s1.chars().collect::<std::collections::HashSet<_>>()\n}\n\n### PHP version\n\n<?php\nfunction same_chars($s0, $s1) {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "php",
    "prompt": "<?php\nfunction parse_nested_parens($paren_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn parse_nested_parens(paren_string: String) -> Vec<isize> {\n    fn parse_paren_group(s: &str) -> isize {\n        let mut depth = 0;\n        let mut max_depth = 0;\n        for c in s.chars() {\n            if c == '(' {\n                depth += 1;\n                max_depth = max_depth.max(depth);\n            } else {\n                depth -= 1;\n            }\n        }\n\n        max_depth\n    }\n\n    paren_string.split(' ').filter(|&x| x != \"\").map(parse_paren_group).collect()\n}\n\n### PHP version\n\n<?php\nfunction parse_nested_parens($paren_string) {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "php",
    "prompt": "<?php\nfunction even_odd_count($num) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for i in num.abs().to_string().chars() {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\n### PHP version\n\n<?php\nfunction even_odd_count($num) {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "php",
    "prompt": "<?php\nfunction fruit_distribution($s, $n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return fruit_distribution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"5 apples and 6 oranges\", 19) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5 apples and 6 oranges\", 21) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0 apples and 1 oranges\", 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1 apples and 0 oranges\", 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2 apples and 3 oranges\", 100) !== 95) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2 apples and 3 oranges\", 5) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1 apples and 100 oranges\", 120) !== 19) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn fruit_distribution(s: String, n: isize) -> isize {\n    let lis: Vec<isize> = s\n        .split_whitespace()\n        .filter_map(|x| x.parse().ok())\n        .collect();\n\n    n - lis.iter().sum::<isize>()\n}\n\n### PHP version\n\n<?php\nfunction fruit_distribution($s, $n) {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "php",
    "prompt": "<?php\nfunction string_xor($a, $b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn string_xor(a: String, b: String) -> String {\n    a.chars()\n        .zip(b.chars())\n        .map(|(x, y)| if x == y { '0' } else { '1' })\n        .collect()\n}\n\n### PHP version\n\n<?php\nfunction string_xor($a, $b) {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "php",
    "prompt": "<?php\nfunction strlen($string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return strlen(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"x\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asdasnakj\") !== 9) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn strlen(string: String) -> isize {\n    string.len() as isize\n}\n\n### PHP version\n\n<?php\nfunction strlen($string) {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "php",
    "prompt": "<?php\nfunction string_sequence($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<_>>().join(\" \")\n}\n\n### PHP version\n\n<?php\nfunction string_sequence($n) {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "php",
    "prompt": "<?php\nfunction file_name_check($file_name) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return file_name_check(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"example.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1example.dll\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"s1sdf3.asd\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K.dll\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"MY16FILE3.exe\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"His12FILE94.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_Y.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"?aREYA.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"/this_is_valid.dll\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.wow\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.txtexe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#this2_i4s_5valid.ten\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"@this1_is6_valid.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_12valid.6exe4.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"all.exe.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I563_No.exe\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Is3youfault.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"no_one#knows.dll\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1I563_Yes3.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I563_Yes3.txtt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"final..txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"final132\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_f4indsartal132.\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"s.\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn file_name_check(file_name: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"];\n    let lst: Vec<&str> = file_name.split('.').collect();\n    if lst.len() != 2 {\n        return \"No\".to_string();\n    }\n    if !suf.contains(&lst[1]) {\n        return \"No\".to_string();\n    }\n    if lst[0].len() == 0 || !lst[0].chars().next().unwrap().is_alphabetic() {\n        return \"No\".to_string();\n    }\n    let t = lst[0].chars().filter(|c| c.is_digit(10)).count();\n    if t > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n\n### PHP version\n\n<?php\nfunction file_name_check($file_name) {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "php",
    "prompt": "<?php\nfunction can_arrange($arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut ind = -1;\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            ind = i as isize;\n        }\n    }\n    ind\n}\n\n### PHP version\n\n<?php\nfunction can_arrange($arr) {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "php",
    "prompt": "<?php\nfunction add($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return add(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 88)) !== 88) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7, 2, 122)) !== 122) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 0, 6, 7)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 4, 6, 8)) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn add(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, &x)| i%2==1 && x%2==0).map(|(_, x)| x).sum()\n}\n\n### PHP version\n\n<?php\nfunction add($lst) {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "php",
    "prompt": "<?php\nfunction intersperse($numbers, $delimeter) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n    let mut result = vec![];\n\n    for n in &numbers[..numbers.len() - 1] {\n        result.push(*n);\n        result.push(delimeter);\n    }\n\n    result.push(numbers[numbers.len() - 1]);\n\n    result\n}\n\n### PHP version\n\n<?php\nfunction intersperse($numbers, $delimeter) {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "php",
    "prompt": "<?php\nfunction match_parens($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn match_parens(lst: Vec<String>) -> String {\n    fn check(s: &str) -> bool {\n        let mut val = 0;\n        for i in s.chars() {\n            if i == '(' {\n                val += 1;\n            } else {\n                val -= 1;\n            }\n            if val < 0 {\n                return false;\n            }\n        }\n        val == 0\n    }\n\n    let s1 = lst[0].clone() + &lst[1];\n    let s2 = lst[1].clone() + &lst[0];\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n\n### PHP version\n\n<?php\nfunction match_parens($lst) {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "php",
    "prompt": "<?php\nfunction filter_by_substring($strings, $substring) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return filter_by_substring(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xx\") !== array(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"grunt\", \"trumpet\", \"prune\", \"gruesome\"), \"run\") !== array(\"grunt\", \"prune\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x| x.contains(&substring)).collect()\n}\n\n### PHP version\n\n<?php\nfunction filter_by_substring($strings, $substring) {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "php",
    "prompt": "<?php\nfunction find_max($words) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn find_max(words: Vec<String>) -> String {\n    words\n        .iter()\n        .min_by_key(|word| (-(word.chars().collect::<std::collections::HashSet<_>>().len() as isize), word.clone()))\n        .unwrap()\n        .clone()\n}\n\n### PHP version\n\n<?php\nfunction find_max($words) {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "php",
    "prompt": "<?php\nfunction generate_integers($a, $b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return generate_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 10) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(132, 2) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17, 89) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn generate_integers(a: isize, b: isize) -> Vec<isize> {\n    let lower = std::cmp::max(2, std::cmp::min(a, b));\n    let upper = std::cmp::min(8, std::cmp::max(a, b));\n\n    (lower..=upper).filter(|i| i % 2 == 0).collect()\n}\n\n### PHP version\n\n<?php\nfunction generate_integers($a, $b) {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "php",
    "prompt": "<?php\nfunction exchange($lst1, $lst2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return exchange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4), array(1, 2, 3, 4)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(1, 5, 3, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(2, 1, 4, 3)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 7, 3), array(2, 6, 4)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 7, 3), array(2, 6, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 6, 1, 8, 9), array(3, 5, 5, 1, 1, 1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 200), array(200, 200)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n    let odd = lst1.iter().filter(|&i| i % 2 == 1).count();\n    let even = lst2.iter().filter(|&i| i % 2 == 0).count();\n    if even >= odd {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n\n### PHP version\n\n<?php\nfunction exchange($lst1, $lst2) {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "php",
    "prompt": "<?php\nfunction is_equal_to_sum_even($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return is_equal_to_sum_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn is_equal_to_sum_even(n: isize) -> bool {\n    n%2 == 0 && n >= 8\n}\n\n### PHP version\n\n<?php\nfunction is_equal_to_sum_even($n) {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "php",
    "prompt": "<?php\nfunction decimal_to_binary($decimal) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn decimal_to_binary(decimal: isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\n### PHP version\n\n<?php\nfunction decimal_to_binary($decimal) {\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "php",
    "prompt": "<?php\nfunction sort_third($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn sort_third(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    let mut third = Vec::new();\n    for i in (0..l.len()).step_by(3) {\n        third.push(l[i]);\n    }\n    third.sort();\n    for i in (0..l.len()).step_by(3) {\n        l[i] = third[i/3];\n    }\n    l\n}\n\n### PHP version\n\n<?php\nfunction sort_third($l) {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "php",
    "prompt": "<?php\nfunction simplify($x, $n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn simplify(x: String, n: String) -> bool {\n    let (a, b) = x.split_once(\"/\").unwrap();\n    let (c, d) = n.split_once(\"/\").unwrap();\n    let numerator = a.parse::<isize>().unwrap() * c.parse::<isize>().unwrap();\n    let denom = b.parse::<isize>().unwrap() * d.parse::<isize>().unwrap();\n    numerator % denom == 0\n}\n\n### PHP version\n\n<?php\nfunction simplify($x, $n) {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "php",
    "prompt": "<?php\nfunction solve($s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AsDf\") !== \"aSdF\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1234\") !== \"4321\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"AB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#a@C\") !== \"#A@c\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#AsdfW^45\") !== \"#aSDFw^45\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#6@2\") !== \"2@6#\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#$a^D\") !== \"#$A^d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#ccc\") !== \"#CCC\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn solve(s: String) -> String {\n    let mut flg = false;\n    let mut new_str = s.chars().collect::<Vec<char>>();\n    for i in 0..s.len() {\n        if new_str[i].is_alphabetic() {\n            new_str[i] = if new_str[i].is_lowercase() {\n                new_str[i].to_ascii_uppercase()\n            } else {\n                new_str[i].to_ascii_lowercase()\n            };\n            flg = true;\n        }\n    }\n    if !flg {\n        new_str.reverse();\n    }\n    new_str.iter().collect()\n}\n\n### PHP version\n\n<?php\nfunction solve($s) {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "php",
    "prompt": "<?php\nfunction right_angle_triangle($a, $b, $c) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return right_angle_triangle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n    a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b\n}\n\n### PHP version\n\n<?php\nfunction right_angle_triangle($a, $b, $c) {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "php",
    "prompt": "<?php\nfunction double_the_difference($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return double_the_difference(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5.0, 4.0)) !== 25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.1, 0.2, 0.3)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10.0, -20.0, -30.0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0, -2.0, 8.0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.2, 3.0, 5.0)) !== 34) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)) !== 165) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&i| i > &0.0 && i%2.0!=0.0 && !i.to_string().contains(\".\")).map(|i| i.powi(2)).sum::<f64>() as isize\n}\n\n### PHP version\n\n<?php\nfunction double_the_difference($lst) {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "php",
    "prompt": "<?php\nfunction below_zero($operations) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return below_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, -3, 1, 2, -3)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, -4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -2, 2, -2, 5, -5, 4, -4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn below_zero(operations: Vec<isize>) -> bool {\n    let mut balance = 0;\n\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n\n    false\n}\n\n### PHP version\n\n<?php\nfunction below_zero($operations) {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "php",
    "prompt": "<?php\nfunction greatest_common_divisor($a, $b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return greatest_common_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 7) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(49, 14) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(144, 60) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    let (mut a, mut b) = (a, b);\n    while b != 0 {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    a\n}\n\n### PHP version\n\n<?php\nfunction greatest_common_divisor($a, $b) {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "php",
    "prompt": "<?php\nfunction f($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return f(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== array(1, 2, 6, 24, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(1, 2, 6, 24, 15, 720, 28)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== array(1, 2, 6)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn f(n: isize) -> Vec<isize> {\n    let mut ret = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n            let mut x = 1;\n            for j in 1..=i { x *= j; }\n            ret.push(x);\n        } else {\n            let mut x = 0;\n            for j in 1..=i { x += j; }\n            ret.push(x);\n        }\n    }\n    ret\n}\n\n### PHP version\n\n<?php\nfunction f($n) {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "php",
    "prompt": "<?php\nfunction monotonic($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return monotonic(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 20)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 0, -10)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 1, 0)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 5, 60)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn monotonic(l: Vec<isize>) -> bool {\n    l.windows(2).all(|w| w[0] <= w[1]) || l.windows(2).all(|w| w[0] >= w[1])\n}\n\n### PHP version\n\n<?php\nfunction monotonic($l) {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "php",
    "prompt": "<?php\nfunction by_length($arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let dic = vec![\n        \"One\",\n        \"Two\",\n        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\",\n        \"Nine\",\n    ];\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable_by(|a, b| b.cmp(a));\n    sorted_arr\n        .iter()\n        .filter_map(|&var| dic.get((var - 1) as usize).map(|&s| s.to_string()))\n        .collect()\n}\n\n### PHP version\n\n<?php\nfunction by_length($arr) {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "php",
    "prompt": "<?php\nfunction remove_vowels($text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return remove_vowels(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\\nghijklm\") !== \"bcdf\\nghjklm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"fedcba\") !== \"fdcb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"acBAA\") !== \"cB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"EcBOO\") !== \"cB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ybcd\") !== \"ybcd\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn remove_vowels(text: String) -> String {\n    text.chars().filter(|&c| !\"aeiouAEIOU\".contains(c)).collect()\n}\n\n### PHP version\n\n<?php\nfunction remove_vowels($text) {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "php",
    "prompt": "<?php\nfunction check_if_last_char_is_a_letter($txt) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n    let check = txt.split(' ').last().unwrap();\n    check.len() == 1 && check.chars().next().unwrap().is_alphabetic()\n}\n\n### PHP version\n\n<?php\nfunction check_if_last_char_is_a_letter($txt) {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "php",
    "prompt": "<?php\nfunction iscube($a) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn iscube(a: isize) -> bool {\n    let a = a.abs();\n    (a as f64).powf(1. / 3.).round().powi(3) as isize == a\n}\n\n### PHP version\n\n<?php\nfunction iscube($a) {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "php",
    "prompt": "<?php\nfunction reverse_delete($s, $c) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn reverse_delete(s: String, c: String) -> (String, bool) {\n    let s = s.chars().filter(|&x| !c.contains(x)).collect::<String>();\n    (s.clone(), s.chars().rev().collect::<String>() == s)\n}\n\n### PHP version\n\n<?php\nfunction reverse_delete($s, $c) {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "php",
    "prompt": "<?php\nfunction mean_absolute_deviation($numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    numbers.iter().map(|x| (x - mean).abs()).sum::<f64>() / numbers.len() as f64\n}\n\n### PHP version\n\n<?php\nfunction mean_absolute_deviation($numbers) {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "php",
    "prompt": "<?php\nfunction correct_bracketing($brackets) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn correct_bracketing(brackets: String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n\n### PHP version\n\n<?php\nfunction correct_bracketing($brackets) {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "php",
    "prompt": "<?php\nfunction rescale_to_unit($numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let min_number = numbers.iter().fold(f64::INFINITY, |a, &b| a.min(b));\n    let max_number = numbers.iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b));\n    numbers.iter().map(|x| (x - min_number) / (max_number - min_number)).collect()\n}\n\n### PHP version\n\n<?php\nfunction rescale_to_unit($numbers) {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "php",
    "prompt": "<?php\nfunction intersection($interval1, $interval2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String {\n    fn is_prime(num: isize) -> bool {\n        if num <= 1 {\n            return false;\n        }\n        for i in 2..num {\n            if num % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    let l = interval1.0.max(interval2.0);\n    let r = interval1.1.min(interval2.1);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n\n### PHP version\n\n<?php\nfunction intersection($interval1, $interval2) {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "php",
    "prompt": "<?php\nfunction hex_key($num) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn hex_key(num: String) -> isize {\n    let primes = vec!['2', '3', '5', '7', 'B', 'D'];\n    num.chars().filter(|c| primes.contains(c)).count() as isize\n}\n\n### PHP version\n\n<?php\nfunction hex_key($num) {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "php",
    "prompt": "<?php\nfunction strange_sort_list($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = vec![];\n    let mut switch = true;\n    let mut lst = lst.clone();\n    while !lst.is_empty() {\n        if switch {\n            res.push(*lst.iter().min().unwrap());\n        } else {\n            res.push(*lst.iter().max().unwrap());\n        }\n        lst.remove(lst.iter().position(|&x| x == res[res.len() - 1]).unwrap());\n        switch = !switch;\n    }\n    res\n}\n\n### PHP version\n\n<?php\nfunction strange_sort_list($lst) {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "php",
    "prompt": "<?php\nfunction all_prefixes($string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn all_prefixes(string: String) -> Vec<String> {\n    (1..=string.len()).map(|i| string[..i].to_string()).collect()\n}\n\n### PHP version\n\n<?php\nfunction all_prefixes($string) {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "php",
    "prompt": "<?php\nfunction solution($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(idx, &x)| idx%2==0 && x%2==1).map(|(_, x)| x).sum()\n}\n\n### PHP version\n\n<?php\nfunction solution($lst) {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "php",
    "prompt": "<?php\nfunction is_sorted($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn is_sorted(lst: Vec<isize>) -> bool {\n    let mut count_digit = std::collections::HashMap::new();\n    for i in &lst {\n        *count_digit.entry(i).or_insert(0) += 1;\n    }\n\n    if lst.iter().any(|i| count_digit[i] > 2) {\n        return false;\n    }\n\n    lst.windows(2).all(|w| w[0] <= w[1])\n}\n\n### PHP version\n\n<?php\nfunction is_sorted($lst) {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "php",
    "prompt": "<?php\nfunction search($lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8, 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn search(lst: Vec<isize>) -> isize {\n    let mut frq = vec![0; *lst.iter().max().unwrap() as usize + 1];\n    for i in lst {\n        frq[i as usize] += 1;\n    }\n\n    let mut ans = -1;\n    for i in 1..frq.len() {\n        if frq[i] >= i {\n            ans = i as isize;\n        }\n    }\n\n    ans\n}\n\n### PHP version\n\n<?php\nfunction search($lst) {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "php",
    "prompt": "<?php\nfunction pluck($arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n    if arr.len() == 0 { return vec![]; }\n    let evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    if evens.is_empty() { return vec![]; }\n    let min_even = *evens.iter().min().unwrap();\n    let index = arr.iter().position(|&x| x == min_even).unwrap();\n    vec![min_even, index as isize]\n}\n\n### PHP version\n\n<?php\nfunction pluck($arr) {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "php",
    "prompt": "<?php\nfunction pairs_sum_to_zero($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j] == 0 {\n                return true;\n            }\n        }\n    }\n    false\n}\n\n### PHP version\n\n<?php\nfunction pairs_sum_to_zero($l) {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "php",
    "prompt": "<?php\nfunction make_palindrome($string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn make_palindrome(string: String) -> String {\n    if string.is_empty() {\n        return String::new();\n    }\n\n    let mut beginning_of_suffix = 0;\n\n    while string[beginning_of_suffix..] != string[beginning_of_suffix..].chars().rev().collect::<String>() {\n        beginning_of_suffix += 1;\n    }\n\n    string.clone() + &string[..beginning_of_suffix].chars().rev().collect::<String>()\n}\n\n### PHP version\n\n<?php\nfunction make_palindrome($string) {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "php",
    "prompt": "<?php\nfunction starts_one_ends($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn starts_one_ends(n: isize) -> isize {\n    if n == 1 { return 1 }\n    18 * (10isize.pow(n as u32 - 2))\n}\n\n### PHP version\n\n<?php\nfunction starts_one_ends($n) {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "php",
    "prompt": "<?php\nfunction get_positive($l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&e| e > 0).collect()\n}\n\n### PHP version\n\n<?php\nfunction get_positive($l) {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "php",
    "prompt": "<?php\nfunction concatenate($strings) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return concatenate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"xyz\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\", \"w\", \"k\")) !== \"xyzwk\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn concatenate(strings: Vec<String>) -> String {\n    strings.join(\"\")\n}\n\n### PHP version\n\n<?php\nfunction concatenate($strings) {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "php",
    "prompt": "<?php\nfunction is_nested($string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn is_nested(string: String) -> bool {\n    let opening_bracket_index: Vec<usize> = string.match_indices(\"[\").map(|(i, _)| i).collect();\n    let mut closing_bracket_index: Vec<usize> = string.match_indices(\"]\").map(|(i, _)| i).collect();\n    closing_bracket_index.reverse();\n\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = closing_bracket_index.len();\n\n    for idx in opening_bracket_index {\n        if i < l && idx < closing_bracket_index[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n\n    cnt >= 2\n}\n\n### PHP version\n\n<?php\nfunction is_nested($string) {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "php",
    "prompt": "<?php\nfunction is_palindrome($text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn is_palindrome(text: String) -> bool {\n    text.chars().zip(text.chars().rev()).all(|(a, b)| a == b)\n}\n\n### PHP version\n\n<?php\nfunction is_palindrome($text) {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "php",
    "prompt": "<?php\nfunction factorize($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn factorize(n: isize) -> Vec<isize> {\n    let mut fact = vec![];\n    let mut i = 2;\n    let mut n = n;\n    while i <= (n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n            fact.push(i);\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\n    if n > 1 {\n        fact.push(n);\n    }\n    fact\n}\n\n### PHP version\n\n<?php\nfunction factorize($n) {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "php",
    "prompt": "<?php\nfunction largest_prime_factor($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn largest_prime_factor(n: isize) -> isize {\n    fn is_prime(k: isize) -> bool {\n        if k < 2 {\n            return false;\n        }\n        for i in 2..k {\n            if k % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    let mut largest = 1;\n    for j in 2..=n {\n        if n % j == 0 && is_prime(j) {\n            largest = j;\n        }\n    }\n\n    largest\n}\n\n### PHP version\n\n<?php\nfunction largest_prime_factor($n) {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "php",
    "prompt": "<?php\nfunction get_max_triples($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return get_max_triples(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 36) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 53361) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn get_max_triples(n: isize) -> isize {\n    let mut A = vec![0; n as usize];\n    for i in 1..=n {\n        A[i as usize - 1] = i*i - i + 1;\n    }\n\n    let mut ans = vec![];\n    for i in 0..n {\n        for j in i+1..n {\n            for k in j+1..n {\n                if (A[i as usize]+A[j as usize]+A[k as usize])%3 == 0 {\n                    ans.push((A[i as usize],A[j as usize],A[k as usize]));\n                }\n            }\n        }\n    }\n    ans.len() as isize\n}\n\n### PHP version\n\n<?php\nfunction get_max_triples($n) {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "php",
    "prompt": "<?php\nfunction anti_shuffle($s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn anti_shuffle(s: String) -> String {\n    s.split(' ')\n        .map(|word| {\n            let mut chars: Vec<char> = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect::<String>()\n        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\n### PHP version\n\n<?php\nfunction anti_shuffle($s) {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "php",
    "prompt": "<?php\nfunction solve($N) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1000) !== \"1\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(150) !== \"110\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(147) !== \"1100\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(333) !== \"1001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(963) !== \"10010\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn solve(N: isize) -> String {\n    format!(\"{:b}\", N.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>())\n}\n\n### PHP version\n\n<?php\nfunction solve($N) {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "php",
    "prompt": "<?php\nfunction encrypt($s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn encrypt(s: String) -> String {\n    let d = \"abcdefghijklmnopqrstuvwxyz\";\n    let mut out = String::new();\n    for c in s.chars() {\n        if let Some(i) = d.find(c) {\n            out.push(d.chars().nth((i + 4) % 26).unwrap());\n        } else {\n            out.push(c);\n        }\n    }\n    out\n}\n\n### PHP version\n\n<?php\nfunction encrypt($s) {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "php",
    "prompt": "<?php\nfunction make_a_pile($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn make_a_pile(n: isize) -> Vec<isize> {\n    (0..n).map(|i| n + 2*i).collect()\n}\n\n### PHP version\n\n<?php\nfunction make_a_pile($n) {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "php",
    "prompt": "<?php\nfunction is_prime($n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunction candidate(...$args) {\n    return is_prime(...$args);\n}\n\nfunction test(): void {\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(101) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13441) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(61) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(85) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(255379) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n?>",
      "\n//",
      "\n#"
    ],
    "translation_prompt": "### Rust version\n\nfn is_prime(n: isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for k in 2..n {\n        if n % k == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n### PHP version\n\n<?php\nfunction is_prime($n) {\n"
  }
]