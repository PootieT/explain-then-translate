[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "rb",
    "prompt": "def correct_bracketing(brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"()()(()())()))()\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n  let depth = 0;\n  for (let b of brackets) {\n    if (b === \"(\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef correct_bracketing(brackets)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "rb",
    "prompt": "def triangle_area(a, h)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5, 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10, 8))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction triangle_area(a: number, h: number): number {\n  return a * h / 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef triangle_area(a, h)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "rb",
    "prompt": "def special_factorial(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_special_factorial\n    candidate = method(:special_factorial)\n    assert_equal(288, candidate.call(4))\n    assert_equal(34560, candidate.call(5))\n    assert_equal(125411328000, candidate.call(7))\n    assert_equal(1, candidate.call(1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction special_factorial(n: number): number {\n  let fact_i = 1;\n  let special_fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact_i *= i;\n    special_fact *= fact_i;\n  }\n  return special_fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef special_factorial(n)\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "rb",
    "prompt": "def largest_smallest_integers(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5, 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil, nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100, 1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  const smallest = lst.filter(x => x < 0)\n  const largest = lst.filter(x => x > 0)\n  return [smallest.length ? Math.max(...smallest) : undefined, largest.length ? Math.min(...largest) : undefined]\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef largest_smallest_integers(lst)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "rb",
    "prompt": "def move_one_ball(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_one_ball\n    candidate = method(:move_one_ball)\n    assert_equal(true, candidate.call([3, 4, 5, 1, 2]))\n    assert_equal(true, candidate.call([3, 5, 10, 1, 2]))\n    assert_equal(false, candidate.call([4, 3, 1, 2]))\n    assert_equal(false, candidate.call([3, 5, 4, 1, 2]))\n    assert_equal(true, candidate.call([]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction move_one_ball(arr: number[]): boolean {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted_array = [...arr].sort((a, b) => a - b);\n  const min_value = Math.min(...arr);\n  const min_index = arr.indexOf(min_value);\n  const my_arr = [...arr.slice(min_index), ...arr.slice(0, min_index)];\n  return my_arr.every((val, idx) => val === sorted_array[idx]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef move_one_ball(arr)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "rb",
    "prompt": "def digits(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digits\n    candidate = method(:digits)\n    assert_equal(5, candidate.call(5))\n    assert_equal(5, candidate.call(54))\n    assert_equal(1, candidate.call(120))\n    assert_equal(5, candidate.call(5014))\n    assert_equal(315, candidate.call(98765))\n    assert_equal(2625, candidate.call(5576543))\n    assert_equal(0, candidate.call(2468))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction digits(n: number): number {\n  let product = 1;\n  let odd_count = 0;\n  for (const digit of String(n)) {\n    const int_digit = Number(digit);\n    if (int_digit % 2 === 1) {\n      product *= int_digit;\n      odd_count += 1;\n    }\n  }\n  return odd_count === 0 ? 0 : product;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef digits(n)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "rb",
    "prompt": "def fib4(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28, candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386, candidate.call(12))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction fib4(n: number): number {\n  const results = [0, 0, 2, 0];\n  if (n < 4) {\n    return results[n];\n  }\n\n  for (let i = 4; i <= n; i++) {\n    results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);\n    results.shift();\n  }\n\n  return results[results.length - 1];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef fib4(n)\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "rb",
    "prompt": "def order_by_points(nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction order_by_points(nums: number[]): number[] {\n  function digits_sum(n: number): number {\n    const neg = n < 0 ? -1 : 1;\n    n = Math.abs(n);\n    const digits = Array.from(String(n), Number);\n    digits[0] *= neg;\n    return digits.reduce((acc, cur) => acc + cur, 0);\n  }\n  return nums.sort((a, b) => digits_sum(a) - digits_sum(b));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef order_by_points(nums)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "rb",
    "prompt": "def is_happy(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n  }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i+1] || s[i+1] === s[i+2] || s[i] === s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_happy(s)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "rb",
    "prompt": "def circular_shift(x, shift)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_circular_shift\n    candidate = method(:circular_shift)\n    assert_equal(\"001\", candidate.call(100, 2))\n    assert_equal(\"12\", candidate.call(12, 2))\n    assert_equal(\"79\", candidate.call(97, 8))\n    assert_equal(\"21\", candidate.call(12, 1))\n    assert_equal(\"11\", candidate.call(11, 101))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction circular_shift(x: number, shift: number): string {\n  const s = String(x);\n  if (shift > s.length) {\n    return s.split('').reverse().join('');\n  } else {\n    return s.slice(s.length - shift) + s.slice(0, s.length - shift);\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef circular_shift(x, shift)\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "rb",
    "prompt": "def max_fill(grid, capacity)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_fill\n    candidate = method(:max_fill)\n    assert_equal(6, candidate.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))\n    assert_equal(5, candidate.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2))\n    assert_equal(0, candidate.call([[0, 0, 0], [0, 0, 0]], 5))\n    assert_equal(4, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 2))\n    assert_equal(2, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 9))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction max_fill(grid: number[][], capacity: number): number {\n  return grid.reduce((acc, cur) => acc + Math.ceil(cur.reduce((a, b) => a + b) / capacity), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef max_fill(grid, capacity)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "rb",
    "prompt": "def has_close_elements(numbers, threshold)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_has_close_elements\n    candidate = method(:has_close_elements)\n    assert_equal(true, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3))\n    assert_equal(false, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05))\n    assert_equal(true, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.95))\n    assert_equal(false, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.8))\n    assert_equal(true, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1))\n    assert_equal(true, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 1.0))\n    assert_equal(false, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n  for (let idx = 0; idx < numbers.length; idx++) {\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        const distance = Math.abs(numbers[idx] - numbers[idx2]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef has_close_elements(numbers, threshold)\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "rb",
    "prompt": "def numerical_letter_grade(grades)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_numerical_letter_grade\n    candidate = method(:numerical_letter_grade)\n    assert_equal([\"A+\", \"B\", \"C-\", \"C\", \"A-\"], candidate.call([4.0, 3, 1.7, 2, 3.5]))\n    assert_equal([\"D+\"], candidate.call([1.2]))\n    assert_equal([\"D-\"], candidate.call([0.5]))\n    assert_equal([\"E\"], candidate.call([0.0]))\n    assert_equal([\"D\", \"D-\", \"C-\", \"B\", \"B+\"], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))\n    assert_equal([\"E\", \"D-\"], candidate.call([0.0, 0.7]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const letter_grade = [];\n  for (const gpa of grades) {\n    if (gpa === 4.0) {\n      letter_grade.push('A+');\n    } else if (gpa > 3.7) {\n      letter_grade.push('A');\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-');\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+');\n    } else if (gpa > 2.7) {\n      letter_grade.push('B');\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-');\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+');\n    } else if (gpa > 1.7) {\n      letter_grade.push('C');\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-');\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+');\n    } else if (gpa > 0.7) {\n      letter_grade.push('D');\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-');\n    } else {\n      letter_grade.push('E');\n    }\n  }\n  return letter_grade;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef numerical_letter_grade(grades)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "rb",
    "prompt": "def x_or_y(n, x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_x_or_y\n    candidate = method(:x_or_y)\n    assert_equal(34, candidate.call(7, 34, 12))\n    assert_equal(5, candidate.call(15, 8, 5))\n    assert_equal(33, candidate.call(3, 33, 5212))\n    assert_equal(3, candidate.call(1259, 3, 52))\n    assert_equal(-1, candidate.call(7919, -1, 12))\n    assert_equal(583, candidate.call(3609, 1245, 583))\n    assert_equal(129, candidate.call(91, 56, 129))\n    assert_equal(1234, candidate.call(6, 34, 1234))\n    assert_equal(0, candidate.call(1, 2, 0))\n    assert_equal(2, candidate.call(2, 2, 0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction x_or_y(n: number, x: number, y: number): number {\n  if (n === 1) {\n    return y;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return y;\n    }\n  }\n  return x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef x_or_y(n, x, y)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "rb",
    "prompt": "def specialFilter(nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5, -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2, candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43, -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75, 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction specialFilter(nums: number[]): number {\n  let count = 0;\n  for (const num of nums) {\n    if (num > 10) {\n      const odd_digits = new Set([1, 3, 5, 7, 9]);\n      const number_as_string = String(num);\n      if (odd_digits.has(Number(number_as_string[0])) && odd_digits.has(Number(number_as_string[number_as_string.length - 1]))) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef specialFilter(nums)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "rb",
    "prompt": "def parse_music(music_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction parse_music(music_string: string): number[] {\n    const note_map = {'o': 4, 'o|': 2, '.|': 1};\n    return music_string.split(' ').filter(x => x).map(x => note_map[x]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef parse_music(music_string)\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "rb",
    "prompt": "def split_words(txt)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_words\n    candidate = method(:split_words)\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"Hello world!\"))\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"Hello,world!\"))\n    assert_equal([\"Hello\", \"world,!\"], candidate.call(\"Hello world,!\"))\n    assert_equal([\"Hello,Hello,world\", \"!\"], candidate.call(\"Hello,Hello,world !\"))\n    assert_equal(3, candidate.call(\"abcdef\"))\n    assert_equal(2, candidate.call(\"aaabb\"))\n    assert_equal(1, candidate.call(\"aaaBb\"))\n    assert_equal(0, candidate.call(\"\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction split_words(txt: string): string[]| number {\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.replace(\",\", \" \").split(\" \");\n  } else {\n    return txt.split(\"\").filter((x) => x === x.toLowerCase() && x.charCodeAt(0) % 2 === 0).length;\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef split_words(txt)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "rb",
    "prompt": "def count_distinct_characters(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n    assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction count_distinct_characters(string: string): number {\n  return new Set(string.toLowerCase()).size;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef count_distinct_characters(string)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "rb",
    "prompt": "def digitSum(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction digitSum(s: string): number {\n  if (s === \"\") return 0;\n  return s.split(\"\").reduce((acc, cur) => {\n    if (cur.match(/[A-Z]/)) {\n      acc += cur.charCodeAt(0);\n    }\n    return acc;\n  }, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef digitSum(s)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "rb",
    "prompt": "def sum_squares(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n    candidate = method(:sum_squares)\n    assert_equal(6, candidate.call([1, 2, 3]))\n    assert_equal(14, candidate.call([1, 4, 9]))\n    assert_equal(0, candidate.call([]))\n    assert_equal(9, candidate.call([1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    assert_equal(-3, candidate.call([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\n    assert_equal(0, candidate.call([0]))\n    assert_equal(-126, candidate.call([-1, -5, 2, -1, -5]))\n    assert_equal(3030, candidate.call([-56, -99, 1, 0, -2]))\n    assert_equal(0, candidate.call([-1, 0, 0, 0, 0, 0, 0, 0, -1]))\n    assert_equal(-14196, candidate.call([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]))\n    assert_equal(-1448, candidate.call([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n  const result =[];\n  for (let i = 0; i < lst.length; i++) {\n    if (i %3 === 0) {\n      result.push(lst[i]**2);\n    } else if (i % 4 === 0 && i%3 !== 0) {\n      result.push(lst[i]**3);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result.reduce((a, b) => a + b, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sum_squares(lst)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "rb",
    "prompt": "def count_up_to(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_up_to\n    candidate = method(:count_up_to)\n    assert_equal([2, 3], candidate.call(5))\n    assert_equal([2, 3, 5], candidate.call(6))\n    assert_equal([2, 3, 5], candidate.call(7))\n    assert_equal([2, 3, 5, 7], candidate.call(10))\n    assert_equal([], candidate.call(0))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19], candidate.call(22))\n    assert_equal([], candidate.call(1))\n    assert_equal([2, 3, 5, 7, 11, 13, 17], candidate.call(18))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43], candidate.call(47))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], candidate.call(101))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction count_up_to(n: number): number[] {\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    let is_prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef count_up_to(n)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "rb",
    "prompt": "def sum_squares(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84, candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4, 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230, candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0, 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086, candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0, 1.0, 0.0]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n  let squared = 0;\n  for (let i of lst) {\n    squared += Math.ceil(i) ** 2;\n  }\n  return squared;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sum_squares(lst)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "rb",
    "prompt": "def unique(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique\n    candidate = method(:unique)\n    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction unique(l: number[]): number[] {\n  return [...new Set(l)].sort((a, b) => a - b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef unique(l)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "rb",
    "prompt": "def fib(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction fib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef fib(n)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "rb",
    "prompt": "def fizz_buzz(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n    assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n    assert_equal(8026, candidate.call(100000))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction fizz_buzz(n: number): number {\n  const ns = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      ns.push(i);\n    }\n  }\n  const s = ns.join('');\n  let ans = 0;\n  for (const c of s) {\n    ans += c === '7' ? 1 : 0;\n  }\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef fizz_buzz(n)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "rb",
    "prompt": "def Strongest_Extension(class_name, extensions)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n    let strong = extensions[0];\n    let my_val = extensions[0].replace(/[^A-Z]/g, \"\").length - extensions[0].replace(/[^a-z]/g, \"\").length;\n    for (let s of extensions) {\n        const val = s.replace(/[^A-Z]/g, \"\").length - s.replace(/[^a-z]/g, \"\").length;\n        if (val > my_val) {\n            strong = s;\n            my_val = val;\n        }\n    }\n\n    const ans = `${class_name}.${strong}`;\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef Strongest_Extension(class_name, extensions)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "rb",
    "prompt": "def find_closest_elements(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let closest_pair: [number, number] | null = null;\n  let distance: number | null = null;\n\n  for (let idx = 0; idx < numbers.length; idx++) {\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        const elem = numbers[idx];\n        const elem2 = numbers[idx2];\n        if (distance === null) {\n          distance = Math.abs(elem - elem2);\n          closest_pair = [Math.min(elem, elem2), Math.max(elem, elem2)];\n        } else {\n          const new_distance = Math.abs(elem - elem2);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(elem, elem2), Math.max(elem, elem2)];\n          }\n        }\n      }\n    }\n  }\n\n  return closest_pair as [number, number];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef find_closest_elements(numbers)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "rb",
    "prompt": "def valid_date(date)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_valid_date\n    candidate = method(:valid_date)\n    assert_equal(true, candidate.call(\"03-11-2000\"))\n    assert_equal(false, candidate.call(\"15-01-2012\"))\n    assert_equal(false, candidate.call(\"04-0-2040\"))\n    assert_equal(true, candidate.call(\"06-04-2020\"))\n    assert_equal(true, candidate.call(\"01-01-2007\"))\n    assert_equal(false, candidate.call(\"03-32-2011\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"04-31-3000\"))\n    assert_equal(true, candidate.call(\"06-06-2005\"))\n    assert_equal(false, candidate.call(\"21-31-2000\"))\n    assert_equal(true, candidate.call(\"04-12-2003\"))\n    assert_equal(false, candidate.call(\"04122003\"))\n    assert_equal(false, candidate.call(\"20030412\"))\n    assert_equal(false, candidate.call(\"2003-04\"))\n    assert_equal(false, candidate.call(\"2003-04-12\"))\n    assert_equal(false, candidate.call(\"04-2003\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction valid_date(date: string): boolean {\n  try {\n    const [month, day, year] = date.split('-').map(Number);\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    if (\n      [1, 3, 5, 7, 8, 10, 12].includes(month) &&\n      (day < 1 || day > 31)\n    ) {\n      return false;\n    }\n    if ([4, 6, 9, 11].includes(month) && (day < 1 || day > 30)) {\n      return false;\n    }\n    if (month === 2 && (day < 1 || day > 29)) {\n      return false;\n    }\n  } catch {\n    return false;\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef valid_date(date)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "rb",
    "prompt": "def add(x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0, 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2, 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7, 5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef add(x, y)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "rb",
    "prompt": "def triples_sum_to_zero(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triples_sum_to_zero\n    candidate = method(:triples_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, 5, -1]))\n    assert_equal(true, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(false, candidate.call([1, 2, 5, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 9, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(false, candidate.call([1, 3, 5, -100]))\n    assert_equal(false, candidate.call([100, 3, 5, -100]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction triples_sum_to_zero(l: number[]): boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef triples_sum_to_zero(l)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "rb",
    "prompt": "def largest_divisor(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction largest_divisor(n: number): number {\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef largest_divisor(n)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "rb",
    "prompt": "def sort_numbers(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sort_numbers(numbers: string): string {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').filter(x => x).sort((a, b) => value_map[a] - value_map[b]).join(' ');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sort_numbers(numbers)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "rb",
    "prompt": "def smallest_change(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_smallest_change\n    candidate = method(:smallest_change)\n    assert_equal(4, candidate.call([1, 2, 3, 5, 4, 7, 9, 6]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 3, 2, 2]))\n    assert_equal(1, candidate.call([1, 4, 2]))\n    assert_equal(1, candidate.call([1, 4, 4, 2]))\n    assert_equal(0, candidate.call([1, 2, 3, 2, 1]))\n    assert_equal(0, candidate.call([3, 1, 1, 3]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(1, candidate.call([0, 1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction smallest_change(arr: number[]): number {\n  let ans = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !== arr[arr.length - i - 1]) {\n      ans += 1;\n    }\n  }\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef smallest_change(arr)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "rb",
    "prompt": "def below_threshold(l, t)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_threshold\n    candidate = method(:below_threshold)\n    assert_equal(true, candidate.call([1, 2, 4, 10], 100))\n    assert_equal(false, candidate.call([1, 20, 4, 10], 5))\n    assert_equal(true, candidate.call([1, 20, 4, 10], 21))\n    assert_equal(true, candidate.call([1, 20, 4, 10], 22))\n    assert_equal(true, candidate.call([1, 8, 4, 10], 11))\n    assert_equal(false, candidate.call([1, 8, 4, 10], 10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction below_threshold(l: number[], t: number): boolean {\n  return l.every((e) => e < t);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef below_threshold(l, t)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "rb",
    "prompt": "def prod_signs(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prod_signs\n    candidate = method(:prod_signs)\n    assert_equal(-9, candidate.call([1, 2, 2, -4]))\n    assert_equal(0, candidate.call([0, 1]))\n    assert_equal(-10, candidate.call([1, 1, 1, 2, 3, -1, 1]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(20, candidate.call([2, 4, 1, 2, -1, -1, 9]))\n    assert_equal(4, candidate.call([-1, 1, -1, 1]))\n    assert_equal(-4, candidate.call([-1, 1, 1, 1]))\n    assert_equal(0, candidate.call([-1, 1, 1, 0]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction prod_signs(arr: number[]): number | undefined {\n  if (!arr.length) return undefined;\n  const prod = arr.includes(0) ? 0 : (-1) ** arr.filter(x => x < 0).length;\n  return prod * arr.map(Math.abs).reduce((a, b) => a + b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef prod_signs(arr)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "rb",
    "prompt": "def modp(n, p)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2, candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8, candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4, candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction modp(n: number, p: number): number {\n  let ret = 1;\n  for (let i = 0; i < n; i++) {\n    ret = (2 * ret) % p;\n  }\n  return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef modp(n, p)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "rb",
    "prompt": "def count_upper(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction count_upper(s: string): number {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].match(/[AEIOU]/)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef count_upper(s)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "rb",
    "prompt": "def multiply(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020, 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76, 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0, 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction multiply(a: number, b: number): number {\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef multiply(a, b)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "rb",
    "prompt": "def unique_digits(x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction unique_digits(x: number[]): number[] {\n  const odd_digit_elements: number[] = [];\n  for (const i of x) {\n    if (String(i).split(\"\").every((c) => Number(c) % 2 === 1)) {\n      odd_digit_elements.push(i);\n    }\n  }\n  return odd_digit_elements.sort((a, b) => a - b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef unique_digits(x)\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "rb",
    "prompt": "def will_it_fly(q, w)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_will_it_fly\n    candidate = method(:will_it_fly)\n    assert_equal(true, candidate.call([3, 2, 3], 9))\n    assert_equal(false, candidate.call([1, 2], 5))\n    assert_equal(true, candidate.call([3], 5))\n    assert_equal(false, candidate.call([3, 2, 3], 1))\n    assert_equal(false, candidate.call([1, 2, 3], 6))\n    assert_equal(true, candidate.call([5], 5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction will_it_fly(q: number[], w: number): boolean {\n  if (q.reduce((a, b) => a + b, 0) > w) {\n    return false;\n  }\n\n  let i = 0;\n  let j = q.length - 1;\n  while (i < j) {\n    if (q[i] !== q[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef will_it_fly(q, w)\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "rb",
    "prompt": "def is_multiply_prime(a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_multiply_prime\n    candidate = method(:is_multiply_prime)\n    assert_equal(false, candidate.call(5))\n    assert_equal(true, candidate.call(30))\n    assert_equal(true, candidate.call(8))\n    assert_equal(false, candidate.call(10))\n    assert_equal(true, candidate.call(125))\n    assert_equal(true, candidate.call(105))\n    assert_equal(false, candidate.call(126))\n    assert_equal(false, candidate.call(729))\n    assert_equal(false, candidate.call(891))\n    assert_equal(true, candidate.call(1001))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_multiply_prime(a: number): boolean {\n  function is_prime(n: number): boolean {\n    for (let j = 2; j < n; j++) {\n      if (n % j === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!is_prime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!is_prime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!is_prime(k)) continue;\n        if (i * j * k === a) return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_multiply_prime(a)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "rb",
    "prompt": "def maximum(arr, k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction maximum(arr: number[], k: number): number[] {\n  if (k === 0) {\n    return [];\n  }\n  arr.sort((a, b) => a - b);\n  const ans = arr.slice(-k);\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef maximum(arr, k)\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "rb",
    "prompt": "def separate_paren_groups(paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_separate_paren_groups\n    candidate = method(:separate_paren_groups)\n    assert_equal([\"(()())\", \"((()))\", \"()\", \"((())()())\"], candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([\"()\", \"(())\", \"((()))\", \"(((())))\"], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([\"(()(())((())))\"], candidate.call(\"(()(())((())))\"))\n    assert_equal([\"()\", \"(())\", \"(()())\"], candidate.call(\"( ) (( )) (( )( ))\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction separate_paren_groups(paren_string: string): string[] {\n  const result = [];\n  const current_string = [];\n  let current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c === '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c === ')') {\n      current_depth -= 1;\n      current_string.push(c);\n\n      if (current_depth === 0) {\n        result.push(current_string.join(''));\n        current_string.length = 0;\n      }\n    }\n  }\n\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef separate_paren_groups(paren_string)\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "rb",
    "prompt": "def filter_integers(values)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction filter_integers(values: any[]): number[] {\n    return values.filter((x) => Number.isInteger(x));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef filter_integers(values)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "rb",
    "prompt": "def skjkasdkd(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25, candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81, 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n    assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191, 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction skjkasdkd(lst: number[]): number {\n  function isPrime(n: number): boolean {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let maxx = 0;\n  for (const num of lst) {\n    if (num > maxx && isPrime(num)) {\n      maxx = num;\n    }\n  }\n\n  return maxx === 0 ? 0 : maxx.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef skjkasdkd(lst)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "rb",
    "prompt": "def total_match(lst1, lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_total_match\n    candidate = method(:total_match)\n    assert_equal([], candidate.call([], []))\n    assert_equal([\"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hi\", \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\n    assert_equal([\"4\"], candidate.call([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\n    assert_equal([\"hI\", \"Hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n    assert_equal([\"hI\", \"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]))\n    assert_equal([], candidate.call([], [\"this\"]))\n    assert_equal([], candidate.call([\"this\"], []))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  const l1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const l2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return l1 <= l2 ? lst1 : lst2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef total_match(lst1, lst2)\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "rb",
    "prompt": "def string_to_md5(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_md5\n    candidate = method(:string_to_md5)\n    assert_equal(\"3e25960a79dbc69b674cd4ec67a72c62\", candidate.call(\"Hello world\"))\n    assert_equal(nil, candidate.call(\"\"))\n    assert_equal(\"0ef78513b0cb8cef12743f5aeb35f888\", candidate.call(\"A B C\"))\n    assert_equal(\"5f4dcc3b5aa765d61d8327deb882cf99\", candidate.call(\"password\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction string_to_md5(text: string): string | undefined {\n  const crypto = require('crypto');\n  return text ? crypto.createHash('md5').update(text).digest('hex') : undefined;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef string_to_md5(text)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "rb",
    "prompt": "def car_race_collision(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_car_race_collision\n    candidate = method(:car_race_collision)\n    assert_equal(4, candidate.call(2))\n    assert_equal(9, candidate.call(3))\n    assert_equal(16, candidate.call(4))\n    assert_equal(64, candidate.call(8))\n    assert_equal(100, candidate.call(10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction car_race_collision(n: number): number {\n    return n**2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef car_race_collision(n)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "rb",
    "prompt": "def is_simple_power(x, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16, 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true, candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true, candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false, candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true, candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return x === 1;\n  }\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_simple_power(x, n)\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "rb",
    "prompt": "def encode(message)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction encode(message: string): string {\n  const vowels = \"aeiouAEIOU\";\n  const vowelsReplace = Object.fromEntries([...vowels].map(i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]));\n  message = message.split('').map(i => i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase()).join('');\n  return message.split('').map(i => vowelsReplace[i] || i).join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef encode(message)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "rb",
    "prompt": "def incr_list(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_incr_list\n    candidate = method(:incr_list)\n    assert_equal([], candidate.call([]))\n    assert_equal([4, 3, 2], candidate.call([3, 2, 1]))\n    assert_equal([6, 3, 6, 3, 4, 4, 10, 1, 124], candidate.call([5, 2, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction incr_list(l: number[]): number[] {\n  return l.map(e => e + 1);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef incr_list(l)\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "rb",
    "prompt": "def flip_case(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flip_case\n    candidate = method(:flip_case)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"hELLO!\", candidate.call(\"Hello!\"))\n    assert_equal(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\", candidate.call(\"These violent delights have violent ends\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction flip_case(string: string): string {\n  return string.replace(/./g, (c) => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase());\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef flip_case(string)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "rb",
    "prompt": "def vowels_count(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"ACEDY\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction vowels_count(s: string): number {\n    const vowels = \"aeiouAEIOU\";\n    let n_vowels = s.split('').filter(c => vowels.includes(c)).length;\n    if (s.slice(-1) === 'y' || s.slice(-1) === 'Y') {\n        n_vowels += 1;\n    }\n    return n_vowels;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef vowels_count(s)\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "rb",
    "prompt": "def sorted_list_sum(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sorted_list_sum\n    candidate = method(:sorted_list_sum)\n    assert_equal([\"aa\"], candidate.call([\"aa\", \"a\", \"aaa\"]))\n    assert_equal([\"AI\", \"asdf\", \"school\"], candidate.call([\"school\", \"AI\", \"asdf\", \"b\"]))\n    assert_equal([], candidate.call([\"d\", \"b\", \"c\", \"a\"]))\n    assert_equal([\"abcd\", \"dcba\"], candidate.call([\"d\", \"dcba\", \"abcd\", \"a\"]))\n    assert_equal([\"AI\", \"ai\", \"au\"], candidate.call([\"AI\", \"ai\", \"au\"]))\n    assert_equal([], candidate.call([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]))\n    assert_equal([\"cc\", \"dd\", \"aaaa\", \"bbbb\"], candidate.call([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sorted_list_sum(lst: string[]): string[] {\n  lst.sort();\n  const new_lst = [];\n  for (const i of lst) {\n    if (i.length % 2 === 0) {\n      new_lst.push(i);\n    }\n  }\n  return new_lst.sort((a, b) => a.length - b.length);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sorted_list_sum(lst)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "rb",
    "prompt": "def words_string(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_string\n    candidate = method(:words_string)\n    assert_equal([\"Hi\", \"my\", \"name\", \"is\", \"John\"], candidate.call(\"Hi, my name is John\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One, two, three, four, five, six\"))\n    assert_equal([\"Hi\", \"my\", \"name\"], candidate.call(\"Hi, my name\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One,, two, three, four, five, six,\"))\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([\"ahmed\", \"gamal\"], candidate.call(\"ahmed     , gamal\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction words_string(s: string): string[] {\n  if (!s) {\n    return [];\n  }\n\n  const s_list: string[] = [];\n\n  for (const letter of s) {\n    if (letter === ',') {\n      s_list.push(' ');\n    } else {\n      s_list.push(letter);\n    }\n  }\n\n  const result = s_list.join('').split(' ');\n\n  return result.filter((word) => word !== '');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef words_string(s)\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "rb",
    "prompt": "def even_odd_palindrome(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_palindrome\n    candidate = method(:even_odd_palindrome)\n    assert_equal([8, 13], candidate.call(123))\n    assert_equal([4, 6], candidate.call(12))\n    assert_equal([1, 2], candidate.call(3))\n    assert_equal([6, 8], candidate.call(63))\n    assert_equal([5, 6], candidate.call(25))\n    assert_equal([4, 6], candidate.call(19))\n    assert_equal([4, 5], candidate.call(9))\n    assert_equal([0, 1], candidate.call(1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction even_odd_palindrome(n: number): [number, number] {\n  function is_palindrome(n: number): boolean {\n    return String(n) === String(n).split(\"\").reverse().join(\"\");\n  }\n\n  let even_palindrome_count = 0;\n  let odd_palindrome_count = 0;\n\n  for (let i = 1; i < n + 1; i++) {\n    if (i % 2 === 1 && is_palindrome(i)) {\n      odd_palindrome_count += 1;\n    } else if (i % 2 === 0 && is_palindrome(i)) {\n      even_palindrome_count += 1;\n    }\n  }\n  return [even_palindrome_count, odd_palindrome_count];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef even_odd_palindrome(n)\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "rb",
    "prompt": "def triangle_area(a, b, c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction triangle_area(a: number, b: number, c: number): number {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = (s * (s - a) * (s - b) * (s - c)) ** 0.5;\n  return Number(area.toFixed(2));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef triangle_area(a, b, c)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "rb",
    "prompt": "def check_dict_case(dict)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  } else {\n    let state = 'start';\n    for (const key in dict) {\n      if (typeof key !== 'string') {\n        state = 'mixed';\n        break;\n      }\n      if (state === 'start') {\n        if (key.toUpperCase() === key) {\n          state = 'upper';\n        } else if (key.toLowerCase() === key) {\n          state = 'lower';\n        } else {\n          break;\n        }\n      } else if ((state === 'upper' && key.toUpperCase() !== key) || (state === 'lower' && key.toLowerCase() !== key)) {\n        state = 'mixed';\n        break;\n      } else {\n        continue;\n      }\n    }\n    return state === 'upper' || state === 'lower';\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef check_dict_case(dict)\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "rb",
    "prompt": "def tri(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tri\n    candidate = method(:tri)\n    assert_equal([1, 3, 2, 8], candidate.call(3))\n    assert_equal([1, 3, 2, 8, 3], candidate.call(4))\n    assert_equal([1, 3, 2, 8, 3, 15], candidate.call(5))\n    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35], candidate.call(9))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))\n    assert_equal([1], candidate.call(0))\n    assert_equal([1, 3], candidate.call(1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction tri(n: number): number[] {\n  if (n === 0) {\n    return [1];\n  }\n  const my_tri = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      my_tri.push(i / 2 + 1);\n    } else {\n      my_tri.push(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2);\n    }\n  }\n  return my_tri;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef tri(n)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "rb",
    "prompt": "def median(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction median(l: number[]): number {\n  l.sort((a, b) => a - b);\n  if (l.length % 2 === 1) {\n    return l[Math.floor(l.length / 2)];\n  } else {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef median(l)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "rb",
    "prompt": "def change_base(x, base)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_change_base\n    candidate = method(:change_base)\n    assert_equal(\"22\", candidate.call(8, 3))\n    assert_equal(\"100\", candidate.call(9, 3))\n    assert_equal(\"11101010\", candidate.call(234, 2))\n    assert_equal(\"10000\", candidate.call(16, 2))\n    assert_equal(\"1000\", candidate.call(8, 2))\n    assert_equal(\"111\", candidate.call(7, 2))\n    assert_equal(\"2\", candidate.call(2, 3))\n    assert_equal(\"3\", candidate.call(3, 4))\n    assert_equal(\"4\", candidate.call(4, 5))\n    assert_equal(\"5\", candidate.call(5, 6))\n    assert_equal(\"6\", candidate.call(6, 7))\n    assert_equal(\"7\", candidate.call(7, 8))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction change_base(x: number, base: number): string {\n  let ret = \"\";\n  while (x > 0) {\n    ret = String(x % base) + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef change_base(x, base)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "rb",
    "prompt": "def longest(strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_longest\n    candidate = method(:longest)\n    assert_equal(nil, candidate.call([]))\n    assert_equal(\"x\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"zzzz\", candidate.call([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction longest(strings: string[]): string | undefined {\n  if (!strings) {\n    return undefined;\n  }\n\n  const maxlen = Math.max(...strings.map((s) => s.length));\n  for (const s of strings) {\n    if (s.length === maxlen) {\n      return s;\n    }\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef longest(strings)\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "rb",
    "prompt": "def sort_array(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const countBits = (n: number) => n.toString(2).match(/1/g)?.length ?? 0;\n    return countBits(a) - countBits(b) || a - b;\n  });\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sort_array(arr)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "rb",
    "prompt": "def common(l1, l2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction common(l1: number[], l2: number[]): number[] {\n  const ret = new Set<number>()\n  for (const e1 of l1) {\n    for (const e2 of l2) {\n      if (e1 === e2) {\n        ret.add(e1)\n      }\n    }\n  }\n  return Array.from(ret).sort()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef common(l1, l2)\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "rb",
    "prompt": "def cycpattern_check(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cycpattern_check\n    candidate = method(:cycpattern_check)\n    assert_equal(false, candidate.call(\"xyzw\", \"xyw\"))\n    assert_equal(true, candidate.call(\"yello\", \"ell\"))\n    assert_equal(false, candidate.call(\"whattup\", \"ptut\"))\n    assert_equal(true, candidate.call(\"efef\", \"fee\"))\n    assert_equal(false, candidate.call(\"abab\", \"aabb\"))\n    assert_equal(true, candidate.call(\"winemtt\", \"tinem\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction cycpattern_check(a: string, b: string): boolean {\n  const l = b.length;\n  const pat = b + b;\n  for (let i = 0; i <= a.length - l; i++) {\n    for (let j = 0; j <= l; j++) {\n      if (a.slice(i, i + l) === pat.slice(j, j + l)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef cycpattern_check(a, b)\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "rb",
    "prompt": "def minSubArraySum(nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction minSubArraySum(nums: number[]): number {\n  let max_sum = 0;\n  let s = 0;\n  for (let num of nums) {\n    s += -num;\n    if (s < 0) {\n      s = 0;\n    }\n    max_sum = Math.max(s, max_sum);\n  }\n  if (max_sum === 0) {\n    max_sum = Math.max(...nums.map(i => -i));\n  }\n  const min_sum = -max_sum;\n  return min_sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef minSubArraySum(nums)\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "rb",
    "prompt": "def sort_array(array)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5], candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2, 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0, 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23, 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sort_array(array: number[]): number[] {\n  return array.length === 0 ? [] : array.sort((a, b) => (array[0] + array[array.length - 1]) % 2 === 0 ? b - a : a - b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sort_array(array)\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "rb",
    "prompt": "def histogram(test)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4}, candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction histogram(test: string): {[key: string]: number} {\n  const dict1: {[key: string]: number} = {}\n  const list1 = test.split(\" \")\n  let t = 0\n\n  for (const i of list1) {\n    if (list1.filter(x => x === i).length > t && i !== '') {\n      t = list1.filter(x => x === i).length\n    }\n  }\n  if (t > 0) {\n    for (const i of list1) {\n      if (list1.filter(x => x === i).length === t) {\n        dict1[i] = t\n      }\n    }\n  }\n  return dict1\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef histogram(test)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "rb",
    "prompt": "def get_odd_collatz(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_odd_collatz\n    candidate = method(:get_odd_collatz)\n    assert_equal([1, 5, 7, 11, 13, 17], candidate.call(14))\n    assert_equal([1, 5], candidate.call(5))\n    assert_equal([1, 3, 5], candidate.call(12))\n    assert_equal([1], candidate.call(1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction get_odd_collatz(n: number): number[] {\n  const odd_collatz = n % 2 === 0 ? [] : [n];\n  while (n > 1) {\n    if (n % 2 === 0) {\n      n /= 2;\n    } else {\n      n = n * 3 + 1;\n    }\n\n    if (n % 2 === 1) {\n      odd_collatz.push(n);\n    }\n  }\n\n  return odd_collatz.sort((a, b) => a - b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef get_odd_collatz(n)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "rb",
    "prompt": "def derivative(xs)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_derivative\n    candidate = method(:derivative)\n    assert_equal([1, 4, 12, 20], candidate.call([3, 1, 2, 4, 5]))\n    assert_equal([2, 6], candidate.call([1, 2, 3]))\n    assert_equal([2, 2], candidate.call([3, 2, 1]))\n    assert_equal([2, 2, 0, 16], candidate.call([3, 2, 1, 0, 4]))\n    assert_equal([], candidate.call([1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction derivative(xs: number[]): number[] {\n  return xs.map((x, i) => i * x).slice(1);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef derivative(xs)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "rb",
    "prompt": "def fibfib(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0, candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24, candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274, candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef fibfib(n)\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "rb",
    "prompt": "def truncate_number(number)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_truncate_number\n    candidate = method(:truncate_number)\n    assert_equal(0.5, candidate.call(3.5))\n    assert_equal(0.25, candidate.call(1.25))\n    assert_equal(0.0, candidate.call(123.0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction truncate_number(number: number): number {\n  return number % 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef truncate_number(number)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "rb",
    "prompt": "def max_element(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_element\n    candidate = method(:max_element)\n    assert_equal(3, candidate.call([1, 2, 3]))\n    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction max_element(l: number[]): number {\n  let m = l[0];\n  for (let e of l) {\n    if (e > m) {\n      m = e;\n    }\n  }\n  return m;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef max_element(l)\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "rb",
    "prompt": "def closest_integer(value)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_integer\n    candidate = method(:closest_integer)\n    assert_equal(10, candidate.call(\"10\"))\n    assert_equal(15, candidate.call(\"14.5\"))\n    assert_equal(-16, candidate.call(\"-15.5\"))\n    assert_equal(15, candidate.call(\"15.3\"))\n    assert_equal(0, candidate.call(\"0\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  if (value.endsWith('.5')) {\n    return num > 0 ? Math.ceil(num) : Math.floor(num);\n  } else {\n    return Math.round(num);\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef closest_integer(value)\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "rb",
    "prompt": "def prime_fib(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_fib\n    candidate = method(:prime_fib)\n    assert_equal(2, candidate.call(1))\n    assert_equal(3, candidate.call(2))\n    assert_equal(5, candidate.call(3))\n    assert_equal(13, candidate.call(4))\n    assert_equal(89, candidate.call(5))\n    assert_equal(233, candidate.call(6))\n    assert_equal(1597, candidate.call(7))\n    assert_equal(28657, candidate.call(8))\n    assert_equal(514229, candidate.call(9))\n    assert_equal(433494437, candidate.call(10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction prime_fib(n: number): number {\n  function is_prime(p: number): boolean {\n    if (p < 2) {\n      return false;\n    }\n    for (let k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n      if (p % k === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const f = [0, 1];\n  while (true) {\n    f.push(f[f.length - 1] + f[f.length - 2]);\n    if (is_prime(f[f.length - 1])) {\n      n -= 1;\n    }\n    if (n === 0) {\n      return f[f.length - 1];\n    }\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef prime_fib(n)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "rb",
    "prompt": "def sum_product(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_product\n    candidate = method(:sum_product)\n    assert_equal([0, 1], candidate.call([]))\n    assert_equal([3, 1], candidate.call([1, 1, 1]))\n    assert_equal([100, 0], candidate.call([100, 0]))\n    assert_equal([15, 105], candidate.call([3, 5, 7]))\n    assert_equal([10, 10], candidate.call([10]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sum_product(numbers: number[]): [number, number] {\n  let sum_value = 0;\n  let prod_value = 1;\n\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n\n  return [sum_value, prod_value];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sum_product(numbers)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "rb",
    "prompt": "def select_words(s, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction select_words(s: string, n: number): string[] {\n  const result: string[] = [];\n  for (const word of s.split(' ')) {\n    let n_consonants = 0;\n    for (const c of word) {\n      if (!['a', 'e', 'i', 'o', 'u'].includes(c.toLowerCase())) {\n        n_consonants += 1;\n      }\n    }\n    if (n_consonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef select_words(s, n)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "rb",
    "prompt": "def add_elements(arr, k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction add_elements(arr: number[], k: number): number {\n  return arr.slice(0, k).reduce((acc, cur) => (String(cur).length <= 2 ? acc + cur : acc), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef add_elements(arr, k)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "rb",
    "prompt": "def eat(number, need, remaining)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction eat(number: number, need: number, remaining: number): number[] {\n  if(need <= remaining) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef eat(number, need, remaining)\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "rb",
    "prompt": "def odd_count(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_count\n    candidate = method(:odd_count)\n    assert_equal([\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], candidate.call([\"1234567\"]))\n    assert_equal([\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], candidate.call([\"3\", \"11111111\"]))\n    assert_equal([\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"], candidate.call([\"271\", \"137\", \"314\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction odd_count(lst: string[]): string[] {\n  const res: string[] = [];\n  for (const arr of lst) {\n    const n = arr.split('').filter(d => Number(d) % 2 === 1).length;\n    res.push(`the number of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.`);\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef odd_count(lst)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "rb",
    "prompt": "def next_smallest(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1, candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction next_smallest(lst: number[]): number | undefined {\n  lst = [...new Set(lst)].sort((a, b) => a - b);\n  return lst.length < 2 ? undefined : lst[1];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef next_smallest(lst)\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "rb",
    "prompt": "def get_row(lst, x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction get_row(lst: number[][], x: number): [number, number][] {\n  const coords: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        coords.push([i, j]);\n      }\n    }\n  }\n  return coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef get_row(lst, x)\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "rb",
    "prompt": "def filter_by_prefix(strings, prefix)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n  return strings.filter(x => x.startsWith(prefix));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef filter_by_prefix(strings, prefix)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "rb",
    "prompt": "def choose_num(x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33, 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28, candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1, candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction choose_num(x: number, y: number): number {\n  if (x > y) {\n    return -1;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x === y) {\n    return -1;\n  }\n  return y - 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef choose_num(x, y)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "rb",
    "prompt": "def prime_length(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true, candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true, candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true, candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false, candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction prime_length(string: string): boolean {\n  const l = string.length;\n  if (l === 0 || l === 1) {\n    return false;\n  }\n  for (let i = 2; i < l; i++) {\n    if (l % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef prime_length(string)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "rb",
    "prompt": "def sum_to_n(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sum_to_n(n: number): number {\n  return (n * (n + 1)) / 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sum_to_n(n)\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "rb",
    "prompt": "def fix_spaces(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2 2 mple\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction fix_spaces(text: string): string {\n  let new_text = \"\";\n  let i = 0;\n  let start = 0, end = 0;\n  while (i < text.length) {\n    if (text[i] == \" \") {\n      end += 1;\n    } else {\n      if (end - start > 2) {\n        new_text += \"-\"+text[i];\n      } else if (end - start > 0) {\n        new_text += \"_\".repeat(end - start)+text[i];\n      } else {\n        new_text += text[i];\n      }\n      start = i+1;\n      end = i+1;\n    }\n    i+=1;\n  }\n  if (end - start > 2) {\n    new_text += \"-\";\n  } else if (end - start > 0) {\n    new_text += \"_\";\n  }\n  return new_text;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef fix_spaces(text)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "rb",
    "prompt": "def rolling_max(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction rolling_max(numbers: number[]): number[] {\n  let running_max: number | null = null;\n  const result: number[] = [];\n\n  for (const n of numbers) {\n    if (running_max === null) {\n      running_max = n;\n    } else {\n      running_max = Math.max(running_max, n);\n    }\n\n    result.push(running_max);\n  }\n\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef rolling_max(numbers)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "rb",
    "prompt": "def words_in_sentence(sentence)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction words_in_sentence(sentence: string): string {\n  const new_lst: string[] = [];\n  for (const word of sentence.split(' ')) {\n    let flg = 0;\n    if (word.length === 1) {\n      flg = 1;\n    }\n    for (let i = 2; i < word.length; i++) {\n      if (word.length % i === 0) {\n        flg = 1;\n      }\n    }\n    if (flg === 0 || word.length === 2) {\n      new_lst.push(word);\n    }\n  }\n  return new_lst.join(' ');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef words_in_sentence(sentence)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "rb",
    "prompt": "def get_closest_vowel(word)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\", candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"Above\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction get_closest_vowel(word: string): string {\n  if (word.length < 3) {\n    return \"\";\n  }\n\n  const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I']);\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.has(word[i])) {\n      if (!vowels.has(word[i+1]) && !vowels.has(word[i-1])) {\n        return word[i];\n      }\n    }\n  }\n  return \"\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef get_closest_vowel(word)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "rb",
    "prompt": "def compare(game, guess)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction compare(game: number[], guess: number[]): number[] {\n  return game.map((x, i) => Math.abs(x - guess[i]));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef compare(game, guess)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "rb",
    "prompt": "def remove_duplicates(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction remove_duplicates(numbers: number[]): number[] {\n  const c = new Map<number, number>();\n  numbers.forEach(n => c.set(n, (c.get(n) || 0) + 1));\n  return numbers.filter(n => c.get(n) <= 1);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef remove_duplicates(numbers)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "rb",
    "prompt": "def parse_nested_parens(paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction parse_nested_parens(paren_string: string): number[] {\n  function parse_paren_group(s: string): number {\n    let depth = 0;\n    let max_depth = 0;\n    for (const c of s) {\n      if (c === '(') {\n        depth += 1;\n        max_depth = Math.max(depth, max_depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n\n  return paren_string.split(' ').filter((x) => x).map(parse_paren_group);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef parse_nested_parens(paren_string)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "rb",
    "prompt": "def even_odd_count(num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  for (let i of Math.abs(num).toString()) {\n    if (parseInt(i)%2==0) {\n      even_count +=1;\n    } else {\n      odd_count +=1;\n    }\n  }\n  return [even_count, odd_count];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef even_odd_count(num)\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "rb",
    "prompt": "def fruit_distribution(s, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction fruit_distribution(s: string, n: number): number {\n  const lis = [];\n  for (const i of s.split(' ')) {\n    if (i.match(/\\d+/)) {\n      lis.push(parseInt(i));\n    }\n  }\n  return n - lis.reduce((a, b) => a + b, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef fruit_distribution(s, n)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "rb",
    "prompt": "def string_xor(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_xor\n    candidate = method(:string_xor)\n    assert_equal(\"010010\", candidate.call(\"111000\", \"101010\"))\n    assert_equal(\"0\", candidate.call(\"1\", \"1\"))\n    assert_equal(\"0101\", candidate.call(\"0101\", \"0000\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction string_xor(a: string, b: string): string {\n  const xor = (i: string, j: string) => (i === j ? '0' : '1');\n  return a.split('').map((x, idx) => xor(x, b[idx])).join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef string_xor(a, b)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "rb",
    "prompt": "def strlen(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strlen\n    candidate = method(:strlen)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(1, candidate.call(\"x\"))\n    assert_equal(9, candidate.call(\"asdasnakj\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction strlen(string: string): number {\n  return string.length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef strlen(string)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "rb",
    "prompt": "def string_sequence(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_sequence\n    candidate = method(:string_sequence)\n    assert_equal(\"0\", candidate.call(0))\n    assert_equal(\"0 1 2 3\", candidate.call(3))\n    assert_equal(\"0 1 2 3 4 5 6 7 8 9 10\", candidate.call(10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction string_sequence(n: number): string {\n  return [...Array(n + 1).keys()].join(' ');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef string_sequence(n)\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "rb",
    "prompt": "def file_name_check(file_name)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction file_name_check(file_name: string): string {\n  const suf = ['txt', 'exe', 'dll'];\n  const lst = file_name.split('.');\n  if (lst.length !== 2) {\n    return 'No';\n  }\n  if (!suf.includes(lst[1])) {\n    return 'No';\n  }\n  if (lst[0].length === 0 || !lst[0][0].match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n  const t = lst[0].split('').filter((x) => x.match(/\\d/)).length;\n  if (t > 3) {\n    return 'No';\n  }\n  return 'Yes';\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef file_name_check(file_name)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "rb",
    "prompt": "def can_arrange(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_can_arrange\n    candidate = method(:can_arrange)\n    assert_equal(3, candidate.call([1, 2, 4, 3, 5]))\n    assert_equal(-1, candidate.call([1, 2, 4, 5]))\n    assert_equal(2, candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))\n    assert_equal(4, candidate.call([4, 8, 5, 7, 3]))\n    assert_equal(-1, candidate.call([]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction can_arrange(arr: number[]): number {\n  let ind=-1;\n  let i=1;\n  while (i<arr.length) {\n    if (arr[i]<arr[i-1]) {\n      ind=i;\n    }\n    i+=1;\n  }\n  return ind;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef can_arrange(arr)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "rb",
    "prompt": "def add(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6, 8]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction add(lst: number[]): number {\n    return lst.filter((x, i) => i % 2 == 1 && x % 2 == 0).reduce((a, b) => a + b, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef add(lst)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "rb",
    "prompt": "def intersperse(numbers, delimeter)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2, 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n  if (!numbers.length) {\n    return [];\n  }\n\n  const result: number[] = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i], delimeter);\n  }\n\n  result.push(numbers[numbers.length - 1]);\n\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef intersperse(numbers, delimeter)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "rb",
    "prompt": "def match_parens(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_match_parens\n    candidate = method(:match_parens)\n    assert_equal(\"Yes\", candidate.call([\"()(\", \")\"]))\n    assert_equal(\"No\", candidate.call([\")\", \")\"]))\n    assert_equal(\"No\", candidate.call([\"(()(())\", \"())())\"]))\n    assert_equal(\"Yes\", candidate.call([\")())\", \"(()()(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(())))\", \"(()())((\"]))\n    assert_equal(\"No\", candidate.call([\"()\", \"())\"]))\n    assert_equal(\"Yes\", candidate.call([\"(()(\", \"()))()\"]))\n    assert_equal(\"No\", candidate.call([\"((((\", \"((())\"]))\n    assert_equal(\"No\", candidate.call([\")(()\", \"(()(\"]))\n    assert_equal(\"No\", candidate.call([\")(\", \")(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(\", \")\"]))\n    assert_equal(\"Yes\", candidate.call([\")\", \"(\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction match_parens(lst: string[]): string {\n  function check(s: string): boolean {\n    let val = 0;\n    for (const i of s) {\n      if (i === '(') {\n        val += 1;\n      } else {\n        val -= 1;\n      }\n      if (val < 0) {\n        return false;\n      }\n    }\n    return val === 0;\n  }\n\n  const S1 = lst[0] + lst[1];\n  const S2 = lst[1] + lst[0];\n  return check(S1) || check(S2) ? 'Yes' : 'No';\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef match_parens(lst)\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "rb",
    "prompt": "def filter_by_substring(strings, substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n  return strings.filter(x => x.includes(substring))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef filter_by_substring(strings, substring)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "rb",
    "prompt": "def find_max(words)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction find_max(words: string[]): string {\n    return words.sort((a, b) => {\n        return (new Set(b)).size - (new Set(a)).size || a.localeCompare(b);\n    })[0];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef find_max(words)\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "rb",
    "prompt": "def generate_integers(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_generate_integers\n    candidate = method(:generate_integers)\n    assert_equal([2, 4, 6, 8], candidate.call(2, 10))\n    assert_equal([2, 4, 6, 8], candidate.call(10, 2))\n    assert_equal([2, 4, 6, 8], candidate.call(132, 2))\n    assert_equal([], candidate.call(17, 89))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction generate_integers(a: number, b: number): number[] {\n  const lower = Math.max(2, Math.min(a, b));\n  const upper = Math.min(8, Math.max(a, b));\n\n  return Array.from({ length: upper - lower + 1 }, (_, i) => i + lower).filter((i) => i % 2 === 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef generate_integers(a, b)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "rb",
    "prompt": "def exchange(lst1, lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_exchange\n    candidate = method(:exchange)\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [1, 2, 3, 4]))\n    assert_equal(\"NO\", candidate.call([1, 2, 3, 4], [1, 5, 3, 4]))\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [2, 1, 4, 3]))\n    assert_equal(\"YES\", candidate.call([5, 7, 3], [2, 6, 4]))\n    assert_equal(\"NO\", candidate.call([5, 7, 3], [2, 6, 3]))\n    assert_equal(\"NO\", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))\n    assert_equal(\"YES\", candidate.call([100, 200], [200, 200]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction exchange(lst1: number[], lst2: number[]): string {\n  const odd = lst1.filter((i) => i % 2 === 1).length;\n  const even = lst2.filter((i) => i % 2 === 0).length;\n  return even >= odd ? 'YES' : 'NO';\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef exchange(lst1, lst2)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "rb",
    "prompt": "def is_equal_to_sum_even(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_equal_to_sum_even\n    candidate = method(:is_equal_to_sum_even)\n    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(6))\n    assert_equal(true, candidate.call(8))\n    assert_equal(true, candidate.call(10))\n    assert_equal(false, candidate.call(11))\n    assert_equal(true, candidate.call(12))\n    assert_equal(false, candidate.call(13))\n    assert_equal(true, candidate.call(16))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_equal_to_sum_even(n: number): boolean {\n  return n%2 === 0 && n >= 8;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_equal_to_sum_even(n)\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "rb",
    "prompt": "def decimal_to_binary(decimal)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction decimal_to_binary(decimal: number): string {\n  return `db${decimal.toString(2)}db`;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef decimal_to_binary(decimal)\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "rb",
    "prompt": "def sort_third(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_third\n    candidate = method(:sort_third)\n    assert_equal([2, 6, 3, 4, 8, 9, 5], candidate.call([5, 6, 3, 4, 8, 9, 2]))\n    assert_equal([2, 8, 3, 4, 6, 9, 5], candidate.call([5, 8, 3, 4, 6, 9, 2]))\n    assert_equal([2, 6, 9, 4, 8, 3, 5], candidate.call([5, 6, 9, 4, 8, 3, 2]))\n    assert_equal([2, 6, 3, 4, 8, 9, 5, 1], candidate.call([5, 6, 3, 4, 8, 9, 2, 1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction sort_third(l: number[]): number[] {\n  l = [...l];\n  l.filter((_, i) => i % 3 === 0).sort().forEach((v, i) => (l[i * 3] = v));\n  return l;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef sort_third(l)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "rb",
    "prompt": "def simplify(x, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_simplify\n    candidate = method(:simplify)\n    assert_equal(true, candidate.call(\"1/5\", \"5/1\"))\n    assert_equal(false, candidate.call(\"1/6\", \"2/1\"))\n    assert_equal(true, candidate.call(\"5/1\", \"3/1\"))\n    assert_equal(false, candidate.call(\"7/10\", \"10/2\"))\n    assert_equal(true, candidate.call(\"2/10\", \"50/10\"))\n    assert_equal(true, candidate.call(\"7/2\", \"4/2\"))\n    assert_equal(true, candidate.call(\"11/6\", \"6/1\"))\n    assert_equal(false, candidate.call(\"2/3\", \"5/2\"))\n    assert_equal(false, candidate.call(\"5/2\", \"3/5\"))\n    assert_equal(true, candidate.call(\"2/4\", \"8/4\"))\n    assert_equal(true, candidate.call(\"2/4\", \"4/2\"))\n    assert_equal(true, candidate.call(\"1/5\", \"5/1\"))\n    assert_equal(false, candidate.call(\"1/5\", \"1/5\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction simplify(x: string, n: string): boolean {\n  const [a, b] = x.split(\"/\");\n  const [c, d] = n.split(\"/\");\n  const numerator = parseInt(a) * parseInt(c);\n  const denom = parseInt(b) * parseInt(d);\n  return numerator % denom === 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef simplify(x, n)\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "rb",
    "prompt": "def solve(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction solve(s: string): string {\n  let flg = 0;\n  let idx = 0;\n  const new_str = s.split('');\n  for (const i of s) {\n    if (i.match(/[a-z]/i)) {\n      new_str[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();\n      flg = 1;\n    }\n    idx += 1;\n  }\n  if (flg === 0) {\n    return new_str.reverse().join('');\n  }\n  return new_str.join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef solve(s)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "rb",
    "prompt": "def right_angle_triangle(a, b, c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n  return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef right_angle_triangle(a, b, c)\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "rb",
    "prompt": "def double_the_difference(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction double_the_difference(lst: number[]): number {\n  return lst.filter(i => i > 0 && i%2!=0 && !/\\./.test(String(i))).reduce((a, b) => a + b**2, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef double_the_difference(lst)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "rb",
    "prompt": "def below_zero(operations)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_zero\n    candidate = method(:below_zero)\n    assert_equal(false, candidate.call([]))\n    assert_equal(false, candidate.call([1, 2, -3, 1, 2, -3]))\n    assert_equal(true, candidate.call([1, 2, -4, 5, 6]))\n    assert_equal(false, candidate.call([1, -1, 2, -2, 5, -5, 4, -4]))\n    assert_equal(true, candidate.call([1, -1, 2, -2, 5, -5, 4, -5]))\n    assert_equal(true, candidate.call([1, -2, 2, -2, 5, -5, 4, -4]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction below_zero(operations: number[]): boolean {\n  let balance = 0;\n\n  for (let op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef below_zero(operations)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "rb",
    "prompt": "def greatest_common_divisor(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction greatest_common_divisor(a: number, b: number): number {\n  while (b) {\n    [a, b] = [b, a % b];\n  }\n  return a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef greatest_common_divisor(a, b)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "rb",
    "prompt": "def f(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal([1, 2, 6, 24, 15], candidate.call(5))\n    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))\n    assert_equal([1], candidate.call(1))\n    assert_equal([1, 2, 6], candidate.call(3))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction f(n: number): number[] {\n  const ret: number[] = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let x = 1\n      for (let j = 1; j <= i; j++) x *= j\n      ret.push(x)\n    } else {\n      let x = 0\n      for (let j = 1; j <= i; j++) x += j\n      ret.push(x)\n    }\n  }\n  return ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef f(n)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "rb",
    "prompt": "def monotonic(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction monotonic(l: number[]): boolean {\n  return l.every((_, i) => i === 0 || l[i] >= l[i - 1]) || l.every((_, i) => i === 0 || l[i] <= l[i - 1]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef monotonic(l)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "rb",
    "prompt": "def by_length(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5, 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"], candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"], candidate.call([9, 4, 8]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction by_length(arr: number[]): string[] {\n  const dic: Record<number, string> = {\n    1: 'One',\n    2: 'Two',\n    3: 'Three',\n    4: 'Four',\n    5: 'Five',\n    6: 'Six',\n    7: 'Seven',\n    8: 'Eight',\n    9: 'Nine',\n  };\n  const sorted_arr = arr.sort((a, b) => b - a);\n  const new_arr: string[] = [];\n  for (const var_ of sorted_arr) {\n    if (dic[var_]) {\n      new_arr.push(dic[var_]);\n    }\n  }\n  return new_arr;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef by_length(arr)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "rb",
    "prompt": "def remove_vowels(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\", candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\", candidate.call(\"ybcd\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction remove_vowels(text: string): string {\n  return text.split('').filter(s => !['a', 'e', 'i', 'o', 'u'].includes(s.toLowerCase())).join('')\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef remove_vowels(text)\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "rb",
    "prompt": "def check_if_last_char_is_a_letter(txt)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_if_last_char_is_a_letter\n    candidate = method(:check_if_last_char_is_a_letter)\n    assert_equal(false, candidate.call(\"apple\"))\n    assert_equal(true, candidate.call(\"apple pi e\"))\n    assert_equal(false, candidate.call(\"eeeee\"))\n    assert_equal(true, candidate.call(\"A\"))\n    assert_equal(false, candidate.call(\"Pumpkin pie \"))\n    assert_equal(false, candidate.call(\"Pumpkin pie 1\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"eeeee e \"))\n    assert_equal(false, candidate.call(\"apple pie\"))\n    assert_equal(false, candidate.call(\"apple pi e \"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n  const check = txt.split(' ').pop();\n  return check.length === 1 && /[a-z]/i.test(check);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef check_if_last_char_is_a_letter(txt)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "rb",
    "prompt": "def iscube(a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_iscube\n    candidate = method(:iscube)\n    assert_equal(true, candidate.call(1))\n    assert_equal(false, candidate.call(2))\n    assert_equal(true, candidate.call(-1))\n    assert_equal(true, candidate.call(64))\n    assert_equal(false, candidate.call(180))\n    assert_equal(true, candidate.call(1000))\n    assert_equal(true, candidate.call(0))\n    assert_equal(false, candidate.call(1729))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction iscube(a: number): boolean {\n  a = Math.abs(a);\n  return Math.round(Math.pow(a, 1/3)) ** 3 == a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef iscube(a)\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "rb",
    "prompt": "def reverse_delete(s, c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_delete\n    candidate = method(:reverse_delete)\n    assert_equal([\"bcd\", false], candidate.call(\"abcde\", \"ae\"))\n    assert_equal([\"acdef\", false], candidate.call(\"abcdef\", \"b\"))\n    assert_equal([\"cdedc\", true], candidate.call(\"abcdedcba\", \"ab\"))\n    assert_equal([\"dik\", false], candidate.call(\"dwik\", \"w\"))\n    assert_equal([\"\", true], candidate.call(\"a\", \"a\"))\n    assert_equal([\"abcdedcba\", true], candidate.call(\"abcdedcba\", \"\"))\n    assert_equal([\"abcdedcba\", true], candidate.call(\"abcdedcba\", \"v\"))\n    assert_equal([\"abba\", true], candidate.call(\"vabba\", \"v\"))\n    assert_equal([\"\", true], candidate.call(\"mamma\", \"mia\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n  s = [...s].filter((char) => !c.includes(char)).join('');\n  return [s, s.split('').reverse().join('') === s];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef reverse_delete(s, c)\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "rb",
    "prompt": "def mean_absolute_deviation(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction mean_absolute_deviation(numbers: number[]): number {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef mean_absolute_deviation(numbers)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "rb",
    "prompt": "def correct_bracketing(brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n  let depth = 0;\n  for (let b of brackets) {\n    if (b == \"<\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef correct_bracketing(brackets)\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "rb",
    "prompt": "def rescale_to_unit(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction rescale_to_unit(numbers: number[]): number[] {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef rescale_to_unit(numbers)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "rb",
    "prompt": "def intersection(interval1, interval2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1, 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2, 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\", candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2, -2], [-3, -2]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n  function is_prime(num: number): boolean {\n    if (num === 1 || num === 0) {\n      return false;\n    }\n    if (num === 2) {\n      return true;\n    }\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const l = Math.max(interval1[0], interval2[0]);\n  const r = Math.min(interval1[1], interval2[1]);\n  const length = r - l;\n  if (length > 0 && is_prime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef intersection(interval1, interval2)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "rb",
    "prompt": "def hex_key(num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6, candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"112233445566778899AABBCCDDEEFF00\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction hex_key(num: string): number {\n  const primes = new Set(['2', '3', '5', '7', 'B', 'D']);\n  let total = 0;\n  for (const c of num) {\n    if (primes.has(c)) {\n      total += 1;\n    }\n  }\n  return total;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef hex_key(num)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "rb",
    "prompt": "def strange_sort_list(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction strange_sort_list(lst: number[]): number[] {\n  const res: number[] = [];\n  let switch_ = true;\n  while (lst.length) {\n    res.push(switch_ ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res[res.length - 1]), 1);\n    switch_ = !switch_;\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef strange_sort_list(lst)\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "rb",
    "prompt": "def is_bored(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_bored(S: string): number {\n    const sentences = S.split(/[.?!]\\s*/)\n    return sentences.filter(sentence => sentence.startsWith('I ')).length\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_bored(s)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "rb",
    "prompt": "def all_prefixes(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction all_prefixes(string: string): string[] {\n  const result = [];\n\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef all_prefixes(string)\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "rb",
    "prompt": "def how_many_times(string, substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction how_many_times(string: string, substring: string): number {\n  let times = 0;\n\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.slice(i, i + substring.length) === substring) {\n      times += 1;\n    }\n  }\n\n  return times;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef how_many_times(string, substring)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "rb",
    "prompt": "def solution(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction solution(lst: number[]): number {\n  return lst.filter((x, idx) => idx%2==0 && x%2==1).reduce((a, b) => a+b, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef solution(lst)\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "rb",
    "prompt": "def is_sorted(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sorted\n    candidate = method(:is_sorted)\n    assert_equal(true, candidate.call([5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 3, 2, 4, 5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))\n    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))\n    assert_equal(true, candidate.call([]))\n    assert_equal(true, candidate.call([1]))\n    assert_equal(false, candidate.call([3, 2, 1]))\n    assert_equal(false, candidate.call([1, 2, 2, 2, 3, 4]))\n    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))\n    assert_equal(true, candidate.call([1, 2, 2, 3, 3, 4]))\n    assert_equal(true, candidate.call([1, 2, 3, 4]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_sorted(lst: number[]): boolean {\n  const count_digit = lst.reduce((acc, cur) => {\n    acc[cur] = (acc[cur] || 0) + 1;\n    return acc;\n  }, {});\n  if (lst.some((i) => count_digit[i] > 2)) {\n    return false;\n  }\n  if (lst.slice(1).every((x, i) => x >= lst[i])) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_sorted(lst)\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "rb",
    "prompt": "def search(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_search\n    candidate = method(:search)\n    assert_equal(1, candidate.call([5, 5, 5, 5, 1]))\n    assert_equal(4, candidate.call([4, 1, 4, 1, 4, 4]))\n    assert_equal(-1, candidate.call([3, 3]))\n    assert_equal(8, candidate.call([8, 8, 8, 8, 8, 8, 8, 8]))\n    assert_equal(2, candidate.call([2, 3, 3, 2, 2]))\n    assert_equal(1, candidate.call([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]))\n    assert_equal(2, candidate.call([3, 2, 8, 2]))\n    assert_equal(1, candidate.call([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]))\n    assert_equal(-1, candidate.call([8, 8, 3, 6, 5, 6, 4]))\n    assert_equal(1, candidate.call([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]))\n    assert_equal(1, candidate.call([1, 9, 10, 1, 3]))\n    assert_equal(5, candidate.call([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]))\n    assert_equal(1, candidate.call([1]))\n    assert_equal(4, candidate.call([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]))\n    assert_equal(2, candidate.call([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]))\n    assert_equal(1, candidate.call([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]))\n    assert_equal(4, candidate.call([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]))\n    assert_equal(4, candidate.call([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]))\n    assert_equal(2, candidate.call([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]))\n    assert_equal(-1, candidate.call([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]))\n    assert_equal(-1, candidate.call([10]))\n    assert_equal(2, candidate.call([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]))\n    assert_equal(1, candidate.call([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]))\n    assert_equal(1, candidate.call([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]))\n    assert_equal(-1, candidate.call([3, 10, 10, 9, 2]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction search(lst: number[]): number {\n  const frq = Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst) {\n    frq[i] += 1;\n  }\n\n  let ans = -1;\n  for (let i = 1; i < frq.length; i++) {\n    if (frq[i] >= i) {\n      ans = i;\n    }\n  }\n\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef search(lst)\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "rb",
    "prompt": "def pluck(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction pluck(arr: number[]): number[] {\n  if(arr.length == 0) return []\n  let evens = arr.filter(x => x%2 == 0)\n  if(evens.length == 0) return []\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))]\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef pluck(arr)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "rb",
    "prompt": "def pairs_sum_to_zero(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef pairs_sum_to_zero(l)\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "rb",
    "prompt": "def make_palindrome(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\", candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction make_palindrome(string: string): string {\n  if (!string) {\n    return '';\n  }\n\n  let beginning_of_suffix = 0;\n\n  while (string.slice(beginning_of_suffix) !== string.slice(beginning_of_suffix).split('').reverse().join('')) {\n    beginning_of_suffix += 1;\n  }\n\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef make_palindrome(string)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "rb",
    "prompt": "def starts_one_ends(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_starts_one_ends\n    candidate = method(:starts_one_ends)\n    assert_equal(1, candidate.call(1))\n    assert_equal(18, candidate.call(2))\n    assert_equal(180, candidate.call(3))\n    assert_equal(1800, candidate.call(4))\n    assert_equal(18000, candidate.call(5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction starts_one_ends(n: number): number {\n  return n === 1 ? 1 : 18 * (10 ** (n - 2));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef starts_one_ends(n)\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "rb",
    "prompt": "def get_positive(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4, 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([], candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction get_positive(l: number[]): number[] {\n  return l.filter(e => e > 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef get_positive(l)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "rb",
    "prompt": "def concatenate(strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_concatenate\n    candidate = method(:concatenate)\n    assert_equal(\"\", candidate.call([]))\n    assert_equal(\"xyz\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"xyzwk\", candidate.call([\"x\", \"y\", \"z\", \"w\", \"k\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction concatenate(strings: string[]): string {\n  return strings.join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef concatenate(strings)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "rb",
    "prompt": "def is_nested(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_nested(string: string): boolean {\n  const opening_bracket_index: number[] = [];\n  const closing_bracket_index: number[] = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      opening_bracket_index.push(i);\n    } else {\n      closing_bracket_index.push(i);\n    }\n  }\n  closing_bracket_index.reverse();\n  let cnt = 0;\n  let i = 0;\n  const l = closing_bracket_index.length;\n  for (const idx of opening_bracket_index) {\n    if (i < l && idx < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_nested(string)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "rb",
    "prompt": "def is_palindrome(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_palindrome\n    candidate = method(:is_palindrome)\n    assert_equal(true, candidate.call(\"\"))\n    assert_equal(true, candidate.call(\"aba\"))\n    assert_equal(true, candidate.call(\"aaaaa\"))\n    assert_equal(false, candidate.call(\"zbcd\"))\n    assert_equal(true, candidate.call(\"xywyx\"))\n    assert_equal(false, candidate.call(\"xywyz\"))\n    assert_equal(false, candidate.call(\"xywzx\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_palindrome(text: string): boolean {\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] !== text[text.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_palindrome(text)\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "rb",
    "prompt": "def count_nums(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction count_nums(arr: number[]): number {\n  function digits_sum(n: number): number {\n    const neg = n < 0 ? -1 : 1;\n    n = Math.abs(n);\n    const digits = Array.from(String(n), Number);\n    digits[0] *= neg;\n    return digits.reduce((acc, cur) => acc + cur, 0);\n  }\n  return arr.filter((i) => digits_sum(i) > 0).length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef count_nums(arr)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "rb",
    "prompt": "def factorize(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction factorize(n: number): number[] {\n  const fact: number[] = [];\n  let i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i === 0) {\n      fact.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef factorize(n)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "rb",
    "prompt": "def largest_prime_factor(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction largest_prime_factor(n: number): number {\n  function is_prime(k: number): boolean {\n    if (k < 2) {\n      return false;\n    }\n    for (let i = 2; i < k; i++) {\n      if (k % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  let largest = 1;\n  for (let j = 2; j <= n; j++) {\n    if (n % j === 0 && is_prime(j)) {\n      largest = Math.max(largest, j);\n    }\n  }\n  return largest;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef largest_prime_factor(n)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "rb",
    "prompt": "def get_max_triples(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n    assert_equal(53361, candidate.call(100))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction get_max_triples(n: number): number {\n    const A: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        A.push(i*i - i + 1);\n    }\n    const ans: [number, number, number][] = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = i+1; j < n; j++) {\n            for (let k = j+1; k < n; k++) {\n                if ((A[i]+A[j]+A[k])%3 === 0) {\n                    ans.push([A[i],A[j],A[k]]);\n                }\n            }\n        }\n    }\n    return ans.length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef get_max_triples(n)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "rb",
    "prompt": "def anti_shuffle(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_anti_shuffle\n    candidate = method(:anti_shuffle)\n    assert_equal(\"Hi\", candidate.call(\"Hi\"))\n    assert_equal(\"ehllo\", candidate.call(\"hello\"))\n    assert_equal(\"bemnru\", candidate.call(\"number\"))\n    assert_equal(\"abcd\", candidate.call(\"abcd\"))\n    assert_equal(\"Hello !!!Wdlor\", candidate.call(\"Hello World!!!\"))\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\".Hi My aemn is Meirst .Rboot How aer ?ouy\", candidate.call(\"Hi. My name is Mister Robot. How are you?\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction anti_shuffle(s: string): string {\n  return s.split(' ').map(i => [...i].sort().join('')).join(' ')\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef anti_shuffle(s)\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "rb",
    "prompt": "def solve(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"1\", candidate.call(1000))\n    assert_equal(\"110\", candidate.call(150))\n    assert_equal(\"1100\", candidate.call(147))\n    assert_equal(\"1001\", candidate.call(333))\n    assert_equal(\"10010\", candidate.call(963))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction solve(N: number): string {\n  return (N.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0)).toString(2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef solve(n)\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "rb",
    "prompt": "def minPath(grid, k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minPath\n    candidate = method(:minPath)\n    assert_equal([1, 2, 1], candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\n    assert_equal([1], candidate.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n    assert_equal([1, 2, 1, 2], candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4))\n    assert_equal([1, 10, 1, 10, 1, 10, 1], candidate.call([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7))\n    assert_equal([1, 7, 1, 7, 1], candidate.call([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1], candidate.call([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6], candidate.call([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8))\n    assert_equal([1, 5, 1, 5, 1, 5, 1, 5], candidate.call([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8))\n    assert_equal([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], candidate.call([[1, 2], [3, 4]], 10))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[1, 3], [3, 2]], 10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction minPath(grid: number[][], k: number): number[] {\n  const n = grid.length;\n  let val = n * n + 1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        const temp = [];\n        if (i !== 0) {\n          temp.push(grid[i - 1][j]);\n        }\n        if (j !== 0) {\n          temp.push(grid[i][j - 1]);\n        }\n        if (i !== n - 1) {\n          temp.push(grid[i + 1][j]);\n        }\n        if (j !== n - 1) {\n          temp.push(grid[i][j + 1]);\n        }\n        val = Math.min(...temp);\n      }\n    }\n  }\n  const ans = [];\n  for (let i = 0; i < k; i++) {\n    if (i % 2 === 0) {\n      ans.push(1);\n    } else {\n      ans.push(val);\n    }\n  }\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef minPath(grid, k)\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "rb",
    "prompt": "def encrypt(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\", candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"e\", candidate.call(\"a\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction encrypt(s: string): string {\n  const d = 'abcdefghijklmnopqrstuvwxyz';\n  let out = '';\n  for (let c of s) {\n    if (d.includes(c)) {\n      out += d[(d.indexOf(c)+2*2) % 26];\n    } else {\n      out += c;\n    }\n  }\n  return out;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef encrypt(s)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "rb",
    "prompt": "def make_a_pile(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_a_pile\n    candidate = method(:make_a_pile)\n    assert_equal([3, 5, 7], candidate.call(3))\n    assert_equal([4, 6, 8, 10], candidate.call(4))\n    assert_equal([5, 7, 9, 11, 13], candidate.call(5))\n    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))\n    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction make_a_pile(n: number): number[] {\n  return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef make_a_pile(n)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "rb",
    "prompt": "def is_prime(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_prime\n    candidate = method(:is_prime)\n    assert_equal(false, candidate.call(6))\n    assert_equal(true, candidate.call(101))\n    assert_equal(true, candidate.call(11))\n    assert_equal(true, candidate.call(13441))\n    assert_equal(true, candidate.call(61))\n    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(1))\n    assert_equal(true, candidate.call(5))\n    assert_equal(true, candidate.call(11))\n    assert_equal(true, candidate.call(17))\n    assert_equal(false, candidate.call(85))\n    assert_equal(false, candidate.call(77))\n    assert_equal(false, candidate.call(255379))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Ruby.\n\n### TypeScript version\n\nfunction is_prime(n: number): boolean {\n  if (n < 2) {\n    return false;\n  }\n  for (let k = 2; k < n; k++) {\n    if (n % k === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Ruby version\n\ndef is_prime(n)\n"
  }
]