[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n  (let loop ((depth 0)\n             (bs (string->list brackets)))\n    (cond\n      [(null? bs) (= depth 0)]\n      [(char=? (car bs) #\\() (loop (add1 depth) (cdr bs))]\n      [(char=? (car bs) #\\)) (and (> depth 0) (loop (sub1 depth) (cdr bs)))]\n      [else (loop depth (cdr bs))])))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long h) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((5L), (3L)) == (7.5f));\n    Debug.Assert(TriangleArea((2L), (2L)) == (2.0f));\n    Debug.Assert(TriangleArea((10L), (8L)) == (40.0f));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (triangle_area a h)\n  (/ (* a h) 2.0))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long h) {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SpecialFactorial(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (special_factorial n)\n  (define (fact i)\n    (if (zero? i) 1 (* i (fact (- i 1)))))\n  (define (special_fact i)\n    (if (zero? i) 1 (* (fact i) (special_fact (- i 1)))))\n  (special_fact n))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SpecialFactorial(long n) {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L, (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L, 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L, (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L, 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L, (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L, (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_smallest_integers lst)\n  (define smallest (filter (lambda (x) (< x 0)) lst))\n  (define largest (filter (lambda (x) (> x 0)) lst))\n  (list (if (null? smallest) #f (apply max smallest))\n        (if (null? largest) #f (apply min largest))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool MoveOneBall(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>())) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (move_one_ball arr)\n  (if (null? arr)\n      #t\n      (let ((sorted-array (sort arr <))\n            (my-arr '()))\n        (let ((min-value (apply min arr))\n              (min-index (index-of arr (apply min arr))))\n          (set! my-arr (append (drop arr min-index) (take arr min-index))))\n        (for/and ((i (in-range (length arr))))\n          (= (list-ref my-arr i) (list-ref sorted-array i))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool MoveOneBall(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digits(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (digits n)\n  (define (odd? x) (= (modulo x 2) 1))\n  (define (product lst) (apply * lst))\n  (define digits (map (lambda (x) (string->number (string x))) (string->list (number->string n))))\n  (define odd-digits (filter odd? digits))\n  (if (null? odd-digits)\n      0\n      (product odd-digits)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digits(long n) {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib4(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fib4 n)\n  (define results (list 0 0 2 0))\n  (if (< n 4)\n      (list-ref results n)\n      (begin\n        (for ([i (in-range 4 (add1 n))])\n          (set! results (append results (list (+ (last results) (list-ref (reverse results) 1) (list-ref (reverse results) 2) (list-ref (reverse results) 3))))))\n        (car (reverse results)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib4(long n) {\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortEven(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).SequenceEqual((new List<long>(new long[]{(long)-10L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)5L, (long)0L, (long)9L, (long)1L, (long)123L}))));\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)5L, (long)8L, (long)-12L, (long)4L, (long)23L, (long)2L, (long)3L, (long)11L, (long)12L, (long)-10L}))).SequenceEqual((new List<long>(new long[]{(long)-12L, (long)8L, (long)3L, (long)4L, (long)5L, (long)2L, (long)12L, (long)11L, (long)23L, (long)-10L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (sort_even l)\n  (define evens (for/list ([i (in-range 0 (length l) 2)]) (list-ref l i)))\n  (define odds (for/list ([i (in-range 1 (length l) 2)]) (list-ref l i)))\n  (set! evens (sort evens <))\n  (define ans '())\n  (for ([e evens] [o odds])\n    (set! ans (append ans (list e o))))\n  (when (> (length evens) (length odds))\n    (set! ans (append ans (list (last evens)))))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortEven(List<long> l) {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsHappy(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_happy s)\n  (if (< (string-length s) 3)\n      #f\n      (for/and ([i (in-range (- (string-length s) 2))])\n        (not (or (char=? (string-ref s i) (string-ref s (+ i 1)))\n                 (char=? (string-ref s (+ i 1)) (string-ref s (+ i 2)))\n                 (char=? (string-ref s i) (string-ref s (+ i 2))))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsHappy(string s) {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string CircularShift(long x, long shift) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (circular_shift x shift)\n  (define s (number->string x))\n  (if (> shift (string-length s))\n      (list->string (reverse (string->list s)))\n      (string-append (substring s (- (string-length s) shift)) (substring s 0 (- (string-length s) shift)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string CircularShift(long x, long shift) {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxFill(List<List<long>> grid, long capacity) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (max_fill grid capacity)\n  (apply + (map (lambda (arr) (ceiling (/ (apply + arr) capacity))) grid)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxFill(List<List<long>> grid, long capacity) {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (has_close_elements numbers threshold)\n  (define (helper i j)\n    (cond [(= i (length numbers)) #f]\n          [(= j (length numbers)) (helper (+ i 1) (+ i 2))]\n          [(< (abs (- (list-ref numbers i) (list-ref numbers j))) threshold) #t]\n          [else (helper i (+ j 1))]))\n  (helper 0 1))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> NumericalLetterGrade(List<float> grades) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f}))).SequenceEqual((new List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.2f}))).SequenceEqual((new List<string>(new string[]{(string)\"D+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.5f}))).SequenceEqual((new List<string>(new string[]{(string)\"D-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f}))).SequenceEqual((new List<string>(new string[]{(string)\"E\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))).SequenceEqual((new List<string>(new string[]{(string)\"D\", (string)\"D-\", (string)\"C-\", (string)\"B\", (string)\"B+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f, (float)0.7f}))).SequenceEqual((new List<string>(new string[]{(string)\"E\", (string)\"D-\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (numerical_letter_grade grades)\n  (define (grade gpa)\n    (cond [(= gpa 4.0) \"A+\"]\n          [(> gpa 3.7) \"A\"]\n          [(> gpa 3.3) \"A-\"]\n          [(> gpa 3.0) \"B+\"]\n          [(> gpa 2.7) \"B\"]\n          [(> gpa 2.3) \"B-\"]\n          [(> gpa 2.0) \"C+\"]\n          [(> gpa 1.7) \"C\"]\n          [(> gpa 1.3) \"C-\"]\n          [(> gpa 1.0) \"D+\"]\n          [(> gpa 0.7) \"D\"]\n          [(> gpa 0.0) \"D-\"]\n          [else \"E\"]))\n  (map grade grades))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> NumericalLetterGrade(List<float> grades) {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long XOrY(long n, long x, long y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(XOrY((7L), (34L), (12L)) == (34L));\n    Debug.Assert(XOrY((15L), (8L), (5L)) == (5L));\n    Debug.Assert(XOrY((3L), (33L), (5212L)) == (33L));\n    Debug.Assert(XOrY((1259L), (3L), (52L)) == (3L));\n    Debug.Assert(XOrY((7919L), (-1L), (12L)) == (-1L));\n    Debug.Assert(XOrY((3609L), (1245L), (583L)) == (583L));\n    Debug.Assert(XOrY((91L), (56L), (129L)) == (129L));\n    Debug.Assert(XOrY((6L), (34L), (1234L)) == (1234L));\n    Debug.Assert(XOrY((1L), (2L), (0L)) == (0L));\n    Debug.Assert(XOrY((2L), (2L), (0L)) == (2L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (x_or_y n x y)\n  (cond\n    [(= n 1) y]\n    [(for/or ([i (in-range 2 n)]) (= (modulo n i) 0)) y]\n    [else x]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long XOrY(long n, long x, long y) {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Specialfilter(List<long> nums) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (specialFilter nums)\n  (define count 0)\n  (for ([num nums])\n    (when (> num 10)\n      (let ([number_as_string (number->string num)])\n        (when (and (odd? (string->number (substring number_as_string 0 1)))\n                   (odd? (string->number (substring number_as_string (- (string-length number_as_string) 1)))))\n          (set! count (add1 count))))))\n  count)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Specialfilter(List<long> nums) {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseMusic(string music_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ParseMusic((\"\")).SequenceEqual((new List<long>())));\n    Debug.Assert(ParseMusic((\"o o o o\")).SequenceEqual((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\".| .| .| .|\")).SequenceEqual((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}))));\n    Debug.Assert(ParseMusic((\"o| o| .| .| o o o o\")).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L, (long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"o| .| o| .| o o| o o|\")).SequenceEqual((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)1L, (long)4L, (long)2L, (long)4L, (long)2L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (parse_music music_string)\n  (define note-map (hash \"o\" 4 \"o|\" 2 \".|\" 1))\n  (define (note->int note)\n    (hash-ref note-map note))\n  (filter-map note->int (string-split music_string \" \")))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseMusic(string music_string) {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountDistinctCharacters(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (count_distinct_characters string)\n  (length (remove-duplicates (string->list (string-downcase string)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountDistinctCharacters(string str) {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digitsum(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Digitsum((\"\")) == (0L));\n    Debug.Assert(Digitsum((\"abAB\")) == (131L));\n    Debug.Assert(Digitsum((\"abcCd\")) == (67L));\n    Debug.Assert(Digitsum((\"helloE\")) == (69L));\n    Debug.Assert(Digitsum((\"woArBld\")) == (131L));\n    Debug.Assert(Digitsum((\"aAaaaXa\")) == (153L));\n    Debug.Assert(Digitsum((\" How are yOu?\")) == (151L));\n    Debug.Assert(Digitsum((\"You arE Very Smart\")) == (327L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (digitSum s)\n  (if (string=? s \"\") 0\n      (for/sum ((char (in-string s)))\n        (if (char-upper-case? char) (char->integer char) 0))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digitsum(string s) {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (6L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)4L, (long)9L}))) == (14L));\n    Debug.Assert(SumSquares((new List<long>())) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L}))) == (9L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L}))) == (-3L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)0L}))) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-5L, (long)2L, (long)-1L, (long)-5L}))) == (-126L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-56L, (long)-99L, (long)1L, (long)0L, (long)-2L}))) == (3030L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)-1L}))) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-16L, (long)-9L, (long)-2L, (long)36L, (long)36L, (long)26L, (long)-20L, (long)25L, (long)-40L, (long)20L, (long)-4L, (long)12L, (long)-26L, (long)35L, (long)37L}))) == (-14196L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-3L, (long)17L, (long)-1L, (long)-15L, (long)13L, (long)-1L, (long)14L, (long)-14L, (long)-12L, (long)-5L, (long)14L, (long)-14L, (long)6L, (long)13L, (long)11L, (long)16L, (long)16L, (long)4L, (long)10L}))) == (-1448L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n  (define (f i)\n    (cond [(= (modulo i 3) 0) (expt (list-ref lst i) 2)]\n          [(and (= (modulo i 4) 0) (not (= (modulo i 3) 0))) (expt (list-ref lst i) 3)]\n          [else (list-ref lst i)]))\n  (apply + (map f (range (length lst)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> CountUpTo(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CountUpTo((5L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(CountUpTo((6L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((7L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((10L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(CountUpTo((0L)).SequenceEqual((new List<long>())));\n    Debug.Assert(CountUpTo((22L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L}))));\n    Debug.Assert(CountUpTo((1L)).SequenceEqual((new List<long>())));\n    Debug.Assert(CountUpTo((18L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(CountUpTo((47L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L}))));\n    Debug.Assert(CountUpTo((101L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L, (long)47L, (long)53L, (long)59L, (long)61L, (long)67L, (long)71L, (long)73L, (long)79L, (long)83L, (long)89L, (long)97L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_up_to n)\n  (define (is_prime x)\n    (and (> x 1) (not (ormap (lambda (i) (= (modulo x i) 0)) (range 2 x)))) )\n  (filter is_prime (range 2 n)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> CountUpTo(long n) {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<float> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n  (define (square x) (* x x))\n  (apply + (map square (map (lambda (x) (ceiling x)) lst))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<float> lst) {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Unique(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Unique((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (unique l)\n  (sort (remove-duplicates l) <))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Unique(List<long> l) {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Fib((10L)) == (55L));\n    Debug.Assert(Fib((1L)) == (1L));\n    Debug.Assert(Fib((8L)) == (21L));\n    Debug.Assert(Fib((11L)) == (89L));\n    Debug.Assert(Fib((12L)) == (144L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fib n)\n  (if (or (= n 0) (= n 1))\n      n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib(long n) {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FizzBuzz(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (fizz_buzz n)\n  (define ns (filter (lambda (x) (or (= (modulo x 11) 0) (= (modulo x 13) 0))) (range n)))\n  (define s (string-join (map number->string ns) \"\"))\n  (define ans (count (lambda (c) (char=? c #\\7)) (string->list s)))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FizzBuzz(long n) {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (Strongest_Extension class_name extensions)\n  (define strong (first extensions))\n  (define my-val (- (length (regexp-match* #rx\"[A-Z]\" strong)) (length (regexp-match* #rx\"[a-z]\" strong))))\n  (for-each (lambda (s)\n              (let ([val (- (length (regexp-match* #rx\"[A-Z]\" s)) (length (regexp-match* #rx\"[a-z]\" s)))])\n                (when (> val my-val)\n                  (set! strong s)\n                  (set! my-val val))))\n            (cdr extensions))\n  (string-append class_name \".\" strong))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(3.9f, 4.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))).Equals((Tuple.Create(5.0f, 5.9f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(2.0f, 2.2f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))).Equals((Tuple.Create(2.0f, 2.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))).Equals((Tuple.Create(2.2f, 3.1f))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (find_closest_elements numbers)\n  (define closest-pair #f)\n  (define distance #f)\n\n  (for ([i (in-range (length numbers))])\n    (for ([j (in-range (length numbers))])\n      (unless (= i j)\n        (let ([new-distance (abs (- (list-ref numbers i) (list-ref numbers j)))])\n          (when (or (not distance) (< new-distance distance))\n            (set! distance new-distance)\n            (set! closest-pair (sort (list (list-ref numbers i) (list-ref numbers j)) <)))))))\n\n  closest-pair)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool ValidDate(string date) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (valid_date date)\n  (define (is-valid-date month day year)\n    (cond [(or (< month 1) (> month 12)) #f]\n          [(and (member month '(1 3 5 7 8 10 12)) (or (< day 1) (> day 31))) #f]\n          [(and (member month '(4 6 9 11)) (or (< day 1) (> day 30))) #f]\n          [(and (= month 2) (or (< day 1) (> day 29))) #f]\n          [else #t]))\n  (with-handlers ([exn:fail? (lambda (e) #f)])\n    (let ([date-list (map string->number (string-split date \"-\"))])\n      (apply is-valid-date date-list))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool ValidDate(string date) {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(long x, long y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Add((0L), (1L)) == (1L));\n    Debug.Assert(Add((1L), (0L)) == (1L));\n    Debug.Assert(Add((2L), (3L)) == (5L));\n    Debug.Assert(Add((5L), (7L)) == (12L));\n    Debug.Assert(Add((7L), (5L)) == (12L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (add x y)\n  (+ x y))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(long x, long y) {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool TriplesSumToZero(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)-1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)5L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)-100L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)100L, (long)3L, (long)5L, (long)-100L}))) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (triples_sum_to_zero l)\n  (for*/first ([i (in-range (length l))]\n               [j (in-range (add1 i) (length l))]\n               [k (in-range (add1 j) (length l))]\n               #:when (= 0 (+ (list-ref l i) (list-ref l j) (list-ref l k))))\n    #t))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool TriplesSumToZero(List<long> l) {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestDivisor(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(LargestDivisor((3L)) == (1L));\n    Debug.Assert(LargestDivisor((7L)) == (1L));\n    Debug.Assert(LargestDivisor((10L)) == (5L));\n    Debug.Assert(LargestDivisor((100L)) == (50L));\n    Debug.Assert(LargestDivisor((49L)) == (7L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (largest_divisor n)\n  (for/first ([i (reverse (range 1 n))] #:when (= (modulo n i) 0))\n    i))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestDivisor(long n) {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string SortNumbers(string numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_numbers numbers)\n  (define value-map (hash \"zero\" 0 \"one\" 1 \"two\" 2 \"three\" 3 \"four\" 4 \"five\" 5 \"six\" 6 \"seven\" 7 \"eight\" 8 \"nine\" 9))\n  (string-join (sort (filter (lambda (x) (not (string=? x \"\"))) (string-split numbers \" \")) (lambda (a b) (< (hash-ref value-map a) (hash-ref value-map b)))) \" \"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string SortNumbers(string numbers) {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SmallestChange(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)4L, (long)7L, (long)9L, (long)6L}))) == (4L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)4L, (long)4L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)1L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)3L, (long)1L, (long)1L, (long)3L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (smallest_change arr)\n  (define ans 0)\n  (for ([i (in-range (quotient (length arr) 2))])\n    (when (not (= (list-ref arr i) (list-ref arr (- (length arr) i 1))))\n      (set! ans (+ ans 1))))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SmallestChange(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowThreshold(List<long> l, long t) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L})), (100L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (5L)) == (false));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (21L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (22L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)8L, (long)4L, (long)10L})), (11L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)8L, (long)4L, (long)10L})), (10L)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (below_threshold l t)\n  (for/and ([e l])\n    (< e t)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowThreshold(List<long> l, long t) {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> ProdSigns(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (prod_signs arr)\n  (if (null? arr) #f\n      (let ((prod (if (member 0 arr) 0 (expt -1 (length (filter (lambda (x) (< x 0)) arr))))))\n        (* prod (apply + (map abs arr))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> ProdSigns(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Modp(long n, long p) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L), (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L), (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L), (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L), (5L)) == (3L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (modp n p)\n  (define ret 1)\n  (for ([i (in-range n)])\n    (set! ret (modulo (* 2 ret) p)))\n  ret)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Modp(long n, long p) {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountUpper(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CountUpper((\"aBCdEf\")) == (1L));\n    Debug.Assert(CountUpper((\"abcdefg\")) == (0L));\n    Debug.Assert(CountUpper((\"dBBE\")) == (0L));\n    Debug.Assert(CountUpper((\"B\")) == (0L));\n    Debug.Assert(CountUpper((\"U\")) == (1L));\n    Debug.Assert(CountUpper((\"\")) == (0L));\n    Debug.Assert(CountUpper((\"EEEE\")) == (2L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (count_upper s)\n  (define count 0)\n  (for ([i (in-range 0 (string-length s) 2)])\n    (when (member (string-ref s i) (string->list \"AEIOU\"))\n      (set! count (+ count 1))))\n  count)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountUpper(string s) {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Multiply(long a, long b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (multiply a b)\n  (abs (* (modulo a 10) (modulo b 10))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Multiply(long a, long b) {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> UniqueDigits(List<long> x) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).SequenceEqual((new List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L, (long)2033L, (long)111L, (long)151L}))).SequenceEqual((new List<long>(new long[]{(long)111L, (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L, (long)103L, (long)31L}))).SequenceEqual((new List<long>(new long[]{(long)31L, (long)135L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (unique_digits x)\n  (define (all-odd-digits? n)\n    (andmap odd? (map (lambda (c) (string->number (string c))) (string->list (number->string n)))))\n  (sort (filter all-odd-digits? x) <))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> UniqueDigits(List<long> x) {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool WillItFly(List<long> q, long w) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (will_it_fly q w)\n  (cond [(> (apply + q) w) #f]\n        [(not (equal? q (reverse q))) #f]\n        [else #t]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool WillItFly(List<long> q, long w) {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsMultiplyPrime(long a) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsMultiplyPrime((5L)) == (false));\n    Debug.Assert(IsMultiplyPrime((30L)) == (true));\n    Debug.Assert(IsMultiplyPrime((8L)) == (true));\n    Debug.Assert(IsMultiplyPrime((10L)) == (false));\n    Debug.Assert(IsMultiplyPrime((125L)) == (true));\n    Debug.Assert(IsMultiplyPrime((105L)) == (true));\n    Debug.Assert(IsMultiplyPrime((126L)) == (false));\n    Debug.Assert(IsMultiplyPrime((729L)) == (false));\n    Debug.Assert(IsMultiplyPrime((891L)) == (false));\n    Debug.Assert(IsMultiplyPrime((1001L)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_multiply_prime a)\n  (define (is-prime n)\n    (for/and ([j (in-range 2 n)])\n      (not (= (modulo n j) 0))))\n  (for/or ([i (in-range 2 101)])\n    (for/or ([j (in-range 2 101)])\n      (for/or ([k (in-range 2 101)])\n        (and (is-prime i) (is-prime j) (is-prime k) (= (* i j k) a))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsMultiplyPrime(long a) {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Maximum(List<long> arr, long k) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).SequenceEqual((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).SequenceEqual((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).SequenceEqual((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).SequenceEqual((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).SequenceEqual((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (maximum arr k)\n  (if (= k 0)\n      '()\n      (list-tail (sort arr <) (- (length arr) k))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Maximum(List<long> arr, long k) {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SeparateParenGroups(string paren_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).SequenceEqual((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).SequenceEqual((new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).SequenceEqual((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).SequenceEqual((new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\() (set! current_depth (add1 current_depth))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\)) (set! current_depth (sub1 current_depth))\n           (set! current_string (append current_string (list c)))\n           (cond [(= current_depth 0) (set! result (append result (list (list->string current_string))))\n                  (set! current_string '())])]))\n  result)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SeparateParenGroups(string paren_string) {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> FilterIntegers(List<object> values) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FilterIntegers((new List<object>())).SequenceEqual((new List<long>())));\n    Debug.Assert(FilterIntegers((new List<object>(new object[]{4L, new List<object>(), 23.2f, 9L, \"adasd\"}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)9L}))));\n    Debug.Assert(FilterIntegers((new List<object>(new object[]{3L, \"c\", 3L, 3L, \"a\", \"b\"}))).SequenceEqual((new List<long>(new long[]{(long)3L, (long)3L, (long)3L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (filter_integers values)\n  (filter integer? values))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> FilterIntegers(List<object> values) {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Skjkasdkd(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L}))) == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L}))) == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L}))) == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L}))) == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L, (long)8192L}))) == (10L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (skjkasdkd lst)\n  (define (isPrime n)\n    (define (iter i)\n      (cond [(> i (sqrt n)) #t]\n            [(= (modulo n i) 0) #f]\n            [else (iter (+ i 1))]))\n    (if (< n 2) #f (iter 2)))\n\n  (define maxx 0)\n  (for ([i lst])\n    (when (and (> i maxx) (isPrime i))\n      (set! maxx i)))\n  (define result (apply + (map (lambda (d) (string->number (string d))) (string->list (number->string maxx)))))\n  result)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Skjkasdkd(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(TotalMatch((new List<string>()), (new List<string>())).SequenceEqual((new List<string>())));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\", (string)\"admin\", (string)\"project\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"5\"}))).SequenceEqual((new List<string>(new string[]{(string)\"4\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hii\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>()), (new List<string>(new string[]{(string)\"this\"}))).SequenceEqual((new List<string>())));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"this\"})), (new List<string>())).SequenceEqual((new List<string>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (total_match lst1 lst2)\n  (define l1 (apply + (map string-length lst1)))\n  (define l2 (apply + (map string-length lst2)))\n  (if (<= l1 l2) lst1 lst2))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CarRaceCollision(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CarRaceCollision((2L)) == (4L));\n    Debug.Assert(CarRaceCollision((3L)) == (9L));\n    Debug.Assert(CarRaceCollision((4L)) == (16L));\n    Debug.Assert(CarRaceCollision((8L)) == (64L));\n    Debug.Assert(CarRaceCollision((10L)) == (100L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (car_race_collision n)\n  (* n n))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CarRaceCollision(long n) {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSimplePower(long x, long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (is_simple_power x n)\n  (if (= n 1)\n      (= x 1)\n      (let loop ((power 1))\n        (if (< power x)\n            (loop (* power n))\n            (= power x)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSimplePower(long x, long n) {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Encode(string message) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (encode message)\n  (define vowels \"aeiouAEIOU\")\n  (define vowels-replace (make-hash '((#\\a . #\\c) (#\\e . #\\g) (#\\i . #\\k) (#\\o . #\\q) (#\\u . #\\w) (#\\A . #\\C) (#\\E . #\\G) (#\\I . #\\K) (#\\O . #\\Q) (#\\U . #\\W))))\n\n  (define (swap-case c)\n    (if (char-upper-case? c)\n        (char-downcase c)\n        (char-upcase c)))\n\n  (define (replace-vowels c)\n    (hash-ref vowels-replace c c))\n\n  (list->string (map replace-vowels (map swap-case (string->list message)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Encode(string message) {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> IncrList(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IncrList((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)3L, (long)2L}))));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)5L, (long)2L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).SequenceEqual((new List<long>(new long[]{(long)6L, (long)3L, (long)6L, (long)3L, (long)4L, (long)4L, (long)10L, (long)1L, (long)124L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (incr_list l)\n  (map add1 l))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> IncrList(List<long> l) {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long VowelsCount(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(VowelsCount((\"abcde\")) == (2L));\n    Debug.Assert(VowelsCount((\"Alone\")) == (3L));\n    Debug.Assert(VowelsCount((\"key\")) == (2L));\n    Debug.Assert(VowelsCount((\"bye\")) == (1L));\n    Debug.Assert(VowelsCount((\"keY\")) == (2L));\n    Debug.Assert(VowelsCount((\"bYe\")) == (1L));\n    Debug.Assert(VowelsCount((\"ACEDY\")) == (3L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (vowels_count s)\n  (define vowels \"aeiouAEIOU\")\n  (define n_vowels (count (lambda (c) (member c (string->list vowels))) (string->list s)))\n  (if (or (char=? (last (string->list s)) #\\y) (char=? (last (string->list s)) #\\Y))\n      (+ n_vowels 1)\n      n_vowels))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long VowelsCount(string s) {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SortedListSum(List<string> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).SequenceEqual((new List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).SequenceEqual((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).SequenceEqual((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).SequenceEqual((new List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).SequenceEqual((new List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).SequenceEqual((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).SequenceEqual((new List<string>(new string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (sorted_list_sum lst)\n  (define (even-length? str) (= (modulo (string-length str) 2) 0))\n  (define new-lst (filter even-length? (sort lst string<?)))\n  (sort new-lst (lambda (a b) (< (string-length a) (string-length b)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SortedListSum(List<string> lst) {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> WordsString(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(WordsString((\"Hi, my name is John\")).SequenceEqual((new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\", (string)\"is\", (string)\"John\"}))));\n    Debug.Assert(WordsString((\"One, two, three, four, five, six\")).SequenceEqual((new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))));\n    Debug.Assert(WordsString((\"Hi, my name\")).SequenceEqual((new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\"}))));\n    Debug.Assert(WordsString((\"One,, two, three, four, five, six,\")).SequenceEqual((new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))));\n    Debug.Assert(WordsString((\"\")).SequenceEqual((new List<string>())));\n    Debug.Assert(WordsString((\"ahmed     , gamal\")).SequenceEqual((new List<string>(new string[]{(string)\"ahmed\", (string)\"gamal\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (words_string s)\n  (if (not s)\n      '()\n      (string-split (string-replace s \",\" \" \"))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> WordsString(string s) {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(EvenOddPalindrome((123L)).Equals((Tuple.Create(8L, 13L))));\n    Debug.Assert(EvenOddPalindrome((12L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((3L)).Equals((Tuple.Create(1L, 2L))));\n    Debug.Assert(EvenOddPalindrome((63L)).Equals((Tuple.Create(6L, 8L))));\n    Debug.Assert(EvenOddPalindrome((25L)).Equals((Tuple.Create(5L, 6L))));\n    Debug.Assert(EvenOddPalindrome((19L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((9L)).Equals((Tuple.Create(4L, 5L))));\n    Debug.Assert(EvenOddPalindrome((1L)).Equals((Tuple.Create(0L, 1L))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>())) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (check_dict_case dict)\n  (define (is-upper s) (string=? s (string-upcase s)))\n  (define (is-lower s) (string=? s (string-downcase s)))\n\n  (cond [(zero? (hash-count dict)) #f]\n        [else\n         (let loop ([state \"start\"] [keys (hash-keys dict)])\n           (cond [(null? keys) (or (string=? state \"upper\") (string=? state \"lower\"))]\n                 [(not (string? (car keys))) #f]\n                 [(string=? state \"start\")\n                  (if (is-upper (car keys))\n                      (loop \"upper\" (cdr keys))\n                      (if (is-lower (car keys))\n                          (loop \"lower\" (cdr keys))\n                          #f))]\n\n                 [(or (and (string=? state \"upper\") (not (is-upper (car keys))))\n                      (and (string=? state \"lower\") (not (is-lower (car keys)))))\n                  #f]\n\n                 [else (loop state (cdr keys))]))]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Tri(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (tri n)\n  (if (= n 0)\n      '(1)\n      (let ((my-tri '(1 3)))\n        (for ([i (in-range 2 (add1 n))])\n          (if (even? i)\n              (set! my-tri (append my-tri (list (/ (+ i 2) 2))))\n              (set! my-tri (append my-tri (list (+ (list-ref my-tri (- i 1)) (list-ref my-tri (- i 2)) (/ (+ i 3) 2)))))))\n        my-tri)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Tri(long n) {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float Median(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (median l)\n  (set! l (sort l <))\n  (if (odd? (length l))\n      (list-ref l (quotient (length l) 2))\n      (/ (+ (list-ref l (quotient (length l) 2))\n            (list-ref l (- (quotient (length l) 2) 1)))\n         2.0)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float Median(List<long> l) {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string ChangeBase(long x, long numBase) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (change_base x base)\n  (let loop ((x x) (ret \"\"))\n    (if (> x 0)\n        (loop (quotient x base) (string-append (number->string (modulo x base)) ret))\n        ret)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string ChangeBase(long x, long numBase) {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Longest(List<string> strings) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Longest((new List<string>())).Equals(null));\n    Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"x\")));\n    Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"yyy\", (string)\"zzzz\", (string)\"www\", (string)\"kkkk\", (string)\"abc\"}))).Equals((\"zzzz\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (longest strings)\n  (if (null? strings)\n      #f\n      (let ((maxlen (apply max (map string-length strings))))\n        (findf (lambda (s) (= (string-length s) maxlen)) strings))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Longest(List<string> strings) {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Common(List<long> l1, List<long> l2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L, (long)9L, (long)653L, (long)121L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (common l1 l2)\n  (define ret (make-hash))\n  (for ([e1 l1])\n    (for ([e2 l2])\n      (when (= e1 e2)\n        (hash-set! ret e1 #t))))\n  (sort (hash-keys ret) <))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Common(List<long> l1, List<long> l2) {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Minsubarraysum(List<long> nums) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L}))) == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L, (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L}))) == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L, (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (minSubArraySum nums)\n  (define max-sum 0)\n  (define s 0)\n  (for ([num nums])\n    (set! s (+ s (- num)))\n    (when (< s 0)\n      (set! s 0))\n    (set! max-sum (max s max-sum)))\n  (when (= max-sum 0)\n    (set! max-sum (apply max (map - nums))))\n  (define min-sum (- max-sum))\n  min-sum)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Minsubarraysum(List<long> nums) {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortArray(List<long> array) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).SequenceEqual((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L}))).SequenceEqual((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L, (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L, (long)11L}))).SequenceEqual((new List<long>(new long[]{(long)23L, (long)21L, (long)14L, (long)11L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (sort_array array)\n  (if (null? array)\n      '()\n      (sort array (if (even? (+ (first array) (last array))) > <))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortArray(List<long> array) {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetOddCollatz(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetOddCollatz((14L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(GetOddCollatz((5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((12L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((1L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_odd_collatz n)\n  (define (collatz-seq n)\n    (cond [(= n 1) (list 1)]\n          [(even? n) (cons n (collatz-seq (/ n 2)))]\n          [else (cons n (collatz-seq (+ (* n 3) 1)))]))\n  (let ([seq (collatz-seq n)])\n    (sort (filter odd? seq) <)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetOddCollatz(long n) {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Derivative(List<long> xs) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)6L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)2L, (long)1L, (long)0L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)0L, (long)16L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)1L}))).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (derivative xs)\n  (cdr (map (lambda (x i) (* i x)) xs (range 0 (length xs)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Derivative(List<long> xs) {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fibfib(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fibfib(long n) {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxElement(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (max_element l)\n  (apply max l))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxElement(List<long> l) {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long PrimeFib(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(PrimeFib((1L)) == (2L));\n    Debug.Assert(PrimeFib((2L)) == (3L));\n    Debug.Assert(PrimeFib((3L)) == (5L));\n    Debug.Assert(PrimeFib((4L)) == (13L));\n    Debug.Assert(PrimeFib((5L)) == (89L));\n    Debug.Assert(PrimeFib((6L)) == (233L));\n    Debug.Assert(PrimeFib((7L)) == (1597L));\n    Debug.Assert(PrimeFib((8L)) == (28657L));\n    Debug.Assert(PrimeFib((9L)) == (514229L));\n    Debug.Assert(PrimeFib((10L)) == (433494437L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prime_fib n)\n  (define (is-prime? p)\n    (cond [(< p 2) #f]\n          [else (for/and ([k (in-range 2 (min (add1 (floor (sqrt p))) (sub1 p)))])\n                  (not (= 0 (modulo p k))))]))\n  (define f (list 0 1))\n  (let loop ([n n])\n    (cond [(= n 0) (car (reverse f))]\n          [else (begin\n                  (set! f (append f (list (+ (car (reverse f)) (cadr (reverse f))))))\n                  (if (is-prime? (car (reverse f)))\n                      (loop (sub1 n))\n                      (loop n)))])))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long PrimeFib(long n) {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_product numbers)\n  (define sum-value (apply + numbers))\n  (define prod-value (apply * numbers))\n  (list sum-value prod-value))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SelectWords(string s, long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).SequenceEqual((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).SequenceEqual((new List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"), (2L)).SequenceEqual((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"), (4L)).SequenceEqual((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).SequenceEqual((new List<string>(new string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).SequenceEqual((new List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).SequenceEqual((new List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (select_words s n)\n  (define (consonant? c)\n    (not (member (char-downcase c) '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (count consonant? (string->list word)))\n  (filter (lambda (word) (= (count-consonants word) n))\n          (string-split s)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SelectWords(string s, long n) {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long AddElements(List<long> arr, long k) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)41L, (long)57L, (long)76L, (long)87L, (long)88L, (long)99L})), (3L)) == (-4L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)111L, (long)121L, (long)3L, (long)4000L, (long)5L, (long)6L})), (2L)) == (0L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)11L, (long)21L, (long)3L, (long)90L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L)) == (125L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L)) == (24L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)1L})), (1L)) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (add_elements arr k)\n  (apply + (filter (lambda (x) (<= (string-length (number->string x)) 2)) (take arr k))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long AddElements(List<long> arr, long k) {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Eat(long number, long need, long remaining) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Eat((5L), (6L), (10L)).SequenceEqual((new List<long>(new long[]{(long)11L, (long)4L}))));\n    Debug.Assert(Eat((4L), (8L), (9L)).SequenceEqual((new List<long>(new long[]{(long)12L, (long)1L}))));\n    Debug.Assert(Eat((1L), (10L), (10L)).SequenceEqual((new List<long>(new long[]{(long)11L, (long)0L}))));\n    Debug.Assert(Eat((2L), (11L), (5L)).SequenceEqual((new List<long>(new long[]{(long)7L, (long)0L}))));\n    Debug.Assert(Eat((4L), (5L), (7L)).SequenceEqual((new List<long>(new long[]{(long)9L, (long)2L}))));\n    Debug.Assert(Eat((4L), (5L), (1L)).SequenceEqual((new List<long>(new long[]{(long)5L, (long)0L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (eat number need remaining)\n  (if (<= need remaining)\n      (list (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Eat(long number, long need, long remaining) {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> OddCount(List<string> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"1234567\"}))).SequenceEqual((new List<string>(new string[]{(string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))));\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"3\", (string)\"11111111\"}))).SequenceEqual((new List<string>(new string[]{(string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))));\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"271\", (string)\"137\", (string)\"314\"}))).SequenceEqual((new List<string>(new string[]{(string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (odd_count lst)\n  (map (lambda (arr)\n         (let ([n (count (lambda (d) (odd? (string->number (string d)))) (string->list arr))])\n           (string-append \"the number of odd elements \" (number->string n) \"n the str\" (number->string n) \"ng \" (number->string n) \" of the \" (number->string n) \"nput.\")))\n       lst))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> OddCount(List<string> lst) {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> NextSmallest(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (next_smallest lst)\n  (set! lst (sort (remove-duplicates lst) <))\n  (if (< (length lst) 2)\n      #f\n      (list-ref lst 1)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> NextSmallest(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).SequenceEqual((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).SequenceEqual((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).SequenceEqual((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()), (1L)).SequenceEqual((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})), (2L)).SequenceEqual((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L)).SequenceEqual((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_row lst x)\n  (define coords\n    (for*/list ([i (in-range (length lst))]\n                [j (in-range (length (list-ref lst i)))]\n                #:when (= (list-ref (list-ref lst i) j) x))\n      (list i j)))\n  (sort coords (lambda (a b) (or (< (first a) (first b))\n                                 (and (= (first a) (first b))\n                                      (> (second a) (second b)))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> FilterByPrefix(List<string> strings, string prefix) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FilterByPrefix((new List<string>()), (\"john\")).SequenceEqual((new List<string>())));\n    Debug.Assert(FilterByPrefix((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).SequenceEqual((new List<string>(new string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-prefix? x prefix)) strings))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> FilterByPrefix(List<string> strings, string prefix) {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ChooseNum(long x, long y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ChooseNum((12L), (15L)) == (14L));\n    Debug.Assert(ChooseNum((13L), (12L)) == (-1L));\n    Debug.Assert(ChooseNum((33L), (12354L)) == (12354L));\n    Debug.Assert(ChooseNum((5234L), (5233L)) == (-1L));\n    Debug.Assert(ChooseNum((6L), (29L)) == (28L));\n    Debug.Assert(ChooseNum((27L), (10L)) == (-1L));\n    Debug.Assert(ChooseNum((7L), (7L)) == (-1L));\n    Debug.Assert(ChooseNum((546L), (546L)) == (546L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (choose_num x y)\n  (cond\n    [(> x y) -1]\n    [(even? y) y]\n    [(= x y) -1]\n    [else (- y 1)]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ChooseNum(long x, long y) {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PrimeLength(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(PrimeLength((\"Hello\")) == (true));\n    Debug.Assert(PrimeLength((\"abcdcba\")) == (true));\n    Debug.Assert(PrimeLength((\"kittens\")) == (true));\n    Debug.Assert(PrimeLength((\"orange\")) == (false));\n    Debug.Assert(PrimeLength((\"wow\")) == (true));\n    Debug.Assert(PrimeLength((\"world\")) == (true));\n    Debug.Assert(PrimeLength((\"MadaM\")) == (true));\n    Debug.Assert(PrimeLength((\"Wow\")) == (true));\n    Debug.Assert(PrimeLength((\"\")) == (false));\n    Debug.Assert(PrimeLength((\"HI\")) == (true));\n    Debug.Assert(PrimeLength((\"go\")) == (true));\n    Debug.Assert(PrimeLength((\"gogo\")) == (false));\n    Debug.Assert(PrimeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    Debug.Assert(PrimeLength((\"Madam\")) == (true));\n    Debug.Assert(PrimeLength((\"M\")) == (false));\n    Debug.Assert(PrimeLength((\"0\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prime_length string)\n  (define l (string-length string))\n  (and (> l 1)\n       (not (ormap (lambda (i) (= (modulo l i) 0)) (range 2 l)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PrimeLength(string str) {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumToN(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SumToN((1L)) == (1L));\n    Debug.Assert(SumToN((6L)) == (21L));\n    Debug.Assert(SumToN((11L)) == (66L));\n    Debug.Assert(SumToN((30L)) == (465L));\n    Debug.Assert(SumToN((100L)) == (5050L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (sum_to_n n)\n  (apply + (range 0 (add1 n))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumToN(long n) {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FixSpaces(string text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fix_spaces text)\n  (define new_text \"\")\n  (define i 0)\n  (define start 0)\n  (define end 0)\n\n  (define (append_text! text)\n    (if (> (- end start) 2)\n        (set! new_text (string-append new_text \"-\" text))\n        (if (> (- end start) 0)\n            (set! new_text (string-append new_text (make-string (- end start) #\\_ ) text))\n            (set! new_text (string-append new_text text))))\n    (set! start (+ i 1))\n    (set! end (+ i 1)))\n\n  (for ([c (string->list text)])\n    (cond [(char=? c #\\space)\n           (set! end (+ end 1))]\n          [else\n           (append_text! (string c))]))\n\n  (if (> (- end start) 2)\n      (set! new_text (string-append new_text \"-\"))\n      (if (> (- end start) 0)\n          (set! new_text (string-append new_text (make-string (- end start) #\\_)))\n          (void)))\n  new_text)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FixSpaces(string text) {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RollingMax(List<long> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (rolling_max numbers)\n  (define running-max #f)\n  (define result '())\n\n  (for ([n (in-list numbers)])\n    (set! running-max (if (not running-max) n (max running-max n)))\n    (set! result (append result (list running-max))))\n\n  result)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RollingMax(List<long> numbers) {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string WordsInSentence(string sentence) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (words_in_sentence sentence)\n  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))  \n    (if (< n 2) #f (iter 2)))\n  (define (prime-word? word)\n    (or (= (string-length word) 2) (is-prime (string-length word))))\n  (string-join (filter prime-word? (string-split sentence)) \" \"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string WordsInSentence(string sentence) {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string GetClosestVowel(string word) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_closest_vowel word)\n  (define vowels (list \"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"O\" \"U\" \"I\"))\n  (let loop ([i (- (string-length word) 2)])\n    (if (< i 1)\n        \"\"\n        (if (member (substring word i (+ i 1)) vowels)\n            (if (and (not (member (substring word (- i 1) i) vowels))\n                     (not (member (substring word (+ i 1) (+ i 2)) vowels)))\n                (substring word i (+ i 1))\n                (loop (- i 1)))\n            (loop (- i 1))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string GetClosestVowel(string word) {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Compare(List<long> game, List<long> guess) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (compare game guess)\n  (map abs (map - game guess)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Compare(List<long> game, List<long> guess) {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RemoveDuplicates((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)3L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (remove_duplicates numbers)\n  (define c (make-hash))\n  (for ([n numbers])\n    (hash-update! c n add1 0))\n  (filter (lambda (n) (<= (hash-ref c n 0) 1)) numbers))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseNestedParens(string paren_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).SequenceEqual((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (parse_nested_parens paren_string)\n  (define (parse_paren_group s)\n    (define depth 0)\n    (define max_depth 0)\n    (for ([c (string->list s)])\n      (if (equal? c #\\()\n          (set! depth (+ depth 1))\n          (set! depth (- depth 1)))\n      (set! max_depth (max depth max_depth)))\n    max_depth)\n  (filter (lambda (x) (not (equal? x \"\"))) (map parse_paren_group (string-split paren_string \" \"))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseNestedParens(string paren_string) {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddCount(long num) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(EvenOddCount((7L)).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(EvenOddCount((-78L)).Equals((Tuple.Create(1L, 1L))));\n    Debug.Assert(EvenOddCount((3452L)).Equals((Tuple.Create(2L, 2L))));\n    Debug.Assert(EvenOddCount((346211L)).Equals((Tuple.Create(3L, 3L))));\n    Debug.Assert(EvenOddCount((-345821L)).Equals((Tuple.Create(3L, 3L))));\n    Debug.Assert(EvenOddCount((-2L)).Equals((Tuple.Create(1L, 0L))));\n    Debug.Assert(EvenOddCount((-45347L)).Equals((Tuple.Create(2L, 3L))));\n    Debug.Assert(EvenOddCount((0L)).Equals((Tuple.Create(1L, 0L))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (even_odd_count num)\n  (define even_count 0)\n  (define odd_count 0)\n  (for-each (lambda (i) (if (even? (string->number (string i))) (set! even_count (add1 even_count)) (set! odd_count (add1 odd_count)))) (string->list (number->string (abs num))))\n  (list even_count odd_count))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddCount(long num) {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FruitDistribution(string s, long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FruitDistribution((\"5 apples and 6 oranges\"), (19L)) == (8L));\n    Debug.Assert(FruitDistribution((\"5 apples and 6 oranges\"), (21L)) == (10L));\n    Debug.Assert(FruitDistribution((\"0 apples and 1 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"1 apples and 0 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"2 apples and 3 oranges\"), (100L)) == (95L));\n    Debug.Assert(FruitDistribution((\"2 apples and 3 oranges\"), (5L)) == (0L));\n    Debug.Assert(FruitDistribution((\"1 apples and 100 oranges\"), (120L)) == (19L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fruit_distribution s n)\n  (define (string->intlist s)\n    (map string->number (string-split s)))\n  (- n (apply + (filter integer? (string->intlist s)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FruitDistribution(string s, long n) {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringXor(string a, string b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (string_xor a b)\n  (define (xor i j)\n    (if (char=? i j) #\\0 #\\1))\n  (list->string (map xor (string->list a) (string->list b))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringXor(string a, string b) {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Strlen(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Strlen((\"\")) == (0L));\n    Debug.Assert(Strlen((\"x\")) == (1L));\n    Debug.Assert(Strlen((\"asdasnakj\")) == (9L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (strlen string)\n  (string-length string))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Strlen(string str) {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringSequence(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (string_sequence n)\n  (string-join (map number->string (range (add1 n)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringSequence(long n) {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FileNameCheck(string file_name) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (file_name_check file_name)\n  (define suf '(\"txt\" \"exe\" \"dll\"))\n  (define lst (string-split file_name \".\"))\n  (cond\n    [(not (= (length lst) 2)) \"No\"]\n    [(not (member (list-ref lst 1) suf)) \"No\"]\n    [(= (string-length (list-ref lst 0)) 0) \"No\"]\n    [(not (char-alphabetic? (string-ref (list-ref lst 0) 0))) \"No\"]\n    [(> (length (regexp-match* #rx\"[0-9]\" (list-ref lst 0))) 3) \"No\"]\n    [else \"Yes\"]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FileNameCheck(string file_name) {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CanArrange(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (can_arrange arr)\n  (define ind -1)\n  (for ([i (in-range 1 (length arr))])\n    (when (< (list-ref arr i) (list-ref arr (- i 1)))\n      (set! ind i)))\n  ind)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CanArrange(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (add lst)\n  (apply + (filter even? (map (lambda (i) (list-ref lst i)) (range 1 (length lst) 2)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Intersperse((new List<long>()), (7L)).SequenceEqual((new List<long>())));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)2L})), (8L)).SequenceEqual((new List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)3L, (long)8L, (long)2L}))));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)2L, (long)2L, (long)2L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (intersperse numbers delimeter)\n  (if (null? numbers)\n      '()\n      (let loop ((n (cdr numbers)) (result (list (car numbers))))\n        (if (null? n)\n            result\n            (loop (cdr n) (append result (list delimeter) (list (car n))))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MatchParens(List<string> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"()(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\")\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(())\", (string)\"())())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")())\", (string)\"(()()(\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(())))\", (string)\"(()())((\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"()\", (string)\"())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(\", (string)\"()))()\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"((((\", (string)\"((())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(()\", (string)\"(()(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(\", (string)\")(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\"(\"}))).Equals((\"Yes\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (match_parens lst)\n  (define (check s)\n    (define (iter val s)\n      (cond\n        [(null? s) (if (= val 0) #t #f)]\n        [(eq? (car s) #\\() (iter (+ val 1) (cdr s))]\n        [(eq? (car s) #\\)) (if (< val 1) #f (iter (- val 1) (cdr s)))]\n        [else (iter val (cdr s))]))\n    (iter 0 (string->list s)))\n\n  (define S1 (string-append (list-ref lst 0) (list-ref lst 1)))\n  (define S2 (string-append (list-ref lst 1) (list-ref lst 0)))\n  (if (or (check S1) (check S2)) \"Yes\" \"No\"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MatchParens(List<string> lst) {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> FilterBySubstring(List<string> strings, string substring) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FilterBySubstring((new List<string>()), (\"john\")).SequenceEqual((new List<string>())));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).SequenceEqual((new List<string>(new string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"aaaxxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xx\")).SequenceEqual((new List<string>(new string[]{(string)\"xxx\", (string)\"aaaxxy\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"grunt\", (string)\"trumpet\", (string)\"prune\", (string)\"gruesome\"})), (\"run\")).SequenceEqual((new List<string>(new string[]{(string)\"grunt\", (string)\"prune\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (filter_by_substring strings substring)\n  (filter (lambda (x) (string-contains? x substring)) strings))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> FilterBySubstring(List<string> strings, string substring) {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FindMax(List<string> words) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (find_max words)\n  (car (sort words (lambda (a b)\n                      (or (> (length (remove-duplicates (string->list a))) (length (remove-duplicates (string->list b))))\n                          (and (= (length (remove-duplicates (string->list a))) (length (remove-duplicates (string->list b))))\n                               (string<? a b)))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FindMax(List<string> words) {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GenerateIntegers(long a, long b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GenerateIntegers((2L), (10L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((10L), (2L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((132L), (2L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((17L), (89L)).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (generate_integers a b)\n  (define lower (max 2 (min a b)))\n  (define upper (min 8 (max a b)))\n  (filter even? (range lower (+ upper 1))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GenerateIntegers(long a, long b) {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)4L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)5L, (long)7L, (long)3L})), (new List<long>(new long[]{(long)2L, (long)6L, (long)4L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)5L, (long)7L, (long)3L})), (new List<long>(new long[]{(long)2L, (long)6L, (long)3L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)3L, (long)2L, (long)6L, (long)1L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)5L, (long)1L, (long)1L, (long)1L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)100L, (long)200L})), (new List<long>(new long[]{(long)200L, (long)200L}))).Equals((\"YES\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (exchange lst1 lst2)\n  (define odd (count odd? lst1))\n  (define even (count even? lst2))\n  (if (>= even odd)\n      \"YES\"\n      \"NO\"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsEqualToSumEven(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsEqualToSumEven((4L)) == (false));\n    Debug.Assert(IsEqualToSumEven((6L)) == (false));\n    Debug.Assert(IsEqualToSumEven((8L)) == (true));\n    Debug.Assert(IsEqualToSumEven((10L)) == (true));\n    Debug.Assert(IsEqualToSumEven((11L)) == (false));\n    Debug.Assert(IsEqualToSumEven((12L)) == (true));\n    Debug.Assert(IsEqualToSumEven((13L)) == (false));\n    Debug.Assert(IsEqualToSumEven((16L)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (is_equal_to_sum_even n)\n  (and (even? n) (>= n 8)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsEqualToSumEven(long n) {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string DecimalToBinary(long decimalNum) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (decimal_to_binary decimal)\n  (string-append \"db\" (number->string decimal 2) \"db\"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string DecimalToBinary(long decimalNum) {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Simplify(string x, string n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Simplify((\"1/5\"), (\"5/1\")) == (true));\n    Debug.Assert(Simplify((\"1/6\"), (\"2/1\")) == (false));\n    Debug.Assert(Simplify((\"5/1\"), (\"3/1\")) == (true));\n    Debug.Assert(Simplify((\"7/10\"), (\"10/2\")) == (false));\n    Debug.Assert(Simplify((\"2/10\"), (\"50/10\")) == (true));\n    Debug.Assert(Simplify((\"7/2\"), (\"4/2\")) == (true));\n    Debug.Assert(Simplify((\"11/6\"), (\"6/1\")) == (true));\n    Debug.Assert(Simplify((\"2/3\"), (\"5/2\")) == (false));\n    Debug.Assert(Simplify((\"5/2\"), (\"3/5\")) == (false));\n    Debug.Assert(Simplify((\"2/4\"), (\"8/4\")) == (true));\n    Debug.Assert(Simplify((\"2/4\"), (\"4/2\")) == (true));\n    Debug.Assert(Simplify((\"1/5\"), (\"5/1\")) == (true));\n    Debug.Assert(Simplify((\"1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (simplify x n)\n  (define a-b (string-split x \"/\"))\n  (define c-d (string-split n \"/\"))\n  (define numerator (* (string->number (first a-b)) (string->number (first c-d))))\n  (define denom (* (string->number (second a-b)) (string->number (second c-d))))\n  (= (/ numerator denom) (floor (/ numerator denom))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Simplify(string x, string n) {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool RightAngleTriangle(long a, long b, long c) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (right_angle_triangle a b c)\n  (or (= (* a a) (+ (* b b) (* c c)))\n      (= (* b b) (+ (* a a) (* c c)))\n      (= (* c c) (+ (* a a) (* b b)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool RightAngleTriangle(long a, long b, long c) {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long DoubleTheDifference(List<float> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (double_the_difference lst)\n  (apply + (filter odd? (map (lambda (x) (* x x)) (filter (lambda (x) (and (> x 0) (integer? x))) lst)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long DoubleTheDifference(List<float> lst) {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowZero(List<long> operations) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (below_zero operations)\n  (let loop ([balance 0] [ops operations])\n    (cond [(null? ops) #f]\n          [(< (+ balance (car ops)) 0) #t]\n          [else (loop (+ balance (car ops)) (cdr ops))])))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowZero(List<long> operations) {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GreatestCommonDivisor(long a, long b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GreatestCommonDivisor((3L), (7L)) == (1L));\n    Debug.Assert(GreatestCommonDivisor((10L), (15L)) == (5L));\n    Debug.Assert(GreatestCommonDivisor((49L), (14L)) == (7L));\n    Debug.Assert(GreatestCommonDivisor((144L), (60L)) == (12L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n      (greatest_common_divisor b (modulo a b))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GreatestCommonDivisor(long a, long b) {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> F(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(F((5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L}))));\n    Debug.Assert(F((7L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L, (long)720L, (long)28L}))));\n    Debug.Assert(F((1L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(F((3L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)6L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (f n)\n  (define (factorial x)\n    (foldl * 1 (range 1 (+ x 1))))\n  (define (sum x)\n    (foldl + 0 (range 1 (+ x 1))))\n  (for/list ([i (range 1 (+ n 1))])\n    (if (even? i)\n        (factorial i)\n        (sum i))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> F(long n) {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Monotonic(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (monotonic l)\n  (or (equal? l (sort l <))\n      (equal? l (sort l >))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Monotonic(List<long> l) {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> ByLength(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).SequenceEqual((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).SequenceEqual((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).SequenceEqual((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).SequenceEqual((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).SequenceEqual((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (by_length arr)\n  (define dic (hash 1 \"One\" 2 \"Two\" 3 \"Three\" 4 \"Four\" 5 \"Five\" 6 \"Six\" 7 \"Seven\" 8 \"Eight\" 9 \"Nine\"))\n  (define sorted-arr (sort arr >))\n  (define new-arr '())\n  (for ([var sorted-arr])\n    (when (hash-ref dic var #f)\n      (set! new-arr (append new-arr (list (hash-ref dic var))))))\n\n  new-arr)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> ByLength(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string RemoveVowels(string text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RemoveVowels((\"\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"abcdef\\nghijklm\")).Equals((\"bcdf\\nghjklm\")));\n    Debug.Assert(RemoveVowels((\"fedcba\")).Equals((\"fdcb\")));\n    Debug.Assert(RemoveVowels((\"eeeee\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"acBAA\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"EcBOO\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"ybcd\")).Equals((\"ybcd\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (remove_vowels text)\n  (list->string (filter (lambda (s) (not (member s '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))) (string->list text))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string RemoveVowels(string text) {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Iscube(long a) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (iscube a)\n  (= (expt (round (expt (abs a) (/ 1 3))) 3) (abs a)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Iscube(long a) {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (reverse_delete s c)\n  (define new-string (list->string (filter (lambda (char) (not (member char (string->list c)) )) (string->list s))))\n  (list new-string (equal? new-string (list->string (reverse (string->list new-string))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (mean_absolute_deviation numbers)\n  (define mean (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) (length numbers)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n  (let loop ([depth 0] [brackets (string->list brackets)])\n    (if (null? brackets)\n        (zero? depth)\n        (if (char=? (car brackets) #\\<)\n            (loop (+ depth 1) (cdr brackets))\n            (and (positive? depth) (loop (- depth 1) (cdr brackets)))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<float> RescaleToUnit(List<float> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)49.9f}))).SequenceEqual((new List<float>(new float[]{(float)0.0f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)100.0f, (float)49.9f}))).SequenceEqual((new List<float>(new float[]{(float)1.0f, (float)0.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))).SequenceEqual((new List<float>(new float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))).SequenceEqual((new List<float>(new float[]{(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))).SequenceEqual((new List<float>(new float[]{(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (rescale_to_unit numbers)\n  (let ([min-number (apply min numbers)]\n        [max-number (apply max numbers)])\n    (map (\u03bb (x) (/ (- x min-number) (- max-number min-number))) numbers)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<float> RescaleToUnit(List<float> numbers) {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L, 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L, 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L, -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (intersection interval1 interval2)\n  (define (is-prime num)\n    (cond [(or (= num 1) (= num 0)) #f]\n          [(= num 2) #t]\n          [else (for/and ([i (in-range 2 num)]) (not (= 0 (modulo num i))))]))\n\n  (define l (max (first interval1) (first interval2)))\n  (define r (min (second interval1) (second interval2)))\n  (define length (- r l))\n  (if (and (> length 0) (is-prime length))\n      \"YES\"\n      \"NO\"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HexKey(string num) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (hex_key num)\n  (define primes '(#\\2 #\\3 #\\5 #\\7 #\\B #\\D))\n  (define total 0)\n  (for ((i (in-string num)))\n    (when (member i primes)\n      (set! total (+ total 1))))\n  total)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HexKey(string num) {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> StrangeSortList(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L, (long)-5L}))).SequenceEqual((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)111111L}))).SequenceEqual((new List<long>(new long[]{(long)111111L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (strange_sort_list lst)\n  (let loop ((lst lst) (res '()) (switch #t))\n    (if (null? lst)\n        res\n        (let ((x (if switch (apply min lst) (apply max lst))))\n          (loop (remove x lst) (append res (list x)) (not switch))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> StrangeSortList(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> AllPrefixes(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).SequenceEqual((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).SequenceEqual((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).SequenceEqual((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (all_prefixes string)\n  (define result '())\n  (for ([i (in-range (string-length string))])\n    (set! result (append result (list (substring string 0 (+ i 1))))))\n  result)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> AllPrefixes(string str) {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Solution(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solution lst)\n  (apply + (filter odd? (map (lambda (x) (list-ref lst x)) (range 0 (length lst) 2)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Solution(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSorted(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSorted(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Search(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L, (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L, (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L, (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L, (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L, (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L, (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L, (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L, (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L, (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (search lst)\n  (define frq (make-vector (+ (apply max lst) 1) 0))\n  (for-each (lambda (i) (vector-set! frq i (+ (vector-ref frq i) 1))) lst)\n  (define ans -1)\n  (for ([i (in-range 1 (vector-length frq))])\n    (when (>= (vector-ref frq i) i)\n      (set! ans i)))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Search(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PairsSumToZero(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (pairs_sum_to_zero l)\n  (define (helper l1)\n    (cond [(null? l1) #f]\n          [(member (- (car l1)) (cdr l1)) #t]\n          [else (helper (cdr l1))]))\n  (helper l))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PairsSumToZero(List<long> l) {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long StartsOneEnds(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (starts_one_ends n)\n  (if (= n 1) 1\n      (* 18 (expt 10 (- n 2)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long StartsOneEnds(long n) {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetPositive(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L, (long)4L, (long)5L, (long)6L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)3L, (long)9L, (long)123L, (long)1L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L}))).SequenceEqual((new List<long>())));\n    Debug.Assert(GetPositive((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (get_positive l)\n  (filter (lambda (e) (> e 0)) l))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetPositive(List<long> l) {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Concatenate(List<string> strings) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Concatenate((new List<string>())).Equals((\"\")));\n    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"xyz\")));\n    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\", (string)\"w\", (string)\"k\"}))).Equals((\"xyzwk\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (concatenate strings)\n  (string-append* strings))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Concatenate(List<string> strings) {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsNested(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"[[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"[]\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"[][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n    Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"[[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n    Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\")) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_nested string)\n  (define opening-bracket-index '())\n  (define closing-bracket-index '())\n  (for ([i (in-range (string-length string))])\n    (cond [(char=? (string-ref string i) #\\[) (set! opening-bracket-index (append opening-bracket-index (list i)))]\n          [(char=? (string-ref string i) #\\]) (set! closing-bracket-index (cons i closing-bracket-index))]))\n  (define cnt 0)\n  (define i 0)\n  (define l (length closing-bracket-index))\n  (for ([idx opening-bracket-index])\n    (cond [(and (< i l) (< idx (list-ref closing-bracket-index i)))\n           (set! cnt (add1 cnt))\n           (set! i (add1 i))]))\n  (>= cnt 2))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsNested(string str) {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPalindrome(string text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (is_palindrome text)\n  (for/and ([i (in-range (string-length text))])\n    (equal? (string-ref text i)\n            (string-ref text (- (string-length text) 1 i)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPalindrome(string text) {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountNums(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_nums arr)\n  (define (digits_sum n)\n    (let ([neg (if (< n 0) -1 1)])\n      (let ([n (map (lambda (x) (string->number (string x))) (string->list (number->string (* n neg))))])\n        (apply + (cons (* (first n) neg) (rest n))))))\n\n  (length (filter (lambda (x) (> x 0)) (map digits_sum arr))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountNums(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Factorize(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).SequenceEqual((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((20577L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (factorize n)\n  (define (isqrt x) (floor (sqrt x)))\n  (define (iter i n)\n    (cond ((> i (isqrt n)) (if (> n 1) (list n) '()))\n          ((zero? (modulo n i)) (cons i (iter i (quotient n i))))\n          (else (iter (+ i 1) n))))\n  (iter 2 n))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Factorize(long n) {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestPrimeFactor(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_prime_factor n)\n  (define (is_prime k)\n    (and (> k 1) (not (ormap (lambda (i) (= (modulo k i) 0)) (range 2 k)))) )\n  (define largest 1)\n  (for ([j (in-range 2 (add1 n))])\n    (when (and (= (modulo n j) 0) (is_prime j))\n      (set! largest (max largest j))))\n  largest)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestPrimeFactor(long n) {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GetMaxTriples(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_max_triples n)\n  (define A (for/list ([i (in-range 1 (add1 n))]) (- (* i i) i 1)))\n  (define ans '())\n  (for ([i (in-range n)])\n    (for ([j (in-range (add1 i) n)])\n      (for ([k (in-range (add1 j) n)])\n        (when (= (modulo (+ (list-ref A i) (list-ref A j) (list-ref A k)) 3) 0)\n          (set! ans (cons (list (list-ref A i) (list-ref A j) (list-ref A k)) ans))))))\n  (length ans))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GetMaxTriples(long n) {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string AntiShuffle(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (anti_shuffle s)\n  (string-join (map (lambda (i) (list->string (sort (string->list i) char<=?))) (string-split s \" \")) \" \"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string AntiShuffle(string s) {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(long N) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solve N)\n  (number->string (apply + (map (lambda (c) (string->number (string c))) (string->list (number->string N)))) 2))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(long N) {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})})), (3L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)9L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)2L})})), (1L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L}), (List<long>)new List<long>(new long[]{(long)13L, (long)14L, (long)15L, (long)16L})})), (4L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)13L, (long)10L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L, (long)12L, (long)1L}), (List<long>)new List<long>(new long[]{(long)3L, (long)16L, (long)11L, (long)15L}), (List<long>)new List<long>(new long[]{(long)8L, (long)14L, (long)9L, (long)2L})})), (7L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)10L, (long)1L, (long)10L, (long)1L, (long)10L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)14L, (long)9L, (long)2L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)13L, (long)15L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)12L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L, (long)11L, (long)16L})})), (5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)7L, (long)1L, (long)7L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)7L, (long)2L}), (List<long>)new List<long>(new long[]{(long)5L, (long)16L, (long)14L, (long)4L}), (List<long>)new List<long>(new long[]{(long)9L, (long)3L, (long)15L, (long)6L}), (List<long>)new List<long>(new long[]{(long)12L, (long)13L, (long)10L, (long)1L})})), (9L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)12L, (long)13L, (long)10L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)3L, (long)15L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)16L, (long)14L, (long)4L}), (List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)7L, (long)2L})})), (12L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)1L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)8L, (long)9L})})), (8L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)1L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)4L})})), (8L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)1L, (long)5L, (long)1L, (long)5L, (long)1L, (long)5L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L})})), (10L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L})})), (10L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (minPath grid k)\n  (define n (length grid))\n  (define val (+ (* n n) 1))\n  (for ([i (in-range n)])\n    (for ([j (in-range n)])\n      (when (= (list-ref (list-ref grid i) j) 1)\n        (define temp '())\n        (when (> i 0) (set! temp (cons (list-ref (list-ref grid (- i 1)) j) temp)))\n        (when (> j 0) (set! temp (cons (list-ref (list-ref grid i) (- j 1)) temp)))\n        (when (< i (- n 1)) (set! temp (cons (list-ref (list-ref grid (+ i 1)) j) temp)))\n        (when (< j (- n 1)) (set! temp (cons (list-ref (list-ref grid i) (+ j 1)) temp)))\n        (set! val (apply min temp)))))\n  (define ans '())\n  (for ([i (in-range k)])\n    (if (even? i)\n        (set! ans (append ans (list 1)))\n        (set! ans (append ans (list val)))))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> MakeAPile(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MakeAPile((3L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(MakeAPile((4L)).SequenceEqual((new List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(MakeAPile((5L)).SequenceEqual((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)11L, (long)13L}))));\n    Debug.Assert(MakeAPile((6L)).SequenceEqual((new List<long>(new long[]{(long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)16L}))));\n    Debug.Assert(MakeAPile((8L)).SequenceEqual((new List<long>(new long[]{(long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)18L, (long)20L, (long)22L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (make_a_pile n)\n  (for/list ([i n])\n    (+ n (* 2 i))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> MakeAPile(long n) {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPrime(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in C#.\n\n### Racket version\n\n#lang racket\n\n(define (is_prime n)\n  (if (< n 2)\n      #f\n      (for/and ([k (in-range 2 (- n 1))])\n        (not (= (modulo n k) 0)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPrime(long n) {\n"
  }
]