[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "rb",
    "prompt": "def correct_bracketing(brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"()()(()())()))()\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n    depth=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ ${1:$i:1} == \"(\" ]]; then\n            (( depth++ ))\n        else\n            (( depth-- ))\n        fi\n        if (( depth < 0 )); then\n            echo \"false\"\n            return\n        fi\n    done\n    if (( depth == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Ruby version\n\ndef correct_bracketing(brackets)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "rb",
    "prompt": "def triangle_area(a, h)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5, 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10, 8))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n    echo \"scale=1; $1 * $2 / 2\" | bc\n}\n\n### Ruby version\n\ndef triangle_area(a, h)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "rb",
    "prompt": "def special_factorial(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_special_factorial\n    candidate = method(:special_factorial)\n    assert_equal(288, candidate.call(4))\n    assert_equal(34560, candidate.call(5))\n    assert_equal(125411328000, candidate.call(7))\n    assert_equal(1, candidate.call(1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n    n=$1\n    fact_i=1\n    special_fact=1\n    for (( i=1; i<=$n; i++ )); do\n        ((fact_i*=i))\n        ((special_fact*=fact_i))\n    done\n    echo $special_fact\n}\n\n### Ruby version\n\ndef special_factorial(n)\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "rb",
    "prompt": "def largest_smallest_integers(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5, 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil, nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100, 1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local lst=($1)\n    local smallest=($(echo \"${lst[@]}\" | tr ' ' '\\n' | awk '$1 < 0' | sort -n | tail -n 1))\n    local largest=($(echo \"${lst[@]}\" | tr ' ' '\\n' | awk '$1 > 0' | sort -n | head -n 1))\n    echo \"$smallest $largest\"\n}\n\n### Ruby version\n\ndef largest_smallest_integers(lst)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "rb",
    "prompt": "def move_one_ball(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_one_ball\n    candidate = method(:move_one_ball)\n    assert_equal(true, candidate.call([3, 4, 5, 1, 2]))\n    assert_equal(true, candidate.call([3, 5, 10, 1, 2]))\n    assert_equal(false, candidate.call([4, 3, 1, 2]))\n    assert_equal(false, candidate.call([3, 5, 4, 1, 2]))\n    assert_equal(true, candidate.call([]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local min_value=${sorted_arr[0]}\n    local min_index=$(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -n $min_value | cut -d: -f1)\n    local my_arr=(\"${arr[@]:$min_index}\" \"${arr[@]:0:$min_index}\")\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        if [[ ${my_arr[i]} -ne ${sorted_arr[i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Ruby version\n\ndef move_one_ball(arr)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "rb",
    "prompt": "def digits(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digits\n    candidate = method(:digits)\n    assert_equal(5, candidate.call(5))\n    assert_equal(5, candidate.call(54))\n    assert_equal(1, candidate.call(120))\n    assert_equal(5, candidate.call(5014))\n    assert_equal(315, candidate.call(98765))\n    assert_equal(2625, candidate.call(5576543))\n    assert_equal(0, candidate.call(2468))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n    n=$1\n    product=1\n    odd_count=0\n    for digit in $(echo $n | grep -o .); do\n        if [[ $((digit%2)) -eq 1 ]]; then\n            ((product*=digit))\n            ((odd_count++))\n        fi\n    done\n    if [[ $odd_count -eq 0 ]]; then\n        echo 0\n    else\n        echo $product\n    fi\n}\n\n### Ruby version\n\ndef digits(n)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "rb",
    "prompt": "def fib4(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28, candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386, candidate.call(12))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n    results=(0 0 2 0)\n    if [ $1 -lt 4 ]; then\n        echo ${results[$1]}\n        return\n    fi\n\n    for ((i=4; i<=$1; i++)); do\n        results+=($((results[3] + results[2] + results[1] + results[0])))\n        unset results[0]\n        results=(\"${results[@]}\")\n    done\n\n    echo ${results[3]}\n}\n\n### Ruby version\n\ndef fib4(n)\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "rb",
    "prompt": "def sort_even(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_even\n    candidate = method(:sort_even)\n    assert_equal([1, 2, 3], candidate.call([1, 2, 3]))\n    assert_equal([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10], candidate.call([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_even() {\n    evens=($(echo $1 | tr ' ' '\\n' | awk 'NR%2==1' | sort -n))\n    odds=($(echo $1 | tr ' ' '\\n' | awk 'NR%2==0'))\n    ans=()\n    for ((i=0; i<${#evens[@]}; i++)); do\n        ans+=(${evens[i]})\n        ans+=(${odds[i]})\n    done\n    if [ ${#evens[@]} -gt ${#odds[@]} ]; then\n        ans+=(${evens[-1]})\n    fi\n    echo ${ans[@]}\n}\n\n### Ruby version\n\ndef sort_even(l)\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "rb",
    "prompt": "def order_by_points(nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\norder_by_points() {\n    nums=($1)\n    digits_sum() {\n        n=$1\n        neg=1\n        if [[ $n -lt 0 ]]; then\n            n=$((-1 * n))\n            neg=-1\n        fi\n        n=($(echo $n | grep -o .))\n        n[0]=$((n[0] * neg))\n        sum=0\n        for i in ${n[@]}; do\n            ((sum+=i))\n        done\n        echo $sum\n    }\n    for (( i=0; i<${#nums[@]}; i++ )); do\n        for (( j=i+1; j<${#nums[@]}; j++ )); do\n            if [[ $(digits_sum ${nums[$i]}) -gt $(digits_sum ${nums[$j]}) ]]; then\n                temp=${nums[$i]}\n                nums[$i]=${nums[$j]}\n                nums[$j]=$temp\n            fi\n        done\n    done\n    echo \"${nums[@]}\"\n}\n\n### Ruby version\n\ndef order_by_points(nums)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "rb",
    "prompt": "def is_happy(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n  if [ ${#1} -lt 3 ]; then\n    echo \"false\"\n    return\n  fi\n\n  for (( i=0; i<${#1}-2; i++ )); do\n    if [[ ${1:i:1} == ${1:i+1:1} || ${1:i+1:1} == ${1:i+2:1} || ${1:i:1} == ${1:i+2:1} ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"\n}\n\n### Ruby version\n\ndef is_happy(s)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "rb",
    "prompt": "def circular_shift(x, shift)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_circular_shift\n    candidate = method(:circular_shift)\n    assert_equal(\"001\", candidate.call(100, 2))\n    assert_equal(\"12\", candidate.call(12, 2))\n    assert_equal(\"79\", candidate.call(97, 8))\n    assert_equal(\"21\", candidate.call(12, 1))\n    assert_equal(\"11\", candidate.call(11, 101))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n    s=$1\n    shift=$2\n    if [ $shift -gt ${#s} ]; then\n        echo $s | rev\n    else\n        echo ${s:$shift}${s:0:$shift}\n    fi\n}\n\n### Ruby version\n\ndef circular_shift(x, shift)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "rb",
    "prompt": "def has_close_elements(numbers, threshold)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_has_close_elements\n    candidate = method(:has_close_elements)\n    assert_equal(true, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3))\n    assert_equal(false, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05))\n    assert_equal(true, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.95))\n    assert_equal(false, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.8))\n    assert_equal(true, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1))\n    assert_equal(true, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 1.0))\n    assert_equal(false, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    arr=($1)\n    threshold=$2\n\n    for (( i=0; i<${#arr[@]}-1; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            if (( $(bc <<< \"${arr[$i]} - ${arr[$j]}\") < $threshold )); then\n                echo \"true\"\n                return\n            fi\n        done\n    done\n\n    echo \"false\"\n}\n\n### Ruby version\n\ndef has_close_elements(numbers, threshold)\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "rb",
    "prompt": "def numerical_letter_grade(grades)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_numerical_letter_grade\n    candidate = method(:numerical_letter_grade)\n    assert_equal([\"A+\", \"B\", \"C-\", \"C\", \"A-\"], candidate.call([4.0, 3, 1.7, 2, 3.5]))\n    assert_equal([\"D+\"], candidate.call([1.2]))\n    assert_equal([\"D-\"], candidate.call([0.5]))\n    assert_equal([\"E\"], candidate.call([0.0]))\n    assert_equal([\"D\", \"D-\", \"C-\", \"B\", \"B+\"], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))\n    assert_equal([\"E\", \"D-\"], candidate.call([0.0, 0.7]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    for gpa in $1; do\n        if [ $gpa == 4.0 ]; then\n            letter_grade+=\"A+ \"\n        elif [ $(echo \"$gpa > 3.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"A \"\n        elif [ $(echo \"$gpa > 3.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"A- \"\n        elif [ $(echo \"$gpa > 3.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B+ \"\n        elif [ $(echo \"$gpa > 2.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B \"\n        elif [ $(echo \"$gpa > 2.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B- \"\n        elif [ $(echo \"$gpa > 2.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C+ \"\n        elif [ $(echo \"$gpa > 1.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C \"\n        elif [ $(echo \"$gpa > 1.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C- \"\n        elif [ $(echo \"$gpa > 1.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D+ \"\n        elif [ $(echo \"$gpa > 0.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D \"\n        elif [ $(echo \"$gpa > 0.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D- \"\n        else\n            letter_grade+=\"E \"\n        fi\n    done\n    echo $letter_grade\n}\n\n### Ruby version\n\ndef numerical_letter_grade(grades)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "rb",
    "prompt": "def x_or_y(n, x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_x_or_y\n    candidate = method(:x_or_y)\n    assert_equal(34, candidate.call(7, 34, 12))\n    assert_equal(5, candidate.call(15, 8, 5))\n    assert_equal(33, candidate.call(3, 33, 5212))\n    assert_equal(3, candidate.call(1259, 3, 52))\n    assert_equal(-1, candidate.call(7919, -1, 12))\n    assert_equal(583, candidate.call(3609, 1245, 583))\n    assert_equal(129, candidate.call(91, 56, 129))\n    assert_equal(1234, candidate.call(6, 34, 1234))\n    assert_equal(0, candidate.call(1, 2, 0))\n    assert_equal(2, candidate.call(2, 2, 0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    if [ $1 -eq 1 ]; then\n        echo $3\n    else\n        for ((i=2;i<$1;i++)); do\n            if [ $(($1 % $i)) -eq 0 ]; then\n                echo $3\n                break\n            fi\n        done\n        echo $2\n    fi\n}\n\n### Ruby version\n\ndef x_or_y(n, x, y)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "rb",
    "prompt": "def specialFilter(nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5, -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2, candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43, -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75, 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nspecialFilter() {\n    local count=0\n    for num in $1; do\n        if [[ $num -gt 10 && $(echo $num | awk '{print substr($0,1,1) \" \" substr($0,length,1)}') =~ ^[13579]\\ [13579]$ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Ruby version\n\ndef specialFilter(nums)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "rb",
    "prompt": "def parse_music(music_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n    local music_string=\"$1\"\n    local note_map=(\"o\" \"4\" \"o|\" \"2\" \".|\" \"1\")\n    local notes=()\n    for x in $music_string; do\n        if [[ -n \"$x\" ]]; then\n            for i in \"${!note_map[@]}\"; do\n                if [[ \"${note_map[i]}\" == \"$x\" ]]; then\n                    notes+=(\"${note_map[i+1]}\")\n                fi\n            done\n        fi\n    done\n    echo \"${notes[@]}\"\n}\n\n### Ruby version\n\ndef parse_music(music_string)\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "rb",
    "prompt": "def split_words(txt)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_words\n    candidate = method(:split_words)\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"Hello world!\"))\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"Hello,world!\"))\n    assert_equal([\"Hello\", \"world,!\"], candidate.call(\"Hello world,!\"))\n    assert_equal([\"Hello,Hello,world\", \"!\"], candidate.call(\"Hello,Hello,world !\"))\n    assert_equal(3, candidate.call(\"abcdef\"))\n    assert_equal(2, candidate.call(\"aaabb\"))\n    assert_equal(1, candidate.call(\"aaaBb\"))\n    assert_equal(0, candidate.call(\"\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 == *\" \"* ]]; then\n        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 == *,* ]]; then\n        echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o '[a-z]' | grep -c '[02468]$'\n    fi\n}\n\n### Ruby version\n\ndef split_words(txt)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "rb",
    "prompt": "def count_distinct_characters(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n    assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_distinct_characters() {\n    lowerCaseString=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    uniqueCharacters=$(echo $lowerCaseString | grep -o . | sort -u | tr -d '\\n')\n    echo ${#uniqueCharacters}\n}\n\n### Ruby version\n\ndef count_distinct_characters(string)\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "rb",
    "prompt": "def bf(planet1, planet2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bf\n    candidate = method(:bf)\n    assert_equal([\"Saturn\", \"Uranus\"], candidate.call(\"Jupiter\", \"Neptune\"))\n    assert_equal([\"Venus\"], candidate.call(\"Earth\", \"Mercury\"))\n    assert_equal([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"], candidate.call(\"Mercury\", \"Uranus\"))\n    assert_equal([\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"], candidate.call(\"Neptune\", \"Venus\"))\n    assert_equal([], candidate.call(\"Earth\", \"Earth\"))\n    assert_equal([], candidate.call(\"Mars\", \"Earth\"))\n    assert_equal([], candidate.call(\"Jupiter\", \"Makemake\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planet_names=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    if [[ ! \" ${planet_names[@]} \" =~ \" $1 \" ]] || [[ ! \" ${planet_names[@]} \" =~ \" $2 \" ]] || [ \"$1\" == \"$2\" ]; then\n        return\n    fi\n    planet1_index=$(echo \"${planet_names[@]}\" | grep -o \"$1\" | wc -l)\n    planet2_index=$(echo \"${planet_names[@]}\" | grep -o \"$2\" | wc -l)\n    if (( planet1_index < planet2_index )); then\n        echo \"${planet_names[@]:planet1_index + 1:planet2_index}\"\n    else\n        echo \"${planet_names[@]:planet2_index + 1:planet1_index}\"\n    fi\n}\n\n### Ruby version\n\ndef bf(planet1, planet2)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "rb",
    "prompt": "def digitSum(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ndigitSum() {\n    s=$1\n    sum=0\n    for (( i=0; i<${#s}; i++ )); do\n        char=${s:i:1}\n        if [[ $char =~ [A-Z] ]]; then\n            ((sum+=`printf \"%d\" \"'$char\"`))\n        fi\n    done\n    echo \"$sum\"\n}\n\n### Ruby version\n\ndef digitSum(s)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "rb",
    "prompt": "def sum_squares(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n    candidate = method(:sum_squares)\n    assert_equal(6, candidate.call([1, 2, 3]))\n    assert_equal(14, candidate.call([1, 4, 9]))\n    assert_equal(0, candidate.call([]))\n    assert_equal(9, candidate.call([1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    assert_equal(-3, candidate.call([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\n    assert_equal(0, candidate.call([0]))\n    assert_equal(-126, candidate.call([-1, -5, 2, -1, -5]))\n    assert_equal(3030, candidate.call([-56, -99, 1, 0, -2]))\n    assert_equal(0, candidate.call([-1, 0, 0, 0, 0, 0, 0, 0, -1]))\n    assert_equal(-14196, candidate.call([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]))\n    assert_equal(-1448, candidate.call([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=($1)\n    local result=0\n    for (( i=0; i<${#lst[@]}; i++ )); do\n        if [[ $((i%3)) -eq 0 ]]; then\n            ((result+=lst[i]**2))\n        elif [[ $((i%4)) -eq 0 && $((i%3)) -ne 0 ]]; then\n            ((result+=lst[i]**3))\n        else\n            ((result+=lst[i]))\n        fi\n    done\n    echo \"$result\"\n}\n\n### Ruby version\n\ndef sum_squares(lst)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "rb",
    "prompt": "def count_up_to(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_up_to\n    candidate = method(:count_up_to)\n    assert_equal([2, 3], candidate.call(5))\n    assert_equal([2, 3, 5], candidate.call(6))\n    assert_equal([2, 3, 5], candidate.call(7))\n    assert_equal([2, 3, 5, 7], candidate.call(10))\n    assert_equal([], candidate.call(0))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19], candidate.call(22))\n    assert_equal([], candidate.call(1))\n    assert_equal([2, 3, 5, 7, 11, 13, 17], candidate.call(18))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43], candidate.call(47))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], candidate.call(101))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n    n=$1\n    primes=()\n    for ((i=2;i<n;i++)); do\n        is_prime=true\n        for ((j=2;j<i;j++)); do\n            if ((i%j==0)); then\n                is_prime=false\n                break\n            fi\n        done\n        if $is_prime; then\n            primes+=($i)\n        fi\n    done\n    echo ${primes[@]}\n}\n\n### Ruby version\n\ndef count_up_to(n)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "rb",
    "prompt": "def sum_squares(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84, candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4, 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230, candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0, 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086, candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0, 1.0, 0.0]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n    for i in $1; do\n        squared=$((squared + $(echo \"scale=0; $(echo \"scale=0; $i\" | bc) / 1\" | bc) ** 2))\n    done\n    echo $squared\n}\n\n### Ruby version\n\ndef sum_squares(lst)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "rb",
    "prompt": "def unique(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique\n    candidate = method(:unique)\n    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n    local arr=($1)\n    local unique_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | uniq))\n    echo \"${unique_arr[@]}\"\n}\n\n### Ruby version\n\ndef unique(l)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "rb",
    "prompt": "def fib(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\n### Ruby version\n\ndef fib(n)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "rb",
    "prompt": "def fizz_buzz(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n    assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n    assert_equal(8026, candidate.call(100000))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n    n=$1\n    ns=()\n    for (( i=0; i<$n; i++ )); do\n        if [[ $((i%11)) -eq 0 || $((i%13)) -eq 0 ]]; then\n            ns+=($i)\n        fi\n    done\n    s=$(echo ${ns[@]} | tr ' ' '\\n' | grep -o '7' | wc -l)\n    echo $s\n}\n\n### Ruby version\n\ndef fizz_buzz(n)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "rb",
    "prompt": "def Strongest_Extension(class_name, extensions)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    class_name=$1\n    extensions=($2)\n    strong=${extensions[0]}\n    my_val=$(echo \"${extensions[0]}\" | awk '{print gsub(/[A-Z]/,\"&\") - gsub(/[a-z]/,\"&\")}')\n    for s in \"${extensions[@]}\"; do\n        val=$(echo \"$s\" | awk '{print gsub(/[A-Z]/,\"&\") - gsub(/[a-z]/,\"&\")}')\n        if [[ $val -gt $my_val ]]; then\n            strong=$s\n            my_val=$val\n        fi\n    done\n    echo \"$class_name.$strong\"\n}\n\n### Ruby version\n\ndef Strongest_Extension(class_name, extensions)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "rb",
    "prompt": "def find_closest_elements(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    arr=($1)\n    closest_pair=()\n    distance=\"\"\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            new_distance=$(echo \"${arr[i]} - ${arr[j]}\" | bc -l | tr -d '-')\n            if [[ -z $distance ]]; then\n                distance=$new_distance\n                closest_pair=(\"${arr[i]}\" \"${arr[j]}\")\n            elif (( $(echo \"$new_distance < $distance\" | bc -l) )); then\n                distance=$new_distance\n                closest_pair=(\"${arr[i]}\" \"${arr[j]}\")\n            fi\n        done\n    done\n    echo \"${closest_pair[@]}\"\n}\n\n### Ruby version\n\ndef find_closest_elements(numbers)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "rb",
    "prompt": "def valid_date(date)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_valid_date\n    candidate = method(:valid_date)\n    assert_equal(true, candidate.call(\"03-11-2000\"))\n    assert_equal(false, candidate.call(\"15-01-2012\"))\n    assert_equal(false, candidate.call(\"04-0-2040\"))\n    assert_equal(true, candidate.call(\"06-04-2020\"))\n    assert_equal(true, candidate.call(\"01-01-2007\"))\n    assert_equal(false, candidate.call(\"03-32-2011\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"04-31-3000\"))\n    assert_equal(true, candidate.call(\"06-06-2005\"))\n    assert_equal(false, candidate.call(\"21-31-2000\"))\n    assert_equal(true, candidate.call(\"04-12-2003\"))\n    assert_equal(false, candidate.call(\"04122003\"))\n    assert_equal(false, candidate.call(\"20030412\"))\n    assert_equal(false, candidate.call(\"2003-04\"))\n    assert_equal(false, candidate.call(\"2003-04-12\"))\n    assert_equal(false, candidate.call(\"04-2003\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvalid_date() {\n    date=$1\n    month=$(echo $date | awk -F'-' '{print $1}')\n    day=$(echo $date | awk -F'-' '{print $2}')\n    year=$(echo $date | awk -F'-' '{print $3}')\n    if [[ $month -lt 1 || $month -gt 12 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]] && [[ $day -lt 1 || $day -gt 31 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]] && [[ $day -lt 1 || $day -gt 30 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 2 ]] && [[ $day -lt 1 || $day -gt 29 ]]; then\n        echo \"false\"\n        return\n    fi\n    echo \"true\"\n}\n\n### Ruby version\n\ndef valid_date(date)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "rb",
    "prompt": "def add(x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0, 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2, 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7, 5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n    expr $1 + $2\n}\n\n### Ruby version\n\ndef add(x, y)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "rb",
    "prompt": "def triples_sum_to_zero(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triples_sum_to_zero\n    candidate = method(:triples_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, 5, -1]))\n    assert_equal(true, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(false, candidate.call([1, 2, 5, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 9, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(false, candidate.call([1, 3, 5, -100]))\n    assert_equal(false, candidate.call([100, 3, 5, -100]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n    l=($1)\n    for (( i=0; i<${#l[@]}; i++ )); do\n        for (( j=i+1; j<${#l[@]}; j++ )); do\n            for (( k=j+1; k<${#l[@]}; k++ )); do\n                if (( l[i] + l[j] + l[k] == 0 )); then\n                    echo true\n                    return\n                fi\n            done\n        done\n    done\n    echo false\n}\n\n### Ruby version\n\ndef triples_sum_to_zero(l)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "rb",
    "prompt": "def largest_divisor(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n  for (( i=$1-1; i>0; i-- )); do\n    if (( $1 % $i == 0 )); then\n      echo $i\n      return\n    fi\n  done\n}\n\n### Ruby version\n\ndef largest_divisor(n)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "rb",
    "prompt": "def sort_numbers(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n    value_map=(zero one two three four five six seven eight nine)\n    for word in $1; do\n        for i in ${!value_map[@]}; do\n            if [[ $word == ${value_map[$i]} ]]; then\n                echo $i\n            fi\n        done\n    done | sort | while read i; do\n        echo ${value_map[$i]}\n    done | tr '\\n' ' ' | sed 's/ $//'\n}\n\n### Ruby version\n\ndef sort_numbers(numbers)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "rb",
    "prompt": "def smallest_change(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_smallest_change\n    candidate = method(:smallest_change)\n    assert_equal(4, candidate.call([1, 2, 3, 5, 4, 7, 9, 6]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 3, 2, 2]))\n    assert_equal(1, candidate.call([1, 4, 2]))\n    assert_equal(1, candidate.call([1, 4, 4, 2]))\n    assert_equal(0, candidate.call([1, 2, 3, 2, 1]))\n    assert_equal(0, candidate.call([3, 1, 1, 3]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(1, candidate.call([0, 1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n    arr=($1)\n    ans=0\n    for ((i=0; i<${#arr[@]}/2; i++)); do\n        if [[ ${arr[i]} -ne ${arr[${#arr[@]}-i-1]} ]]; then\n            ((ans++))\n        fi\n    done\n    echo $ans\n}\n\n### Ruby version\n\ndef smallest_change(arr)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "rb",
    "prompt": "def below_threshold(l, t)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_threshold\n    candidate = method(:below_threshold)\n    assert_equal(true, candidate.call([1, 2, 4, 10], 100))\n    assert_equal(false, candidate.call([1, 20, 4, 10], 5))\n    assert_equal(true, candidate.call([1, 20, 4, 10], 21))\n    assert_equal(true, candidate.call([1, 20, 4, 10], 22))\n    assert_equal(true, candidate.call([1, 8, 4, 10], 11))\n    assert_equal(false, candidate.call([1, 8, 4, 10], 10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n    for e in $1; do\n        if [ $e -ge $2 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Ruby version\n\ndef below_threshold(l, t)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "rb",
    "prompt": "def prod_signs(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prod_signs\n    candidate = method(:prod_signs)\n    assert_equal(-9, candidate.call([1, 2, 2, -4]))\n    assert_equal(0, candidate.call([0, 1]))\n    assert_equal(-10, candidate.call([1, 1, 1, 2, 3, -1, 1]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(20, candidate.call([2, 4, 1, 2, -1, -1, 9]))\n    assert_equal(4, candidate.call([-1, 1, -1, 1]))\n    assert_equal(-4, candidate.call([-1, 1, 1, 1]))\n    assert_equal(0, candidate.call([-1, 1, 1, 0]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nprod_signs() {\n    arr=($1)\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        return\n    fi\n    if [[ ${arr[*]} =~ 0 ]]; then\n        echo 0\n        return\n    fi\n    negs=($(echo ${arr[*]} | sed 's/[^-]/0/g'))\n    prod=$(( ${#negs[@]} % 2 == 0 ? 1 : -1 ))\n    echo $(( prod * $(echo ${arr[*]} | sed 's/-//g' | tr ' ' '+' ) ))\n}\n\n### Ruby version\n\ndef prod_signs(arr)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "rb",
    "prompt": "def modp(n, p)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2, candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8, candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4, candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n    ret=1\n    for ((i=0;i<$1;i++)); do\n        ret=$((2 * ret % $2))\n    done\n    echo $ret\n}\n\n### Ruby version\n\ndef modp(n, p)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "rb",
    "prompt": "def count_upper(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_upper() {\n    count=0\n    for ((i=0;i<${#1};i+=2)); do\n        if [[ \"${1:i:1}\" == [AEIOU] ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Ruby version\n\ndef count_upper(s)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "rb",
    "prompt": "def multiply(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020, 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76, 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0, 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    echo $(( ${1: -1} * ${2: -1} ))\n}\n\n### Ruby version\n\ndef multiply(a, b)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "rb",
    "prompt": "def unique_digits(x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n    local arr=($1)\n    local odd_digit_elements=()\n    for i in \"${arr[@]}\"; do\n        if [[ $(echo $i | grep -E \"^[13579]+$\") ]]; then\n            odd_digit_elements+=($i)\n        fi\n    done\n    echo $(echo \"${odd_digit_elements[@]}\" | tr ' ' '\\n' | sort -n)\n}\n\n### Ruby version\n\ndef unique_digits(x)\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "rb",
    "prompt": "def will_it_fly(q, w)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_will_it_fly\n    candidate = method(:will_it_fly)\n    assert_equal(true, candidate.call([3, 2, 3], 9))\n    assert_equal(false, candidate.call([1, 2], 5))\n    assert_equal(true, candidate.call([3], 5))\n    assert_equal(false, candidate.call([3, 2, 3], 1))\n    assert_equal(false, candidate.call([1, 2, 3], 6))\n    assert_equal(true, candidate.call([5], 5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n    q=($1)\n    w=$2\n    if (( $(echo \"${q[@]}\" | tr ' ' '+' | bc) > $w )); then\n        echo \"false\"\n        return\n    fi\n\n    i=0\n    j=${#q[@]}-1\n    while (( $i<$j )); do\n        if (( ${q[$i]} != ${q[$j]} )); then\n            echo \"false\"\n            return\n        fi\n        (( i++ ))\n        (( j-- ))\n    done\n    echo \"true\"\n}\n\n### Ruby version\n\ndef will_it_fly(q, w)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "rb",
    "prompt": "def maximum(arr, k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    if [[ $2 -eq 0 ]]; then\n        return 0\n    fi\n    sorted=$(echo $1 | tr ' ' '\\n' | sort -n)\n    echo $sorted | tr ' ' '\\n' | tail -$2\n}\n\n### Ruby version\n\ndef maximum(arr, k)\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "rb",
    "prompt": "def separate_paren_groups(paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_separate_paren_groups\n    candidate = method(:separate_paren_groups)\n    assert_equal([\"(()())\", \"((()))\", \"()\", \"((())()())\"], candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([\"()\", \"(())\", \"((()))\", \"(((())))\"], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([\"(()(())((())))\"], candidate.call(\"(()(())((())))\"))\n    assert_equal([\"()\", \"(())\", \"(()())\"], candidate.call(\"( ) (( )) (( )( ))\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n    result=()\n    current_string=\"\"\n    current_depth=0\n\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $c == '(' ]]; then\n            (( current_depth++ ))\n            current_string+=$c\n        elif [[ $c == ')' ]]; then\n            (( current_depth-- ))\n            current_string+=$c\n\n            if [[ $current_depth == 0 ]]; then\n                result+=(\"$current_string\")\n                current_string=\"\"\n            fi\n        fi\n    done\n\n    echo \"${result[@]}\"\n}\n\n### Ruby version\n\ndef separate_paren_groups(paren_string)\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "rb",
    "prompt": "def filter_integers(values)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfilter_integers() {\n    result=()\n    for x in $1; do\n        if [[ $x =~ ^-?[0-9]+$ ]]; then\n            result+=($x)\n        fi\n    done\n    echo ${result[@]}\n}\n\n### Ruby version\n\ndef filter_integers(values)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "rb",
    "prompt": "def skjkasdkd(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25, candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81, 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n    assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191, 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nskjkasdkd() {\n    arr=($1)\n    maxx=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $maxx ]]; then\n            is_prime=true\n            for (( j=2; j<$i; j++ )); do\n                if [[ $((i%j)) -eq 0 ]]; then\n                    is_prime=false\n                    break\n                fi\n            done\n            if $is_prime; then\n                maxx=$i\n            fi\n        fi\n    done\n    result=0\n    for (( i=0; i<${#maxx}; i++ )); do\n        result=$((result+${maxx:i:1}))\n    done\n    echo \"$result\"\n}\n\n### Ruby version\n\ndef skjkasdkd(lst)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "rb",
    "prompt": "def total_match(lst1, lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_total_match\n    candidate = method(:total_match)\n    assert_equal([], candidate.call([], []))\n    assert_equal([\"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hi\", \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\n    assert_equal([\"4\"], candidate.call([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\n    assert_equal([\"hI\", \"Hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n    assert_equal([\"hI\", \"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]))\n    assert_equal([], candidate.call([], [\"this\"]))\n    assert_equal([], candidate.call([\"this\"], []))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    l1=0\n    for st in $1; do\n        l1=$((l1+${#st}))\n    done\n\n    l2=0\n    for st in $2; do\n        l2=$((l2+${#st}))\n    done\n\n    if [ $l1 -le $l2 ]; then\n        echo $1\n    else\n        echo $2\n    fi\n}\n\n### Ruby version\n\ndef total_match(lst1, lst2)\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "rb",
    "prompt": "def string_to_md5(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_md5\n    candidate = method(:string_to_md5)\n    assert_equal(\"3e25960a79dbc69b674cd4ec67a72c62\", candidate.call(\"Hello world\"))\n    assert_equal(nil, candidate.call(\"\"))\n    assert_equal(\"0ef78513b0cb8cef12743f5aeb35f888\", candidate.call(\"A B C\"))\n    assert_equal(\"5f4dcc3b5aa765d61d8327deb882cf99\", candidate.call(\"password\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstring_to_md5() {\n    echo -n \"$1\" | md5sum | awk '{print $1}'\n}\n\n### Ruby version\n\ndef string_to_md5(text)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "rb",
    "prompt": "def car_race_collision(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_car_race_collision\n    candidate = method(:car_race_collision)\n    assert_equal(4, candidate.call(2))\n    assert_equal(9, candidate.call(3))\n    assert_equal(16, candidate.call(4))\n    assert_equal(64, candidate.call(8))\n    assert_equal(100, candidate.call(10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n    echo $(($1*$1))\n}\n\n### Ruby version\n\ndef car_race_collision(n)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "rb",
    "prompt": "def is_simple_power(x, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16, 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true, candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true, candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false, candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true, candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n    x=$1\n    n=$2\n    if [[ $n -eq 1 ]]; then\n        if [[ $x -eq 1 ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\n        fi\n        return\n    fi\n    power=1\n    while [[ $power -lt $x ]]; do\n        ((power*=n))\n    done\n    if [[ $power -eq $x ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Ruby version\n\ndef is_simple_power(x, n)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "rb",
    "prompt": "def incr_list(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_incr_list\n    candidate = method(:incr_list)\n    assert_equal([], candidate.call([]))\n    assert_equal([4, 3, 2], candidate.call([3, 2, 1]))\n    assert_equal([6, 3, 6, 3, 4, 4, 10, 1, 124], candidate.call([5, 2, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n    echo $(echo $1 | tr ' ' '\\n' | awk '{print $1+1}' | tr '\\n' ' ')\n}\n\n### Ruby version\n\ndef incr_list(l)\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "rb",
    "prompt": "def flip_case(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flip_case\n    candidate = method(:flip_case)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"hELLO!\", candidate.call(\"Hello!\"))\n    assert_equal(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\", candidate.call(\"These violent delights have violent ends\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nflip_case() {\n    echo $1 | tr '[:upper:][:lower:]' '[:lower:][:upper:]'\n}\n\n### Ruby version\n\ndef flip_case(string)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "rb",
    "prompt": "def vowels_count(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"ACEDY\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n    s=$1\n    vowels=\"aeiouAEIOU\"\n    n_vowels=$(echo $s | grep -io \"[aeiou]\" | wc -l)\n    if [[ ${s: -1} == [yY] ]]; then\n        ((n_vowels++))\n    fi\n    echo $n_vowels\n}\n\n### Ruby version\n\ndef vowels_count(s)\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "rb",
    "prompt": "def sorted_list_sum(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sorted_list_sum\n    candidate = method(:sorted_list_sum)\n    assert_equal([\"aa\"], candidate.call([\"aa\", \"a\", \"aaa\"]))\n    assert_equal([\"AI\", \"asdf\", \"school\"], candidate.call([\"school\", \"AI\", \"asdf\", \"b\"]))\n    assert_equal([], candidate.call([\"d\", \"b\", \"c\", \"a\"]))\n    assert_equal([\"abcd\", \"dcba\"], candidate.call([\"d\", \"dcba\", \"abcd\", \"a\"]))\n    assert_equal([\"AI\", \"ai\", \"au\"], candidate.call([\"AI\", \"ai\", \"au\"]))\n    assert_equal([], candidate.call([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]))\n    assert_equal([\"cc\", \"dd\", \"aaaa\", \"bbbb\"], candidate.call([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsorted_list_sum() {\n    lst=($1)\n    sorted_lst=($(echo \"${lst[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    new_lst=()\n    for i in \"${sorted_lst[@]}\"; do\n        if (( ${#i} % 2 == 0 )); then\n            new_lst+=($i)\n        fi\n    done\n    sorted_new_lst=($(echo \"${new_lst[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    sorted_by_length=($(echo \"${sorted_new_lst[@]}\" | tr ' ' '\\n' | awk '{print length, $0}' | sort -n -s | cut -d\" \" -f2-))\n    echo \"${sorted_by_length[@]}\"\n}\n\n### Ruby version\n\ndef sorted_list_sum(lst)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "rb",
    "prompt": "def words_string(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_string\n    candidate = method(:words_string)\n    assert_equal([\"Hi\", \"my\", \"name\", \"is\", \"John\"], candidate.call(\"Hi, my name is John\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One, two, three, four, five, six\"))\n    assert_equal([\"Hi\", \"my\", \"name\"], candidate.call(\"Hi, my name\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One,, two, three, four, five, six,\"))\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([\"ahmed\", \"gamal\"], candidate.call(\"ahmed     , gamal\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_string() {\n    echo \"$1\" | tr ',' ' ' | awk '{$1=$1};1'\n}\n\n### Ruby version\n\ndef words_string(s)\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "rb",
    "prompt": "def even_odd_palindrome(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_palindrome\n    candidate = method(:even_odd_palindrome)\n    assert_equal([8, 13], candidate.call(123))\n    assert_equal([4, 6], candidate.call(12))\n    assert_equal([1, 2], candidate.call(3))\n    assert_equal([6, 8], candidate.call(63))\n    assert_equal([5, 6], candidate.call(25))\n    assert_equal([4, 6], candidate.call(19))\n    assert_equal([4, 5], candidate.call(9))\n    assert_equal([0, 1], candidate.call(1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n    is_palindrome() {\n        [[ $1 == $(echo $1 | rev) ]]\n    }\n\n    even_palindrome_count=0\n    odd_palindrome_count=0\n\n    for i in $(seq 1 $1); do\n        if (( i%2 == 1 )) && is_palindrome $i; then\n            (( odd_palindrome_count++ ))\n        elif (( i%2 == 0 )) && is_palindrome $i; then\n            (( even_palindrome_count++ ))\n        fi\n    done\n    echo \"$even_palindrome_count $odd_palindrome_count\"\n}\n\n### Ruby version\n\ndef even_odd_palindrome(n)\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "rb",
    "prompt": "def triangle_area(a, b, c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n    if (( $1 + $2 <= $3 || $1 + $3 <= $2 || $2 + $3 <= $1 )); then\n        echo \"-1\"\n        return\n    fi\n    s=$(( ($1 + $2 + $3) / 2 ))\n    area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\" | bc)\n    echo $area\n}\n\n### Ruby version\n\ndef triangle_area(a, b, c)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "rb",
    "prompt": "def check_dict_case(dict)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    while IFS=, read -r key value; do\n        if [[ $key == \"\" ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $key != *[[:lower:]]* ]] && [[ $value != *[[:lower:]]* ]]; then\n            echo \"true\"\n            return\n        elif [[ $key != *[[:upper:]]* ]] && [[ $value != *[[:upper:]]* ]]; then\n            echo \"true\"\n            return\n        else\n            echo \"false\"\n            return\n        fi\n    done <<< \"$1\"\n}\n\n### Ruby version\n\ndef check_dict_case(dict)\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "rb",
    "prompt": "def tri(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tri\n    candidate = method(:tri)\n    assert_equal([1, 3, 2, 8], candidate.call(3))\n    assert_equal([1, 3, 2, 8, 3], candidate.call(4))\n    assert_equal([1, 3, 2, 8, 3, 15], candidate.call(5))\n    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35], candidate.call(9))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))\n    assert_equal([1], candidate.call(0))\n    assert_equal([1, 3], candidate.call(1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"1\"\n        return\n    fi\n\n    my_tri=(1 3)\n    for (( i=2; i<=$1; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            my_tri+=(\"$((i/2+1))\")\n        else\n            my_tri+=(\"$((my_tri[i-1]+my_tri[i-2]+(i+3)/2))\")\n        fi\n    done\n\n    echo \"${my_tri[@]}\"\n}\n\n### Ruby version\n\ndef tri(n)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "rb",
    "prompt": "def median(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n    l=($(echo $1 | tr ' ' '\\n' | sort -n))\n    len=${#l[@]}\n    if (( len % 2 == 1 )); then\n        echo ${l[len/2]}\n    else\n        echo $(( (${l[len/2-1]} + ${l[len/2]}) / 2 ))\n    fi\n}\n\n### Ruby version\n\ndef median(l)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "rb",
    "prompt": "def change_base(x, base)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_change_base\n    candidate = method(:change_base)\n    assert_equal(\"22\", candidate.call(8, 3))\n    assert_equal(\"100\", candidate.call(9, 3))\n    assert_equal(\"11101010\", candidate.call(234, 2))\n    assert_equal(\"10000\", candidate.call(16, 2))\n    assert_equal(\"1000\", candidate.call(8, 2))\n    assert_equal(\"111\", candidate.call(7, 2))\n    assert_equal(\"2\", candidate.call(2, 3))\n    assert_equal(\"3\", candidate.call(3, 4))\n    assert_equal(\"4\", candidate.call(4, 5))\n    assert_equal(\"5\", candidate.call(5, 6))\n    assert_equal(\"6\", candidate.call(6, 7))\n    assert_equal(\"7\", candidate.call(7, 8))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    x=$1\n    base=$2\n    ret=\"\"\n    while [[ $x -gt 0 ]]; do\n        ret=\"${x%$base}$ret\"\n        x=$((x/base))\n    done\n    echo $ret\n}\n\n### Ruby version\n\ndef change_base(x, base)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "rb",
    "prompt": "def longest(strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_longest\n    candidate = method(:longest)\n    assert_equal(nil, candidate.call([]))\n    assert_equal(\"x\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"zzzz\", candidate.call([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlongest() {\n  if [ -z \"$1\" ]; then\n    echo \"None\"\n    return\n  fi\n\n  maxlen=0\n  for s in $1; do\n    len=${#s}\n    if [ $len -gt $maxlen ]; then\n      maxlen=$len\n      longest=$s\n    fi\n  done\n\n  echo $longest\n}\n\n### Ruby version\n\ndef longest(strings)\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "rb",
    "prompt": "def sort_array(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n    arr=($1)\n    sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    sorted_by_ones=($(echo \"${sorted_arr[@]}\" | tr ' ' '\\n' | awk '{print $1 \" \" $0}' | sort -n -k2 | awk '{print $1}'))\n    echo \"${sorted_by_ones[@]}\"\n}\n\n### Ruby version\n\ndef sort_array(arr)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "rb",
    "prompt": "def common(l1, l2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n    ret=()\n    for e1 in $1; do\n        for e2 in $2; do\n            if [ $e1 -eq $e2 ]; then\n                ret+=($e1)\n            fi\n        done\n    done\n    echo \"${ret[@]}\" | tr ' ' '\\n' | sort -n\n}\n\n### Ruby version\n\ndef common(l1, l2)\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "rb",
    "prompt": "def cycpattern_check(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cycpattern_check\n    candidate = method(:cycpattern_check)\n    assert_equal(false, candidate.call(\"xyzw\", \"xyw\"))\n    assert_equal(true, candidate.call(\"yello\", \"ell\"))\n    assert_equal(false, candidate.call(\"whattup\", \"ptut\"))\n    assert_equal(true, candidate.call(\"efef\", \"fee\"))\n    assert_equal(false, candidate.call(\"abab\", \"aabb\"))\n    assert_equal(true, candidate.call(\"winemtt\", \"tinem\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n    l=${#2}\n    pat=\"$2$2\"\n    for (( i=0; i<${#1}-l+1; i++ )); do\n        for (( j=0; j<l+1; j++ )); do\n            if [[ \"${1:$i:$l}\" == \"${pat:$j:$l}\" ]]; then\n                echo true\n                return\n            fi\n        done\n    done\n    echo false\n}\n\n### Ruby version\n\ndef cycpattern_check(a, b)\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "rb",
    "prompt": "def minSubArraySum(nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n    max_sum=0\n    s=0\n    for num in $1; do\n        s+=-$num\n        if ((s < 0)); then\n            s=0\n        fi\n        max_sum=$((s > max_sum ? s : max_sum))\n    done\n    if ((max_sum == 0)); then\n        max_sum=$(echo $1 | tr ' ' '\\n' | awk '{print -$1}' | sort -n | head -n 1)\n    fi\n    min_sum=-$max_sum\n    echo $min_sum\n}\n\n### Ruby version\n\ndef minSubArraySum(nums)\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "rb",
    "prompt": "def sort_array(array)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5], candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2, 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0, 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23, 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n#\n#\n# $1 is a space-separated list\nsort_array() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\n' | sort -n))\n    local sorted_by_ones=($(echo \"${sorted_arr[@]}\" | tr ' ' '\n' | awk '{print $1 \" \" $0}' | sort -n -k2 | awk '{print $1}'))\n    echo \"${sorted_by_ones[@]}\"\n}\n\n### Ruby version\n\ndef sort_array(array)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "rb",
    "prompt": "def get_odd_collatz(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_odd_collatz\n    candidate = method(:get_odd_collatz)\n    assert_equal([1, 5, 7, 11, 13, 17], candidate.call(14))\n    assert_equal([1, 5], candidate.call(5))\n    assert_equal([1, 3, 5], candidate.call(12))\n    assert_equal([1], candidate.call(1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n    n=$1\n    if ((n%2==0)); then\n        odd_collatz=()\n    else\n        odd_collatz=($n)\n    fi\n    while ((n > 1)); do\n        if ((n%2==0)); then\n            n=$((n/2))\n        else\n            n=$((n*3+1))\n        fi\n        if ((n%2==1)); then\n            odd_collatz+=($n)\n        fi\n    done\n    printf '%s\\n' \"${odd_collatz[@]}\" | sort -n\n}\n\n### Ruby version\n\ndef get_odd_collatz(n)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "rb",
    "prompt": "def derivative(xs)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_derivative\n    candidate = method(:derivative)\n    assert_equal([1, 4, 12, 20], candidate.call([3, 1, 2, 4, 5]))\n    assert_equal([2, 6], candidate.call([1, 2, 3]))\n    assert_equal([2, 2], candidate.call([3, 2, 1]))\n    assert_equal([2, 2, 0, 16], candidate.call([3, 2, 1, 0, 4]))\n    assert_equal([], candidate.call([1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n  xs=($1)\n  for ((i=1; i<${#xs[@]}; i++)); do\n    echo $((i * ${xs[i]}))\n  done\n}\n\n### Ruby version\n\ndef derivative(xs)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "rb",
    "prompt": "def fibfib(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0, candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24, candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274, candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1 ]]; then\n    echo 0\n  elif [[ $1 -eq 2 ]]; then\n    echo 1\n  else\n    echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n  fi\n}\n\n### Ruby version\n\ndef fibfib(n)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "rb",
    "prompt": "def max_element(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_element\n    candidate = method(:max_element)\n    assert_equal(3, candidate.call([1, 2, 3]))\n    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n    l=($1)\n    m=${l[0]}\n    for e in ${l[@]}; do\n        if ((e > m)); then\n            m=$e\n        fi\n    done\n    echo $m\n}\n\n### Ruby version\n\ndef max_element(l)\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "rb",
    "prompt": "def closest_integer(value)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_integer\n    candidate = method(:closest_integer)\n    assert_equal(10, candidate.call(\"10\"))\n    assert_equal(15, candidate.call(\"14.5\"))\n    assert_equal(-16, candidate.call(\"-15.5\"))\n    assert_equal(15, candidate.call(\"15.3\"))\n    assert_equal(0, candidate.call(\"0\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nclosest_integer() {\n    # TODO: implement me\n    echo 0\n}\n\n### Ruby version\n\ndef closest_integer(value)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "rb",
    "prompt": "def sum_product(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_product\n    candidate = method(:sum_product)\n    assert_equal([0, 1], candidate.call([]))\n    assert_equal([3, 1], candidate.call([1, 1, 1]))\n    assert_equal([100, 0], candidate.call([100, 0]))\n    assert_equal([15, 105], candidate.call([3, 5, 7]))\n    assert_equal([10, 10], candidate.call([10]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n    local sum=0\n    local prod=1\n    for n in $1; do\n        ((sum += n))\n        ((prod *= n))\n    done\n    echo \"$sum $prod\"\n}\n\n### Ruby version\n\ndef sum_product(numbers)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "rb",
    "prompt": "def select_words(s, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    s=$1\n    n=$2\n    result=()\n    for word in $s; do\n        n_consonants=$(echo $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [[ $n_consonants -eq $n ]]; then\n            result+=(\"$word\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\n### Ruby version\n\ndef select_words(s, n)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "rb",
    "prompt": "def add_elements(arr, k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n  arr=($1)\n  k=$2\n  sum=0\n  for ((i=0; i<k; i++)); do\n    elem=${arr[$i]}\n    if (( ${#elem} <= 2 )); then\n      ((sum+=elem))\n    fi\n  done\n  echo $sum\n}\n\n### Ruby version\n\ndef add_elements(arr, k)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "rb",
    "prompt": "def eat(number, need, remaining)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [[ $2 -le $3 ]]\n  then\n    echo $(( $1 + $2 )) $(( $3 - $2 ))\n  else\n    echo $(( $1 + $3 )) 0\n  fi\n}\n\n### Ruby version\n\ndef eat(number, need, remaining)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "rb",
    "prompt": "def next_smallest(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1, candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnext_smallest() {\n    echo \"$1\" | tr ' ' '\\n' | sort -n | uniq | sed -n 2p\n}\n\n### Ruby version\n\ndef next_smallest(lst)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "rb",
    "prompt": "def choose_num(x, y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33, 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28, candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1, candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $(($2 % 2)) -eq 0 ]; then\n        echo $2\n    elif [ $1 -eq $2 ]; then\n        echo -1\n    else\n        echo $(($2 - 1))\n    fi\n}\n\n### Ruby version\n\ndef choose_num(x, y)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "rb",
    "prompt": "def prime_length(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true, candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true, candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true, candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false, candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n  l=${#1}\n  if [ $l -eq 0 ] || [ $l -eq 1 ]\n  then\n    echo \"false\"\n    return 1\n  fi\n  for (( i=2; i<$l; i++ ))\n  do\n    if [ $(( $l % $i )) -eq 0 ]\n    then\n      echo \"false\"\n      return 1\n    fi\n  done\n  echo \"true\"\n  return 0\n}\n\n### Ruby version\n\ndef prime_length(string)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "rb",
    "prompt": "def sum_to_n(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n  echo $(( $1 * ($1 + 1) / 2 ))\n}\n\n### Ruby version\n\ndef sum_to_n(n)\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "rb",
    "prompt": "def fix_spaces(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2 2 mple\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfix_spaces() {\n    new_text=\"\"\n    i=0\n    start=0\n    end=0\n    while [ $i -lt ${#1} ]; do\n        if [ \"${1:$i:1}\" == \" \" ]; then\n            end=$((end+1))\n        else\n            if [ $((end-start)) -gt 2 ]; then\n                new_text+=\"-${1:$i:1}\"\n            elif [ $((end-start)) -gt 0 ]; then\n                new_text+=$(printf '_%.0s' $(seq 1 $((end-start))))${1:$i:1}\n            else\n                new_text+=\"${1:$i:1}\"\n            fi\n            start=$((i+1))\n            end=$((i+1))\n        fi\n        i=$((i+1))\n    done\n    if [ $((end-start)) -gt 2 ]; then\n        new_text+=\"-\"\n    elif [ $((end-start)) -gt 0 ]; then\n        new_text+=\"_\"\n    fi\n    echo $new_text\n}\n\n### Ruby version\n\ndef fix_spaces(text)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "rb",
    "prompt": "def rolling_max(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n    numbers=($1)\n    running_max=${numbers[0]}\n    result=()\n\n    for n in \"${numbers[@]}\"; do\n        if [[ $running_max -lt $n ]]; then\n            running_max=$n\n        fi\n        result+=($running_max)\n    done\n    echo \"${result[@]}\"\n}\n\n### Ruby version\n\ndef rolling_max(numbers)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "rb",
    "prompt": "def words_in_sentence(sentence)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n    new_lst=()\n    for word in $1; do\n        flg=0\n        if [[ ${#word} -eq 1 ]]; then\n            flg=1\n        fi\n        for (( i=2; i<${#word}; i++ )); do\n            if [[ ${#word}%i -eq 0 ]]; then\n                flg=1\n            fi\n        done\n        if [[ $flg -eq 0 || ${#word} -eq 2 ]]; then\n            new_lst+=($word)\n        fi\n    done\n    echo \"${new_lst[@]}\"\n}\n\n### Ruby version\n\ndef words_in_sentence(sentence)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "rb",
    "prompt": "def get_closest_vowel(word)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\", candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"Above\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nget_closest_vowel() {\n    word=$1\n    vowels=\"aeiouAEIOU\"\n    for (( i=${#word}-2; i>0; i-- )); do\n        if [[ $vowels == *\"${word:$i:1}\"* ]]; then\n            if [[ $vowels != *\"${word:$((i+1)):1}\"* ]] && [[ $vowels != *\"${word:$((i-1)):1}\"* ]]; then\n                echo \"${word:$i:1}\"\n                return\n            fi\n        fi\n    done\n    echo \"\"\n}\n\n### Ruby version\n\ndef get_closest_vowel(word)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "rb",
    "prompt": "def compare(game, guess)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local game=($1)\n    local guess=($2)\n    local result=()\n    for ((i=0;i<${#game[@]};++i)); do\n        result+=($((${game[$i]}-${guess[$i]})))\n    done\n    echo ${result[@]}\n}\n\n### Ruby version\n\ndef compare(game, guess)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "rb",
    "prompt": "def remove_duplicates(numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local arr=($1)\n    local c=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort | uniq -c | awk '{if ($1 == 1) print $2}'))\n    echo \"${c[@]}\"\n}\n\n### Ruby version\n\ndef remove_duplicates(numbers)\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "rb",
    "prompt": "def same_chars(s0, s1)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_same_chars\n    candidate = method(:same_chars)\n    assert_equal(true, candidate.call(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"))\n    assert_equal(true, candidate.call(\"abcd\", \"dddddddabc\"))\n    assert_equal(true, candidate.call(\"dddddddabc\", \"abcd\"))\n    assert_equal(false, candidate.call(\"eabcd\", \"dddddddabc\"))\n    assert_equal(false, candidate.call(\"abcd\", \"dddddddabcf\"))\n    assert_equal(false, candidate.call(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"))\n    assert_equal(false, candidate.call(\"aabb\", \"aaccc\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n    if [[ $(echo $1 | grep -o . | sort | tr -d '\\n') == $(echo $2 | grep -o . | sort | tr -d '\\n') ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\n### Ruby version\n\ndef same_chars(s0, s1)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "rb",
    "prompt": "def parse_nested_parens(paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n  local IFS=' '\n  local -a arr=($1)\n  for x in \"${arr[@]}\"; do\n    if [[ -n \"$x\" ]]; then\n      depth=0\n      max_depth=0\n      for (( i=0; i<${#x}; i++ )); do\n        c=\"${x:i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n          depth=$((depth+1))\n          max_depth=$((depth>max_depth?depth:max_depth))\n        else\n          depth=$((depth-1))\n        fi\n      done\n      echo \"$max_depth\"\n    fi\n  done\n}\n\n### Ruby version\n\ndef parse_nested_parens(paren_string)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "rb",
    "prompt": "def even_odd_count(num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n    even_count=0\n    odd_count=0\n    for i in $(echo ${1#-} | grep -o .); do\n        if (( $i % 2 == 0 )); then\n            (( even_count++ ))\n        else\n            (( odd_count++ ))\n        fi\n    done\n    echo \"$even_count $odd_count\"\n}\n\n### Ruby version\n\ndef even_odd_count(num)\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "rb",
    "prompt": "def fruit_distribution(s, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n    echo $1 | tr ' ' '\\n' | grep -Eo '[0-9]+' | awk -v n=\"$2\" '{sum+=$1} END {print n-sum}'\n}\n\n### Ruby version\n\ndef fruit_distribution(s, n)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "rb",
    "prompt": "def string_xor(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_xor\n    candidate = method(:string_xor)\n    assert_equal(\"010010\", candidate.call(\"111000\", \"101010\"))\n    assert_equal(\"0\", candidate.call(\"1\", \"1\"))\n    assert_equal(\"0101\", candidate.call(\"0101\", \"0000\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    a=$1\n    b=$2\n    result=\"\"\n    for ((i=0; i<${#a}; i++)); do\n        if [[ \"${a:$i:1}\" == \"${b:$i:1}\" ]]; then\n            result+=\"0\"\n        else\n            result+=\"1\"\n        fi\n    done\n    echo $result\n}\n\n### Ruby version\n\ndef string_xor(a, b)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "rb",
    "prompt": "def strlen(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strlen\n    candidate = method(:strlen)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(1, candidate.call(\"x\"))\n    assert_equal(9, candidate.call(\"asdasnakj\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstrlen() {\n    echo ${#1}\n}\n\n### Ruby version\n\ndef strlen(string)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "rb",
    "prompt": "def string_sequence(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_sequence\n    candidate = method(:string_sequence)\n    assert_equal(\"0\", candidate.call(0))\n    assert_equal(\"0 1 2 3\", candidate.call(3))\n    assert_equal(\"0 1 2 3 4 5 6 7 8 9 10\", candidate.call(10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n    echo $(seq 0 $1)\n}\n\n### Ruby version\n\ndef string_sequence(n)\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "rb",
    "prompt": "def file_name_check(file_name)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfile_name_check() {\n    suf=(txt exe dll)\n    lst=(${1//./ })\n    if [ ${#lst[@]} -ne 2 ]; then\n        echo \"No\"\n        return\n    fi\n    if [[ ! \" ${suf[@]} \" =~ \" ${lst[1]} \" ]]; then\n        echo \"No\"\n        return\n    fi\n    if [ ${#lst[0]} -eq 0 ] || [[ ! ${lst[0]:0:1} =~ [a-zA-Z] ]]; then\n        echo \"No\"\n        return\n    fi\n    t=$(echo ${lst[0]} | grep -o '[0-9]' | wc -l)\n    if [ $t -gt 3 ]; then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"\n}\n\n### Ruby version\n\ndef file_name_check(file_name)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "rb",
    "prompt": "def can_arrange(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_can_arrange\n    candidate = method(:can_arrange)\n    assert_equal(3, candidate.call([1, 2, 4, 3, 5]))\n    assert_equal(-1, candidate.call([1, 2, 4, 5]))\n    assert_equal(2, candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))\n    assert_equal(4, candidate.call([4, 8, 5, 7, 3]))\n    assert_equal(-1, candidate.call([]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n  arr=($1)\n  ind=-1\n  i=1\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] < arr[i-1] )); then\n      ind=$i\n    fi\n    (( i++ ))\n  done\n  echo $ind\n}\n\n### Ruby version\n\ndef can_arrange(arr)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "rb",
    "prompt": "def add(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6, 8]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n    echo $1 | awk '{for(i=2;i<=NF;i+=2) if($i%2==0) sum+=$i} END {print sum}'\n}\n\n### Ruby version\n\ndef add(lst)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "rb",
    "prompt": "def intersperse(numbers, delimeter)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2, 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n    if [ -z \"$1\" ]; then\n        return\n    fi\n\n    result=()\n\n    for n in ${1% *} ; do\n        result+=($n)\n        result+=($2)\n    done\n\n    result+=(${1##* })\n\n    echo \"${result[@]}\"\n}\n\n### Ruby version\n\ndef intersperse(numbers, delimeter)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "rb",
    "prompt": "def match_parens(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_match_parens\n    candidate = method(:match_parens)\n    assert_equal(\"Yes\", candidate.call([\"()(\", \")\"]))\n    assert_equal(\"No\", candidate.call([\")\", \")\"]))\n    assert_equal(\"No\", candidate.call([\"(()(())\", \"())())\"]))\n    assert_equal(\"Yes\", candidate.call([\")())\", \"(()()(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(())))\", \"(()())((\"]))\n    assert_equal(\"No\", candidate.call([\"()\", \"())\"]))\n    assert_equal(\"Yes\", candidate.call([\"(()(\", \"()))()\"]))\n    assert_equal(\"No\", candidate.call([\"((((\", \"((())\"]))\n    assert_equal(\"No\", candidate.call([\")(()\", \"(()(\"]))\n    assert_equal(\"No\", candidate.call([\")(\", \")(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(\", \")\"]))\n    assert_equal(\"Yes\", candidate.call([\")\", \"(\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n    lst=($1)\n    S1=${lst[0]}${lst[1]}\n    S2=${lst[1]}${lst[0]}\n    if [[ $(echo $S1 | grep -o '(' | wc -l) -eq $(echo $S1 | grep -o ')' | wc -l) ]] || [[ $(echo $S2 | grep -o '(' | wc -l) -eq $(echo $S2 | grep -o ')' | wc -l) ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n### Ruby version\n\ndef match_parens(lst)\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "rb",
    "prompt": "def any_int(x, y, z)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  if [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n    if (( $1 + $2 == $3 )) || (( $1 + $3 == $2 )) || (( $2 + $3 == $1 )); then\n      echo true\n    else\n      echo false\n    fi\n  else\n    echo false\n  fi\n}\n\n### Ruby version\n\ndef any_int(x, y, z)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "rb",
    "prompt": "def find_max(words)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_max() {\n    echo $1 | tr ' ' '\\n' | sort -u | sort -rn | head -1\n}\n\n### Ruby version\n\ndef find_max(words)\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "rb",
    "prompt": "def generate_integers(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_generate_integers\n    candidate = method(:generate_integers)\n    assert_equal([2, 4, 6, 8], candidate.call(2, 10))\n    assert_equal([2, 4, 6, 8], candidate.call(10, 2))\n    assert_equal([2, 4, 6, 8], candidate.call(132, 2))\n    assert_equal([], candidate.call(17, 89))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n    lower=$(( $1 < $2 ? $1 : $2 ))\n    upper=$(( $1 > $2 ? $1 : $2 ))\n    lower=$(( $lower > 2 ? $lower : 2 ))\n    upper=$(( $upper < 8 ? $upper : 8 ))\n    for ((i=$lower; i<=$upper; i+=2)); do\n        echo $i\n    done\n}\n\n### Ruby version\n\ndef generate_integers(a, b)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "rb",
    "prompt": "def exchange(lst1, lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_exchange\n    candidate = method(:exchange)\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [1, 2, 3, 4]))\n    assert_equal(\"NO\", candidate.call([1, 2, 3, 4], [1, 5, 3, 4]))\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [2, 1, 4, 3]))\n    assert_equal(\"YES\", candidate.call([5, 7, 3], [2, 6, 4]))\n    assert_equal(\"NO\", candidate.call([5, 7, 3], [2, 6, 3]))\n    assert_equal(\"NO\", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))\n    assert_equal(\"YES\", candidate.call([100, 200], [200, 200]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    lst1=($1)\n    lst2=($2)\n    odd=0\n    even=0\n    for i in \"${lst1[@]}\"; do\n        if ((i%2 == 1)); then\n            odd=$((odd+1))\n        fi\n    done\n    for i in \"${lst2[@]}\"; do\n        if ((i%2 == 0)); then\n            even=$((even+1))\n        fi\n    done\n    if ((even >= odd)); then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi\n}\n\n### Ruby version\n\ndef exchange(lst1, lst2)\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "rb",
    "prompt": "def int_to_mini_roman(number)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n    num=(1 4 5 9 10 40 50 90 100 400 500 900 1000)\n    sym=(\"I\" \"IV\" \"V\" \"IX\" \"X\" \"XL\" \"L\" \"XC\" \"C\" \"CD\" \"D\" \"CM\" \"M\")\n    i=12\n    res=\"\"\n    number=$1\n    while [ $number -ne 0 ]; do\n        div=$((number / num[i]))\n        number=$((number % num[i]))\n        while [ $div -ne 0 ]; do\n            res+=\"${sym[i]}\"\n            div=$((div - 1))\n        done\n        i=$((i - 1))\n    done\n    echo $res | tr '[:upper:]' '[:lower:]'\n}\n\n### Ruby version\n\ndef int_to_mini_roman(number)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "rb",
    "prompt": "def is_equal_to_sum_even(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_equal_to_sum_even\n    candidate = method(:is_equal_to_sum_even)\n    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(6))\n    assert_equal(true, candidate.call(8))\n    assert_equal(true, candidate.call(10))\n    assert_equal(false, candidate.call(11))\n    assert_equal(true, candidate.call(12))\n    assert_equal(false, candidate.call(13))\n    assert_equal(true, candidate.call(16))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n    if (( $1 % 2 == 0 && $1 >= 8 )); then\n        echo true\n    else\n        echo false\n    fi\n}\n\n### Ruby version\n\ndef is_equal_to_sum_even(n)\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "rb",
    "prompt": "def decimal_to_binary(decimal)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\n### Ruby version\n\ndef decimal_to_binary(decimal)\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "rb",
    "prompt": "def sort_third(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_third\n    candidate = method(:sort_third)\n    assert_equal([2, 6, 3, 4, 8, 9, 5], candidate.call([5, 6, 3, 4, 8, 9, 2]))\n    assert_equal([2, 8, 3, 4, 6, 9, 5], candidate.call([5, 8, 3, 4, 6, 9, 2]))\n    assert_equal([2, 6, 9, 4, 8, 3, 5], candidate.call([5, 6, 9, 4, 8, 3, 2]))\n    assert_equal([2, 6, 3, 4, 8, 9, 5, 1], candidate.call([5, 6, 3, 4, 8, 9, 2, 1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_third() {\n    l=($1)\n    for (( i=2; i<${#l[@]}; i+=3 )); do\n        j=$((i-2))\n        while (( j>=0 && l[j+3]<l[j] )); do\n            tmp=${l[j]}\n            l[j]=${l[j+3]}\n            l[j+3]=$tmp\n            j=$((j-3))\n        done\n    done\n    echo \"${l[@]}\"\n}\n\n### Ruby version\n\ndef sort_third(l)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "rb",
    "prompt": "def simplify(x, n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_simplify\n    candidate = method(:simplify)\n    assert_equal(true, candidate.call(\"1/5\", \"5/1\"))\n    assert_equal(false, candidate.call(\"1/6\", \"2/1\"))\n    assert_equal(true, candidate.call(\"5/1\", \"3/1\"))\n    assert_equal(false, candidate.call(\"7/10\", \"10/2\"))\n    assert_equal(true, candidate.call(\"2/10\", \"50/10\"))\n    assert_equal(true, candidate.call(\"7/2\", \"4/2\"))\n    assert_equal(true, candidate.call(\"11/6\", \"6/1\"))\n    assert_equal(false, candidate.call(\"2/3\", \"5/2\"))\n    assert_equal(false, candidate.call(\"5/2\", \"3/5\"))\n    assert_equal(true, candidate.call(\"2/4\", \"8/4\"))\n    assert_equal(true, candidate.call(\"2/4\", \"4/2\"))\n    assert_equal(true, candidate.call(\"1/5\", \"5/1\"))\n    assert_equal(false, candidate.call(\"1/5\", \"1/5\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n    IFS=\"/\" read -ra x <<< \"$1\"\n    IFS=\"/\" read -ra n <<< \"$2\"\n    numerator=$(( ${x[0]} * ${n[0]} ))\n    denom=$(( ${x[1]} * ${n[1]} ))\n    if (( $numerator % $denom == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Ruby version\n\ndef simplify(x, n)\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "rb",
    "prompt": "def solve(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsolve() {\n    flg=0\n    idx=0\n    new_str=($1)\n    for i in $1; do\n        if [[ $i =~ [a-zA-Z] ]]; then\n            new_str[$idx]=$(echo $i | tr '[:upper:][:lower:]' '[:lower:][:upper:]')\n            flg=1\n        fi\n        ((idx++))\n    done\n    s=\"\"\n    for i in ${new_str[@]}; do\n        s+=$i\n    done\n    if [[ $flg -eq 0 ]]; then\n        echo $s | rev\n    else\n        echo $s\n    fi\n}\n\n### Ruby version\n\ndef solve(s)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "rb",
    "prompt": "def right_angle_triangle(a, b, c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n    if [[ $(($1*$1)) -eq $(($2*$2+$3*$3)) || $(($2*$2)) -eq $(($1*$1+$3*$3)) || $(($3*$3)) -eq $(($1*$1+$2*$2)) ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Ruby version\n\ndef right_angle_triangle(a, b, c)\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "rb",
    "prompt": "def compare_one(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare_one\n    candidate = method(:compare_one)\n    assert_equal(2, candidate.call(1, 2))\n    assert_equal(2.5, candidate.call(1, 2.5))\n    assert_equal(3, candidate.call(2, 3))\n    assert_equal(6, candidate.call(5, 6))\n    assert_equal(\"2,3\", candidate.call(1, \"2,3\"))\n    assert_equal(\"6\", candidate.call(\"5,1\", \"6\"))\n    assert_equal(\"2\", candidate.call(\"1\", \"2\"))\n    assert_equal(nil, candidate.call(\"1\", 1))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    local a=$1\n    local b=$2\n    if [[ $a == *,* ]]; then\n        a=${a/,/.}\n    fi\n    if [[ $b == *,* ]]; then\n        b=${b/,/.}\n    fi\n    if (( $(echo \"$a > $b\" | bc -l) )); then\n        echo $a\n    elif (( $(echo \"$a < $b\" | bc -l) )); then\n        echo $b\n    else\n        echo \"None\"\n    fi\n}\n\n### Ruby version\n\ndef compare_one(a, b)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "rb",
    "prompt": "def below_zero(operations)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_zero\n    candidate = method(:below_zero)\n    assert_equal(false, candidate.call([]))\n    assert_equal(false, candidate.call([1, 2, -3, 1, 2, -3]))\n    assert_equal(true, candidate.call([1, 2, -4, 5, 6]))\n    assert_equal(false, candidate.call([1, -1, 2, -2, 5, -5, 4, -4]))\n    assert_equal(true, candidate.call([1, -1, 2, -2, 5, -5, 4, -5]))\n    assert_equal(true, candidate.call([1, -2, 2, -2, 5, -5, 4, -4]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n    balance=0\n    for op in $1; do\n        ((balance+=op))\n        if [[ $balance -lt 0 ]]; then\n            echo true\n            return 0\n        fi\n    done\n    echo false\n}\n\n### Ruby version\n\ndef below_zero(operations)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "rb",
    "prompt": "def greatest_common_divisor(a, b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n    a=$1\n    b=$2\n    while [[ $b -ne 0 ]]; do\n        tmp=$b\n        b=$((a%b))\n        a=$tmp\n    done\n    echo $a\n}\n\n### Ruby version\n\ndef greatest_common_divisor(a, b)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "rb",
    "prompt": "def f(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal([1, 2, 6, 24, 15], candidate.call(5))\n    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))\n    assert_equal([1], candidate.call(1))\n    assert_equal([1, 2, 6], candidate.call(3))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n    ret=()\n    for ((i=1;i<=$1;i++)); do\n        if ((i%2==0)); then\n            x=1\n            for ((j=1;j<=i;j++)); do ((x*=j)); done\n            ret+=($x)\n        else\n            x=0\n            for ((j=1;j<=i;j++)); do ((x+=j)); done\n            ret+=($x)\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\n### Ruby version\n\ndef f(n)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "rb",
    "prompt": "def monotonic(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmonotonic() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local sorted_arr_reverse=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -nr))\n    if [[ \"${arr[*]}\" == \"${sorted_arr[*]}\" ]] || [[ \"${arr[*]}\" == \"${sorted_arr_reverse[*]}\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Ruby version\n\ndef monotonic(l)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "rb",
    "prompt": "def by_length(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5, 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"], candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"], candidate.call([9, 4, 8]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n    dic=( One Two Three Four Five Six Seven Eight Nine )\n    sorted_arr=($(echo \"$1\" | tr ' ' '\\n' | sort -nr))\n    new_arr=()\n    for var in \"${sorted_arr[@]}\"; do\n        if [[ $var -ge 1 && $var -le 9 ]]; then\n            new_arr+=(\"${dic[var-1]}\")\n        fi\n    done\n    echo \"${new_arr[@]}\"\n}\n\n### Ruby version\n\ndef by_length(arr)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "rb",
    "prompt": "def remove_vowels(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\", candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\", candidate.call(\"ybcd\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n  echo $1 | tr -d 'aeiouAEIOU'\n}\n\n### Ruby version\n\ndef remove_vowels(text)\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "rb",
    "prompt": "def check_if_last_char_is_a_letter(txt)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_if_last_char_is_a_letter\n    candidate = method(:check_if_last_char_is_a_letter)\n    assert_equal(false, candidate.call(\"apple\"))\n    assert_equal(true, candidate.call(\"apple pi e\"))\n    assert_equal(false, candidate.call(\"eeeee\"))\n    assert_equal(true, candidate.call(\"A\"))\n    assert_equal(false, candidate.call(\"Pumpkin pie \"))\n    assert_equal(false, candidate.call(\"Pumpkin pie 1\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"eeeee e \"))\n    assert_equal(false, candidate.call(\"apple pie\"))\n    assert_equal(false, candidate.call(\"apple pi e \"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  check=$(echo $1 | awk '{print $NF}')\n  if [[ ${#check} -eq 1 && $(printf '%d' \"'${check,,}\") -ge 97 && $(printf '%d' \"'${check,,}\") -le 122 ]]; then\n    echo true\n  else\n    echo false\n  fi\n}\n\n### Ruby version\n\ndef check_if_last_char_is_a_letter(txt)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "rb",
    "prompt": "def iscube(a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_iscube\n    candidate = method(:iscube)\n    assert_equal(true, candidate.call(1))\n    assert_equal(false, candidate.call(2))\n    assert_equal(true, candidate.call(-1))\n    assert_equal(true, candidate.call(64))\n    assert_equal(false, candidate.call(180))\n    assert_equal(true, candidate.call(1000))\n    assert_equal(true, candidate.call(0))\n    assert_equal(false, candidate.call(1729))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n    a=$(echo $1 | tr -d '-')\n    if [ $(echo \"scale=0; $a^(1/3)\" | bc) -eq $a ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Ruby version\n\ndef iscube(a)\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "rb",
    "prompt": "def reverse_delete(s, c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_delete\n    candidate = method(:reverse_delete)\n    assert_equal([\"bcd\", false], candidate.call(\"abcde\", \"ae\"))\n    assert_equal([\"acdef\", false], candidate.call(\"abcdef\", \"b\"))\n    assert_equal([\"cdedc\", true], candidate.call(\"abcdedcba\", \"ab\"))\n    assert_equal([\"dik\", false], candidate.call(\"dwik\", \"w\"))\n    assert_equal([\"\", true], candidate.call(\"a\", \"a\"))\n    assert_equal([\"abcdedcba\", true], candidate.call(\"abcdedcba\", \"\"))\n    assert_equal([\"abcdedcba\", true], candidate.call(\"abcdedcba\", \"v\"))\n    assert_equal([\"abba\", true], candidate.call(\"vabba\", \"v\"))\n    assert_equal([\"\", true], candidate.call(\"mamma\", \"mia\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    s=$(echo $1 | tr -d $2)\n    if [ $s = $(echo $s | rev) ]; then\n        echo \"$s true\"\n    else\n        echo \"$s false\"\n    fi\n}\n\n### Ruby version\n\ndef reverse_delete(s, c)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "rb",
    "prompt": "def correct_bracketing(brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n    depth=0\n    for (( i=0; i<${#1}; i++ )); do\n        b=${1:$i:1}\n        if [[ $b == \"<\" ]]; then\n            (( depth++ ))\n        else\n            (( depth-- ))\n        fi\n        if (( depth < 0 )); then\n            echo \"false\"\n            return\n        fi\n    done\n    if (( depth == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Ruby version\n\ndef correct_bracketing(brackets)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "rb",
    "prompt": "def intersection(interval1, interval2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1, 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2, 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\", candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2, -2], [-3, -2]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    is_prime() {\n        if [ $1 -eq 1 ] || [ $1 -eq 0 ]; then\n            return 1\n        fi\n        if [ $1 -eq 2 ]; then\n            return 0\n        fi\n        for (( i=2; i<$1; i++ )); do\n            if [ $(( $1 % $i )) -eq 0 ]; then\n                return 1\n            fi\n        done\n        return 0\n    }\n\n    l=$(echo $1 | cut -d' ' -f1)\n    r=$(echo $2 | cut -d' ' -f2)\n    length=$(( $r - $l ))\n    if [ $length -gt 0 ] && is_prime $length; then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi\n}\n\n### Ruby version\n\ndef intersection(interval1, interval2)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "rb",
    "prompt": "def hex_key(num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6, candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"112233445566778899AABBCCDDEEFF00\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n    primes=\"2357BD\"\n    total=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ $primes == *\"${1:i:1}\"* ]]; then\n            (( total++ ))\n        fi\n    done\n    echo $total\n}\n\n### Ruby version\n\ndef hex_key(num)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "rb",
    "prompt": "def strange_sort_list(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local lst=$1\n    local res=()\n    local switch=true\n    while [ -n \"$lst\" ]; do\n        if $switch; then\n            res+=($(echo $lst | tr ' ' '\\n' | sort -n | head -n 1))\n        else\n            res+=($(echo $lst | tr ' ' '\\n' | sort -n | tail -n 1))\n        fi\n        lst=$(echo $lst | sed \"s/${res[-1]}//\")\n        switch=!$switch\n    done\n    echo \"${res[@]}\"\n}\n\n### Ruby version\n\ndef strange_sort_list(lst)\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "rb",
    "prompt": "def is_bored(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n    # TODO: Implement this function.\n    echo 0\n}\n\n### Ruby version\n\ndef is_bored(s)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "rb",
    "prompt": "def all_prefixes(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nall_prefixes() {\n    result=()\n    for (( i=0; i<${#1}; i++ )); do\n        result+=(${1:0:i+1})\n    done\n    echo ${result[@]}\n}\n\n### Ruby version\n\ndef all_prefixes(string)\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "rb",
    "prompt": "def how_many_times(string, substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    times=0\n    for ((i=0; i<${#1}-${#2}+1; i++)); do\n        if [[ ${1:i:${#2}} == $2 ]]; then\n            ((times++))\n        fi\n    done\n    echo $times\n}\n\n### Ruby version\n\ndef how_many_times(string, substring)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "rb",
    "prompt": "def solution(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n    echo $1 | tr ' ' '\\n' | awk '{if(NR%2==1&&$1%2==1)sum+=$1}END{print sum}'\n}\n\n### Ruby version\n\ndef solution(lst)\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "rb",
    "prompt": "def is_sorted(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sorted\n    candidate = method(:is_sorted)\n    assert_equal(true, candidate.call([5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 3, 2, 4, 5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))\n    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))\n    assert_equal(true, candidate.call([]))\n    assert_equal(true, candidate.call([1]))\n    assert_equal(false, candidate.call([3, 2, 1]))\n    assert_equal(false, candidate.call([1, 2, 2, 2, 3, 4]))\n    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))\n    assert_equal(true, candidate.call([1, 2, 2, 3, 3, 4]))\n    assert_equal(true, candidate.call([1, 2, 3, 4]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n    lst=($1)\n    declare -A count_digit\n    for i in \"${lst[@]}\"; do\n        ((count_digit[$i]++))\n    done\n    for i in \"${lst[@]}\"; do\n        if [[ ${count_digit[$i]} -gt 2 ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    for (( i=1; i<${#lst[@]}; i++ )); do\n        if [[ ${lst[i-1]} -gt ${lst[i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Ruby version\n\ndef is_sorted(lst)\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "rb",
    "prompt": "def search(lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_search\n    candidate = method(:search)\n    assert_equal(1, candidate.call([5, 5, 5, 5, 1]))\n    assert_equal(4, candidate.call([4, 1, 4, 1, 4, 4]))\n    assert_equal(-1, candidate.call([3, 3]))\n    assert_equal(8, candidate.call([8, 8, 8, 8, 8, 8, 8, 8]))\n    assert_equal(2, candidate.call([2, 3, 3, 2, 2]))\n    assert_equal(1, candidate.call([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]))\n    assert_equal(2, candidate.call([3, 2, 8, 2]))\n    assert_equal(1, candidate.call([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]))\n    assert_equal(-1, candidate.call([8, 8, 3, 6, 5, 6, 4]))\n    assert_equal(1, candidate.call([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]))\n    assert_equal(1, candidate.call([1, 9, 10, 1, 3]))\n    assert_equal(5, candidate.call([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]))\n    assert_equal(1, candidate.call([1]))\n    assert_equal(4, candidate.call([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]))\n    assert_equal(2, candidate.call([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]))\n    assert_equal(1, candidate.call([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]))\n    assert_equal(4, candidate.call([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]))\n    assert_equal(4, candidate.call([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]))\n    assert_equal(2, candidate.call([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]))\n    assert_equal(-1, candidate.call([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]))\n    assert_equal(-1, candidate.call([10]))\n    assert_equal(2, candidate.call([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]))\n    assert_equal(1, candidate.call([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]))\n    assert_equal(1, candidate.call([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]))\n    assert_equal(-1, candidate.call([3, 10, 10, 9, 2]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n    lst=($1)\n    frq=()\n    for i in ${lst[@]}; do\n        frq[$i]=$((frq[$i]+1))\n    done\n\n    ans=-1\n    for ((i=1; i<${#frq[@]}; i++)); do\n        if [[ ${frq[$i]} -ge $i ]]; then\n            ans=$i\n        fi\n    done\n\n    echo $ans\n}\n\n### Ruby version\n\ndef search(lst)\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "rb",
    "prompt": "def pluck(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npluck() {\n    local arr=($1)\n    local evens=($(echo \"${arr[@]}\" | tr ' ' '\\n' | awk '{if($1%2==0) print $1}' | sort -n))\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"\"\n    else\n        echo \"${evens[0]} $(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -n \"${evens[0]}\" | cut -d':' -f1 | head -n1)\"\n    fi\n}\n\n### Ruby version\n\ndef pluck(arr)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "rb",
    "prompt": "def pairs_sum_to_zero(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n    l=($1)\n    for ((i=0; i<${#l[@]}; i++)); do\n        for ((j=i+1; j<${#l[@]}; j++)); do\n            if ((l[i] + l[j] == 0)); then\n                echo true\n                return\n            fi\n        done\n    done\n    echo false\n}\n\n### Ruby version\n\ndef pairs_sum_to_zero(l)\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "rb",
    "prompt": "def make_palindrome(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\", candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nmake_palindrome() {\n    local string=$1\n    local beginning_of_suffix=0\n\n    while [[ ${string:$beginning_of_suffix} != $(echo ${string:$beginning_of_suffix} | rev) ]]; do\n        ((beginning_of_suffix++))\n    done\n\n    echo \"$string$(echo ${string:0:$beginning_of_suffix} | rev)\"\n}\n\n### Ruby version\n\ndef make_palindrome(string)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "rb",
    "prompt": "def starts_one_ends(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_starts_one_ends\n    candidate = method(:starts_one_ends)\n    assert_equal(1, candidate.call(1))\n    assert_equal(18, candidate.call(2))\n    assert_equal(180, candidate.call(3))\n    assert_equal(1800, candidate.call(4))\n    assert_equal(18000, candidate.call(5))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n    if [[ $1 -eq 1 ]]; then echo 1; return; fi\n    echo $(( 18 * (10 ** ($1 - 2)) ))\n}\n\n### Ruby version\n\ndef starts_one_ends(n)\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "rb",
    "prompt": "def get_positive(l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4, 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([], candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n  echo $1 | tr ' ' '\\n' | awk '$1 > 0 {print $1}'\n}\n\n### Ruby version\n\ndef get_positive(l)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "rb",
    "prompt": "def concatenate(strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_concatenate\n    candidate = method(:concatenate)\n    assert_equal(\"\", candidate.call([]))\n    assert_equal(\"xyz\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"xyzwk\", candidate.call([\"x\", \"y\", \"z\", \"w\", \"k\"]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n    echo \"$1\" | tr -d ' '\n}\n\n### Ruby version\n\ndef concatenate(strings)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "rb",
    "prompt": "def is_nested(string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_nested() {\n    string=$1\n    opening_bracket_index=()\n    closing_bracket_index=()\n    for (( i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} == \"[\" ]]; then\n            opening_bracket_index+=($i)\n        else\n            closing_bracket_index+=($i)\n        fi\n    done\n    closing_bracket_index=($(echo \"${closing_bracket_index[@]}\" | tr ' ' '\\n' | tac | tr '\\n' ' '))\n    cnt=0\n    i=0\n    l=${#closing_bracket_index[@]}\n    for idx in ${opening_bracket_index[@]}; do\n        if [[ $i -lt $l && $idx -lt ${closing_bracket_index[$i]} ]]; then\n            cnt=$((cnt+1))\n            i=$((i+1))\n        fi\n    done\n    [[ $cnt -ge 2 ]] && echo true || echo false\n}\n\n### Ruby version\n\ndef is_nested(string)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "rb",
    "prompt": "def is_palindrome(text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_palindrome\n    candidate = method(:is_palindrome)\n    assert_equal(true, candidate.call(\"\"))\n    assert_equal(true, candidate.call(\"aba\"))\n    assert_equal(true, candidate.call(\"aaaaa\"))\n    assert_equal(false, candidate.call(\"zbcd\"))\n    assert_equal(true, candidate.call(\"xywyx\"))\n    assert_equal(false, candidate.call(\"xywyz\"))\n    assert_equal(false, candidate.call(\"xywzx\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n    text=$1\n    for (( i=0; i<${#text}; i++ )); do\n        if [[ ${text:i:1} != ${text: -1 -i:1} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Ruby version\n\ndef is_palindrome(text)\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "rb",
    "prompt": "def count_nums(arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncount_nums() {\n    local arr=($1)\n    local count=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n            local digits_sum=$(echo $i | sed 's/./&+/g' | sed 's/.$//' | bc)\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Ruby version\n\ndef count_nums(arr)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "rb",
    "prompt": "def factorize(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n    n=$1\n    fact=()\n    i=2\n    while [[ $i -le $((n/2+1)) ]]; do\n        if [[ $((n%i)) -eq 0 ]]; then\n            fact+=($i)\n            n=$((n/i))\n        else\n            ((i++))\n        fi\n    done\n    if [[ $n -gt 1 ]]; then\n        fact+=($n)\n    fi\n    echo \"${fact[@]}\"\n}\n\n### Ruby version\n\ndef factorize(n)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "rb",
    "prompt": "def largest_prime_factor(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n    largest=1\n    for ((j=2; j<=$1; j++)); do\n        if (( $1 % $j == 0 )) && is_prime $j; then\n            largest=$(( $largest > $j ? $largest : $j ))\n        fi\n    done\n    echo $largest\n}\n\nis_prime() {\n    if (( $1 < 2 )); then\n        return 1\n    fi\n    for ((i=2; i<$1; i++)); do\n        if (( $1 % $i == 0 )); then\n            return 1\n        fi\n    done\n    return 0\n}\n\n### Ruby version\n\ndef largest_prime_factor(n)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "rb",
    "prompt": "def get_max_triples(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n    assert_equal(53361, candidate.call(100))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n    n=$1\n    ans=0\n    for (( i=1; i<n; i++ )); do\n        for (( j=i+1; j<n; j++ )); do\n            for (( k=j+1; k<=n; k++ )); do\n                if (( (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 )); then\n                    (( ans++ ))\n                fi\n            done\n        done\n    done\n    echo \"$ans\"\n}\n\n### Ruby version\n\ndef get_max_triples(n)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "rb",
    "prompt": "def anti_shuffle(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_anti_shuffle\n    candidate = method(:anti_shuffle)\n    assert_equal(\"Hi\", candidate.call(\"Hi\"))\n    assert_equal(\"ehllo\", candidate.call(\"hello\"))\n    assert_equal(\"bemnru\", candidate.call(\"number\"))\n    assert_equal(\"abcd\", candidate.call(\"abcd\"))\n    assert_equal(\"Hello !!!Wdlor\", candidate.call(\"Hello World!!!\"))\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\".Hi My aemn is Meirst .Rboot How aer ?ouy\", candidate.call(\"Hi. My name is Mister Robot. How are you?\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nanti_shuffle() {\n  echo \"$1\" | tr ' ' '\\n' | while read word; do\n    echo \"$word\" | grep -o . | sort | tr -d '\\n'\n    echo -n ' '\n  done | sed 's/ $//'\n}\n\n### Ruby version\n\ndef anti_shuffle(s)\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "rb",
    "prompt": "def solve(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"1\", candidate.call(1000))\n    assert_equal(\"110\", candidate.call(150))\n    assert_equal(\"1100\", candidate.call(147))\n    assert_equal(\"1001\", candidate.call(333))\n    assert_equal(\"10010\", candidate.call(963))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n    echo \"obase=2; $(echo $1 | sed 's/./&+/g; s/.$//')\" | bc\n}\n\n### Ruby version\n\ndef solve(n)\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "rb",
    "prompt": "def minPath(grid, k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minPath\n    candidate = method(:minPath)\n    assert_equal([1, 2, 1], candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\n    assert_equal([1], candidate.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n    assert_equal([1, 2, 1, 2], candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4))\n    assert_equal([1, 10, 1, 10, 1, 10, 1], candidate.call([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7))\n    assert_equal([1, 7, 1, 7, 1], candidate.call([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1], candidate.call([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6], candidate.call([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8))\n    assert_equal([1, 5, 1, 5, 1, 5, 1, 5], candidate.call([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8))\n    assert_equal([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], candidate.call([[1, 2], [3, 4]], 10))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[1, 3], [3, 2]], 10))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=($(echo \"$1\" | tr ' ' '\\n'))\n    local k=$2\n    local n=${#grid[@]}\n    local val=$((n * n + 1))\n    for (( i=0; i<$n; i++ )); do\n        for (( j=0; j<$n; j++ )); do\n            if [[ ${grid[$i]:$j:1} -eq 1 ]]; then\n                temp=()\n                if [[ $i -ne 0 ]]; then\n                    temp+=(${grid[$((i-1))]:$j:1})\n                fi\n                if [[ $j -ne 0 ]]; then\n                    temp+=(${grid[$i]:$((j-1)):1})\n                fi\n                if [[ $i -ne $((n-1)) ]]; then\n                    temp+=(${grid[$((i+1))]:$j:1})\n                fi\n                if [[ $j -ne $((n-1)) ]]; then\n                    temp+=(${grid[$i]:$((j+1)):1})\n                fi\n                val=$(echo \"${temp[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n            fi\n        done\n    done\n    ans=()\n    for (( i=0; i<$k; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            ans+=(\"1\")\n        else\n            ans+=(\"$val\")\n        fi\n    done\n    echo \"${ans[@]}\"\n}\n\n### Ruby version\n\ndef minPath(grid, k)\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "rb",
    "prompt": "def encrypt(s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\", candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"e\", candidate.call(\"a\"))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nencrypt() {\n    d='abcdefghijklmnopqrstuvwxyz'\n    out=''\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $d == *\"$c\"* ]]; then\n            out+=\"${d:(( ${d%%$c*} + 4 ) % 26 ):1}\"\n        else\n            out+=\"$c\"\n        fi\n    done\n    echo \"$out\"\n}\n\n### Ruby version\n\ndef encrypt(s)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "rb",
    "prompt": "def make_a_pile(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_a_pile\n    candidate = method(:make_a_pile)\n    assert_equal([3, 5, 7], candidate.call(3))\n    assert_equal([4, 6, 8, 10], candidate.call(4))\n    assert_equal([5, 7, 9, 11, 13], candidate.call(5))\n    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))\n    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n    n=$1\n    for (( i=0; i<$n; i++ )); do\n        (( pile[i]=n+2*i ))\n    done\n    echo \"${pile[@]}\"\n}\n\n### Ruby version\n\ndef make_a_pile(n)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "rb",
    "prompt": "def is_prime(n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_prime\n    candidate = method(:is_prime)\n    assert_equal(false, candidate.call(6))\n    assert_equal(true, candidate.call(101))\n    assert_equal(true, candidate.call(11))\n    assert_equal(true, candidate.call(13441))\n    assert_equal(true, candidate.call(61))\n    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(1))\n    assert_equal(true, candidate.call(5))\n    assert_equal(true, candidate.call(11))\n    assert_equal(true, candidate.call(17))\n    assert_equal(false, candidate.call(85))\n    assert_equal(false, candidate.call(77))\n    assert_equal(false, candidate.call(255379))\n  end\nend\n",
    "stop_tokens": [
      "\nclass",
      "\ndef",
      "\n#",
      "\nputs"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n    if [ $1 -lt 2 ]; then\n        echo \"false\"\n        return\n    fi\n    for (( k=2; k<$1; k++ )); do\n        if [ $(( $1 % $k )) -eq 0 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Ruby version\n\ndef is_prime(n)\n"
  }
]