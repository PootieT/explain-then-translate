[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n  let depth = 0;\n  for (let b of brackets) {\n    if (b === \"(\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(a : Long, h : Long) : Float = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction triangle_area(a: number, h: number): number {\n  return a * h / 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(a : Long, h : Long) : Float = {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFactorial(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction special_factorial(n: number): number {\n  let fact_i = 1;\n  let special_fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact_i *= i;\n    special_fact *= fact_i;\n  }\n  return special_fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFactorial(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong, 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l, 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  const smallest = lst.filter(x => x < 0)\n  const largest = lst.filter(x => x > 0)\n  return [smallest.length ? Math.max(...smallest) : undefined, largest.length ? Math.min(...largest) : undefined]\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def moveOneBall(arr : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 10l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](4l.toLong, 3l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long]())) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction move_one_ball(arr: number[]): boolean {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted_array = [...arr].sort((a, b) => a - b);\n  const min_value = Math.min(...arr);\n  const min_index = arr.indexOf(min_value);\n  const my_arr = [...arr.slice(min_index), ...arr.slice(0, min_index)];\n  return my_arr.every((val, idx) => val === sorted_array[idx]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def moveOneBall(arr : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digits(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction digits(n: number): number {\n  let product = 1;\n  let odd_count = 0;\n  for (const digit of String(n)) {\n    const int_digit = Number(digit);\n    if (int_digit % 2 === 1) {\n      product *= int_digit;\n      odd_count += 1;\n    }\n  }\n  return odd_count === 0 ? 0 : product;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digits(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib4(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction fib4(n: number): number {\n  const results = [0, 0, 2, 0];\n  if (n < 4) {\n    return results[n];\n  }\n\n  for (let i = 4; i <= n; i++) {\n    results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);\n    results.shift();\n  }\n\n  return results[results.length - 1];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib4(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def orderByPoints(nums : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong, 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong, 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong, 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong, -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong, -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong, 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong, 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong, -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction order_by_points(nums: number[]): number[] {\n  function digits_sum(n: number): number {\n    const neg = n < 0 ? -1 : 1;\n    n = Math.abs(n);\n    const digits = Array.from(String(n), Number);\n    digits[0] *= neg;\n    return digits.reduce((acc, cur) => acc + cur, 0);\n  }\n  return nums.sort((a, b) => digits_sum(a) - digits_sum(b));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def orderByPoints(nums : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isHappy(s : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n  }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i+1] || s[i+1] === s[i+2] || s[i] === s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isHappy(s : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def circularShift(x : Long, shift : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction circular_shift(x: number, shift: number): string {\n  const s = String(x);\n  if (shift > s.length) {\n    return s.split('').reverse().join('');\n  } else {\n    return s.slice(s.length - shift) + s.slice(0, s.length - shift);\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def circularShift(x : Long, shift : Long) : String = {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l)) == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction max_fill(grid: number[][], capacity: number): number {\n  return grid.reduce((acc, cur) => acc + Math.ceil(cur.reduce((a, b) => a + b) / capacity), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n  for (let idx = 0; idx < numbers.length; idx++) {\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        const distance = Math.abs(numbers[idx] - numbers[idx2]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const letter_grade = [];\n  for (const gpa of grades) {\n    if (gpa === 4.0) {\n      letter_grade.push('A+');\n    } else if (gpa > 3.7) {\n      letter_grade.push('A');\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-');\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+');\n    } else if (gpa > 2.7) {\n      letter_grade.push('B');\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-');\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+');\n    } else if (gpa > 1.7) {\n      letter_grade.push('C');\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-');\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+');\n    } else if (gpa > 0.7) {\n      letter_grade.push('D');\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-');\n    } else {\n      letter_grade.push('E');\n    }\n  }\n  return letter_grade;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction x_or_y(n: number, x: number, y: number): number {\n  if (n === 1) {\n    return y;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return y;\n    }\n  }\n  return x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFilter(nums : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction specialFilter(nums: number[]): number {\n  let count = 0;\n  for (const num of nums) {\n    if (num > 10) {\n      const odd_digits = new Set([1, 3, 5, 7, 9]);\n      const number_as_string = String(num);\n      if (odd_digits.has(Number(number_as_string[0])) && odd_digits.has(Number(number_as_string[number_as_string.length - 1]))) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFilter(nums : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseMusic(music_string : String) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction parse_music(music_string: string): number[] {\n    const note_map = {'o': 4, 'o|': 2, '.|': 1};\n    return music_string.split(' ').filter(x => x).map(x => note_map[x]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseMusic(music_string : String) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def splitWords(txt : String) : Either[List[String], Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction split_words(txt: string): string[]| number {\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.replace(\",\", \" \").split(\" \");\n  } else {\n    return txt.split(\"\").filter((x) => x === x.toLowerCase() && x.charCodeAt(0) % 2 === 0).length;\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def splitWords(txt : String) : Either[List[String], Long] = {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countDistinctCharacters(string : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction count_distinct_characters(string: string): number {\n  return new Set(string.toLowerCase()).size;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countDistinctCharacters(string : String) : Long = {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digitSum(s : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction digitSum(s: string): number {\n  if (s === \"\") return 0;\n  return s.split(\"\").reduce((acc, cur) => {\n    if (cur.match(/[A-Z]/)) {\n      acc += cur.charCodeAt(0);\n    }\n    return acc;\n  }, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digitSum(s : String) : Long = {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n  const result =[];\n  for (let i = 0; i < lst.length; i++) {\n    if (i %3 === 0) {\n      result.push(lst[i]**2);\n    } else if (i % 4 === 0 && i%3 !== 0) {\n      result.push(lst[i]**3);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result.reduce((a, b) => a + b, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpTo(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction count_up_to(n: number): number[] {\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    let is_prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpTo(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Float]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat, 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat, 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat))) == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n    assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) == (2l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n  let squared = 0;\n  for (let i of lst) {\n    squared += Math.ceil(i) ** 2;\n  }\n  return squared;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Float]) : Long = {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def unique(l : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction unique(l: number[]): number[] {\n  return [...new Set(l)].sort((a, b) => a - b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def unique(l : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction fib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fizzBuzz(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction fizz_buzz(n: number): number {\n  const ns = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      ns.push(i);\n    }\n  }\n  const s = ns.join('');\n  let ans = 0;\n  for (const c of s) {\n    ans += c === '7' ? 1 : 0;\n  }\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fizzBuzz(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n    let strong = extensions[0];\n    let my_val = extensions[0].replace(/[^A-Z]/g, \"\").length - extensions[0].replace(/[^a-z]/g, \"\").length;\n    for (let s of extensions) {\n        const val = s.replace(/[^A-Z]/g, \"\").length - s.replace(/[^a-z]/g, \"\").length;\n        if (val > my_val) {\n            strong = s;\n            my_val = val;\n        }\n    }\n\n    const ans = `${class_name}.${strong}`;\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  let closest_pair: [number, number] | null = null;\n  let distance: number | null = null;\n\n  for (let idx = 0; idx < numbers.length; idx++) {\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        const elem = numbers[idx];\n        const elem2 = numbers[idx2];\n        if (distance === null) {\n          distance = Math.abs(elem - elem2);\n          closest_pair = [Math.min(elem, elem2), Math.max(elem, elem2)];\n        } else {\n          const new_distance = Math.abs(elem - elem2);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(elem, elem2), Math.max(elem, elem2)];\n          }\n        }\n      }\n    }\n  }\n\n  return closest_pair as [number, number];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def validDate(date : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction valid_date(date: string): boolean {\n  try {\n    const [month, day, year] = date.split('-').map(Number);\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    if (\n      [1, 3, 5, 7, 8, 10, 12].includes(month) &&\n      (day < 1 || day > 31)\n    ) {\n      return false;\n    }\n    if ([4, 6, 9, 11].includes(month) && (day < 1 || day > 30)) {\n      return false;\n    }\n    if (month === 2 && (day < 1 || day > 29)) {\n      return false;\n    }\n  } catch {\n    return false;\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def validDate(date : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(x : Long, y : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(x : Long, y : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction triples_sum_to_zero(l: number[]): boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestDivisor(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction largest_divisor(n: number): number {\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestDivisor(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortNumbers(numbers : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sort_numbers(numbers: string): string {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').filter(x => x).sort((a, b) => value_map[a] - value_map[b]).join(' ');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortNumbers(numbers : String) : String = {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def smallestChange(arr : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong))) == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong, 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction smallest_change(arr: number[]): number {\n  let ans = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !== arr[arr.length - i - 1]) {\n      ans += 1;\n    }\n  }\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def smallestChange(arr : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction below_threshold(l: number[], t: number): boolean {\n  return l.every((e) => e < t);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong))).equals(-9l));\n    assert(prodSigns((List[Long](0l.toLong, 1l.toLong))).equals(0l));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(-10l));\n    assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(20l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(4l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(-4l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction prod_signs(arr: number[]): number | undefined {\n  if (!arr.length) return undefined;\n  const prod = arr.includes(0) ? 0 : (-1) ** arr.filter(x => x < 0).length;\n  return prod * arr.map(Math.abs).reduce((a, b) => a + b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def modp(n : Long, p : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction modp(n: number, p: number): number {\n  let ret = 1;\n  for (let i = 0; i < n; i++) {\n    ret = (2 * ret) % p;\n  }\n  return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def modp(n : Long, p : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpper(s : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction count_upper(s: string): number {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].match(/[AEIOU]/)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpper(s : String) : Long = {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def multiply(a : Long, b : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction multiply(a: number, b: number): number {\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def multiply(a : Long, b : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction unique_digits(x: number[]): number[] {\n  const odd_digit_elements: number[] = [];\n  for (const i of x) {\n    if (String(i).split(\"\").every((c) => Number(c) % 2 === 1)) {\n      odd_digit_elements.push(i);\n    }\n  }\n  return odd_digit_elements.sort((a, b) => a - b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction will_it_fly(q: number[], w: number): boolean {\n  if (q.reduce((a, b) => a + b, 0) > w) {\n    return false;\n  }\n\n  let i = 0;\n  let j = q.length - 1;\n  while (i < j) {\n    if (q[i] !== q[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isMultiplyPrime(a : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_multiply_prime(a: number): boolean {\n  function is_prime(n: number): boolean {\n    for (let j = 2; j < n; j++) {\n      if (n % j === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!is_prime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!is_prime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!is_prime(k)) continue;\n        if (i * j * k === a) return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong, -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction maximum(arr: number[], k: number): number[] {\n  if (k === 0) {\n    return [];\n  }\n  arr.sort((a, b) => a - b);\n  const ans = arr.slice(-k);\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def separateParenGroups(paren_string : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction separate_paren_groups(paren_string: string): string[] {\n  const result = [];\n  const current_string = [];\n  let current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c === '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c === ')') {\n      current_depth -= 1;\n      current_string.push(c);\n\n      if (current_depth === 0) {\n        result.push(current_string.join(''));\n        current_string.length = 0;\n      }\n    }\n  }\n\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def separateParenGroups(paren_string : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterIntegers(values : List[Any]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction filter_integers(values: any[]): number[] {\n    return values.filter((x) => Number.isInteger(x));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterIntegers(values : List[Any]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def skjkasdkd(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction skjkasdkd(lst: number[]): number {\n  function isPrime(n: number): boolean {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let maxx = 0;\n  for (const num of lst) {\n    if (num > maxx && isPrime(num)) {\n      maxx = num;\n    }\n  }\n\n  return maxx === 0 ? 0 : maxx.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def skjkasdkd(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\", \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  const l1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const l2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return l1 <= l2 ? lst1 : lst2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringToMd5(text : String) : Option[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction string_to_md5(text: string): string | undefined {\n  const crypto = require('crypto');\n  return text ? crypto.createHash('md5').update(text).digest('hex') : undefined;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringToMd5(text : String) : Option[String] = {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def carRaceCollision(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction car_race_collision(n: number): number {\n    return n**2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def carRaceCollision(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return x === 1;\n  }\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def encode(message : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction encode(message: string): string {\n  const vowels = \"aeiouAEIOU\";\n  const vowelsReplace = Object.fromEntries([...vowels].map(i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]));\n  message = message.split('').map(i => i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase()).join('');\n  return message.split('').map(i => vowelsReplace[i] || i).join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def encode(message : String) : String = {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def incrList(l : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong, 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction incr_list(l: number[]): number[] {\n  return l.map(e => e + 1);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def incrList(l : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def flipCase(string : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction flip_case(string: string): string {\n  return string.replace(/./g, (c) => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase());\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def flipCase(string : String) : String = {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def vowelsCount(s : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction vowels_count(s: string): number {\n    const vowels = \"aeiouAEIOU\";\n    let n_vowels = s.split('').filter(c => vowels.includes(c)).length;\n    if (s.slice(-1) === 'y' || s.slice(-1) === 'Y') {\n        n_vowels += 1;\n    }\n    return n_vowels;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def vowelsCount(s : String) : Long = {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortedListSum(lst : List[String]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\", \"bbbb\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sorted_list_sum(lst: string[]): string[] {\n  lst.sort();\n  const new_lst = [];\n  for (const i of lst) {\n    if (i.length % 2 === 0) {\n      new_lst.push(i);\n    }\n  }\n  return new_lst.sort((a, b) => a.length - b.length);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortedListSum(lst : List[String]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsString(s : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction words_string(s: string): string[] {\n  if (!s) {\n    return [];\n  }\n\n  const s_list: string[] = [];\n\n  for (const letter of s) {\n    if (letter === ',') {\n      s_list.push(' ');\n    } else {\n      s_list.push(letter);\n    }\n  }\n\n  const result = s_list.join('').split(' ');\n\n  return result.filter((word) => word !== '');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsString(s : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction even_odd_palindrome(n: number): [number, number] {\n  function is_palindrome(n: number): boolean {\n    return String(n) === String(n).split(\"\").reverse().join(\"\");\n  }\n\n  let even_palindrome_count = 0;\n  let odd_palindrome_count = 0;\n\n  for (let i = 1; i < n + 1; i++) {\n    if (i % 2 === 1 && is_palindrome(i)) {\n      odd_palindrome_count += 1;\n    } else if (i % 2 === 0 && is_palindrome(i)) {\n      even_palindrome_count += 1;\n    }\n  }\n  return [even_palindrome_count, odd_palindrome_count];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction triangle_area(a: number, b: number, c: number): number {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = (s * (s - a) * (s - b) * (s - c)) ** 0.5;\n  return Number(area.toFixed(2));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]())) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  } else {\n    let state = 'start';\n    for (const key in dict) {\n      if (typeof key !== 'string') {\n        state = 'mixed';\n        break;\n      }\n      if (state === 'start') {\n        if (key.toUpperCase() === key) {\n          state = 'upper';\n        } else if (key.toLowerCase() === key) {\n          state = 'lower';\n        } else {\n          break;\n        }\n      } else if ((state === 'upper' && key.toUpperCase() !== key) || (state === 'lower' && key.toLowerCase() !== key)) {\n        state = 'mixed';\n        break;\n      } else {\n        continue;\n      }\n    }\n    return state === 'upper' || state === 'lower';\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tri(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction tri(n: number): number[] {\n  if (n === 0) {\n    return [1];\n  }\n  const my_tri = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      my_tri.push(i / 2 + 1);\n    } else {\n      my_tri.push(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2);\n    }\n  }\n  return my_tri;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tri(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def median(l : List[Long]) : Float = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction median(l: number[]): number {\n  l.sort((a, b) => a - b);\n  if (l.length % 2 === 1) {\n    return l[Math.floor(l.length / 2)];\n  } else {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def median(l : List[Long]) : Float = {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def changeBase(x : Long, base : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction change_base(x: number, base: number): string {\n  let ret = \"\";\n  while (x > 0) {\n    ret = String(x % base) + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def changeBase(x : Long, base : Long) : String = {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def longest(strings : List[String]) : Option[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction longest(strings: string[]): string | undefined {\n  if (!strings) {\n    return undefined;\n  }\n\n  const maxlen = Math.max(...strings.map((s) => s.length));\n  for (const s of strings) {\n    if (s.length === maxlen) {\n      return s;\n    }\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def longest(strings : List[String]) : Option[String] = {\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortArray(arr : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong, -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong, 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const countBits = (n: number) => n.toString(2).match(/1/g)?.length ?? 0;\n    return countBits(a) - countBits(b) || a - b;\n  });\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortArray(arr : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction common(l1: number[], l2: number[]): number[] {\n  const ret = new Set<number>()\n  for (const e1 of l1) {\n    for (const e2 of l2) {\n      if (e1 === e2) {\n        ret.add(e1)\n      }\n    }\n  }\n  return Array.from(ret).sort()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction cycpattern_check(a: string, b: string): boolean {\n  const l = b.length;\n  const pat = b + b;\n  for (let i = 0; i <= a.length - l; i++) {\n    for (let j = 0; j <= l; j++) {\n      if (a.slice(i, i + l) === pat.slice(j, j + l)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minSubArraySum(nums : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong))) == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong, -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong, -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong))) == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction minSubArraySum(nums: number[]): number {\n  let max_sum = 0;\n  let s = 0;\n  for (let num of nums) {\n    s += -num;\n    if (s < 0) {\n      s = 0;\n    }\n    max_sum = Math.max(s, max_sum);\n  }\n  if (max_sum === 0) {\n    max_sum = Math.max(...nums.map(i => -i));\n  }\n  const min_sum = -max_sum;\n  return min_sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minSubArraySum(nums : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortArray(array : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong, 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong, 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong, 14l.toLong, 11l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sort_array(array: number[]): number[] {\n  return array.length === 0 ? [] : array.sort((a, b) => (array[0] + array[array.length - 1]) % 2 === 0 ? b - a : a - b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortArray(array : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def histogram(test : String) : Map[String,Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction histogram(test: string): {[key: string]: number} {\n  const dict1: {[key: string]: number} = {}\n  const list1 = test.split(\" \")\n  let t = 0\n\n  for (const i of list1) {\n    if (list1.filter(x => x === i).length > t && i !== '') {\n      t = list1.filter(x => x === i).length\n    }\n  }\n  if (t > 0) {\n    for (const i of list1) {\n      if (list1.filter(x => x === i).length === t) {\n        dict1[i] = t\n      }\n    }\n  }\n  return dict1\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def histogram(test : String) : Map[String,Long] = {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getOddCollatz(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong, 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction get_odd_collatz(n: number): number[] {\n  const odd_collatz = n % 2 === 0 ? [] : [n];\n  while (n > 1) {\n    if (n % 2 === 0) {\n      n /= 2;\n    } else {\n      n = n * 3 + 1;\n    }\n\n    if (n % 2 === 1) {\n      odd_collatz.push(n);\n    }\n  }\n\n  return odd_collatz.sort((a, b) => a - b);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getOddCollatz(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def derivative(xs : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction derivative(xs: number[]): number[] {\n  return xs.map((x, i) => i * x).slice(1);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def derivative(xs : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fibfib(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fibfib(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def truncateNumber(number : Float) : Float = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction truncate_number(number: number): number {\n  return number % 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def truncateNumber(number : Float) : Float = {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxElement(l : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction max_element(l: number[]): number {\n  let m = l[0];\n  for (let e of l) {\n    if (e > m) {\n      m = e;\n    }\n  }\n  return m;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxElement(l : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def closestInteger(value : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  if (value.endsWith('.5')) {\n    return num > 0 ? Math.ceil(num) : Math.floor(num);\n  } else {\n    return Math.round(num);\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def closestInteger(value : String) : Long = {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeFib(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction prime_fib(n: number): number {\n  function is_prime(p: number): boolean {\n    if (p < 2) {\n      return false;\n    }\n    for (let k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n      if (p % k === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const f = [0, 1];\n  while (true) {\n    f.push(f[f.length - 1] + f[f.length - 2]);\n    if (is_prime(f[f.length - 1])) {\n      n -= 1;\n    }\n    if (n === 0) {\n      return f[f.length - 1];\n    }\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeFib(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sum_product(numbers: number[]): [number, number] {\n  let sum_value = 0;\n  let prod_value = 1;\n\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n\n  return [sum_value, prod_value];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def selectWords(s : String, n : Long) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction select_words(s: string, n: number): string[] {\n  const result: string[] = [];\n  for (const word of s.split(' ')) {\n    let n_consonants = 0;\n    for (const c of word) {\n      if (!['a', 'e', 'i', 'o', 'u'].includes(c.toLowerCase())) {\n        n_consonants += 1;\n      }\n    }\n    if (n_consonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def selectWords(s : String, n : Long) : List[String] = {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addElements(arr : List[Long], k : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction add_elements(arr: number[], k: number): number {\n  return arr.slice(0, k).reduce((acc, cur) => (String(cur).length <= 2 ? acc + cur : acc), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addElements(arr : List[Long], k : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong, 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong, 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong, 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong, 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong, 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong, 0l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction eat(number: number, need: number, remaining: number): number[] {\n  if(need <= remaining) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddCount(lst : List[String]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction odd_count(lst: string[]): string[] {\n  const res: string[] = [];\n  for (const arr of lst) {\n    const n = arr.split('').filter(d => Number(d) % 2 === 1).length;\n    res.push(`the number of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.`);\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddCount(lst : List[String]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction next_smallest(lst: number[]): number | undefined {\n  lst = [...new Set(lst)].sort((a, b) => a - b);\n  return lst.length < 2 ? undefined : lst[1];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l, 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()), (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long, Long]]((2l, 2l)))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction get_row(lst: number[][], x: number): [number, number][] {\n  const coords: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        coords.push([i, j]);\n      }\n    }\n  }\n  return coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n  return strings.filter(x => x.startsWith(prefix));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def chooseNum(x : Long, y : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction choose_num(x: number, y: number): number {\n  if (x > y) {\n    return -1;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x === y) {\n    return -1;\n  }\n  return y - 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def chooseNum(x : Long, y : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeLength(string : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction prime_length(string: string): boolean {\n  const l = string.length;\n  if (l === 0 || l === 1) {\n    return false;\n  }\n  for (let i = 2; i < l; i++) {\n    if (l % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeLength(string : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumToN(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sum_to_n(n: number): number {\n  return (n * (n + 1)) / 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumToN(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fixSpaces(text : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction fix_spaces(text: string): string {\n  let new_text = \"\";\n  let i = 0;\n  let start = 0, end = 0;\n  while (i < text.length) {\n    if (text[i] == \" \") {\n      end += 1;\n    } else {\n      if (end - start > 2) {\n        new_text += \"-\"+text[i];\n      } else if (end - start > 0) {\n        new_text += \"_\".repeat(end - start)+text[i];\n      } else {\n        new_text += text[i];\n      }\n      start = i+1;\n      end = i+1;\n    }\n    i+=1;\n  }\n  if (end - start > 2) {\n    new_text += \"-\";\n  } else if (end - start > 0) {\n    new_text += \"_\";\n  }\n  return new_text;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fixSpaces(text : String) : String = {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction rolling_max(numbers: number[]): number[] {\n  let running_max: number | null = null;\n  const result: number[] = [];\n\n  for (const n of numbers) {\n    if (running_max === null) {\n      running_max = n;\n    } else {\n      running_max = Math.max(running_max, n);\n    }\n\n    result.push(running_max);\n  }\n\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsInSentence(sentence : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction words_in_sentence(sentence: string): string {\n  const new_lst: string[] = [];\n  for (const word of sentence.split(' ')) {\n    let flg = 0;\n    if (word.length === 1) {\n      flg = 1;\n    }\n    for (let i = 2; i < word.length; i++) {\n      if (word.length % i === 0) {\n        flg = 1;\n      }\n    }\n    if (flg === 0 || word.length === 2) {\n      new_lst.push(word);\n    }\n  }\n  return new_lst.join(' ');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsInSentence(sentence : String) : String = {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getClosestVowel(word : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction get_closest_vowel(word: string): string {\n  if (word.length < 3) {\n    return \"\";\n  }\n\n  const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I']);\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.has(word[i])) {\n      if (!vowels.has(word[i+1]) && !vowels.has(word[i-1])) {\n        return word[i];\n      }\n    }\n  }\n  return \"\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getClosestVowel(word : String) : String = {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction compare(game: number[], guess: number[]): number[] {\n  return game.map((x, i) => Math.abs(x - guess[i]));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction remove_duplicates(numbers: number[]): number[] {\n  const c = new Map<number, number>();\n  numbers.forEach(n => c.set(n, (c.get(n) || 0) + 1));\n  return numbers.filter(n => c.get(n) <= 1);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseNestedParens(paren_string : String) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction parse_nested_parens(paren_string: string): number[] {\n  function parse_paren_group(s: string): number {\n    let depth = 0;\n    let max_depth = 0;\n    for (const c of s) {\n      if (c === '(') {\n        depth += 1;\n        max_depth = Math.max(depth, max_depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n\n  return paren_string.split(' ').filter((x) => x).map(parse_paren_group);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseNestedParens(paren_string : String) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  for (let i of Math.abs(num).toString()) {\n    if (parseInt(i)%2==0) {\n      even_count +=1;\n    } else {\n      odd_count +=1;\n    }\n  }\n  return [even_count, odd_count];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fruitDistribution(s : String, n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction fruit_distribution(s: string, n: number): number {\n  const lis = [];\n  for (const i of s.split(' ')) {\n    if (i.match(/\\d+/)) {\n      lis.push(parseInt(i));\n    }\n  }\n  return n - lis.reduce((a, b) => a + b, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fruitDistribution(s : String, n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringXor(a : String, b : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction string_xor(a: string, b: string): string {\n  const xor = (i: string, j: string) => (i === j ? '0' : '1');\n  return a.split('').map((x, idx) => xor(x, b[idx])).join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringXor(a : String, b : String) : String = {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strlen(string : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction strlen(string: string): number {\n  return string.length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strlen(string : String) : Long = {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringSequence(n : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction string_sequence(n: number): string {\n  return [...Array(n + 1).keys()].join(' ');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringSequence(n : Long) : String = {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fileNameCheck(file_name : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction file_name_check(file_name: string): string {\n  const suf = ['txt', 'exe', 'dll'];\n  const lst = file_name.split('.');\n  if (lst.length !== 2) {\n    return 'No';\n  }\n  if (!suf.includes(lst[1])) {\n    return 'No';\n  }\n  if (lst[0].length === 0 || !lst[0][0].match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n  const t = lst[0].split('').filter((x) => x.match(/\\d/)).length;\n  if (t > 3) {\n    return 'No';\n  }\n  return 'Yes';\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fileNameCheck(file_name : String) : String = {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def canArrange(arr : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) == (-1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction can_arrange(arr: number[]): number {\n  let ind=-1;\n  let i=1;\n  while (i<arr.length) {\n    if (arr[i]<arr[i-1]) {\n      ind=i;\n    }\n    i+=1;\n  }\n  return ind;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def canArrange(arr : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction add(lst: number[]): number {\n    return lst.filter((x, i) => i % 2 == 1 && x % 2 == 0).reduce((a, b) => a + b, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n  if (!numbers.length) {\n    return [];\n  }\n\n  const result: number[] = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i], delimeter);\n  }\n\n  result.push(numbers[numbers.length - 1]);\n\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def matchParens(lst : List[String]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\", \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\", \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\", \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\", \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\", \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\", \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\", \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \")(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction match_parens(lst: string[]): string {\n  function check(s: string): boolean {\n    let val = 0;\n    for (const i of s) {\n      if (i === '(') {\n        val += 1;\n      } else {\n        val -= 1;\n      }\n      if (val < 0) {\n        return false;\n      }\n    }\n    return val === 0;\n  }\n\n  const S1 = lst[0] + lst[1];\n  const S2 = lst[1] + lst[0];\n  return check(S1) || check(S2) ? 'Yes' : 'No';\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def matchParens(lst : List[String]) : String = {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"grunt\", \"prune\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n  return strings.filter(x => x.includes(substring))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findMax(words : List[String]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction find_max(words: string[]): string {\n    return words.sort((a, b) => {\n        return (new Set(b)).size - (new Set(a)).size || a.localeCompare(b);\n    })[0];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findMax(words : List[String]) : String = {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction generate_integers(a: number, b: number): number[] {\n  const lower = Math.max(2, Math.min(a, b));\n  const upper = Math.min(8, Math.max(a, b));\n\n  return Array.from({ length: upper - lower + 1 }, (_, i) => i + lower).filter((i) => i % 2 === 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong, 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](100l.toLong, 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((\"YES\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction exchange(lst1: number[], lst2: number[]): string {\n  const odd = lst1.filter((i) => i % 2 === 1).length;\n  const even = lst2.filter((i) => i % 2 === 0).length;\n  return even >= odd ? 'YES' : 'NO';\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isEqualToSumEven(n : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_equal_to_sum_even(n: number): boolean {\n  return n%2 === 0 && n >= 8;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isEqualToSumEven(n : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def decimalToBinary(decimal : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction decimal_to_binary(decimal: number): string {\n  return `db${decimal.toString(2)}db`;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def decimalToBinary(decimal : Long) : String = {\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortThird(l : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong, 1l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction sort_third(l: number[]): number[] {\n  l = [...l];\n  l.filter((_, i) => i % 3 === 0).sort().forEach((v, i) => (l[i * 3] = v));\n  return l;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortThird(l : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def simplify(x : String, n : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\")) == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction simplify(x: string, n: string): boolean {\n  const [a, b] = x.split(\"/\");\n  const [c, d] = n.split(\"/\");\n  const numerator = parseInt(a) * parseInt(c);\n  const denom = parseInt(b) * parseInt(d);\n  return numerator % denom === 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def simplify(x : String, n : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solve(s : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction solve(s: string): string {\n  let flg = 0;\n  let idx = 0;\n  const new_str = s.split('');\n  for (const i of s) {\n    if (i.match(/[a-z]/i)) {\n      new_str[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();\n      flg = 1;\n    }\n    idx += 1;\n  }\n  if (flg === 0) {\n    return new_str.reverse().join('');\n  }\n  return new_str.join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solve(s : String) : String = {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n  return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def doubleTheDifference(lst : List[Float]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat, -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat, -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat, 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat, -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction double_the_difference(lst: number[]): number {\n  return lst.filter(i => i > 0 && i%2!=0 && !/\\./.test(String(i))).reduce((a, b) => a + b**2, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def doubleTheDifference(lst : List[Float]) : Long = {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowZero(operations : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction below_zero(operations: number[]): boolean {\n  let balance = 0;\n\n  for (let op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowZero(operations : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction greatest_common_divisor(a: number, b: number): number {\n  while (b) {\n    [a, b] = [b, a % b];\n  }\n  return a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction f(n: number): number[] {\n  const ret: number[] = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let x = 1\n      for (let j = 1; j <= i; j++) x *= j\n      ret.push(x)\n    } else {\n      let x = 0\n      for (let j = 1; j <= i; j++) x += j\n      ret.push(x)\n    }\n  }\n  return ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def monotonic(l : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction monotonic(l: number[]): boolean {\n  return l.every((_, i) => i === 0 || l[i] >= l[i - 1]) || l.every((_, i) => i === 0 || l[i] <= l[i - 1]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def monotonic(l : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def byLength(arr : List[Long]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction by_length(arr: number[]): string[] {\n  const dic: Record<number, string> = {\n    1: 'One',\n    2: 'Two',\n    3: 'Three',\n    4: 'Four',\n    5: 'Five',\n    6: 'Six',\n    7: 'Seven',\n    8: 'Eight',\n    9: 'Nine',\n  };\n  const sorted_arr = arr.sort((a, b) => b - a);\n  const new_arr: string[] = [];\n  for (const var_ of sorted_arr) {\n    if (dic[var_]) {\n      new_arr.push(dic[var_]);\n    }\n  }\n  return new_arr;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def byLength(arr : List[Long]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeVowels(text : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction remove_vowels(text: string): string {\n  return text.split('').filter(s => !['a', 'e', 'i', 'o', 'u'].includes(s.toLowerCase())).join('')\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeVowels(text : String) : String = {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n  const check = txt.split(' ').pop();\n  return check.length === 1 && /[a-z]/i.test(check);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def iscube(a : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction iscube(a: number): boolean {\n  a = Math.abs(a);\n  return Math.round(Math.pow(a, 1/3)) ** 3 == a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def iscube(a : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n  s = [...s].filter((char) => !c.includes(char)).join('');\n  return [s, s.split('').reverse().join('') === s];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction mean_absolute_deviation(numbers: number[]): number {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n  let depth = 0;\n  for (let b of brackets) {\n    if (b == \"<\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat, 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat, 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction rescale_to_unit(numbers: number[]): number[] {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n  function is_prime(num: number): boolean {\n    if (num === 1 || num === 0) {\n      return false;\n    }\n    if (num === 2) {\n      return true;\n    }\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const l = Math.max(interval1[0], interval2[0]);\n  const r = Math.min(interval1[1], interval2[1]);\n  const length = r - l;\n  if (length > 0 && is_prime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hexKey(num : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction hex_key(num: string): number {\n  const primes = new Set(['2', '3', '5', '7', 'B', 'D']);\n  let total = 0;\n  for (const c of num) {\n    if (primes.has(c)) {\n      total += 1;\n    }\n  }\n  return total;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hexKey(num : String) : Long = {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong, 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction strange_sort_list(lst: number[]): number[] {\n  const res: number[] = [];\n  let switch_ = true;\n  while (lst.length) {\n    res.push(switch_ ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res[res.length - 1]), 1);\n    switch_ = !switch_;\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isBored(S : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_bored(S: string): number {\n    const sentences = S.split(/[.?!]\\s*/)\n    return sentences.filter(sentence => sentence.startsWith('I ')).length\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isBored(S : String) : Long = {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def allPrefixes(string : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction all_prefixes(string: string): string[] {\n  const result = [];\n\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def allPrefixes(string : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def howManyTimes(string : String, substring : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction how_many_times(string: string, substring: string): number {\n  let times = 0;\n\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.slice(i, i + substring.length) === substring) {\n      times += 1;\n    }\n  }\n\n  return times;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def howManyTimes(string : String, substring : String) : Long = {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solution(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong, 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong, 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong, 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction solution(lst: number[]): number {\n  return lst.filter((x, idx) => idx%2==0 && x%2==1).reduce((a, b) => a+b, 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solution(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSorted(lst : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_sorted(lst: number[]): boolean {\n  const count_digit = lst.reduce((acc, cur) => {\n    acc[cur] = (acc[cur] || 0) + 1;\n    return acc;\n  }, {});\n  if (lst.some((i) => count_digit[i] > 2)) {\n    return false;\n  }\n  if (lst.slice(1).every((x, i) => x >= lst[i])) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSorted(lst : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def search(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong, 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong, 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong, 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong, 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong, 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong, 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong, 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong))) == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong, 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong))) == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong, 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong))) == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction search(lst: number[]): number {\n  const frq = Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst) {\n    frq[i] += 1;\n  }\n\n  let ans = -1;\n  for (let i = 1; i < frq.length; i++) {\n    if (frq[i] >= i) {\n      ans = i;\n    }\n  }\n\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def search(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pluck(arr : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong, 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong, 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction pluck(arr: number[]): number[] {\n  if(arr.length == 0) return []\n  let evens = arr.filter(x => x%2 == 0)\n  if(evens.length == 0) return []\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))]\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pluck(arr : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def makePalindrome(string : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction make_palindrome(string: string): string {\n  if (!string) {\n    return '';\n  }\n\n  let beginning_of_suffix = 0;\n\n  while (string.slice(beginning_of_suffix) !== string.slice(beginning_of_suffix).split('').reverse().join('')) {\n    beginning_of_suffix += 1;\n  }\n\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def makePalindrome(string : String) : String = {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def startsOneEnds(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction starts_one_ends(n: number): number {\n  return n === 1 ? 1 : 18 * (10 ** (n - 2));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def startsOneEnds(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getPositive(l : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction get_positive(l: number[]): number[] {\n  return l.filter(e => e > 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getPositive(l : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def concatenate(strings : List[String]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction concatenate(strings: string[]): string {\n  return strings.join('');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def concatenate(strings : List[String]) : String = {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isNested(string : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_nested(string: string): boolean {\n  const opening_bracket_index: number[] = [];\n  const closing_bracket_index: number[] = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      opening_bracket_index.push(i);\n    } else {\n      closing_bracket_index.push(i);\n    }\n  }\n  closing_bracket_index.reverse();\n  let cnt = 0;\n  let i = 0;\n  const l = closing_bracket_index.length;\n  for (const idx of opening_bracket_index) {\n    if (i < l && idx < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isNested(string : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPalindrome(text : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_palindrome(text: string): boolean {\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] !== text[text.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPalindrome(text : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countNums(arr : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction count_nums(arr: number[]): number {\n  function digits_sum(n: number): number {\n    const neg = n < 0 ? -1 : 1;\n    n = Math.abs(n);\n    const digits = Array.from(String(n), Number);\n    digits[0] *= neg;\n    return digits.reduce((acc, cur) => acc + cur, 0);\n  }\n  return arr.filter((i) => digits_sum(i) > 0).length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countNums(arr : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def factorize(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction factorize(n: number): number[] {\n  const fact: number[] = [];\n  let i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i === 0) {\n      fact.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def factorize(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestPrimeFactor(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction largest_prime_factor(n: number): number {\n  function is_prime(k: number): boolean {\n    if (k < 2) {\n      return false;\n    }\n    for (let i = 2; i < k; i++) {\n      if (k % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  let largest = 1;\n  for (let j = 2; j <= n; j++) {\n    if (n % j === 0 && is_prime(j)) {\n      largest = Math.max(largest, j);\n    }\n  }\n  return largest;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestPrimeFactor(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getMaxTriples(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction get_max_triples(n: number): number {\n    const A: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        A.push(i*i - i + 1);\n    }\n    const ans: [number, number, number][] = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = i+1; j < n; j++) {\n            for (let k = j+1; k < n; k++) {\n                if ((A[i]+A[j]+A[k])%3 === 0) {\n                    ans.push([A[i],A[j],A[k]]);\n                }\n            }\n        }\n    }\n    return ans.length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getMaxTriples(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def antiShuffle(s : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction anti_shuffle(s: string): string {\n  return s.split(' ').map(i => [...i].sort().join('')).join(' ')\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def antiShuffle(s : String) : String = {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solve(N : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction solve(N: number): string {\n  return (N.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0)).toString(2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solve(N : Long) : String = {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong, 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong, 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong, 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong, 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction minPath(grid: number[][], k: number): number[] {\n  const n = grid.length;\n  let val = n * n + 1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        const temp = [];\n        if (i !== 0) {\n          temp.push(grid[i - 1][j]);\n        }\n        if (j !== 0) {\n          temp.push(grid[i][j - 1]);\n        }\n        if (i !== n - 1) {\n          temp.push(grid[i + 1][j]);\n        }\n        if (j !== n - 1) {\n          temp.push(grid[i][j + 1]);\n        }\n        val = Math.min(...temp);\n      }\n    }\n  }\n  const ans = [];\n  for (let i = 0; i < k; i++) {\n    if (i % 2 === 0) {\n      ans.push(1);\n    } else {\n      ans.push(val);\n    }\n  }\n  return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def encrypt(s : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction encrypt(s: string): string {\n  const d = 'abcdefghijklmnopqrstuvwxyz';\n  let out = '';\n  for (let c of s) {\n    if (d.includes(c)) {\n      out += d[(d.indexOf(c)+2*2) % 26];\n    } else {\n      out += c;\n    }\n  }\n  return out;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def encrypt(s : String) : String = {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def makeAPile(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction make_a_pile(n: number): number[] {\n  return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def makeAPile(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPrime(n : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this TypeScript program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### TypeScript version\n\nfunction is_prime(n: number): boolean {\n  if (n < 2) {\n    return false;\n  }\n  for (let k = 2; k < n; k++) {\n    if (n % k === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPrime(n : Long) : Boolean = {\n"
  }
]