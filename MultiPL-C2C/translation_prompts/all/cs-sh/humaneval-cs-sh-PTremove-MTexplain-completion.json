[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n        var depth = 0;\n        foreach (var b in brackets) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"3\") = \"7.5\" ]]\n    [[ $(candidate \"2\" \"2\") = \"2.0\" ]]\n    [[ $(candidate \"10\" \"8\") = \"40.0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long h) {\n        return a * h / 2.0f;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SpecialFactorial(long n) {\n        long fact_i = 1;\n        long special_fact = 1;\n        for (long i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sorted_array = arr.OrderBy(x => x).ToList();\n        var my_arr = new List<long>();\n        var min_value = arr.Min();\n        var min_index = arr.IndexOf(min_value);\n        my_arr = arr.Skip(min_index).Concat(arr.Take(min_index)).ToList();\n        for (int i = 0; i < arr.Count; i++) {\n            if (my_arr[i] != sorted_array[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digits(long n) {\n        long product = 1;\n        long odd_count = 0;\n        foreach (var digit in n.ToString()) {\n            var int_digit = int.Parse(digit.ToString());\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        return odd_count == 0 ? 0 : product;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib4(long n) {\n        var results = new List<long> { 0, 0, 2, 0 };\n        if (n < 4) {\n            return results[(int)n];\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.Add(results[^1] + results[^2] + results[^3] + results[^4]);\n            results.RemoveAt(0);\n        }\n\n        return results[^1];\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\norder_by_points() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    order_by_points \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 11 -1 -11 -12\") = \"-1 -11 1 -12 11\" ]]\n    [[ $(candidate \"1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46\") = \"0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -11 -32 43 54 -98 2 -3\") = \"-3 -32 -98 -11 1 2 43 54\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11\") = \"1 10 2 11 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"0 6 6 -76 -21 23 4\") = \"-76 -21 0 4 23 6 6\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> OrderByPoints(List<long> nums) {\n        Func<long, long> digits_sum = (long n) => {\n            long neg = 1;\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            var n_list = n.ToString().Select(x => long.Parse(x.ToString())).ToList();\n            n_list[0] = n_list[0] * neg;\n            return n_list.Sum();\n        };\n        return nums.OrderBy(digits_sum).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\norder_by_points() {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string CircularShift(long x, long shift) {\n        var s = x.ToString();\n        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n        } else {\n            return s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift);\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxFill(List<List<long>> grid, long capacity) {\n        return grid.Sum(arr => (long)Math.Ceiling(arr.Sum() / (double)capacity));\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    has_close_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.3\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.05\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\" \"0.95\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\" \"0.8\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.0\" \"0.1\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"1.0\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"0.5\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = 0; j < numbers.Count; j++) {\n                if (i != j) {\n                    float distance = Math.Abs(numbers[i] - numbers[j]);\n                    if (distance < threshold) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    x_or_y \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\" \"34\" \"12\") = \"34\" ]]\n    [[ $(candidate \"15\" \"8\" \"5\") = \"5\" ]]\n    [[ $(candidate \"3\" \"33\" \"5212\") = \"33\" ]]\n    [[ $(candidate \"1259\" \"3\" \"52\") = \"3\" ]]\n    [[ $(candidate \"7919\" \"-1\" \"12\") = \"-1\" ]]\n    [[ $(candidate \"3609\" \"1245\" \"583\") = \"583\" ]]\n    [[ $(candidate \"91\" \"56\" \"129\") = \"129\" ]]\n    [[ $(candidate \"6\" \"34\" \"1234\") = \"1234\" ]]\n    [[ $(candidate \"1\" \"2\" \"0\") = \"0\" ]]\n    [[ $(candidate \"2\" \"2\" \"0\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long XOrY(long n, long x, long y) {\n        if (n == 1) {\n            return y;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nspecialFilter() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    specialFilter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 -2 1 -5\") = \"0\" ]]\n    [[ $(candidate \"15 -73 14 -15\") = \"1\" ]]\n    [[ $(candidate \"33 -2 -3 45 21 109\") = \"2\" ]]\n    [[ $(candidate \"43 -12 93 125 121 109\") = \"4\" ]]\n    [[ $(candidate \"71 -2 -33 75 21 19\") = \"3\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Specialfilter(List<long> nums) {\n        long count = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n                int[] odd_digits = { 1, 3, 5, 7, 9 };\n                string number_as_string = num.ToString();\n                if (odd_digits.Contains(int.Parse(number_as_string[0].ToString())) && odd_digits.Contains(int.Parse(number_as_string.Last().ToString()))) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nspecialFilter() {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseMusic(string music_string) {\n        var note_map = new Dictionary<string, long> { { \"o\", 4 }, { \"o|\", 2 }, { \".|\", 1 } };\n        return music_string.Split(' ').Where(x => x != \"\").Select(x => note_map[x]).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncount_distinct_characters() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_distinct_characters() {\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nbf() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> Bf(string planet1, string planet2) {\n        var planet_names = new List<string> {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if (!planet_names.Contains(planet1) || !planet_names.Contains(planet2) || planet1 == planet2) {\n            return new List<string>();\n        }\n        var planet1_index = planet_names.IndexOf(planet1);\n        var planet2_index = planet_names.IndexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.GetRange(planet1_index + 1, planet2_index - planet1_index - 1);\n        } else {\n            return planet_names.GetRange(planet2_index + 1, planet1_index - planet2_index - 1);\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nbf() {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ndigitSum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    digitSum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abAB\") = \"131\" ]]\n    [[ $(candidate \"abcCd\") = \"67\" ]]\n    [[ $(candidate \"helloE\") = \"69\" ]]\n    [[ $(candidate \"woArBld\") = \"131\" ]]\n    [[ $(candidate \"aAaaaXa\") = \"153\" ]]\n    [[ $(candidate \" How are yOu?\") = \"151\" ]]\n    [[ $(candidate \"You arE Very Smart\") = \"327\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digitsum(string s) {\n        if (s == \"\") return 0;\n        return s.Sum(c => char.IsUpper(c) ? c : 0);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ndigitSum() {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"6\" ]]\n    [[ $(candidate \"1 4 9\") = \"14\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1 1 1 1 1 1\") = \"9\" ]]\n    [[ $(candidate \"-1 -1 -1 -1 -1 -1 -1 -1 -1\") = \"-3\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"-1 -5 2 -1 -5\") = \"-126\" ]]\n    [[ $(candidate \"-56 -99 1 0 -2\") = \"3030\" ]]\n    [[ $(candidate \"-1 0 0 0 0 0 0 0 -1\") = \"0\" ]]\n    [[ $(candidate \"-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37\") = \"-14196\" ]]\n    [[ $(candidate \"-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10\") = \"-1448\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<long> lst) {\n        var result = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result.Add(lst[i] * lst[i]);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                result.Add(lst[i] * lst[i] * lst[i]);\n            } else {\n                result.Add(lst[i]);\n            }\n        }\n        return result.Sum();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    count_up_to \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"2 3\" ]]\n    [[ $(candidate \"6\") = \"2 3 5\" ]]\n    [[ $(candidate \"7\") = \"2 3 5\" ]]\n    [[ $(candidate \"10\") = \"2 3 5 7\" ]]\n    [[ $(candidate \"0\") = \"\" ]]\n    [[ $(candidate \"22\") = \"2 3 5 7 11 13 17 19\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n    [[ $(candidate \"18\") = \"2 3 5 7 11 13 17\" ]]\n    [[ $(candidate \"47\") = \"2 3 5 7 11 13 17 19 23 29 31 37 41 43\" ]]\n    [[ $(candidate \"101\") = \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> CountUpTo(long n) {\n        var primes = new List<long>();\n        for (long i = 2; i < n; i++) {\n            bool is_prime = true;\n            for (long j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.Add(i);\n            }\n        }\n        return primes;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.0\") = \"14\" ]]\n    [[ $(candidate \"1.0 2.0 3.0\") = \"14\" ]]\n    [[ $(candidate \"1.0 3.0 5.0 7.0\") = \"84\" ]]\n    [[ $(candidate \"1.4 4.2 0.0\") = \"29\" ]]\n    [[ $(candidate \"-2.4 1.0 1.0\") = \"6\" ]]\n    [[ $(candidate \"100.0 1.0 15.0 2.0\") = \"10230\" ]]\n    [[ $(candidate \"10000.0 10000.0\") = \"200000000\" ]]\n    [[ $(candidate \"-1.4 4.6 6.3\") = \"75\" ]]\n    [[ $(candidate \"-1.4 17.9 18.9 19.9\") = \"1086\" ]]\n    [[ $(candidate \"0.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0\") = \"1\" ]]\n    [[ $(candidate \"-1.0 1.0 0.0\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<float> lst) {\n        long squared = 0;\n        foreach (float i in lst) {\n            squared += (long)Math.Pow(Math.Ceiling(i), 2);\n        }\n        return squared;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 3 5 2 3 3 9 0 123\") = \"0 2 3 5 9 123\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Unique(List<long> l) {\n        return l.Distinct().OrderBy(x => x).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return Fib(n - 1) + Fib(n - 2);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fizz_buzz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"50\") = \"0\" ]]\n    [[ $(candidate \"78\") = \"2\" ]]\n    [[ $(candidate \"79\") = \"3\" ]]\n    [[ $(candidate \"100\") = \"3\" ]]\n    [[ $(candidate \"200\") = \"6\" ]]\n    [[ $(candidate \"4000\") = \"192\" ]]\n    [[ $(candidate \"10000\") = \"639\" ]]\n    [[ $(candidate \"100000\") = \"8026\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FizzBuzz(long n) {\n        var ns = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                ns.Add(i);\n            }\n        }\n        var s = string.Join(\"\", ns.Select(x => x.ToString()));\n        return s.Count(x => x == '7');\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n        var strong = extensions[0];\n        var my_val = extensions[0].Count(x => char.IsUpper(x)) - extensions[0].Count(x => char.IsLower(x));\n        foreach (var s in extensions) {\n            var val = s.Count(x => char.IsUpper(x)) - s.Count(x => char.IsLower(x));\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n\n        return $\"{class_name}.{strong}\";\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_closest_elements() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    find_closest_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\") = \"3.9 4.0\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\") = \"5.0 5.9\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.2\") = \"2.0 2.2\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.0\") = \"2.0 2.0\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\") = \"2.2 3.1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n        Tuple<float, float> closest_pair = null;\n        float distance = float.PositiveInfinity;\n\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                float new_distance = Math.Abs(numbers[i] - numbers[j]);\n                if (new_distance < distance) {\n                    distance = new_distance;\n                    closest_pair = Tuple.Create(Math.Min(numbers[i], numbers[j]), Math.Max(numbers[i], numbers[j]));\n                }\n            }\n        }\n\n        return closest_pair;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_closest_elements() {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nvalid_date() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool ValidDate(string date) {\n        try {\n            date = date.Trim();\n            int[] parts = date.Split('-').Select(int.Parse).ToArray();\n            int month = parts[0], day = parts[1], year = parts[2];\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (new int[] {1,3,5,7,8,10,12}.Contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (new int[] {4,6,9,11}.Contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n        } catch {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvalid_date() {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1\" \"0\") = \"1\" ]]\n    [[ $(candidate \"2\" \"3\") = \"5\" ]]\n    [[ $(candidate \"5\" \"7\") = \"12\" ]]\n    [[ $(candidate \"7\" \"5\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(long x, long y) {\n        return x + y;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    triples_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 5 -1\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2 1\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate \"1 2 5 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 -5 3 9 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"1 3 5 -100\") = \"false\" ]]\n    [[ $(candidate \"100 3 5 -100\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool TriplesSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    largest_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1\" ]]\n    [[ $(candidate \"7\") = \"1\" ]]\n    [[ $(candidate \"10\") = \"5\" ]]\n    [[ $(candidate \"100\") = \"50\" ]]\n    [[ $(candidate \"49\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sort_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"three\") = \"three\" ]]\n    [[ $(candidate \"three five nine\") = \"three five nine\" ]]\n    [[ $(candidate \"five zero four seven nine eight\") = \"zero four five seven eight nine\" ]]\n    [[ $(candidate \"six five four three two one zero\") = \"zero one two three four five six\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string SortNumbers(string numbers) {\n        var value_map = new Dictionary<string, int> {\n            {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\", 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n            {\"nine\", 9}\n        };\n        return string.Join(\" \", numbers.Split(' ').Where(x => x != \"\").OrderBy(x => value_map[x]));\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    smallest_change \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 5 4 7 9 6\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 3 2 2\") = \"1\" ]]\n    [[ $(candidate \"1 4 2\") = \"1\" ]]\n    [[ $(candidate \"1 4 4 2\") = \"1\" ]]\n    [[ $(candidate \"1 2 3 2 1\") = \"0\" ]]\n    [[ $(candidate \"3 1 1 3\") = \"0\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"0 1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SmallestChange(List<long> arr) {\n        long ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    below_threshold \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\" \"100\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\" \"5\") = \"false\" ]]\n    [[ $(candidate \"1 20 4 10\" \"21\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\" \"22\") = \"true\" ]]\n    [[ $(candidate \"1 8 4 10\" \"11\") = \"true\" ]]\n    [[ $(candidate \"1 8 4 10\" \"10\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowThreshold(List<long> l, long t) {\n        return l.All(x => x < t);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nprod_signs() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n        long prod = arr.Contains(0) ? 0 : (long)Math.Pow(-1, arr.Count(x => x < 0));\n        return prod * arr.Select(x => Math.Abs(x)).Sum();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nprod_signs() {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Modp(long n, long p) {\n        long ret = 1;\n        for (long i = 0; i < n; i++) {\n            ret = (2 * ret) % p;\n        }\n        return ret;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncount_upper() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    count_upper \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aBCdEf\") = \"1\" ]]\n    [[ $(candidate \"abcdefg\") = \"0\" ]]\n    [[ $(candidate \"dBBE\") = \"0\" ]]\n    [[ $(candidate \"B\") = \"0\" ]]\n    [[ $(candidate \"U\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"EEEE\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountUpper(string s) {\n        long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i])) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_upper() {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    multiply \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"148\" \"412\") = \"16\" ]]\n    [[ $(candidate \"19\" \"28\") = \"72\" ]]\n    [[ $(candidate \"2020\" \"1851\") = \"0\" ]]\n    [[ $(candidate \"14\" \"-15\") = \"20\" ]]\n    [[ $(candidate \"76\" \"67\") = \"42\" ]]\n    [[ $(candidate \"17\" \"27\") = \"49\" ]]\n    [[ $(candidate \"0\" \"1\") = \"0\" ]]\n    [[ $(candidate \"0\" \"0\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Multiply(long a, long b) {\n        return Math.Abs(a % 10) * Math.Abs(b % 10);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> UniqueDigits(List<long> x) {\n        List<long> odd_digit_elements = new List<long>();\n        foreach (long i in x) {\n            if (i.ToString().All(c => c % 2 == 1)) {\n                odd_digit_elements.Add(i);\n            }\n        }\n        return odd_digit_elements.OrderBy(i => i).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool WillItFly(List<long> q, long w) {\n        if (q.Sum() > w) {\n            return false;\n        }\n\n        int i = 0, j = q.Count - 1;\n        while (i < j) {\n            if (q[i] != q[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_multiply_prime() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_multiply_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"false\" ]]\n    [[ $(candidate \"30\") = \"true\" ]]\n    [[ $(candidate \"8\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"125\") = \"true\" ]]\n    [[ $(candidate \"105\") = \"true\" ]]\n    [[ $(candidate \"126\") = \"false\" ]]\n    [[ $(candidate \"729\") = \"false\" ]]\n    [[ $(candidate \"891\") = \"false\" ]]\n    [[ $(candidate \"1001\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsMultiplyPrime(long a) {\n        bool IsPrime(long n) {\n            for (long j = 2; j < n; j++) {\n                if (n % j == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        for (long i = 2; i <= 100; i++) {\n            if (!IsPrime(i)) continue;\n            for (long j = 2; j <= 100; j++) {\n                if (!IsPrime(j)) continue;\n                for (long k = 2; k <= 100; k++) {\n                    if (!IsPrime(k)) continue;\n                    if (i * j * k == a) return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_multiply_prime() {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return new List<long>();\n        }\n        arr.Sort();\n        return arr.Skip(arr.Count - (int)k).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    separate_paren_groups \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"(()()) ((())) () ((())()())\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"() (()) ((())) (((())))\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"(()(())((())))\" ]]\n    [[ $(candidate \"( ) (( )) (( )( ))\") = \"() (()) (()())\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SeparateParenGroups(string paren_string) {\n        var result = new List<string>();\n        var current_string = new List<char>();\n        var current_depth = 0;\n\n        foreach (var c in paren_string) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.Add(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.Add(c);\n\n                if (current_depth == 0) {\n                    result.Add(new string(current_string.ToArray()));\n                    current_string.Clear();\n                }\n            }\n        }\n\n        return result;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfilter_integers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    filter_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"4   23.2 9 adasd\") = \"4 9\" ]]\n    [[ $(candidate \"3 c 3 3 a b\") = \"3 3 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> FilterIntegers(List<object> values) {\n        return values.OfType<long>().ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfilter_integers() {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nskjkasdkd() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    skjkasdkd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\") = \"10\" ]]\n    [[ $(candidate \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\") = \"25\" ]]\n    [[ $(candidate \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\") = \"13\" ]]\n    [[ $(candidate \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\") = \"11\" ]]\n    [[ $(candidate \"0 81 12 3 1 21\") = \"3\" ]]\n    [[ $(candidate \"0 8 1 2 1 7\") = \"7\" ]]\n    [[ $(candidate \"8191\") = \"19\" ]]\n    [[ $(candidate \"8191 123456 127 7\") = \"19\" ]]\n    [[ $(candidate \"127 97 8192\") = \"10\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Skjkasdkd(List<long> lst) {\n        Func<long, bool> isPrime = (long n) => {\n            for (long i = 2; i <= Math.Sqrt(n); i++) {\n                if (n % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        long maxx = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] > maxx && isPrime(lst[i])) {\n                maxx = lst[i];\n            }\n        }\n\n        return maxx.ToString().Select(x => long.Parse(x.ToString())).Sum();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nskjkasdkd() {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n        var l1 = lst1.Sum(x => x.Length);\n        var l2 = lst2.Sum(x => x.Length);\n        return l1 <= l2 ? lst1 : lst2;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CarRaceCollision(long n) {\n        return n*n;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSimplePower(long x, long n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        long power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nencode() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n    [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\") = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\") = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var vowels_replace = vowels.ToDictionary(x => x, x => (char)(x + 2));\n        message = new string(message.Select(x => char.IsLetter(x) ? (char)(x ^ 32) : x).ToArray());\n        return new string(message.Select(x => vowels_replace.ContainsKey(x) ? vowels_replace[x] : x).ToArray());\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nencode() {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    incr_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"3 2 1\") = \"4 3 2\" ]]\n    [[ $(candidate \"5 2 5 2 3 3 9 0 123\") = \"6 3 6 3 4 4 10 1 124\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> IncrList(List<long> l) {\n        return l.Select(e => e + 1).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nflip_case() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    flip_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hello\\!\") = \"hELLO\\!\" ]]\n    [[ $(candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FlipCase(string str) {\n        return new string(str.Select(x => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)).ToArray());\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nflip_case() {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    vowels_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"2\" ]]\n    [[ $(candidate \"Alone\") = \"3\" ]]\n    [[ $(candidate \"key\") = \"2\" ]]\n    [[ $(candidate \"bye\") = \"1\" ]]\n    [[ $(candidate \"keY\") = \"2\" ]]\n    [[ $(candidate \"bYe\") = \"1\" ]]\n    [[ $(candidate \"ACEDY\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long VowelsCount(string s) {\n        var vowels = \"aeiouAEIOU\";\n        var n_vowels = s.Count(c => vowels.Contains(c));\n        if (s.Last() == 'y' || s.Last() == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    even_odd_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"8 13\" ]]\n    [[ $(candidate \"12\") = \"4 6\" ]]\n    [[ $(candidate \"3\") = \"1 2\" ]]\n    [[ $(candidate \"63\") = \"6 8\" ]]\n    [[ $(candidate \"25\") = \"5 6\" ]]\n    [[ $(candidate \"19\") = \"4 6\" ]]\n    [[ $(candidate \"9\") = \"4 5\" ]]\n    [[ $(candidate \"1\") = \"0 1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        bool IsPalindrome(long x) {\n            return x.ToString() == new string(x.ToString().Reverse().ToArray());\n        }\n\n        long evenPalindromeCount = 0;\n        long oddPalindromeCount = 0;\n\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 1 && IsPalindrome(i)) {\n                oddPalindromeCount++;\n            } else if (i % 2 == 0 && IsPalindrome(i)) {\n                evenPalindromeCount++;\n            }\n        }\n\n        return Tuple.Create(evenPalindromeCount, oddPalindromeCount);\n    }\n\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"6.0\" ]]\n    [[ $(candidate \"1\" \"2\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"4\" \"8\" \"5\") = \"8.18\" ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"1.73\" ]]\n    [[ $(candidate \"1\" \"2\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"16.25\" ]]\n    [[ $(candidate \"2\" \"6\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"0.43\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        var s = (a + b + c) / 2f;\n        var area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        area = Math.Round(area, 2);\n        return (float)area;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n        if (dict.Count == 0) {\n            return false;\n        } else {\n            string state = \"start\";\n            foreach (string key in dict.Keys) {\n                if (!key.GetType().Equals(typeof(string))) {\n                    state = \"mixed\";\n                    break;\n                } else if (state == \"start\") {\n                    if (key.All(char.IsUpper)) {\n                        state = \"upper\";\n                    } else if (key.All(char.IsLower)) {\n                        state = \"lower\";\n                    } else {\n                        break;\n                    }\n                } else if ((state == \"upper\" && !key.All(char.IsUpper)) || (state == \"lower\" && !key.All(char.IsLower))) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return state == \"upper\" || state == \"lower\";\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Tri(long n) {\n        if (n == 0) {\n            return new List<long> { 1 };\n        }\n        var my_tri = new List<long> { 1, 3 };\n        for (long i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.Add(i / 2 + 1);\n            } else {\n                my_tri.Add(my_tri[(int)i - 1] + my_tri[(int)i - 2] + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count % 2 == 1) {\n            return l[l.Count / 2];\n        } else {\n            return (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    change_base \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8\" \"3\") = \"22\" ]]\n    [[ $(candidate \"9\" \"3\") = \"100\" ]]\n    [[ $(candidate \"234\" \"2\") = \"11101010\" ]]\n    [[ $(candidate \"16\" \"2\") = \"10000\" ]]\n    [[ $(candidate \"8\" \"2\") = \"1000\" ]]\n    [[ $(candidate \"7\" \"2\") = \"111\" ]]\n    [[ $(candidate \"2\" \"3\") = \"2\" ]]\n    [[ $(candidate \"3\" \"4\") = \"3\" ]]\n    [[ $(candidate \"4\" \"5\") = \"4\" ]]\n    [[ $(candidate \"5\" \"6\") = \"5\" ]]\n    [[ $(candidate \"6\" \"7\") = \"6\" ]]\n    [[ $(candidate \"7\" \"8\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string ChangeBase(long x, long numBase) {\n        var ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString() + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    common \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\") = \"1 5 653\" ]]\n    [[ $(candidate \"5 3 2 8\" \"3 2\") = \"2 3\" ]]\n    [[ $(candidate \"4 3 2 8\" \"3 2 4\") = \"2 3 4\" ]]\n    [[ $(candidate \"4 3 2 8\" \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Common(List<long> l1, List<long> l2) {\n        var ret = new HashSet<long>();\n        foreach (var e1 in l1) {\n            foreach (var e2 in l2) {\n                if (e1 == e2) {\n                    ret.Add(e1);\n                }\n            }\n        }\n        return ret.OrderBy(x => x).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    cycpattern_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"xyzw\" \"xyw\") = \"false\" ]]\n    [[ $(candidate \"yello\" \"ell\") = \"true\" ]]\n    [[ $(candidate \"whattup\" \"ptut\") = \"false\" ]]\n    [[ $(candidate \"efef\" \"fee\") = \"true\" ]]\n    [[ $(candidate \"abab\" \"aabb\") = \"false\" ]]\n    [[ $(candidate \"winemtt\" \"tinem\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CycpatternCheck(string a, string b) {\n        var l = b.Length;\n        var pat = b + b;\n        for (int i = 0; i <= a.Length - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.Substring(i, l) == pat.Substring(j, l)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    minSubArraySum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 4 1 2 4\") = \"1\" ]]\n    [[ $(candidate \"-1 -2 -3\") = \"-6\" ]]\n    [[ $(candidate \"-1 -2 -3 2 -10\") = \"-14\" ]]\n    [[ $(candidate \"-9999999999999999\") = \"-9999999999999999\" ]]\n    [[ $(candidate \"0 10 20 1000000\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"100 -1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"10 11 13 8 3 4\") = \"3\" ]]\n    [[ $(candidate \"100 -33 32 -1 0 -2\") = \"-33\" ]]\n    [[ $(candidate \"-10\") = \"-10\" ]]\n    [[ $(candidate \"7\") = \"7\" ]]\n    [[ $(candidate \"1 -1\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Minsubarraysum(List<long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        foreach (long num in nums) {\n            s += -num;\n            if (s < 0) {\n                s = 0;\n            }\n            max_sum = Math.Max(s, max_sum);\n        }\n        if (max_sum == 0) {\n            max_sum = nums.Min() * -1;\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortArray(List<long> array) {\n        return array.Count == 0 ? new List<long>() : array.OrderBy(x => (array[0] + array[array.Count - 1]) % 2 == 0 ? -x : x).ToList();\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_odd_collatz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"14\") = \"1 5 7 11 13 17\" ]]\n    [[ $(candidate \"5\") = \"1 5\" ]]\n    [[ $(candidate \"12\") = \"1 3 5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetOddCollatz(long n) {\n        var odd_collatz = new List<long>();\n        if (n % 2 == 1) {\n            odd_collatz.Add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.Add(n);\n            }\n        }\n        return odd_collatz.OrderBy(x => x).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    derivative \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"1 4 12 20\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 6\" ]]\n    [[ $(candidate \"3 2 1\") = \"2 2\" ]]\n    [[ $(candidate \"3 2 1 0 4\") = \"2 2 0 16\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Derivative(List<long> xs) {\n        return xs.Select((x, i) => x * i).Skip(1).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fibfib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"24\" ]]\n    [[ $(candidate \"10\") = \"81\" ]]\n    [[ $(candidate \"12\") = \"274\" ]]\n    [[ $(candidate \"14\") = \"927\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fibfib(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a floating point\ntruncate_number() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    truncate_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3.5\") = \"0.5\" ]]\n    [[ $(candidate \"1.25\") = \"0.25\" ]]\n    [[ $(candidate \"123.0\") = \"0.0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TruncateNumber(float number) {\n        return number % 1.0f;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a floating point\ntruncate_number() {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    max_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"3\" ]]\n    [[ $(candidate \"5 3 -5 2 -3 3 9 0 124 1 -10\") = \"124\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxElement(List<long> l) {\n        long m = l[0];\n        foreach (long e in l) {\n            if (e > m) {\n                m = e;\n            }\n        }\n        return m;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nclosest_integer() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ClosestInteger(string value) {\n        if (value.Count(c => c == '.') == 1) {\n            while (value.Length > 0 && value.Last() == '0') {\n                value = value.Substring(0, value.Length - 1);\n            }\n        }\n\n        double num = double.Parse(value);\n        long res;\n\n        if (value.EndsWith(\".5\")) {\n            res = num > 0 ? (long)Math.Ceiling(num) : (long)Math.Floor(num);\n        } else {\n            res = (long)Math.Round(num);\n        }\n\n        return res;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nclosest_integer() {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nprime_fib() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long PrimeFib(long n) {\n        bool IsPrime(long p) {\n            if (p < 2) return false;\n            for (long k = 2; k < Math.Min((long)Math.Sqrt(p) + 1, p - 1); k++)\n                if (p % k == 0) return false;\n            return true;\n        }\n        List<long> f = new List<long> { 0, 1 };\n        while (true) {\n            f.Add(f[^1] + f[^2]);\n            if (IsPrime(f[^1])) n--;\n            if (n == 0) return f[^1];\n        }\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nprime_fib() {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0 1\" ]]\n    [[ $(candidate \"1 1 1\") = \"3 1\" ]]\n    [[ $(candidate \"100 0\") = \"100 0\" ]]\n    [[ $(candidate \"3 5 7\") = \"15 105\" ]]\n    [[ $(candidate \"10\") = \"10 10\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sumValue = 0;\n        long prodValue = 1;\n\n        foreach (long n in numbers) {\n            sumValue += n;\n            prodValue *= n;\n        }\n        return Tuple.Create(sumValue, prodValue);\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SelectWords(string s, long n) {\n        var result = new List<string>();\n        foreach (var word in s.Split()) {\n            var n_consonants = word.Count(c => !\"aeiouAEIOU\".Contains(c));\n            if (n_consonants == n) {\n                result.Add(word);\n            }\n        }\n        return result;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long AddElements(List<long> arr, long k) {\n        return arr.Take((int)k).Where(x => x.ToString().Length <= 2).Sum();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Eat(long number, long need, long remaining) {\n        if (need <= remaining) {\n            return new List<long> { number + need, remaining - need };\n        } else {\n            return new List<long> { number + remaining, 0 };\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnext_smallest() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    next_smallest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"2\" ]]\n    [[ $(candidate \"5 1 4 3 2\") = \"2\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"1 1\") = \"None\" ]]\n    [[ $(candidate \"1 1 1 1 0\") = \"1\" ]]\n    [[ $(candidate \"1 1\") = \"None\" ]]\n    [[ $(candidate \"-35 34 12 -45\") = \"-35\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> NextSmallest(List<long> lst) {\n        lst = lst.Distinct().OrderBy(x => x).ToList();\n        return lst.Count < 2 ? null : lst[1];\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnext_smallest() {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_row \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 4\\n1 0\\n2 5\\n2 0\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\" \"2\") = \"0 1\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 1 3 4 5 6\\n1 2 1 4 5 6\\n1 2 3 1 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 0\\n2 1\\n2 0\\n3 2\\n3 0\\n4 3\\n4 0\\n5 4\\n5 0\\n6 5\\n6 0\" ]]\n    [[ $(candidate \"\" \"1\") = \"\" ]]\n    [[ $(candidate \"1\" \"2\") = \"\" ]]\n    [[ $(candidate \"\\n1\\n1 2 3\" \"3\") = \"2 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>> coords = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(Tuple.Create((long)i, (long)j));\n                }\n            }\n        }\n        coords.Sort((a, b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return coords;\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") = \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\") = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ChooseNum(long x, long y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    prime_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\") = \"true\" ]]\n    [[ $(candidate \"abcdcba\") = \"true\" ]]\n    [[ $(candidate \"kittens\") = \"true\" ]]\n    [[ $(candidate \"orange\") = \"false\" ]]\n    [[ $(candidate \"wow\") = \"true\" ]]\n    [[ $(candidate \"world\") = \"true\" ]]\n    [[ $(candidate \"MadaM\") = \"true\" ]]\n    [[ $(candidate \"Wow\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"HI\") = \"true\" ]]\n    [[ $(candidate \"go\") = \"true\" ]]\n    [[ $(candidate \"gogo\") = \"false\" ]]\n    [[ $(candidate \"aaaaaaaaaaaaaaa\") = \"false\" ]]\n    [[ $(candidate \"Madam\") = \"true\" ]]\n    [[ $(candidate \"M\") = \"false\" ]]\n    [[ $(candidate \"0\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PrimeLength(string str) {\n        int l = str.Length;\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_to_n \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"66\" ]]\n    [[ $(candidate \"30\") = \"465\" ]]\n    [[ $(candidate \"100\") = \"5050\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumToN(long n) {\n        return n * (n + 1) / 2;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nfix_spaces() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fix_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Example\") = \"Example\" ]]\n    [[ $(candidate \"Mudasir Hanif \") = \"Mudasir_Hanif_\" ]]\n    [[ $(candidate \"Yellow Yellow  Dirty  Fellow\") = \"Yellow_Yellow__Dirty__Fellow\" ]]\n    [[ $(candidate \"Exa   mple\") = \"Exa-mple\" ]]\n    [[ $(candidate \"   Exa 1 2 2 mple\") = \"-Exa_1_2_2_mple\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FixSpaces(string text) {\n        string new_text = \"\";\n        int i = 0;\n        int start = 0, end = 0;\n        while (i < text.Length) {\n            if (text[i] == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    new_text += \"-\"+text[i];\n                } else if (end - start > 0) {\n                    new_text += new string('_', end - start)+text[i];\n                } else {\n                    new_text += text[i];\n                }\n                start = i+1;\n                end = i+1;\n            }\n            i+=1;\n        }\n        if (end - start > 2) {\n            new_text += \"-\";\n        } else if (end - start > 0) {\n            new_text += \"_\";\n        }\n        return new_text;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfix_spaces() {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RollingMax(List<long> numbers) {\n        long? running_max = null;\n        var result = new List<long>();\n\n        foreach (var n in numbers) {\n            if (running_max == null) {\n                running_max = n;\n            } else {\n                running_max = Math.Max(running_max.Value, n);\n            }\n\n            result.Add(running_max.Value);\n        }\n\n        return result;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    words_in_sentence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"This is a test\") = \"is\" ]]\n    [[ $(candidate \"lets go for swimming\") = \"go for\" ]]\n    [[ $(candidate \"there is no place available here\") = \"there is no place\" ]]\n    [[ $(candidate \"Hi I am Hussein\") = \"Hi am Hussein\" ]]\n    [[ $(candidate \"go for it\") = \"go for it\" ]]\n    [[ $(candidate \"here\") = \"\" ]]\n    [[ $(candidate \"here is\") = \"is\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string WordsInSentence(string sentence) {\n        var new_lst = new List<string>();\n        foreach (var word in sentence.Split()) {\n            var flg = 0;\n            if (word.Length == 1) {\n                flg = 1;\n            }\n            for (var i = 2; i < word.Length; i++) {\n                if (word.Length % i == 0) {\n                    flg = 1;\n                }\n            }\n            if (flg == 0 || word.Length == 2) {\n                new_lst.Add(word);\n            }\n        }\n        return string.Join(\" \", new_lst);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nget_closest_vowel() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string GetClosestVowel(string word) {\n        if (word.Length < 3) {\n            return \"\";\n        }\n\n        var vowels = new HashSet<char> {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\n        for (int i = word.Length - 2; i >= 1; i--) {\n            if (vowels.Contains(word[i]) && !vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1])) {\n                return word[i].ToString();\n            }\n        }\n\n        return \"\";\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nget_closest_vowel() {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Compare(List<long> game, List<long> guess) {\n        return game.Zip(guess, (x, y) => Math.Abs(x - y)).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nremove_duplicates() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n        var c = numbers.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());\n        return numbers.Where(x => c[x] <= 1).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nremove_duplicates() {\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    same_chars \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") = \"true\" ]]\n    [[ $(candidate \"abcd\" \"dddddddabc\") = \"true\" ]]\n    [[ $(candidate \"dddddddabc\" \"abcd\") = \"true\" ]]\n    [[ $(candidate \"eabcd\" \"dddddddabc\") = \"false\" ]]\n    [[ $(candidate \"abcd\" \"dddddddabcf\") = \"false\" ]]\n    [[ $(candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") = \"false\" ]]\n    [[ $(candidate \"aabb\" \"aaccc\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool SameChars(string s0, string s1) {\n        return s0.ToHashSet().SetEquals(s1);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseNestedParens(string paren_string) {\n        long ParseParenGroup(string s) {\n            long depth = 0;\n            long max_depth = 0;\n            foreach (char c in s) {\n                if (c == '(') {\n                    depth += 1;\n                    max_depth = Math.Max(depth, max_depth);\n                } else {\n                    depth -= 1;\n                }\n            }\n\n            return max_depth;\n        }\n\n        return paren_string.Split(' ').Where(x => x != \"\").Select(x => ParseParenGroup(x)).ToList();\n    }\n\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddCount(long num) {\n        long even_count = 0;\n        long odd_count = 0;\n        foreach (char c in Math.Abs(num).ToString()) {\n            if (int.Parse(c.ToString()) % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n        return Tuple.Create(even_count, odd_count);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fruit_distribution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 apples and 6 oranges\" \"19\") = \"8\" ]]\n    [[ $(candidate \"5 apples and 6 oranges\" \"21\") = \"10\" ]]\n    [[ $(candidate \"0 apples and 1 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 apples and 0 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"100\") = \"95\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 apples and 100 oranges\" \"120\") = \"19\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FruitDistribution(string s, long n) {\n        var lis = new List<long>();\n        foreach (var i in s.Split(' ')) {\n            if (long.TryParse(i, out var x)) {\n                lis.Add(x);\n            }\n        }\n        return n - lis.Sum();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    string_xor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"111000\" \"101010\") = \"010010\" ]]\n    [[ $(candidate \"1\" \"1\") = \"0\" ]]\n    [[ $(candidate \"0101\" \"0000\") = \"0101\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringXor(string a, string b) {\n        Func<char, char, char> xor = (i, j) => i == j ? '0' : '1';\n        return string.Concat(a.Zip(b, xor));\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nstrlen() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    strlen \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"x\") = \"1\" ]]\n    [[ $(candidate \"asdasnakj\") = \"9\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Strlen(string str) {\n        return str.Length;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstrlen() {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    string_sequence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"3\") = \"0 1 2 3\" ]]\n    [[ $(candidate \"10\") = \"0 1 2 3 4 5 6 7 8 9 10\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0, (int)n + 1));\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nfile_name_check() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FileNameCheck(string file_name) {\n        var suf = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = file_name.Split('.');\n        if (lst.Length != 2) {\n            return \"No\";\n        }\n        if (!suf.Contains(lst[1])) {\n            return \"No\";\n        }\n        if (lst[0].Length == 0 || !Char.IsLetter(lst[0][0])) {\n            return \"No\";\n        }\n        var t = lst[0].Count(x => Char.IsDigit(x));\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfile_name_check() {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CanArrange(List<long> arr) {\n        long ind = -1;\n        for (long i = 1; i < arr.Count; i++) {\n            if (arr[(int)i] < arr[(int)i - 1]) {\n                ind = i;\n            }\n        }\n        return ind;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 88\") = \"88\" ]]\n    [[ $(candidate \"4 5 6 7 2 122\") = \"122\" ]]\n    [[ $(candidate \"4 0 6 7\") = \"0\" ]]\n    [[ $(candidate \"4 4 6 8\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    intersperse \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"7\") = \"\" ]]\n    [[ $(candidate \"5 6 3 2\" \"8\") = \"5 8 6 8 3 8 2\" ]]\n    [[ $(candidate \"2 2 2\" \"2\") = \"2 2 2 2 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n        if (!numbers.Any()) {\n            return new List<long>();\n        }\n\n        var result = new List<long>();\n\n        for (int i = 0; i < numbers.Count - 1; i++) {\n            result.Add(numbers[i]);\n            result.Add(delimeter);\n        }\n\n        result.Add(numbers.Last());\n\n        return result;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    match_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()( )\") = \"Yes\" ]]\n    [[ $(candidate \") )\") = \"No\" ]]\n    [[ $(candidate \"(()(()) ())())\") = \"No\" ]]\n    [[ $(candidate \")()) (()()(\") = \"Yes\" ]]\n    [[ $(candidate \"(()))) (()())((\") = \"Yes\" ]]\n    [[ $(candidate \"() ())\") = \"No\" ]]\n    [[ $(candidate \"(()( ()))()\") = \"Yes\" ]]\n    [[ $(candidate \"(((( ((())\") = \"No\" ]]\n    [[ $(candidate \")(() (()(\") = \"No\" ]]\n    [[ $(candidate \")( )(\") = \"No\" ]]\n    [[ $(candidate \"( )\") = \"Yes\" ]]\n    [[ $(candidate \") (\") = \"Yes\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MatchParens(List<string> lst) {\n        Func<string, bool> check = (string s) => {\n            int val = 0;\n            foreach (char c in s) {\n                if (c == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    return false;\n                }\n            }\n            return val == 0;\n        };\n\n        string S1 = lst[0] + lst[1];\n        string S2 = lst[1] + lst[0];\n        return check(S1) || check(S2) ? \"Yes\" : \"No\";\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_max() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FindMax(List<string> words) {\n        return words.OrderBy(x => (-x.Distinct().Count(), x)).First();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_max() {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    generate_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"10\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"10\" \"2\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"132\" \"2\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"17\" \"89\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GenerateIntegers(long a, long b) {\n        long lower = Math.Max(2, Math.Min(a, b));\n        long upper = Math.Min(8, Math.Max(a, b));\n\n        List<long> result = new List<long>();\n        for (long i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n\n        return result;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    exchange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\" \"1 2 3 4\") = \"YES\" ]]\n    [[ $(candidate \"1 2 3 4\" \"1 5 3 4\") = \"NO\" ]]\n    [[ $(candidate \"1 2 3 4\" \"2 1 4 3\") = \"YES\" ]]\n    [[ $(candidate \"5 7 3\" \"2 6 4\") = \"YES\" ]]\n    [[ $(candidate \"5 7 3\" \"2 6 3\") = \"NO\" ]]\n    [[ $(candidate \"3 2 6 1 8 9\" \"3 5 5 1 1 1\") = \"NO\" ]]\n    [[ $(candidate \"100 200\" \"200 200\") = \"YES\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n        var odd = lst1.Count(x => x % 2 == 1);\n        var even = lst2.Count(x => x % 2 == 0);\n        return even >= odd ? \"YES\" : \"NO\";\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    int_to_mini_roman \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"19\") = \"xix\" ]]\n    [[ $(candidate \"152\") = \"clii\" ]]\n    [[ $(candidate \"251\") = \"ccli\" ]]\n    [[ $(candidate \"426\") = \"cdxxvi\" ]]\n    [[ $(candidate \"500\") = \"d\" ]]\n    [[ $(candidate \"1\") = \"i\" ]]\n    [[ $(candidate \"4\") = \"iv\" ]]\n    [[ $(candidate \"43\") = \"xliii\" ]]\n    [[ $(candidate \"90\") = \"xc\" ]]\n    [[ $(candidate \"94\") = \"xciv\" ]]\n    [[ $(candidate \"532\") = \"dxxxii\" ]]\n    [[ $(candidate \"900\") = \"cm\" ]]\n    [[ $(candidate \"994\") = \"cmxciv\" ]]\n    [[ $(candidate \"1000\") = \"m\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string IntToMiniRoman(long number) {\n        long[] num = { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };\n        string[] sym = { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" };\n        int i = 12;\n        string res = \"\";\n        while (number > 0) {\n            long div = number / num[i];\n            number %= num[i];\n            while (div > 0) {\n                res += sym[i];\n                div--;\n            }\n            i--;\n        }\n        return res.ToLower();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_equal_to_sum_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"8\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"false\" ]]\n    [[ $(candidate \"12\") = \"true\" ]]\n    [[ $(candidate \"13\") = \"false\" ]]\n    [[ $(candidate \"16\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsEqualToSumEven(long n) {\n        return n%2 == 0 && n >= 8;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    simplify \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1/5\" \"5/1\") = \"true\" ]]\n    [[ $(candidate \"1/6\" \"2/1\") = \"false\" ]]\n    [[ $(candidate \"5/1\" \"3/1\") = \"true\" ]]\n    [[ $(candidate \"7/10\" \"10/2\") = \"false\" ]]\n    [[ $(candidate \"2/10\" \"50/10\") = \"true\" ]]\n    [[ $(candidate \"7/2\" \"4/2\") = \"true\" ]]\n    [[ $(candidate \"11/6\" \"6/1\") = \"true\" ]]\n    [[ $(candidate \"2/3\" \"5/2\") = \"false\" ]]\n    [[ $(candidate \"5/2\" \"3/5\") = \"false\" ]]\n    [[ $(candidate \"2/4\" \"8/4\") = \"true\" ]]\n    [[ $(candidate \"2/4\" \"4/2\") = \"true\" ]]\n    [[ $(candidate \"1/5\" \"5/1\") = \"true\" ]]\n    [[ $(candidate \"1/5\" \"1/5\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Simplify(string x, string n) {\n        var a = int.Parse(x.Split('/')[0]);\n        var b = int.Parse(x.Split('/')[1]);\n        var c = int.Parse(n.Split('/')[0]);\n        var d = int.Parse(n.Split('/')[1]);\n        var numerator = a * c;\n        var denom = b * d;\n        return numerator % denom == 0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nsolve() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\") = \"#CCC\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(string s) {\n        var new_str = s.ToCharArray();\n        var flg = false;\n        for (var i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                new_str[i] = char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n                flg = true;\n            }\n        }\n        if (!flg) {\n            return new string(new_str.Reverse().ToArray());\n        }\n        return new string(new_str);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsolve() {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    right_angle_triangle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"true\" ]]\n    [[ $(candidate \"1\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"10\" \"6\" \"8\") = \"true\" ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"false\" ]]\n    [[ $(candidate \"7\" \"24\" \"25\") = \"true\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"false\" ]]\n    [[ $(candidate \"5\" \"12\" \"13\") = \"true\" ]]\n    [[ $(candidate \"15\" \"8\" \"17\") = \"true\" ]]\n    [[ $(candidate \"48\" \"55\" \"73\") = \"true\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"false\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool RightAngleTriangle(long a, long b, long c) {\n        return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ndouble_the_difference() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    double_the_difference \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"5.0 4.0\") = \"25\" ]]\n    [[ $(candidate \"0.1 0.2 0.3\") = \"0\" ]]\n    [[ $(candidate \"-10.0 -20.0 -30.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0 -2.0 8.0\") = \"0\" ]]\n    [[ $(candidate \"0.2 3.0 5.0\") = \"34\" ]]\n    [[ $(candidate \"-9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0\") = \"165\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long DoubleTheDifference(List<float> lst) {\n        return (long)lst.Where(x => x > 0 && x % 2 != 0 && !x.ToString().Contains(\".\")).Select(x => x * x).Sum();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ndouble_the_difference() {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    below_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"1 2 -3 1 2 -3\") = \"false\" ]]\n    [[ $(candidate \"1 2 -4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4 -4\") = \"false\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4 -5\") = \"true\" ]]\n    [[ $(candidate \"1 -2 2 -2 5 -5 4 -4\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    greatest_common_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"7\") = \"1\" ]]\n    [[ $(candidate \"10\" \"15\") = \"5\" ]]\n    [[ $(candidate \"49\" \"14\") = \"7\" ]]\n    [[ $(candidate \"144\" \"60\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GreatestCommonDivisor(long a, long b) {\n        while (b != 0) {\n            var t = b;\n            b = a % b;\n            a = t;\n        }\n\n        return a;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1 2 6 24 15\" ]]\n    [[ $(candidate \"7\") = \"1 2 6 24 15 720 28\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"3\") = \"1 2 6\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> F(long n) {\n        List<long> ret = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (i%2 == 0) {\n                long x = 1;\n                for (long j = 1; j <= i; j++) x *= j;\n                ret.Add(x);\n            } else {\n                long x = 0;\n                for (long j = 1; j <= i; j++) x += j;\n                ret.Add(x);\n            }\n        }\n        return ret;\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmonotonic() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Monotonic(List<long> l) {\n        return l.SequenceEqual(l.OrderBy(x => x)) || l.SequenceEqual(l.OrderByDescending(x => x));\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmonotonic() {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> ByLength(List<long> arr) {\n        var dic = new Dictionary<long, string> {\n            {1, \"One\"},\n            {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"},\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n        var sorted_arr = arr.OrderByDescending(x => x);\n        var new_arr = new List<string>();\n        foreach (var var in sorted_arr) {\n            if (dic.ContainsKey(var)) {\n                new_arr.Add(dic[var]);\n            }\n        }\n        return new_arr;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    remove_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"abcdef\\nghijklm\") = \"bcdf\\nghjklm\" ]]\n    [[ $(candidate \"fedcba\") = \"fdcb\" ]]\n    [[ $(candidate \"eeeee\") = \"\" ]]\n    [[ $(candidate \"acBAA\") = \"cB\" ]]\n    [[ $(candidate \"EcBOO\") = \"cB\" ]]\n    [[ $(candidate \"ybcd\") = \"ybcd\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string RemoveVowels(string text) {\n        return new string(text.Where(c => !\"aeiouAEIOU\".Contains(c)).ToArray());\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    check_if_last_char_is_a_letter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\") = \"false\" ]]\n    [[ $(candidate \"apple pi e\") = \"true\" ]]\n    [[ $(candidate \"eeeee\") = \"false\" ]]\n    [[ $(candidate \"A\") = \"true\" ]]\n    [[ $(candidate \"Pumpkin pie \") = \"false\" ]]\n    [[ $(candidate \"Pumpkin pie 1\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"eeeee e \") = \"false\" ]]\n    [[ $(candidate \"apple pie\") = \"false\" ]]\n    [[ $(candidate \"apple pi e \") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        var check = txt.Split(' ').Last();\n        return check.Length == 1 && 'a' <= check.ToLower()[0] && check.ToLower()[0] <= 'z';\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Iscube(long a) {\n        a = Math.Abs(a);\n        return Math.Pow(Math.Round(Math.Pow(a, 1.0 / 3)), 3) == a;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    reverse_delete \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\" \"ae\") = \"bcd false\" ]]\n    [[ $(candidate \"abcdef\" \"b\") = \"acdef false\" ]]\n    [[ $(candidate \"abcdedcba\" \"ab\") = \"cdedc true\" ]]\n    [[ $(candidate \"dwik\" \"w\") = \"dik false\" ]]\n    [[ $(candidate \"a\" \"a\") = \" true\" ]]\n    [[ $(candidate \"abcdedcba\" \"\") = \"abcdedcba true\" ]]\n    [[ $(candidate \"abcdedcba\" \"v\") = \"abcdedcba true\" ]]\n    [[ $(candidate \"vabba\" \"v\") = \"abba true\" ]]\n    [[ $(candidate \"mamma\" \"mia\") = \" true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n        s = string.Concat(s.Where(x => !c.Contains(x)));\n        return Tuple.Create(s, s == new string(s.Reverse().ToArray()));\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    mean_absolute_deviation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0\") = \"0.5\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0\") = \"1.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"1.2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = numbers.Sum() / numbers.Count;\n        return numbers.Sum(x => Math.Abs(x - mean)) / numbers.Count;\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n        var depth = 0;\n        foreach (var b in brackets) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrescale_to_unit() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    rescale_to_unit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2.0 49.9\") = \"0.0 1.0\" ]]\n    [[ $(candidate \"100.0 49.9\") = \"1.0 0.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"0.0 0.25 0.5 0.75 1.0\" ]]\n    [[ $(candidate \"2.0 1.0 5.0 3.0 4.0\") = \"0.25 0.0 1.0 0.5 0.75\" ]]\n    [[ $(candidate \"12.0 11.0 15.0 13.0 14.0\") = \"0.25 0.0 1.0 0.5 0.75\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<float> RescaleToUnit(List<float> numbers) {\n        var min_number = numbers.Min();\n        var max_number = numbers.Max();\n        return numbers.Select(x => (x - min_number) / (max_number - min_number)).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrescale_to_unit() {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    intersection \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\" \"2 3\") = \"NO\" ]]\n    [[ $(candidate \"-1 1\" \"0 4\") = \"NO\" ]]\n    [[ $(candidate \"-3 -1\" \"-5 5\") = \"YES\" ]]\n    [[ $(candidate \"-2 2\" \"-4 0\") = \"YES\" ]]\n    [[ $(candidate \"-11 2\" \"-1 -1\") = \"NO\" ]]\n    [[ $(candidate \"1 2\" \"3 5\") = \"NO\" ]]\n    [[ $(candidate \"1 2\" \"1 2\") = \"NO\" ]]\n    [[ $(candidate \"-2 -2\" \"-3 -2\") = \"NO\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n        bool IsPrime(long num) {\n            if (num == 1 || num == 0) {\n                return false;\n            }\n            if (num == 2) {\n                return true;\n            }\n            for (long i = 2; i < num; i++) {\n                if (num%i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        long l = Math.Max(interval1.Item1, interval2.Item1);\n        long r = Math.Min(interval1.Item2, interval2.Item2);\n        long length = r - l;\n        if (length > 0 && IsPrime(length)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HexKey(string num) {\n        var primes = new HashSet<char> {'2', '3', '5', '7', 'B', 'D'};\n        return num.Count(c => primes.Contains(c));\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nstrange_sort_list() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> StrangeSortList(List<long> lst) {\n        List<long> res = new List<long>();\n        bool switch_ = true;\n        while (lst.Count > 0) {\n            res.Add(switch_ ? lst.Min() : lst.Max());\n            lst.Remove(res.Last());\n            switch_ = !switch_;\n        }\n        return res;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nstrange_sort_list() {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_bored \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\") = \"0\" ]]\n    [[ $(candidate \"Is the sky blue?\") = \"0\" ]]\n    [[ $(candidate \"I love It \\!\") = \"1\" ]]\n    [[ $(candidate \"bIt\") = \"0\" ]]\n    [[ $(candidate \"I feel good today. I will be productive. will kill It\") = \"2\" ]]\n    [[ $(candidate \"You and I are going for a walk\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long IsBored(string S) {\n        var sentences = Regex.Split(S, @\"[.?!]\\s*\");\n        return sentences.Count(x => x.StartsWith(\"I \"));\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nall_prefixes() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    all_prefixes \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"asdfgh\") = \"a as asd asdf asdfg asdfgh\" ]]\n    [[ $(candidate \"WWW\") = \"W WW WWW\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\n        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n        }\n        return result;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nall_prefixes() {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HowManyTimes(string str, string substring) {\n        long times = 0;\n\n        for (int i = 0; i <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 8 7 1\") = \"12\" ]]\n    [[ $(candidate \"3 3 3 3 3\") = \"9\" ]]\n    [[ $(candidate \"30 13 24 321\") = \"0\" ]]\n    [[ $(candidate \"5 9\") = \"5\" ]]\n    [[ $(candidate \"2 4 8\") = \"0\" ]]\n    [[ $(candidate \"30 13 23 32\") = \"23\" ]]\n    [[ $(candidate \"3 13 2 9\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Solution(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 0 && x % 2 == 1).Sum();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSorted(List<long> lst) {\n        var count_digit = lst.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());\n        if (count_digit.Any(x => x.Value > 2)) {\n            return false;\n        }\n        if (lst.Zip(lst.Skip(1), (a, b) => a <= b).All(x => x)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Search(List<long> lst) {\n        var frq = new long[lst.Max() + 1];\n        foreach (var i in lst) {\n            frq[i]++;\n        }\n\n        long ans = -1;\n        for (long i = 1; i < frq.Length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n\n        return ans;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\npluck() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Pluck(List<long> arr) {\n        if(arr.Count == 0) return new List<long>();\n        var evens = arr.Where(x => x % 2 == 0).ToList();\n        if(evens.Count == 0) return new List<long>();\n        return new List<long> { evens.Min(), arr.IndexOf(evens.Min()) };\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npluck() {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    pairs_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 -5 3 5 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"-3 9 -1 3 2 30\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 3 2 31\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 30\") = \"false\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 31\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PairsSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                if (l[i] + l[j] == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nmake_palindrome() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    make_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"x\") = \"x\" ]]\n    [[ $(candidate \"xyz\") = \"xyzyx\" ]]\n    [[ $(candidate \"xyx\") = \"xyx\" ]]\n    [[ $(candidate \"jerry\") = \"jerryrrej\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MakePalindrome(string str) {\n        if (str == null) {\n            return \"\";\n        }\n\n        int beginningOfSuffix = 0;\n\n        while (str.Substring(beginningOfSuffix) != new string(str.Substring(beginningOfSuffix).Reverse().ToArray())) {\n            beginningOfSuffix += 1;\n        }\n\n        return str + new string(str.Substring(0, beginningOfSuffix).Reverse().ToArray());\n    }\n\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nmake_palindrome() {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    starts_one_ends \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"2\") = \"18\" ]]\n    [[ $(candidate \"3\") = \"180\" ]]\n    [[ $(candidate \"4\") = \"1800\" ]]\n    [[ $(candidate \"5\") = \"18000\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        return 18 * (long)Math.Pow(10, n - 2);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetPositive(List<long> l) {\n        return l.Where(e => e > 0).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    concatenate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"x y z\") = \"xyz\" ]]\n    [[ $(candidate \"x y z w k\") = \"xyzwk\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Concatenate(List<string> strings) {\n        return string.Concat(strings);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"aba\") = \"true\" ]]\n    [[ $(candidate \"aaaaa\") = \"true\" ]]\n    [[ $(candidate \"zbcd\") = \"false\" ]]\n    [[ $(candidate \"xywyx\") = \"true\" ]]\n    [[ $(candidate \"xywyz\") = \"false\" ]]\n    [[ $(candidate \"xywzx\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Factorize(long n) {\n        var fact = new List<long>();\n        long i = 2;\n        while (i <= Math.Sqrt(n) + 1) {\n            if (n % i == 0) {\n                fact.Add(i);\n                n /= i;\n            } else {\n                i += 1;\n            }\n        }\n        if (n > 1) {\n            fact.Add(n);\n        }\n        return fact;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestPrimeFactor(long n) {\n        bool IsPrime(long k) {\n            if (k < 2) {\n                return false;\n            }\n            for (long i = 2; i < k; i++) {\n                if (k % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        long largest = 1;\n        for (long j = 2; j <= n; j++) {\n            if (n % j == 0 && IsPrime(j)) {\n                largest = Math.Max(largest, j);\n            }\n        }\n        return largest;\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GetMaxTriples(long n) {\n        long[] A = new long[n];\n        for (long i = 1; i <= n; i++) {\n            A[i-1] = i*i - i + 1;\n        }\n        List<(long, long, long)> ans = new List<(long, long, long)>();\n        for (long i = 0; i < n; i++) {\n            for (long j = i+1; j < n; j++) {\n                for (long k = j+1; k < n; k++) {\n                    if ((A[i]+A[j]+A[k])%3 == 0) {\n                        ans.Add((A[i],A[j],A[k]));\n                    }\n                }\n            }\n        }\n        return ans.Count;\n    }\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nanti_shuffle() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string AntiShuffle(string s) {\n        return string.Join(\" \", s.Split(' ').Select(i => new string(i.OrderBy(c => c).ToArray())));\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nanti_shuffle() {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1000\") = \"1\" ]]\n    [[ $(candidate \"150\") = \"110\" ]]\n    [[ $(candidate \"147\") = \"1100\" ]]\n    [[ $(candidate \"333\") = \"1001\" ]]\n    [[ $(candidate \"963\") = \"10010\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(long N) {\n        return Convert.ToString(N.ToString().Sum(c => c - '0'), 2);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    minPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\" \"3\") = \"1 2 1\" ]]\n    [[ $(candidate \"5 9 3\\n4 1 6\\n7 8 2\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\" \"4\") = \"1 2 1 2\" ]]\n    [[ $(candidate \"6 4 13 10\\n5 7 12 1\\n3 16 11 15\\n8 14 9 2\" \"7\") = \"1 10 1 10 1 10 1\" ]]\n    [[ $(candidate \"8 14 9 2\\n6 4 13 15\\n5 7 1 12\\n3 10 11 16\" \"5\") = \"1 7 1 7 1\" ]]\n    [[ $(candidate \"11 8 7 2\\n5 16 14 4\\n9 3 15 6\\n12 13 10 1\" \"9\") = \"1 6 1 6 1 6 1 6 1\" ]]\n    [[ $(candidate \"12 13 10 1\\n9 3 15 6\\n5 16 14 4\\n11 8 7 2\" \"12\") = \"1 6 1 6 1 6 1 6 1 6 1 6\" ]]\n    [[ $(candidate \"2 7 4\\n3 1 5\\n6 8 9\" \"8\") = \"1 3 1 3 1 3 1 3\" ]]\n    [[ $(candidate \"6 1 5\\n3 8 9\\n2 7 4\" \"8\") = \"1 5 1 5 1 5 1 5\" ]]\n    [[ $(candidate \"1 2\\n3 4\" \"10\") = \"1 2 1 2 1 2 1 2 1 2\" ]]\n    [[ $(candidate \"1 3\\n3 2\" \"10\") = \"1 3 1 3 1 3 1 3 1 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n        int n = grid.Count;\n        long val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    List<long> temp = new List<long>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n\n                    val = temp.Min();\n                }\n            }\n        }\n\n        List<long> ans = new List<long>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.Add(1);\n            } else {\n                ans.Add(val);\n            }\n        }\n        return ans;\n    }\n\n    \n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nencrypt() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Encrypt(string s) {\n        var d = \"abcdefghijklmnopqrstuvwxyz\";\n        var out_ = \"\";\n        foreach (var c in s) {\n            if (d.Contains(c)) {\n                out_ += d[(d.IndexOf(c) + 2 * 2) % 26];\n            } else {\n                out_ += c;\n            }\n        }\n        return out_;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nencrypt() {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> MakeAPile(long n) {\n        return Enumerable.Range(0, (int)n).Select(i => n + 2 * i).ToList();\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C# program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPrime(long n) {\n        if (n < 2) {\n            return false;\n        }\n        for (long k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n"
  }
]