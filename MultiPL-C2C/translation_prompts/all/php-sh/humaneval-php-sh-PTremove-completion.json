[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction correct_bracketing($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] === \"(\") {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return False;\n        }\n    }\n    return $depth === 0;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"3\") = \"7.5\" ]]\n    [[ $(candidate \"2\" \"2\") = \"2.0\" ]]\n    [[ $(candidate \"10\" \"8\") = \"40.0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction triangle_area($a, $h) {\n    return $a * $h / 2.0;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction special_factorial($n) {\n    $fact_i = 1;\n    $special_fact = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact_i *= $i;\n        $special_fact *= $fact_i;\n    }\n    return $special_fact;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    largest_smallest_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4 1 3 5 7\") = \"None 1\" ]]\n    [[ $(candidate \"2 4 1 3 5 7 0\") = \"None 1\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 -2\") = \"-2 1\" ]]\n    [[ $(candidate \"4 5 3 6 2 7 -7\") = \"-7 2\" ]]\n    [[ $(candidate \"7 3 8 4 9 2 5 -9\") = \"-9 2\" ]]\n    [[ $(candidate \"\") = \"None None\" ]]\n    [[ $(candidate \"0\") = \"None None\" ]]\n    [[ $(candidate \"-1 -3 -5 -6\") = \"-1 None\" ]]\n    [[ $(candidate \"-1 -3 -5 -6 0\") = \"-1 None\" ]]\n    [[ $(candidate \"-6 -4 -4 -3 1\") = \"-3 1\" ]]\n    [[ $(candidate \"-6 -4 -4 -3 -100 1\") = \"-3 1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction largest_smallest_integers($lst) {\n    $smallest = array_filter($lst, function($x) { return $x < 0; });\n    $largest = array_filter($lst, function($x) { return $x > 0; });\n    return [max($smallest) ?: null, min($largest) ?: null];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sorted_array = $arr;\n    sort($sorted_array);\n\n    $min_value = min($arr);\n    $min_index = array_search($min_value, $arr);\n    $my_arr = array_merge(array_slice($arr, $min_index), array_slice($arr, 0, $min_index));\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($my_arr[$i] != $sorted_array[$i]) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction digits($n) {\n    $product = 1;\n    $odd_count = 0;\n    foreach(str_split($n) as $digit) {\n        $int_digit = intval($digit);\n        if ($int_digit%2 == 1) {\n            $product= $product*$int_digit;\n            $odd_count+=1;\n        }\n    }\n    if ($odd_count ==0) {\n        return 0;\n    } else {\n        return $product;\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fib4($n) {\n    $results = [0, 0, 2, 0];\n    if ($n < 4) {\n        return $results[$n];\n    }\n\n    for ($i = 4; $i <= $n; $i++) {\n        array_push($results, $results[count($results)-1] + $results[count($results)-2] + $results[count($results)-3] + $results[count($results)-4]);\n        array_shift($results);\n    }\n\n    return $results[count($results)-1];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\norder_by_points() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    order_by_points \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 11 -1 -11 -12\") = \"-1 -11 1 -12 11\" ]]\n    [[ $(candidate \"1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46\") = \"0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -11 -32 43 54 -98 2 -3\") = \"-3 -32 -98 -11 1 2 43 54\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11\") = \"1 10 2 11 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"0 6 6 -76 -21 23 4\") = \"-76 -21 0 4 23 6 6\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction order_by_points($nums) {\n    $digits_sum = function($n) {\n        $neg = 1;\n        if ($n < 0) {\n            $n = -1 * $n;\n            $neg = -1;\n        }\n        $n = array_map('intval', str_split($n));\n        $n[0] = $n[0] * $neg;\n        return array_sum($n);\n    };\n    usort($nums, function($a, $b) use ($digits_sum) {\n        return $digits_sum($a) - $digits_sum($b);\n    });\n    return $nums;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\norder_by_points() {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_happy($s) {\n  if (strlen($s) < 3) {\n    return false;\n  }\n\n  for ($i = 0; $i < strlen($s) - 2; $i++) {\n    if ($s[$i] == $s[$i+1] || $s[$i+1] == $s[$i+2] || $s[$i] == $s[$i+2]) {\n      return false;\n    }\n  }\n  return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction circular_shift($x, $shift) {\n    $s = strval($x);\n    if ($shift > strlen($s)) {\n        return strrev($s);\n    } else {\n        return substr($s, strlen($s) - $shift) . substr($s, 0, strlen($s) - $shift);\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    has_close_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.3\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.05\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\" \"0.95\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\" \"0.8\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.0\" \"0.1\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"1.0\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"0.5\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction has_close_elements($numbers, $threshold) {\n    foreach ($numbers as $idx => $elem) {\n        foreach ($numbers as $idx2 => $elem2) {\n            if ($idx != $idx2) {\n                $distance = abs($elem - $elem2);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction numerical_letter_grade($grades) {\n    $letter_grade = [];\n    foreach ($grades as $gpa) {\n        if ($gpa == 4.0) {\n            $letter_grade[] = \"A+\";\n        } elseif ($gpa > 3.7) {\n            $letter_grade[] = \"A\";\n        } elseif ($gpa > 3.3) {\n            $letter_grade[] = \"A-\";\n        } elseif ($gpa > 3.0) {\n            $letter_grade[] = \"B+\";\n        } elseif ($gpa > 2.7) {\n            $letter_grade[] = \"B\";\n        } elseif ($gpa > 2.3) {\n            $letter_grade[] = \"B-\";\n        } elseif ($gpa > 2.0) {\n            $letter_grade[] = \"C+\";\n        } elseif ($gpa > 1.7) {\n            $letter_grade[] = \"C\";\n        } elseif ($gpa > 1.3) {\n            $letter_grade[] = \"C-\";\n        } elseif ($gpa > 1.0) {\n            $letter_grade[] = \"D+\";\n        } elseif ($gpa > 0.7) {\n            $letter_grade[] = \"D\";\n        } elseif ($gpa > 0.0) {\n            $letter_grade[] = \"D-\";\n        } else {\n            $letter_grade[] = \"E\";\n        }\n    }\n    return $letter_grade;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    x_or_y \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\" \"34\" \"12\") = \"34\" ]]\n    [[ $(candidate \"15\" \"8\" \"5\") = \"5\" ]]\n    [[ $(candidate \"3\" \"33\" \"5212\") = \"33\" ]]\n    [[ $(candidate \"1259\" \"3\" \"52\") = \"3\" ]]\n    [[ $(candidate \"7919\" \"-1\" \"12\") = \"-1\" ]]\n    [[ $(candidate \"3609\" \"1245\" \"583\") = \"583\" ]]\n    [[ $(candidate \"91\" \"56\" \"129\") = \"129\" ]]\n    [[ $(candidate \"6\" \"34\" \"1234\") = \"1234\" ]]\n    [[ $(candidate \"1\" \"2\" \"0\") = \"0\" ]]\n    [[ $(candidate \"2\" \"2\" \"0\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction x_or_y($n, $x, $y) {\n    if ($n == 1) {\n        return $y;\n    }\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return $y;\n            break;\n        }\n    }\n    return $x;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nspecialFilter() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    specialFilter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 -2 1 -5\") = \"0\" ]]\n    [[ $(candidate \"15 -73 14 -15\") = \"1\" ]]\n    [[ $(candidate \"33 -2 -3 45 21 109\") = \"2\" ]]\n    [[ $(candidate \"43 -12 93 125 121 109\") = \"4\" ]]\n    [[ $(candidate \"71 -2 -33 75 21 19\") = \"3\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction specialFilter($nums) {\n    $count = 0;\n    foreach($nums as $num) {\n        if ($num > 10) {\n            $odd_digits = [1, 3, 5, 7, 9];\n            $number_as_string = strval($num);\n            if (in_array(intval($number_as_string[0]), $odd_digits) && in_array(intval($number_as_string[-1]), $odd_digits)) {\n                $count += 1;\n            }\n        }\n    }\n    return $count;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nspecialFilter() {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction parse_music($music_string) {\n    $note_map = ['o' => 4, 'o|' => 2, '.|' => 1];\n    return array_filter(array_map(function($x) use ($note_map) {\n        return $note_map[$x];\n    }, explode(' ', $music_string)));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nsplit_words() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(' ', str_replace(',', ' ', $txt));\n    } else {\n        return count(array_filter(str_split($txt), function($i) {\n            return ctype_lower($i) && ord($i) % 2 == 0;\n        }));\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsplit_words() {\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nbf() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction bf($planet1, $planet2) {\n    $planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $planet_names) || !in_array($planet2, $planet_names) || $planet1 == $planet2) {\n        return [];\n    }\n    $planet1_index = array_search($planet1, $planet_names);\n    $planet2_index = array_search($planet2, $planet_names);\n    if ($planet1_index < $planet2_index) {\n        return array_slice($planet_names, $planet1_index + 1, $planet2_index - $planet1_index - 1);\n    } else {\n        return array_slice($planet_names, $planet2_index + 1, $planet1_index - $planet2_index - 1);\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nbf() {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ndigitSum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    digitSum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abAB\") = \"131\" ]]\n    [[ $(candidate \"abcCd\") = \"67\" ]]\n    [[ $(candidate \"helloE\") = \"69\" ]]\n    [[ $(candidate \"woArBld\") = \"131\" ]]\n    [[ $(candidate \"aAaaaXa\") = \"153\" ]]\n    [[ $(candidate \" How are yOu?\") = \"151\" ]]\n    [[ $(candidate \"You arE Very Smart\") = \"327\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction digitSum($s) {\n    if ($s == \"\") return 0;\n    return array_sum(array_map(function ($char) {\n        return ord($char) * ctype_upper($char);\n    }, str_split($s)));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ndigitSum() {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"6\" ]]\n    [[ $(candidate \"1 4 9\") = \"14\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1 1 1 1 1 1\") = \"9\" ]]\n    [[ $(candidate \"-1 -1 -1 -1 -1 -1 -1 -1 -1\") = \"-3\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"-1 -5 2 -1 -5\") = \"-126\" ]]\n    [[ $(candidate \"-56 -99 1 0 -2\") = \"3030\" ]]\n    [[ $(candidate \"-1 0 0 0 0 0 0 0 -1\") = \"0\" ]]\n    [[ $(candidate \"-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37\") = \"-14196\" ]]\n    [[ $(candidate \"-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10\") = \"-1448\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sum_squares($lst) {\n    $result =[];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 === 0) {\n            $result[] = $lst[$i]**2;\n        } elseif ($i % 4 === 0 && $i % 3 !== 0) {\n            $result[] = $lst[$i]**3;\n        } else {\n            $result[] = $lst[$i];\n        }\n    }\n    return array_sum($result);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    count_up_to \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"2 3\" ]]\n    [[ $(candidate \"6\") = \"2 3 5\" ]]\n    [[ $(candidate \"7\") = \"2 3 5\" ]]\n    [[ $(candidate \"10\") = \"2 3 5 7\" ]]\n    [[ $(candidate \"0\") = \"\" ]]\n    [[ $(candidate \"22\") = \"2 3 5 7 11 13 17 19\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n    [[ $(candidate \"18\") = \"2 3 5 7 11 13 17\" ]]\n    [[ $(candidate \"47\") = \"2 3 5 7 11 13 17 19 23 29 31 37 41 43\" ]]\n    [[ $(candidate \"101\") = \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction count_up_to($n) {\n    $primes = [];\n\n    for ($i = 2; $i < $n; $i++) {\n        $is_prime = true;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j === 0) {\n                $is_prime = false;\n                break;\n            }\n        }\n        if ($is_prime) {\n            $primes[] = $i;\n        }\n    }\n\n    return $primes;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 3 5 2 3 3 9 0 123\") = \"0 2 3 5 9 123\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction unique($l) {\n    $unique = array_unique($l);\n    sort($unique);\n    return $unique;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fizz_buzz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"50\") = \"0\" ]]\n    [[ $(candidate \"78\") = \"2\" ]]\n    [[ $(candidate \"79\") = \"3\" ]]\n    [[ $(candidate \"100\") = \"3\" ]]\n    [[ $(candidate \"200\") = \"6\" ]]\n    [[ $(candidate \"4000\") = \"192\" ]]\n    [[ $(candidate \"10000\") = \"639\" ]]\n    [[ $(candidate \"100000\") = \"8026\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fizz_buzz($n) {\n    $ns = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 === 0 || $i % 13 === 0) {\n            $ns[] = $i;\n        }\n    }\n    $s = implode('', array_map('strval', $ns));\n    $ans = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ans += ($s[$i] === '7');\n    }\n    return $ans;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction Strongest_Extension($class_name, $extensions) {\n    $strong = $extensions[0];\n    $my_val = strlen(preg_replace('/[^A-Z]/', '', $extensions[0])) - strlen(preg_replace('/[^a-z]/', '', $extensions[0]));\n    foreach ($extensions as $s) {\n        $val = strlen(preg_replace('/[^A-Z]/', '', $s)) - strlen(preg_replace('/[^a-z]/', '', $s));\n        if ($val > $my_val) {\n            $strong = $s;\n            $my_val = $val;\n        }\n    }\n    $ans = $class_name . \".\" . $strong;\n    return $ans;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_closest_elements() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    find_closest_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\") = \"3.9 4.0\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\") = \"5.0 5.9\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.2\") = \"2.0 2.2\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.0\") = \"2.0 2.0\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\") = \"2.2 3.1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction find_closest_elements($numbers) {\n    $closest_pair = null;\n    $distance = null;\n\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = 0; $j < count($numbers); $j++) {\n            if ($i != $j) {\n                if ($distance === null) {\n                    $distance = abs($numbers[$i] - $numbers[$j]);\n                    $closest_pair = [$numbers[$i], $numbers[$j]];\n                } else {\n                    $new_distance = abs($numbers[$i] - $numbers[$j]);\n                    if ($new_distance < $distance) {\n                        $distance = $new_distance;\n                        $closest_pair = [$numbers[$i], $numbers[$j]];\n                    }\n                }\n            }\n        }\n    }\n\n    sort($closest_pair);\n    return $closest_pair;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_closest_elements() {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nvalid_date() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction valid_date($date) {\n    try {\n        $date = trim($date);\n        list($month, $day, $year) = explode('-', $date);\n        $month = (int)$month;\n        $day = (int)$day;\n        $year = (int)$year;\n        if ($month < 1 || $month > 12) {\n            return false;\n        }\n        if (in_array($month, [1,3,5,7,8,10,12]) && ($day < 1 || $day > 31)) {\n            return false;\n        }\n        if (in_array($month, [4,6,9,11]) && ($day < 1 || $day > 30)) {\n            return false;\n        }\n        if ($month == 2 && ($day < 1 || $day > 29)) {\n            return false;\n        }\n    } catch (Exception $e) {\n        return false;\n    }\n\n    return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvalid_date() {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1\" \"0\") = \"1\" ]]\n    [[ $(candidate \"2\" \"3\") = \"5\" ]]\n    [[ $(candidate \"5\" \"7\") = \"12\" ]]\n    [[ $(candidate \"7\" \"5\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction add($x, $y) {\n    return $x + $y;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    triples_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 5 -1\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2 1\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate \"1 2 5 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 -5 3 9 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"1 3 5 -100\") = \"false\" ]]\n    [[ $(candidate \"100 3 5 -100\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction triples_sum_to_zero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    largest_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1\" ]]\n    [[ $(candidate \"7\") = \"1\" ]]\n    [[ $(candidate \"10\") = \"5\" ]]\n    [[ $(candidate \"100\") = \"50\" ]]\n    [[ $(candidate \"49\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction largest_divisor($n) {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sort_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"three\") = \"three\" ]]\n    [[ $(candidate \"three five nine\") = \"three five nine\" ]]\n    [[ $(candidate \"five zero four seven nine eight\") = \"zero four five seven eight nine\" ]]\n    [[ $(candidate \"six five four three two one zero\") = \"zero one two three four five six\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sort_numbers($numbers) {\n    $value_map = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    ];\n    $arr = array_filter(explode(' ', $numbers));\n    usort($arr, function($a, $b) use ($value_map) {\n        return $value_map[$a] - $value_map[$b];\n    });\n    return implode(' ', $arr);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    smallest_change \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 5 4 7 9 6\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 3 2 2\") = \"1\" ]]\n    [[ $(candidate \"1 4 2\") = \"1\" ]]\n    [[ $(candidate \"1 4 4 2\") = \"1\" ]]\n    [[ $(candidate \"1 2 3 2 1\") = \"0\" ]]\n    [[ $(candidate \"3 1 1 3\") = \"0\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"0 1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction smallest_change($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    below_threshold \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\" \"100\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\" \"5\") = \"false\" ]]\n    [[ $(candidate \"1 20 4 10\" \"21\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\" \"22\") = \"true\" ]]\n    [[ $(candidate \"1 8 4 10\" \"11\") = \"true\" ]]\n    [[ $(candidate \"1 8 4 10\" \"10\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction below_threshold($l, $t) {\n    foreach ($l as $e) {\n        if ($e >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nprod_signs() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction prod_signs($arr) {\n    if (empty($arr)) return null;\n    $prod = in_array(0, $arr) ? 0 : pow(-1, count(array_filter($arr, function($x) { return $x < 0; })));\n    return $prod * array_sum(array_map('abs', $arr));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nprod_signs() {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction modp($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = (2 * $ret) % $p;\n    }\n    return $ret;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncount_upper() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    count_upper \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aBCdEf\") = \"1\" ]]\n    [[ $(candidate \"abcdefg\") = \"0\" ]]\n    [[ $(candidate \"dBBE\") = \"0\" ]]\n    [[ $(candidate \"B\") = \"0\" ]]\n    [[ $(candidate \"U\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"EEEE\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction count_upper($s) {\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (strpos(\"AEIOU\", $s[$i]) !== false) {\n            $count += 1;\n        }\n    }\n    return $count;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_upper() {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    multiply \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"148\" \"412\") = \"16\" ]]\n    [[ $(candidate \"19\" \"28\") = \"72\" ]]\n    [[ $(candidate \"2020\" \"1851\") = \"0\" ]]\n    [[ $(candidate \"14\" \"-15\") = \"20\" ]]\n    [[ $(candidate \"76\" \"67\") = \"42\" ]]\n    [[ $(candidate \"17\" \"27\") = \"49\" ]]\n    [[ $(candidate \"0\" \"1\") = \"0\" ]]\n    [[ $(candidate \"0\" \"0\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction multiply($a, $b) {\n    return abs($a % 10) * abs($b % 10);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction unique_digits($x) {\n    $odd_digit_elements = [];\n    foreach($x as $i) {\n        if (preg_match('/^[13579]+$/', $i)) {\n            $odd_digit_elements[] = $i;\n        }\n    }\n    sort($odd_digit_elements);\n    return $odd_digit_elements;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction will_it_fly($q, $w) {\n    if (array_sum($q) > $w) {\n        return false;\n    }\n\n    $i = 0;\n    $j = count($q)-1;\n    while ($i<$j) {\n        if ($q[$i] != $q[$j]) {\n            return false;\n        }\n        $i+=1;\n        $j-=1;\n    }\n    return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_multiply_prime() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_multiply_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"false\" ]]\n    [[ $(candidate \"30\") = \"true\" ]]\n    [[ $(candidate \"8\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"125\") = \"true\" ]]\n    [[ $(candidate \"105\") = \"true\" ]]\n    [[ $(candidate \"126\") = \"false\" ]]\n    [[ $(candidate \"729\") = \"false\" ]]\n    [[ $(candidate \"891\") = \"false\" ]]\n    [[ $(candidate \"1001\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_multiply_prime($a) {\n    $is_prime=function($n) {\n        for ($j = 2; $j < $n; $j++) {\n            if ($n % $j == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    for ($i = 2; $i < 101; $i++) {\n        if (!$is_prime($i)) {\n            continue;\n        }\n        for ($j = 2; $j < 101; $j++) {\n            if (!$is_prime($j)) {\n                continue;\n            }\n            for ($k = 2; $k < 101; $k++) {\n                if (!$is_prime($k)) {\n                    continue;\n                }\n                if ($i*$j*$k == $a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_multiply_prime() {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction maximum($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    sort($arr);\n    return array_slice($arr, -$k);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    separate_paren_groups \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"(()()) ((())) () ((())()())\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"() (()) ((())) (((())))\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"(()(())((())))\" ]]\n    [[ $(candidate \"( ) (( )) (( )( ))\") = \"() (()) (()())\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction separate_paren_groups($paren_string) {\n    $result = [];\n    $current_string = [];\n    $current_depth = 0;\n\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $c = $paren_string[$i];\n        if ($c === '(') {\n            $current_depth += 1;\n            $current_string[] = $c;\n        } elseif ($c === ')') {\n            $current_depth -= 1;\n            $current_string[] = $c;\n\n            if ($current_depth === 0) {\n                $result[] = implode($current_string);\n                $current_string = [];\n            }\n        }\n    }\n\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfilter_integers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    filter_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"4   23.2 9 adasd\") = \"4 9\" ]]\n    [[ $(candidate \"3 c 3 3 a b\") = \"3 3 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction filter_integers($values) {\n    return array_values(array_filter($values, function($x) {\n        return is_int($x);\n    }));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfilter_integers() {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nskjkasdkd() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    skjkasdkd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\") = \"10\" ]]\n    [[ $(candidate \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\") = \"25\" ]]\n    [[ $(candidate \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\") = \"13\" ]]\n    [[ $(candidate \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\") = \"11\" ]]\n    [[ $(candidate \"0 81 12 3 1 21\") = \"3\" ]]\n    [[ $(candidate \"0 8 1 2 1 7\") = \"7\" ]]\n    [[ $(candidate \"8191\") = \"19\" ]]\n    [[ $(candidate \"8191 123456 127 7\") = \"19\" ]]\n    [[ $(candidate \"127 97 8192\") = \"10\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction skjkasdkd($lst) {\n    $isPrime = function($n) {\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    $maxx = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] > $maxx && $isPrime($lst[$i])) {\n            $maxx = $lst[$i];\n        }\n    }\n    $result = array_sum(str_split(strval($maxx)));\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nskjkasdkd() {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction total_match($lst1, $lst2) {\n    $l1 = array_reduce($lst1, function($acc, $st) {\n        return $acc + strlen($st);\n    }, 0);\n    $l2 = array_reduce($lst2, function($acc, $st) {\n        return $acc + strlen($st);\n    }, 0);\n\n    return $l1 <= $l2 ? $lst1 : $lst2;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nstring_to_md5() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    string_to_md5 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\") = \"3e25960a79dbc69b674cd4ec67a72c62\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"A B C\") = \"0ef78513b0cb8cef12743f5aeb35f888\" ]]\n    [[ $(candidate \"password\") = \"5f4dcc3b5aa765d61d8327deb882cf99\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction string_to_md5($text) {\n    return $text ? md5($text) : null;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstring_to_md5() {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction car_race_collision($n) {\n    return $n**2;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_simple_power($x, $n) {\n    if ($n == 1) {\n        return $x == 1;\n    }\n    $power = 1;\n    while ($power < $x) {\n        $power = $power * $n;\n    }\n    return $power == $x;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nencode() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n    [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\") = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\") = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $vowels_replace = array_combine(str_split($vowels), array_map(function($i) { return chr(ord($i) + 2); }, str_split($vowels)));\n    $message = strtolower($message) ^ strtoupper($message) ^ $message;\n    return strtr($message, $vowels_replace);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nencode() {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    incr_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"3 2 1\") = \"4 3 2\" ]]\n    [[ $(candidate \"5 2 5 2 3 3 9 0 123\") = \"6 3 6 3 4 4 10 1 124\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction incr_list($l) {\n    return array_map(function($e) { return $e + 1; }, $l);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nflip_case() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    flip_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hello\\!\") = \"hELLO\\!\" ]]\n    [[ $(candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction flip_case($string) {\n    return strtolower($string) ^ strtoupper($string) ^ $string;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nflip_case() {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    vowels_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"2\" ]]\n    [[ $(candidate \"Alone\") = \"3\" ]]\n    [[ $(candidate \"key\") = \"2\" ]]\n    [[ $(candidate \"bye\") = \"1\" ]]\n    [[ $(candidate \"keY\") = \"2\" ]]\n    [[ $(candidate \"bYe\") = \"1\" ]]\n    [[ $(candidate \"ACEDY\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction vowels_count($s) {\n    $vowels = \"aeiouAEIOU\";\n    $n_vowels = count(array_filter(str_split($s), function($c) use ($vowels) {\n        return strpos($vowels, $c) !== false;\n    }));\n    if (substr($s, -1) === 'y' || substr($s, -1) === 'Y') {\n        $n_vowels++;\n    }\n    return $n_vowels;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsorted_list_sum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sorted_list_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aa a aaa\") = \"aa\" ]]\n    [[ $(candidate \"school AI asdf b\") = \"AI asdf school\" ]]\n    [[ $(candidate \"d b c a\") = \"\" ]]\n    [[ $(candidate \"d dcba abcd a\") = \"abcd dcba\" ]]\n    [[ $(candidate \"AI ai au\") = \"AI ai au\" ]]\n    [[ $(candidate \"a b b c c a\") = \"\" ]]\n    [[ $(candidate \"aaaa bbbb dd cc\") = \"cc dd aaaa bbbb\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sorted_list_sum($lst) {\n    sort($lst);\n    $new_lst = [];\n    foreach ($lst as $i) {\n        if (strlen($i)%2 == 0) {\n            $new_lst[] = $i;\n        }\n    }\n    usort($new_lst, function($a, $b) {\n        return strlen($a) - strlen($b);\n    });\n    return $new_lst;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsorted_list_sum() {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    even_odd_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"8 13\" ]]\n    [[ $(candidate \"12\") = \"4 6\" ]]\n    [[ $(candidate \"3\") = \"1 2\" ]]\n    [[ $(candidate \"63\") = \"6 8\" ]]\n    [[ $(candidate \"25\") = \"5 6\" ]]\n    [[ $(candidate \"19\") = \"4 6\" ]]\n    [[ $(candidate \"9\") = \"4 5\" ]]\n    [[ $(candidate \"1\") = \"0 1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction even_odd_palindrome($n) {\n    $is_palindrome=function($n) {\n        return strval($n) === strrev(strval($n));\n    };\n\n    $even_palindrome_count = 0;\n    $odd_palindrome_count = 0;\n\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 === 1 && $is_palindrome($i)) {\n            $odd_palindrome_count += 1;\n        } elseif ($i % 2 === 0 && $is_palindrome($i)) {\n            $even_palindrome_count += 1;\n        }\n    }\n\n    return [$even_palindrome_count, $odd_palindrome_count];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"6.0\" ]]\n    [[ $(candidate \"1\" \"2\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"4\" \"8\" \"5\") = \"8.18\" ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"1.73\" ]]\n    [[ $(candidate \"1\" \"2\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"16.25\" ]]\n    [[ $(candidate \"2\" \"6\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"0.43\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction triangle_area($a, $b, $c) {\n    if ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) {\n        return -1;\n    }\n    $s = ($a + $b + $c)/2;\n    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    $area = round($area, 2);\n    return $area;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction check_dict_case($dict) {\n    if (count($dict) == 0) {\n        return false;\n    } else {\n        $state = \"start\";\n        foreach ($dict as $key => $value) {\n            if (!is_string($key)) {\n                $state = \"mixed\";\n                break;\n            }\n            if ($state == \"start\") {\n                if (ctype_upper($key)) {\n                    $state = \"upper\";\n                } elseif (ctype_lower($key)) {\n                    $state = \"lower\";\n                } else {\n                    break;\n                }\n            } elseif (($state == \"upper\" && !ctype_upper($key)) || ($state == \"lower\" && !ctype_lower($key))) {\n                $state = \"mixed\";\n                break;\n            } else {\n                continue;\n            }\n        }\n        return $state == \"upper\" || $state == \"lower\";\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction tri($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $my_tri = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $my_tri[] = $i / 2 + 1;\n        } else {\n            $my_tri[] = $my_tri[$i - 1] + $my_tri[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $my_tri;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction median($l) {\n    sort($l);\n    if (count($l) % 2 == 1) {\n        return $l[count($l) / 2];\n    } else {\n        return ($l[count($l) / 2 - 1] + $l[count($l) / 2]) / 2.0;\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    change_base \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8\" \"3\") = \"22\" ]]\n    [[ $(candidate \"9\" \"3\") = \"100\" ]]\n    [[ $(candidate \"234\" \"2\") = \"11101010\" ]]\n    [[ $(candidate \"16\" \"2\") = \"10000\" ]]\n    [[ $(candidate \"8\" \"2\") = \"1000\" ]]\n    [[ $(candidate \"7\" \"2\") = \"111\" ]]\n    [[ $(candidate \"2\" \"3\") = \"2\" ]]\n    [[ $(candidate \"3\" \"4\") = \"3\" ]]\n    [[ $(candidate \"4\" \"5\") = \"4\" ]]\n    [[ $(candidate \"5\" \"6\") = \"5\" ]]\n    [[ $(candidate \"6\" \"7\") = \"6\" ]]\n    [[ $(candidate \"7\" \"8\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction change_base($x, $base) {\n    $ret = \"\";\n    while ($x > 0) {\n        $ret = strval($x % $base) . $ret;\n        $x = intdiv($x, $base);\n    }\n    return $ret;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlongest() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction longest($strings) {\n    if (!$strings) {\n        return null;\n    }\n\n    $maxlen = max(array_map('strlen', $strings));\n    foreach ($strings as $s) {\n        if (strlen($s) == $maxlen) {\n            return $s;\n        }\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlongest() {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    common \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\") = \"1 5 653\" ]]\n    [[ $(candidate \"5 3 2 8\" \"3 2\") = \"2 3\" ]]\n    [[ $(candidate \"4 3 2 8\" \"3 2 4\") = \"2 3 4\" ]]\n    [[ $(candidate \"4 3 2 8\" \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction common($l1, $l2) {\n    $ret = array();\n    foreach ($l1 as $e1) {\n        foreach ($l2 as $e2) {\n            if ($e1 == $e2) {\n                $ret[] = $e1;\n            }\n        }\n    }\n    $ret = array_unique($ret);\n    sort($ret);\n    return $ret;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    cycpattern_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"xyzw\" \"xyw\") = \"false\" ]]\n    [[ $(candidate \"yello\" \"ell\") = \"true\" ]]\n    [[ $(candidate \"whattup\" \"ptut\") = \"false\" ]]\n    [[ $(candidate \"efef\" \"fee\") = \"true\" ]]\n    [[ $(candidate \"abab\" \"aabb\") = \"false\" ]]\n    [[ $(candidate \"winemtt\" \"tinem\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction cycpattern_check($a, $b) {\n    $l = strlen($b);\n    $pat = $b . $b;\n    for ($i = 0; $i < strlen($a) - $l + 1; $i++) {\n        for ($j = 0; $j < $l + 1; $j++) {\n            if (substr($a, $i, $l) == substr($pat, $j, $l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    minSubArraySum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 4 1 2 4\") = \"1\" ]]\n    [[ $(candidate \"-1 -2 -3\") = \"-6\" ]]\n    [[ $(candidate \"-1 -2 -3 2 -10\") = \"-14\" ]]\n    [[ $(candidate \"-9999999999999999\") = \"-9999999999999999\" ]]\n    [[ $(candidate \"0 10 20 1000000\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"100 -1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"10 11 13 8 3 4\") = \"3\" ]]\n    [[ $(candidate \"100 -33 32 -1 0 -2\") = \"-33\" ]]\n    [[ $(candidate \"-10\") = \"-10\" ]]\n    [[ $(candidate \"7\") = \"7\" ]]\n    [[ $(candidate \"1 -1\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction minSubArraySum($nums) {\n    $max_sum = 0;\n    $s = 0;\n    foreach ($nums as $num) {\n        $s += -$num;\n        if ($s < 0) {\n            $s = 0;\n        }\n        $max_sum = max($s, $max_sum);\n    }\n    if ($max_sum == 0) {\n        $max_sum = max(array_map(function($i) {return -$i;}, $nums));\n    }\n    $min_sum = -$max_sum;\n    return $min_sum;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sort_array($array) {\n    return empty($array) ? [] : (function() use($array) {\n        $is_even = ($array[0] + $array[count($array) - 1]) % 2 === 0;\n        sort($array);\n        return $is_even ? array_reverse($array) : $array;\n    })();\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nhistogram() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction histogram($test) {\n    $dict1=[];\n    $list1=explode(\" \", $test);\n    $t=0;\n\n    foreach ($list1 as $i) {\n        if (substr_count($test, $i) > $t && $i != '') {\n            $t = substr_count($test, $i);\n        }\n    }\n    if ($t > 0) {\n        foreach ($list1 as $i) {\n            if (substr_count($test, $i) == $t) {\n                $dict1[$i] = $t;\n            }\n        }\n    }\n    return $dict1;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhistogram() {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_odd_collatz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"14\") = \"1 5 7 11 13 17\" ]]\n    [[ $(candidate \"5\") = \"1 5\" ]]\n    [[ $(candidate \"12\") = \"1 3 5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_odd_collatz($n) {\n    if ($n%2==0) {\n        $odd_collatz = [];\n    } else {\n        $odd_collatz = [$n];\n    }\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n/2;\n        } else {\n            $n = $n*3 + 1;\n        }\n        if ($n%2 == 1) {\n            array_push($odd_collatz, intval($n));\n        }\n    }\n    sort($odd_collatz);\n    return $odd_collatz;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    derivative \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"1 4 12 20\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 6\" ]]\n    [[ $(candidate \"3 2 1\") = \"2 2\" ]]\n    [[ $(candidate \"3 2 1 0 4\") = \"2 2 0 16\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction derivative($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $i * $xs[$i];\n    }\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fibfib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"24\" ]]\n    [[ $(candidate \"10\") = \"81\" ]]\n    [[ $(candidate \"12\") = \"274\" ]]\n    [[ $(candidate \"14\") = \"927\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a floating point\ntruncate_number() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    truncate_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3.5\") = \"0.5\" ]]\n    [[ $(candidate \"1.25\") = \"0.25\" ]]\n    [[ $(candidate \"123.0\") = \"0.0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction truncate_number($number) {\n    return fmod($number, 1.0);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a floating point\ntruncate_number() {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    max_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"3\" ]]\n    [[ $(candidate \"5 3 -5 2 -3 3 9 0 124 1 -10\") = \"124\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction max_element($l) {\n    $m = $l[0];\n    foreach ($l as $e) {\n        if ($e > $m) {\n            $m = $e;\n        }\n    }\n    return $m;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nprime_fib() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction prime_fib($n) {\n    $is_prime=function($p) {\n        if ($p < 2) {\n            return False;\n        }\n        for ($k = 2; $k < min(intval(sqrt($p)) + 1, $p - 1); $k++) {\n            if ($p % $k == 0) {\n                return False;\n            }\n        }\n        return True;\n    };\n    $f = [0, 1];\n    while (True) {\n        $f[] = $f[count($f) - 1] + $f[count($f) - 2];\n        if ($is_prime($f[count($f) - 1])) {\n            $n -= 1;\n        }\n        if ($n == 0) {\n            return $f[count($f) - 1];\n        }\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nprime_fib() {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0 1\" ]]\n    [[ $(candidate \"1 1 1\") = \"3 1\" ]]\n    [[ $(candidate \"100 0\") = \"100 0\" ]]\n    [[ $(candidate \"3 5 7\") = \"15 105\" ]]\n    [[ $(candidate \"10\") = \"10 10\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sum_product($numbers) {\n    $sum_value = 0;\n    $prod_value = 1;\n\n    foreach($numbers as $n) {\n        $sum_value += $n;\n        $prod_value *= $n;\n    }\n    return [$sum_value, $prod_value];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction select_words($s, $n) {\n    $result = [];\n    foreach (explode(\" \", $s) as $word) {\n        $n_consonants = 0;\n        foreach (str_split($word) as $c) {\n            if (!in_array(strtolower($c), [\"a\",\"e\",\"i\",\"o\",\"u\"])) {\n                $n_consonants += 1;\n            }\n        }\n        if ($n_consonants == $n) {\n            array_push($result, $word);\n        }\n    }\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction add_elements($arr, $k) {\n    return array_sum(array_filter(array_slice($arr, 0, $k), function($elem) {\n        return strlen(strval($elem)) <= 2;\n    }));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction eat($number, $need, $remaining) {\n    if($need <= $remaining) {\n        return [$number + $need, $remaining - $need];\n    } else {\n        return [$number + $remaining, 0];\n    }\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnext_smallest() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    next_smallest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"2\" ]]\n    [[ $(candidate \"5 1 4 3 2\") = \"2\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"1 1\") = \"None\" ]]\n    [[ $(candidate \"1 1 1 1 0\") = \"1\" ]]\n    [[ $(candidate \"1 1\") = \"None\" ]]\n    [[ $(candidate \"-35 34 12 -45\") = \"-35\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction next_smallest($lst) {\n    $lst = array_unique($lst);\n    sort($lst);\n    return count($lst) < 2 ? null : $lst[1];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnext_smallest() {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_row \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 4\\n1 0\\n2 5\\n2 0\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\" \"2\") = \"0 1\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 1 3 4 5 6\\n1 2 1 4 5 6\\n1 2 3 1 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 0\\n2 1\\n2 0\\n3 2\\n3 0\\n4 3\\n4 0\\n5 4\\n5 0\\n6 5\\n6 0\" ]]\n    [[ $(candidate \"\" \"1\") = \"\" ]]\n    [[ $(candidate \"1\" \"2\") = \"\" ]]\n    [[ $(candidate \"\\n1\\n1 2 3\" \"3\") = \"2 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_row($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $v) {\n            if ($v === $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        if ($a[0] === $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $coords;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") = \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\") = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction choose_num($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x == $y) {\n        return -1;\n    }\n    return $y - 1;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    prime_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\") = \"true\" ]]\n    [[ $(candidate \"abcdcba\") = \"true\" ]]\n    [[ $(candidate \"kittens\") = \"true\" ]]\n    [[ $(candidate \"orange\") = \"false\" ]]\n    [[ $(candidate \"wow\") = \"true\" ]]\n    [[ $(candidate \"world\") = \"true\" ]]\n    [[ $(candidate \"MadaM\") = \"true\" ]]\n    [[ $(candidate \"Wow\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"HI\") = \"true\" ]]\n    [[ $(candidate \"go\") = \"true\" ]]\n    [[ $(candidate \"gogo\") = \"false\" ]]\n    [[ $(candidate \"aaaaaaaaaaaaaaa\") = \"false\" ]]\n    [[ $(candidate \"Madam\") = \"true\" ]]\n    [[ $(candidate \"M\") = \"false\" ]]\n    [[ $(candidate \"0\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction prime_length($string) {\n    $l = strlen($string);\n    if ($l == 0 || $l == 1) {\n        return false;\n    }\n    for ($i = 2; $i < $l; $i++) {\n        if ($l % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_to_n \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"66\" ]]\n    [[ $(candidate \"30\") = \"465\" ]]\n    [[ $(candidate \"100\") = \"5050\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sum_to_n($n) {\n    return array_sum(range(0, $n));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nfix_spaces() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fix_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Example\") = \"Example\" ]]\n    [[ $(candidate \"Mudasir Hanif \") = \"Mudasir_Hanif_\" ]]\n    [[ $(candidate \"Yellow Yellow  Dirty  Fellow\") = \"Yellow_Yellow__Dirty__Fellow\" ]]\n    [[ $(candidate \"Exa   mple\") = \"Exa-mple\" ]]\n    [[ $(candidate \"   Exa 1 2 2 mple\") = \"-Exa_1_2_2_mple\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fix_spaces($text) {\n    $new_text = \"\";\n    $i = 0;\n    $start = $end = 0;\n    while ($i < strlen($text)) {\n        if ($text[$i] == \" \") {\n            $end += 1;\n        } else {\n            if ($end - $start > 2) {\n                $new_text .= \"-\".$text[$i];\n            } elseif ($end - $start > 0) {\n                $new_text .= str_repeat(\"_\", $end - $start).$text[$i];\n            } else {\n                $new_text .= $text[$i];\n            }\n            $start = $end = $i+1;\n        }\n        $i+=1;\n    }\n    if ($end - $start > 2) {\n        $new_text .= \"-\";\n    } elseif ($end - $start > 0) {\n        $new_text .= \"_\";\n    }\n    return $new_text;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfix_spaces() {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction rolling_max($numbers) {\n    $running_max = null;\n    $result = [];\n\n    foreach ($numbers as $n) {\n        if ($running_max === null) {\n            $running_max = $n;\n        } else {\n            $running_max = max($running_max, $n);\n        }\n\n        $result[] = $running_max;\n    }\n\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    words_in_sentence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"This is a test\") = \"is\" ]]\n    [[ $(candidate \"lets go for swimming\") = \"go for\" ]]\n    [[ $(candidate \"there is no place available here\") = \"there is no place\" ]]\n    [[ $(candidate \"Hi I am Hussein\") = \"Hi am Hussein\" ]]\n    [[ $(candidate \"go for it\") = \"go for it\" ]]\n    [[ $(candidate \"here\") = \"\" ]]\n    [[ $(candidate \"here is\") = \"is\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction words_in_sentence($sentence) {\n    $new_lst = [];\n    foreach(explode(\" \", $sentence) as $word) {\n        $flg = 0;\n        if (strlen($word) == 1) {\n            $flg = 1;\n        }\n        for ($i = 2; $i < strlen($word); $i++) {\n            if (strlen($word)%$i == 0) {\n                $flg = 1;\n            }\n        }\n        if ($flg == 0 || strlen($word) == 2) {\n            array_push($new_lst, $word);\n        }\n    }\n    return join(\" \", $new_lst);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nget_closest_vowel() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_closest_vowel($word) {\n    if (strlen($word) < 3) {\n        return \"\";\n    }\n\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'];\n    for ($i = strlen($word)-2; $i > 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            if (!in_array($word[$i+1], $vowels) && !in_array($word[$i-1], $vowels)) {\n                return $word[$i];\n            }\n        }\n    }\n    return \"\";\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nget_closest_vowel() {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction compare($game, $guess) {\n    return array_map(function($x, $y) { return abs($x - $y); }, $game, $guess);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    same_chars \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") = \"true\" ]]\n    [[ $(candidate \"abcd\" \"dddddddabc\") = \"true\" ]]\n    [[ $(candidate \"dddddddabc\" \"abcd\") = \"true\" ]]\n    [[ $(candidate \"eabcd\" \"dddddddabc\") = \"false\" ]]\n    [[ $(candidate \"abcd\" \"dddddddabcf\") = \"false\" ]]\n    [[ $(candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") = \"false\" ]]\n    [[ $(candidate \"aabb\" \"aaccc\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction same_chars($s0, $s1) {\n    return array_diff(str_split($s0), str_split($s1)) == array_diff(str_split($s1), str_split($s0));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction parse_nested_parens($paren_string) {\n    $parse_paren_group = function($s) {\n        $depth = 0;\n        $max_depth = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] === '(') {\n                $depth += 1;\n                $max_depth = max($depth, $max_depth);\n            } else {\n                $depth -= 1;\n            }\n        }\n\n        return $max_depth;\n    };\n\n    return array_map($parse_paren_group, array_filter(explode(' ', $paren_string)));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction even_odd_count($num) {\n    $even_count = 0;\n    $odd_count = 0;\n    foreach (str_split(abs($num)) as $i) {\n        if ($i % 2 == 0) {\n            $even_count += 1;\n        } else {\n            $odd_count += 1;\n        }\n    }\n    return [$even_count, $odd_count];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fruit_distribution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 apples and 6 oranges\" \"19\") = \"8\" ]]\n    [[ $(candidate \"5 apples and 6 oranges\" \"21\") = \"10\" ]]\n    [[ $(candidate \"0 apples and 1 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 apples and 0 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"100\") = \"95\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 apples and 100 oranges\" \"120\") = \"19\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fruit_distribution($s, $n) {\n    $lis = [];\n    foreach (explode(' ', $s) as $i) {\n        if (is_numeric($i)) {\n            array_push($lis, intval($i));\n        }\n    }\n    return $n - array_sum($lis);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    string_xor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"111000\" \"101010\") = \"010010\" ]]\n    [[ $(candidate \"1\" \"1\") = \"0\" ]]\n    [[ $(candidate \"0101\" \"0000\") = \"0101\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction string_xor($a, $b) {\n    $xor = function($i, $j) {\n        return $i === $j ? '0' : '1';\n    };\n\n    return join('', array_map($xor, str_split($a), str_split($b)));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    string_sequence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"3\") = \"0 1 2 3\" ]]\n    [[ $(candidate \"10\") = \"0 1 2 3 4 5 6 7 8 9 10\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction string_sequence($n) {\n    return implode(' ', range(0, $n));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nfile_name_check() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction file_name_check($file_name) {\n    $suf = ['txt', 'exe', 'dll'];\n    $lst = explode('.', $file_name);\n    if (count($lst) != 2) {\n        return 'No';\n    }\n    if (!in_array($lst[1], $suf)) {\n        return 'No';\n    }\n    if (strlen($lst[0]) == 0) {\n        return 'No';\n    }\n    if (!ctype_alpha($lst[0][0])) {\n        return 'No';\n    }\n    $t = preg_match_all('/\\d/', $lst[0]);\n    if ($t > 3) {\n        return 'No';\n    }\n    return 'Yes';\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfile_name_check() {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction can_arrange($arr) {\n    $ind = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i-1]) {\n            $ind = $i;\n        }\n    }\n    return $ind;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 88\") = \"88\" ]]\n    [[ $(candidate \"4 5 6 7 2 122\") = \"122\" ]]\n    [[ $(candidate \"4 0 6 7\") = \"0\" ]]\n    [[ $(candidate \"4 4 6 8\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction add($lst) {\n  $sum = 0;\n  for ($i = 1; $i < count($lst); $i += 2) {\n    if ($lst[$i] % 2 == 0) {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    intersperse \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"7\") = \"\" ]]\n    [[ $(candidate \"5 6 3 2\" \"8\") = \"5 8 6 8 3 8 2\" ]]\n    [[ $(candidate \"2 2 2\" \"2\") = \"2 2 2 2 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction intersperse($numbers, $delimeter) {\n    if (empty($numbers)) {\n        return [];\n    }\n\n    $result = [];\n\n    foreach ($numbers as $n) {\n        $result[] = $n;\n        $result[] = $delimeter;\n    }\n\n    array_pop($result);\n\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    match_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()( )\") = \"Yes\" ]]\n    [[ $(candidate \") )\") = \"No\" ]]\n    [[ $(candidate \"(()(()) ())())\") = \"No\" ]]\n    [[ $(candidate \")()) (()()(\") = \"Yes\" ]]\n    [[ $(candidate \"(()))) (()())((\") = \"Yes\" ]]\n    [[ $(candidate \"() ())\") = \"No\" ]]\n    [[ $(candidate \"(()( ()))()\") = \"Yes\" ]]\n    [[ $(candidate \"(((( ((())\") = \"No\" ]]\n    [[ $(candidate \")(() (()(\") = \"No\" ]]\n    [[ $(candidate \")( )(\") = \"No\" ]]\n    [[ $(candidate \"( )\") = \"Yes\" ]]\n    [[ $(candidate \") (\") = \"Yes\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction match_parens($lst) {\n    $check = function($s) {\n        $val = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] == '(') {\n                $val += 1;\n            } else {\n                $val -= 1;\n            }\n            if ($val < 0) {\n                return false;\n            }\n        }\n        return $val == 0;\n    };\n\n    $S1 = $lst[0] . $lst[1];\n    $S2 = $lst[1] . $lst[0];\n    return $check($S1) || $check($S2) ? 'Yes' : 'No';\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction any_int($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_max() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction find_max($words) {\n    usort($words, function($a, $b) {\n        return (count(array_unique(str_split($b))) <=> count(array_unique(str_split($a)))) ?: strcmp($a, $b);\n    });\n\n    return $words[0];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_max() {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    generate_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"10\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"10\" \"2\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"132\" \"2\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"17\" \"89\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction generate_integers($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 === 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    exchange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\" \"1 2 3 4\") = \"YES\" ]]\n    [[ $(candidate \"1 2 3 4\" \"1 5 3 4\") = \"NO\" ]]\n    [[ $(candidate \"1 2 3 4\" \"2 1 4 3\") = \"YES\" ]]\n    [[ $(candidate \"5 7 3\" \"2 6 4\") = \"YES\" ]]\n    [[ $(candidate \"5 7 3\" \"2 6 3\") = \"NO\" ]]\n    [[ $(candidate \"3 2 6 1 8 9\" \"3 5 5 1 1 1\") = \"NO\" ]]\n    [[ $(candidate \"100 200\" \"200 200\") = \"YES\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction exchange($lst1, $lst2) {\n  $odd = 0;\n  $even = 0;\n  foreach ($lst1 as $i) {\n    if ($i%2 == 1) {\n      $odd += 1;\n    }\n  }\n  foreach ($lst2 as $i) {\n    if ($i%2 == 0) {\n      $even += 1;\n    }\n  }\n  if ($even >= $odd) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    int_to_mini_roman \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"19\") = \"xix\" ]]\n    [[ $(candidate \"152\") = \"clii\" ]]\n    [[ $(candidate \"251\") = \"ccli\" ]]\n    [[ $(candidate \"426\") = \"cdxxvi\" ]]\n    [[ $(candidate \"500\") = \"d\" ]]\n    [[ $(candidate \"1\") = \"i\" ]]\n    [[ $(candidate \"4\") = \"iv\" ]]\n    [[ $(candidate \"43\") = \"xliii\" ]]\n    [[ $(candidate \"90\") = \"xc\" ]]\n    [[ $(candidate \"94\") = \"xciv\" ]]\n    [[ $(candidate \"532\") = \"dxxxii\" ]]\n    [[ $(candidate \"900\") = \"cm\" ]]\n    [[ $(candidate \"994\") = \"cmxciv\" ]]\n    [[ $(candidate \"1000\") = \"m\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction int_to_mini_roman($number) {\n    $num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    $sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n    $i = 12;\n    $res = '';\n    while ($number) {\n        $div = intdiv($number, $num[$i]);\n        $number %= $num[$i];\n        while ($div) {\n            $res .= $sym[$i];\n            $div--;\n        }\n        $i--;\n    }\n    return strtolower($res);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_equal_to_sum_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"8\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"false\" ]]\n    [[ $(candidate \"12\") = \"true\" ]]\n    [[ $(candidate \"13\") = \"false\" ]]\n    [[ $(candidate \"16\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_equal_to_sum_even($n) {\n    return $n%2 == 0 && $n >= 8;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction decimal_to_binary($decimal) {\n    return \"db\".decbin($decimal).\"db\";\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    simplify \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1/5\" \"5/1\") = \"true\" ]]\n    [[ $(candidate \"1/6\" \"2/1\") = \"false\" ]]\n    [[ $(candidate \"5/1\" \"3/1\") = \"true\" ]]\n    [[ $(candidate \"7/10\" \"10/2\") = \"false\" ]]\n    [[ $(candidate \"2/10\" \"50/10\") = \"true\" ]]\n    [[ $(candidate \"7/2\" \"4/2\") = \"true\" ]]\n    [[ $(candidate \"11/6\" \"6/1\") = \"true\" ]]\n    [[ $(candidate \"2/3\" \"5/2\") = \"false\" ]]\n    [[ $(candidate \"5/2\" \"3/5\") = \"false\" ]]\n    [[ $(candidate \"2/4\" \"8/4\") = \"true\" ]]\n    [[ $(candidate \"2/4\" \"4/2\") = \"true\" ]]\n    [[ $(candidate \"1/5\" \"5/1\") = \"true\" ]]\n    [[ $(candidate \"1/5\" \"1/5\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction simplify($x, $n) {\n    list($a, $b) = explode(\"/\", $x);\n    list($c, $d) = explode(\"/\", $n);\n    $numerator = $a * $c;\n    $denom = $b * $d;\n    if ($numerator / $denom == floor($numerator / $denom)) {\n        return true;\n    }\n    return false;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nsolve() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\") = \"#CCC\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction solve($s) {\n    $flg = 0;\n    $idx = 0;\n    $new_str = str_split($s);\n    foreach ($new_str as &$i) {\n        if (ctype_alpha($i)) {\n            $i = ctype_upper($i) ? strtolower($i) : strtoupper($i);\n            $flg = 1;\n        }\n        $idx += 1;\n    }\n    $s = implode($new_str);\n    if ($flg == 0) {\n        return strrev($s);\n    }\n    return $s;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsolve() {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    right_angle_triangle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"true\" ]]\n    [[ $(candidate \"1\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"10\" \"6\" \"8\") = \"true\" ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"false\" ]]\n    [[ $(candidate \"7\" \"24\" \"25\") = \"true\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"false\" ]]\n    [[ $(candidate \"5\" \"12\" \"13\") = \"true\" ]]\n    [[ $(candidate \"15\" \"8\" \"17\") = \"true\" ]]\n    [[ $(candidate \"48\" \"55\" \"73\") = \"true\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"false\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction right_angle_triangle($a, $b, $c) {\n    return $a*$a == $b*$b + $c*$c || $b*$b == $a*$a + $c*$c || $c*$c == $a*$a + $b*$b;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    compare_one \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"2\") = \"2\" ]]\n    [[ $(candidate \"1\" \"2.5\") = \"2.5\" ]]\n    [[ $(candidate \"2\" \"3\") = \"3\" ]]\n    [[ $(candidate \"5\" \"6\") = \"6\" ]]\n    [[ $(candidate \"1\" \"2,3\") = \"2,3\" ]]\n    [[ $(candidate \"5,1\" \"6\") = \"6\" ]]\n    [[ $(candidate \"1\" \"2\") = \"2\" ]]\n    [[ $(candidate \"1\" \"1\") = \"None\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction compare_one($a, $b) {\n    $temp_a = $a;\n    $temp_b = $b;\n    if (is_string($temp_a)) $temp_a = str_replace(',', '.', $temp_a);\n    if (is_string($temp_b)) $temp_b = str_replace(',', '.', $temp_b);\n    if (floatval($temp_a) == floatval($temp_b)) return null;\n    return floatval($temp_a) > floatval($temp_b) ? $a : $b;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    below_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"1 2 -3 1 2 -3\") = \"false\" ]]\n    [[ $(candidate \"1 2 -4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4 -4\") = \"false\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4 -5\") = \"true\" ]]\n    [[ $(candidate \"1 -2 2 -2 5 -5 4 -4\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction below_zero($operations) {\n    $balance = 0;\n\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    greatest_common_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"7\") = \"1\" ]]\n    [[ $(candidate \"10\" \"15\") = \"5\" ]]\n    [[ $(candidate \"49\" \"14\") = \"7\" ]]\n    [[ $(candidate \"144\" \"60\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction greatest_common_divisor($a, $b) {\n    while ($b) {\n        [$a, $b] = [$b, $a % $b];\n    }\n    return $a;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1 2 6 24 15\" ]]\n    [[ $(candidate \"7\") = \"1 2 6 24 15 720 28\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"3\") = \"1 2 6\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction f($n) {\n    $ret = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i%2 == 0) {\n            $x = 1;\n            for ($j = 1; $j <= $i; $j++) $x *= $j;\n            $ret[] = $x;\n        } else {\n            $x = 0;\n            for ($j = 1; $j <= $i; $j++) $x += $j;\n            $ret[] = $x;\n        }\n    }\n    return $ret;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction by_length($arr) {\n    $dic = [\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    ];\n    rsort($arr);\n    $new_arr = [];\n    foreach ($arr as $var) {\n        if (array_key_exists($var, $dic)) {\n            $new_arr[] = $dic[$var];\n        }\n    }\n    return $new_arr;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    remove_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"abcdef\\nghijklm\") = \"bcdf\\nghjklm\" ]]\n    [[ $(candidate \"fedcba\") = \"fdcb\" ]]\n    [[ $(candidate \"eeeee\") = \"\" ]]\n    [[ $(candidate \"acBAA\") = \"cB\" ]]\n    [[ $(candidate \"EcBOO\") = \"cB\" ]]\n    [[ $(candidate \"ybcd\") = \"ybcd\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction remove_vowels($text) {\n    return preg_replace(\"/[aeiou]/i\", \"\", $text);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    check_if_last_char_is_a_letter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\") = \"false\" ]]\n    [[ $(candidate \"apple pi e\") = \"true\" ]]\n    [[ $(candidate \"eeeee\") = \"false\" ]]\n    [[ $(candidate \"A\") = \"true\" ]]\n    [[ $(candidate \"Pumpkin pie \") = \"false\" ]]\n    [[ $(candidate \"Pumpkin pie 1\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"eeeee e \") = \"false\" ]]\n    [[ $(candidate \"apple pie\") = \"false\" ]]\n    [[ $(candidate \"apple pi e \") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction check_if_last_char_is_a_letter($txt) {\n    $check = explode(' ', $txt);\n    $check = end($check);\n    return (strlen($check) == 1 && (ord(strtolower($check)) >= 97 && ord(strtolower($check)) <= 122));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction iscube($a) {\n    $a = abs($a);\n    return pow(round(pow($a, 1/3)), 3) == $a;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    reverse_delete \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\" \"ae\") = \"bcd false\" ]]\n    [[ $(candidate \"abcdef\" \"b\") = \"acdef false\" ]]\n    [[ $(candidate \"abcdedcba\" \"ab\") = \"cdedc true\" ]]\n    [[ $(candidate \"dwik\" \"w\") = \"dik false\" ]]\n    [[ $(candidate \"a\" \"a\") = \" true\" ]]\n    [[ $(candidate \"abcdedcba\" \"\") = \"abcdedcba true\" ]]\n    [[ $(candidate \"abcdedcba\" \"v\") = \"abcdedcba true\" ]]\n    [[ $(candidate \"vabba\" \"v\") = \"abba true\" ]]\n    [[ $(candidate \"mamma\" \"mia\") = \" true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction reverse_delete($s, $c) {\n    $s = str_replace(str_split($c), '', $s);\n    return [$s, strrev($s) == $s];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    mean_absolute_deviation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0\") = \"0.5\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0\") = \"1.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"1.2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction mean_absolute_deviation($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    return array_sum(array_map(function($x) use ($mean) { return abs($x - $mean); }, $numbers)) / count($numbers);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction correct_bracketing($brackets) {\n    $depth = 0;\n    foreach (str_split($brackets) as $b) {\n        if ($b == \"<\") {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return False;\n        }\n    }\n    return $depth == 0;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrescale_to_unit() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    rescale_to_unit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2.0 49.9\") = \"0.0 1.0\" ]]\n    [[ $(candidate \"100.0 49.9\") = \"1.0 0.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"0.0 0.25 0.5 0.75 1.0\" ]]\n    [[ $(candidate \"2.0 1.0 5.0 3.0 4.0\") = \"0.25 0.0 1.0 0.5 0.75\" ]]\n    [[ $(candidate \"12.0 11.0 15.0 13.0 14.0\") = \"0.25 0.0 1.0 0.5 0.75\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction rescale_to_unit($numbers) {\n    $min_number = min($numbers);\n    $max_number = max($numbers);\n    return array_map(function($x) use ($min_number, $max_number) {\n        return ($x - $min_number) / ($max_number - $min_number);\n    }, $numbers);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrescale_to_unit() {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    intersection \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\" \"2 3\") = \"NO\" ]]\n    [[ $(candidate \"-1 1\" \"0 4\") = \"NO\" ]]\n    [[ $(candidate \"-3 -1\" \"-5 5\") = \"YES\" ]]\n    [[ $(candidate \"-2 2\" \"-4 0\") = \"YES\" ]]\n    [[ $(candidate \"-11 2\" \"-1 -1\") = \"NO\" ]]\n    [[ $(candidate \"1 2\" \"3 5\") = \"NO\" ]]\n    [[ $(candidate \"1 2\" \"1 2\") = \"NO\" ]]\n    [[ $(candidate \"-2 -2\" \"-3 -2\") = \"NO\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction intersection($interval1, $interval2) {\n    $is_prime=function($num) {\n        if ($num == 1 || $num == 0) {\n            return false;\n        }\n        if ($num == 2) {\n            return true;\n        }\n        for ($i = 2; $i < $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    if ($length > 0 && $is_prime($length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction hex_key($num) {\n    $primes = ['2', '3', '5', '7', 'B', 'D'];\n    $total = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $primes)) {\n            $total += 1;\n        }\n    }\n    return $total;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nstrange_sort_list() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction strange_sort_list($lst) {\n    $res = [];\n    $switch = true;\n    while ($lst) {\n        $res[] = $switch ? min($lst) : max($lst);\n        unset($lst[array_search(end($res), $lst)]);\n        $switch = !$switch;\n    }\n    return $res;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nstrange_sort_list() {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_bored \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\") = \"0\" ]]\n    [[ $(candidate \"Is the sky blue?\") = \"0\" ]]\n    [[ $(candidate \"I love It \\!\") = \"1\" ]]\n    [[ $(candidate \"bIt\") = \"0\" ]]\n    [[ $(candidate \"I feel good today. I will be productive. will kill It\") = \"2\" ]]\n    [[ $(candidate \"You and I are going for a walk\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_bored($S) {\n    $sentences = preg_split('/[.?!]\\s*/', $S);\n    return count(array_filter($sentences, function($sentence) {\n        return substr($sentence, 0, 2) == 'I ';\n    }));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nall_prefixes() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    all_prefixes \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"asdfgh\") = \"a as asd asdf asdfg asdfgh\" ]]\n    [[ $(candidate \"WWW\") = \"W WW WWW\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction all_prefixes($string) {\n    $result = [];\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $result[] = substr($string, 0, $i+1);\n    }\n\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nall_prefixes() {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction how_many_times($string, $substring) {\n    $times = 0;\n\n    for ($i = 0; $i <= strlen($string) - strlen($substring); $i++) {\n        if (substr($string, $i, strlen($substring)) == $substring) {\n            $times += 1;\n        }\n    }\n\n    return $times;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 8 7 1\") = \"12\" ]]\n    [[ $(candidate \"3 3 3 3 3\") = \"9\" ]]\n    [[ $(candidate \"30 13 24 321\") = \"0\" ]]\n    [[ $(candidate \"5 9\") = \"5\" ]]\n    [[ $(candidate \"2 4 8\") = \"0\" ]]\n    [[ $(candidate \"30 13 23 32\") = \"23\" ]]\n    [[ $(candidate \"3 13 2 9\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction solution($lst) {\n    return array_sum(array_filter($lst, function($x, $idx) {\n        return $idx%2==0 && $x%2==1;\n    }, ARRAY_FILTER_USE_BOTH));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_sorted($lst) {\n    $count_digit = array_fill_keys($lst, 0);\n    foreach ($lst as $i) {\n        $count_digit[$i]++;\n    }\n    if (in_array(true, array_map(function($i) use ($count_digit) {\n        return $count_digit[$i] > 2;\n    }, $lst))) {\n        return false;\n    }\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction search($lst) {\n    $frq = array_fill(0, max($lst) + 1, 0);\n    foreach ($lst as $i) {\n        $frq[$i]++;\n    }\n\n    $ans = -1;\n    for ($i = 1; $i < count($frq); $i++) {\n        if ($frq[$i] >= $i) {\n            $ans = $i;\n        }\n    }\n\n    return $ans;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\npluck() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction pluck($arr) {\n  if(count($arr) == 0) return [];\n  $evens = array_filter($arr, function($x) { return $x%2 == 0; });\n  if($evens == []) return [];\n  return [min($evens), array_search(min($evens), $arr)];\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npluck() {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    pairs_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 -5 3 5 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"-3 9 -1 3 2 30\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 3 2 31\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 30\") = \"false\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 31\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction pairs_sum_to_zero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nmake_palindrome() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    make_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"x\") = \"x\" ]]\n    [[ $(candidate \"xyz\") = \"xyzyx\" ]]\n    [[ $(candidate \"xyx\") = \"xyx\" ]]\n    [[ $(candidate \"jerry\") = \"jerryrrej\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction make_palindrome($string) {\n    if (!$string) {\n        return '';\n    }\n\n    $beginning_of_suffix = 0;\n\n    while (substr($string, $beginning_of_suffix) != strrev(substr($string, $beginning_of_suffix))) {\n        $beginning_of_suffix++;\n    }\n\n    return $string . strrev(substr($string, 0, $beginning_of_suffix));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nmake_palindrome() {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    starts_one_ends \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"2\") = \"18\" ]]\n    [[ $(candidate \"3\") = \"180\" ]]\n    [[ $(candidate \"4\") = \"1800\" ]]\n    [[ $(candidate \"5\") = \"18000\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction starts_one_ends($n) {\n    if ($n == 1) return 1;\n    return 18 * pow(10, $n - 2);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_positive($l) {\n    $result = array();\n    foreach ($l as $e) {\n        if ($e > 0) {\n            $result[] = $e;\n        }\n    }\n    return $result;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    concatenate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"x y z\") = \"xyz\" ]]\n    [[ $(candidate \"x y z w k\") = \"xyzwk\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction concatenate($strings) {\n    return implode($strings);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_nested() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_nested \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"[[]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]][[[[[]\") = \"false\" ]]\n    [[ $(candidate \"[][]\") = \"false\" ]]\n    [[ $(candidate \"[]\") = \"false\" ]]\n    [[ $(candidate \"[[[[]]]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]]]]]\") = \"false\" ]]\n    [[ $(candidate \"[][][[]]\") = \"true\" ]]\n    [[ $(candidate \"[[]\") = \"false\" ]]\n    [[ $(candidate \"[]]\") = \"false\" ]]\n    [[ $(candidate \"[[]][[\") = \"true\" ]]\n    [[ $(candidate \"[[][]]\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"[[[[[[[[\") = \"false\" ]]\n    [[ $(candidate \"]]]]]]]]\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_nested($string) {\n    $opening_bracket_index = [];\n    $closing_bracket_index = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($opening_bracket_index, $i);\n        } else {\n            array_push($closing_bracket_index, $i);\n        }\n    }\n    $closing_bracket_index = array_reverse($closing_bracket_index);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closing_bracket_index);\n    foreach ($opening_bracket_index as $idx) {\n        if ($i < $l && $idx < $closing_bracket_index[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_nested() {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"aba\") = \"true\" ]]\n    [[ $(candidate \"aaaaa\") = \"true\" ]]\n    [[ $(candidate \"zbcd\") = \"false\" ]]\n    [[ $(candidate \"xywyx\") = \"true\" ]]\n    [[ $(candidate \"xywyz\") = \"false\" ]]\n    [[ $(candidate \"xywzx\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_palindrome($text) {\n    for ($i = 0; $i < strlen($text); $i++) {\n        if ($text[$i] != $text[strlen($text) - 1 - $i]) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncount_nums() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    count_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 0\") = \"0\" ]]\n    [[ $(candidate \"1 1 2 -2 3 4 5\") = \"6\" ]]\n    [[ $(candidate \"1 6 9 -6 0 1 5\") = \"5\" ]]\n    [[ $(candidate \"1 100 98 -7 1 -1\") = \"4\" ]]\n    [[ $(candidate \"12 23 34 -45 -56 0\") = \"5\" ]]\n    [[ $(candidate \"0 1\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction count_nums($arr) {\n    $digits_sum = function($n) {\n        $neg = 1;\n        if ($n < 0) {\n            $n = -1 * $n;\n            $neg = -1;\n        }\n        $n = array_map('intval', str_split($n));\n        $n[0] = $n[0] * $neg;\n        return array_sum($n);\n    };\n    return count(array_filter(array_map($digits_sum, $arr), function($x) { return $x > 0; }));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncount_nums() {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction factorize($n) {\n    $fact = [];\n    $i = 2;\n    while ($i <= intval(sqrt($n) + 1)) {\n        if ($n % $i === 0) {\n            $fact[] = $i;\n            $n /= $i;\n        } else {\n            $i += 1;\n        }\n    }\n\n    if ($n > 1) {\n        $fact[] = $n;\n    }\n    return $fact;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction largest_prime_factor($n) {\n    $is_prime=function($k) {\n        if ($k < 2) {\n            return false;\n        }\n        for ($i = 2; $i < $k; $i++) {\n            if ($k % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    $largest = 1;\n    for ($j = 2; $j <= $n; $j++) {\n        if ($n % $j == 0 && $is_prime($j)) {\n            $largest = max($largest, $j);\n        }\n    }\n    return $largest;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_max_triples($n) {\n    $A = array_map(function($i) { return $i*$i - $i + 1; }, range(1, $n));\n    $ans = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i+1; $j < $n; $j++) {\n            for ($k = $j+1; $k < $n; $k++) {\n                if (($A[$i]+$A[$j]+$A[$k])%3 == 0) {\n                    $ans[] = [$A[$i], $A[$j], $A[$k]];\n                }\n            }\n        }\n    }\n    return count($ans);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nanti_shuffle() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction anti_shuffle($s) {\n    $words = explode(' ', $s);\n    $sorted_words = array_map(function($i) {\n        $chars = str_split($i);\n        sort($chars);\n        return implode($chars);\n    }, $words);\n    return implode(' ', $sorted_words);\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nanti_shuffle() {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1000\") = \"1\" ]]\n    [[ $(candidate \"150\") = \"110\" ]]\n    [[ $(candidate \"147\") = \"1100\" ]]\n    [[ $(candidate \"333\") = \"1001\" ]]\n    [[ $(candidate \"963\") = \"10010\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction solve($N) {\n    return decbin(array_sum(str_split($N)));\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    minPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\" \"3\") = \"1 2 1\" ]]\n    [[ $(candidate \"5 9 3\\n4 1 6\\n7 8 2\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\" \"4\") = \"1 2 1 2\" ]]\n    [[ $(candidate \"6 4 13 10\\n5 7 12 1\\n3 16 11 15\\n8 14 9 2\" \"7\") = \"1 10 1 10 1 10 1\" ]]\n    [[ $(candidate \"8 14 9 2\\n6 4 13 15\\n5 7 1 12\\n3 10 11 16\" \"5\") = \"1 7 1 7 1\" ]]\n    [[ $(candidate \"11 8 7 2\\n5 16 14 4\\n9 3 15 6\\n12 13 10 1\" \"9\") = \"1 6 1 6 1 6 1 6 1\" ]]\n    [[ $(candidate \"12 13 10 1\\n9 3 15 6\\n5 16 14 4\\n11 8 7 2\" \"12\") = \"1 6 1 6 1 6 1 6 1 6 1 6\" ]]\n    [[ $(candidate \"2 7 4\\n3 1 5\\n6 8 9\" \"8\") = \"1 3 1 3 1 3 1 3\" ]]\n    [[ $(candidate \"6 1 5\\n3 8 9\\n2 7 4\" \"8\") = \"1 5 1 5 1 5 1 5\" ]]\n    [[ $(candidate \"1 2\\n3 4\" \"10\") = \"1 2 1 2 1 2 1 2 1 2\" ]]\n    [[ $(candidate \"1 3\\n3 2\" \"10\") = \"1 3 1 3 1 3 1 3 1 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction minPath($grid, $k) {\n    $n = count($grid);\n    $val = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n\n                $val = min($temp);\n            }\n        }\n    }\n\n    $ans = [];\n    for ($i = 0; $i < $k; $i++) {\n        if ($i % 2 == 0) {\n            $ans[] = 1;\n        } else {\n            $ans[] = $val;\n        }\n    }\n    return $ans;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nencrypt() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction encrypt($s) {\n    $d = 'abcdefghijklmnopqrstuvwxyz';\n    $out = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if (strpos($d, $c) !== false) {\n            $out .= $d[(strpos($d, $c)+4) % 26];\n        } else {\n            $out .= $c;\n        }\n    }\n    return $out;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nencrypt() {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction make_a_pile($n) {\n    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $n + 2*$i;\n    }\n    return $pile;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_prime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($k = 2; $k < $n; $k++) {\n        if ($n % $k == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n"
  }
]