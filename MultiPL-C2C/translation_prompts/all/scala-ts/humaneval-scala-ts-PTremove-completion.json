[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "ts",
    "prompt": "function correct_bracketing(brackets: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n        var depth = 0\n        for (b <- brackets) {\n            if (b == '(') {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if (depth < 0) {\n                return false\n            }\n        }\n        depth == 0\n    }\n}\n\n### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "ts",
    "prompt": "function triangle_area(a: number, h: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n  assert.deepEqual(candidate(2, 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(a : Long, h : Long) : Float = {\n        a * h / 2.0f\n    }\n}\n\n### TypeScript version\n\nfunction triangle_area(a: number, h: number): number {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "ts",
    "prompt": "function special_factorial(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFactorial(n : Long) : Long = {\n        var factI = 1L\n        var specialFact = 1L\n        for (i <- 1L to n) {\n            factI *= i\n            specialFact *= factI\n        }\n        specialFact\n    }\n}\n\n### TypeScript version\n\nfunction special_factorial(n: number): number {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "ts",
    "prompt": "function move_one_ball(arr: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_one_ball;\n  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);\n  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);\n  assert.deepEqual(candidate([4, 3, 1, 2]),false);\n  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);\n  assert.deepEqual(candidate([]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def moveOneBall(arr : List[Long]) : Boolean = {\n        if (arr.length == 0) {\n            true\n        } else {\n            val sortedArray = arr.sorted\n            val minIndex = arr.indexOf(arr.min)\n            val myArr = arr.slice(minIndex, arr.length) ++ arr.slice(0, minIndex)\n            myArr == sortedArray\n        }\n    }\n}\n\n### TypeScript version\n\nfunction move_one_ball(arr: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "ts",
    "prompt": "function digits(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n  assert.deepEqual(candidate(2468),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digits(n : Long) : Long = {\n        var product = 1L\n        var oddCount = 0\n        for (digit <- n.toString) {\n            val intDigit = digit.asDigit\n            if (intDigit % 2 == 1) {\n                product *= intDigit\n                oddCount += 1\n            }\n        }\n        if (oddCount == 0) {\n            0\n        } else {\n            product\n        }\n    }\n}\n\n### TypeScript version\n\nfunction digits(n: number): number {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "ts",
    "prompt": "function fib4(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib4(n : Long) : Long = {\n        var results = ListBuffer[Long](0, 0, 2, 0)\n        if (n < 4) {\n            return results(n.toInt)\n        }\n        for (_ <- 4L to n) {\n            results += results.takeRight(4).sum\n            results.remove(0)\n        }\n        results.last\n    }\n}\n\n### TypeScript version\n\nfunction fib4(n: number): number {\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "ts",
    "prompt": "function sort_even(l: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_even;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortEven(l : List[Long]) : List[Long] = {\n        val evens = l.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).sorted\n        val odds = l.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n        val ans = evens.zip(odds).flatMap(x => List(x._1, x._2))\n        if (evens.length > odds.length) {\n            ans :+ evens.last\n        } else {\n            ans\n        }\n    }\n}\n\n### TypeScript version\n\nfunction sort_even(l: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "ts",
    "prompt": "function order_by_points(nums: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def orderByPoints(nums : List[Long]) : List[Long] = {\n        def digitsSum(n : Long) : Long = {\n            val neg = if (n < 0) -1 else 1\n            val digits = n.abs.toString.map(_.asDigit).toList\n            digits.head * neg + digits.tail.sum\n        }\n        nums.sortBy(digitsSum)\n    }\n}\n\n### TypeScript version\n\nfunction order_by_points(nums: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "ts",
    "prompt": "function is_happy(s: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isHappy(s : String) : Boolean = {\n        if (s.length < 3) {\n            return false\n        }\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i+1) || s(i+1) == s(i+2) || s(i) == s(i+2)) {\n                return false\n            }\n        }\n        true\n    }\n}\n\n### TypeScript version\n\nfunction is_happy(s: string): boolean {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "ts",
    "prompt": "function circular_shift(x: number, shift: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def circularShift(x : Long, shift : Long) : String = {\n        var s = x.toString\n        if (shift > s.length) s.reverse\n        else s.substring(s.length - shift.toInt, s.length) + s.substring(0, s.length - shift.toInt)\n    }\n}\n\n### TypeScript version\n\nfunction circular_shift(x: number, shift: number): string {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "ts",
    "prompt": "function max_fill(grid: number[][], capacity: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n        grid.map(arr => ceil(arr.sum.toDouble/capacity).toLong).sum\n    }\n}\n\n### TypeScript version\n\nfunction max_fill(grid: number[][], capacity: number): number {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "ts",
    "prompt": "function has_close_elements(numbers: number[], threshold: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n        for (i <- numbers.indices) {\n            for (j <- numbers.indices) {\n                if (i != j) {\n                    val distance = abs(numbers(i) - numbers(j))\n                    if (distance < threshold) {\n                        return true\n                    }\n                }\n            }\n        }\n        false\n    }\n}\n\n### TypeScript version\n\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "ts",
    "prompt": "function x_or_y(n: number, x: number, y: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = x_or_y;\n  assert.deepEqual(candidate(7, 34, 12),34);\n  assert.deepEqual(candidate(15, 8, 5),5);\n  assert.deepEqual(candidate(3, 33, 5212),33);\n  assert.deepEqual(candidate(1259, 3, 52),3);\n  assert.deepEqual(candidate(7919, -1, 12),-1);\n  assert.deepEqual(candidate(3609, 1245, 583),583);\n  assert.deepEqual(candidate(91, 56, 129),129);\n  assert.deepEqual(candidate(6, 34, 1234),1234);\n  assert.deepEqual(candidate(1, 2, 0),0);\n  assert.deepEqual(candidate(2, 2, 0),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n        if (n == 1) {\n            return y\n        }\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                return y\n            }\n        }\n        return x\n    }\n}\n\n### TypeScript version\n\nfunction x_or_y(n: number, x: number, y: number): number {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "ts",
    "prompt": "function specialFilter(nums: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2, 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([]),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(num => {\n            val numAsString = num.toString\n            num > 10 && numAsString.head.asDigit % 2 == 1 && numAsString.last.asDigit % 2 == 1\n        })\n    }\n}\n\n### TypeScript version\n\nfunction specialFilter(nums: number[]): number {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "ts",
    "prompt": "function parse_music(music_string: string): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseMusic(music_string : String) : List[Long] = {\n        val noteMap = Map(\"o\" -> 4L, \"o|\" -> 2L, \".|\" -> 1L)\n        music_string.split(\" \").filter(_ != \"\").map(noteMap(_)).toList\n    }\n}\n\n### TypeScript version\n\nfunction parse_music(music_string: string): number[] {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "ts",
    "prompt": "function count_distinct_characters(string: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countDistinctCharacters(string : String) : Long = {\n        string.toLowerCase.toSet.size\n    }\n}\n\n### TypeScript version\n\nfunction count_distinct_characters(string: string): number {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "ts",
    "prompt": "function digitSum(s: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\" How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digitSum(s : String) : Long = {\n        if (s == \"\") return 0\n        s.filter(_.isUpper).map(_.toLong).sum\n    }\n}\n\n### TypeScript version\n\nfunction digitSum(s: string): number {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "ts",
    "prompt": "function sum_squares(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1, 2, 3]),6);\n  assert.deepEqual(candidate([1, 4, 9]),14);\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);\n  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);\n  assert.deepEqual(candidate([0]),0);\n  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);\n  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);\n  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);\n  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);\n  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Long]) : Long = {\n        lst.zipWithIndex.map {\n            case (x, i) if i % 3 == 0 => x * x\n            case (x, i) if i % 4 == 0 => x * x * x\n            case (x, _) => x\n        }.sum\n    }\n}\n\n### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "ts",
    "prompt": "function count_up_to(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_up_to;\n  assert.deepEqual(candidate(5),[2, 3]);\n  assert.deepEqual(candidate(6),[2, 3, 5]);\n  assert.deepEqual(candidate(7),[2, 3, 5]);\n  assert.deepEqual(candidate(10),[2, 3, 5, 7]);\n  assert.deepEqual(candidate(0),[]);\n  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);\n  assert.deepEqual(candidate(1),[]);\n  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpTo(n : Long) : List[Long] = {\n        var primes = List[Long]()\n        for (i <- 2L until n) {\n            if ((2L until i).forall(i % _ != 0)) {\n                primes = primes :+ i\n            }\n        }\n        primes\n    }\n}\n\n### TypeScript version\n\nfunction count_up_to(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "ts",
    "prompt": "function sum_squares(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Float]) : Long = {\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum\n    }\n}\n\n### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "ts",
    "prompt": "function unique(l: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def unique(l : List[Long]) : List[Long] = {\n        l.distinct.sorted\n    }\n}\n\n### TypeScript version\n\nfunction unique(l: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "ts",
    "prompt": "function fib(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n        }\n        if (n == 1) {\n            return 1\n        }\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\n### TypeScript version\n\nfunction fib(n: number): number {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "ts",
    "prompt": "function fizz_buzz(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fizzBuzz(n : Long) : Long = {\n        val ns = (0L until n).filter(x => x % 11 == 0 || x % 13 == 0)\n        val s = ns.mkString\n        s.count(_ == '7')\n    }\n}\n\n### TypeScript version\n\nfunction fizz_buzz(n: number): number {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "ts",
    "prompt": "function Strongest_Extension(class_name: string, extensions: string[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\");\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n        var strong = extensions(0)\n        var myVal = extensions(0).count(_.isUpper) - extensions(0).count(_.isLower)\n        for (s <- extensions) {\n            val val_ = s.count(_.isUpper) - s.count(_.isLower)\n            if (val_ > myVal) {\n                strong = s\n                myVal = val_\n            }\n        }\n        class_name + \".\" + strong\n    }\n}\n\n### TypeScript version\n\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "ts",
    "prompt": "function find_closest_elements(numbers: number[]): [number, number] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n        var closestPair : Option[Tuple2[Float, Float]] = None\n        var distance : Option[Float] = None\n\n        for ((elem, idx) <- numbers.zipWithIndex) {\n            for ((elem2, idx2) <- numbers.zipWithIndex) {\n                if (idx != idx2) {\n                    if (distance.isEmpty) {\n                        distance = Some(abs(elem - elem2))\n                        closestPair = Some((elem, elem2))\n                    } else {\n                        val newDistance = abs(elem - elem2)\n                        if (newDistance < distance.get) {\n                            distance = Some(newDistance)\n                            closestPair = Some((elem, elem2))\n                        }\n                    }\n                }\n            }\n        }\n\n        closestPair.get match {\n            case (a, b) => (a min b, a max b)\n        }\n    }\n}\n\n### TypeScript version\n\nfunction find_closest_elements(numbers: number[]): [number, number] {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "ts",
    "prompt": "function valid_date(date: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def validDate(date : String) : Boolean = {\n        try {\n            var d = date.trim().split(\"-\").map(_.toInt)\n            if (d(0) < 1 || d(0) > 12) return false\n            if (d(0) == 2 && (d(1) < 1 || d(1) > 29)) return false\n            if (List(4,6,9,11).contains(d(0)) && (d(1) < 1 || d(1) > 30)) return false\n            if (List(1,3,5,7,8,10,12).contains(d(0)) && (d(1) < 1 || d(1) > 31)) return false\n        } catch {\n            case e: Exception => return false\n        }\n        true\n    }\n}\n\n### TypeScript version\n\nfunction valid_date(date: string): boolean {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "ts",
    "prompt": "function add(x: number, y: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate(0, 1),1);\n  assert.deepEqual(candidate(1, 0),1);\n  assert.deepEqual(candidate(2, 3),5);\n  assert.deepEqual(candidate(5, 7),12);\n  assert.deepEqual(candidate(7, 5),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(x : Long, y : Long) : Long = {\n        x + y\n    }\n}\n\n### TypeScript version\n\nfunction add(x: number, y: number): number {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "ts",
    "prompt": "function triples_sum_to_zero(l: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1, 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3, 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n        for (i <- 0 until l.length) {\n            for (j <- i+1 until l.length) {\n                for (k <- j+1 until l.length) {\n                    if (l(i) + l(j) + l(k) == 0) {\n                        return true\n                    }\n                }\n            }\n        }\n        false\n    }\n}\n\n### TypeScript version\n\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "ts",
    "prompt": "function largest_divisor(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n  assert.deepEqual(candidate(49),7);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestDivisor(n : Long) : Long = {\n        (n-1L to 1L by -1L).find(n % _ == 0).get\n    }\n}\n\n### TypeScript version\n\nfunction largest_divisor(n: number): number {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "ts",
    "prompt": "function sort_numbers(numbers: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortNumbers(numbers : String) : String = {\n        val valueMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        numbers.split(\" \").filter(_ != \"\").sortWith((a, b) => valueMap(a) < valueMap(b)).mkString(\" \")\n    }\n}\n\n### TypeScript version\n\nfunction sort_numbers(numbers: string): string {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "ts",
    "prompt": "function smallest_change(arr: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def smallestChange(arr : List[Long]) : Long = {\n        var ans = 0\n        for (i <- 0 until arr.length / 2) {\n            if (arr(i) != arr(arr.length - i - 1)) {\n                ans += 1\n            }\n        }\n        ans\n    }\n}\n\n### TypeScript version\n\nfunction smallest_change(arr: number[]): number {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "ts",
    "prompt": "function below_threshold(l: number[], t: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_threshold;\n  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);\n  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n        l.forall(_ < t)\n    }\n}\n\n### TypeScript version\n\nfunction below_threshold(l: number[], t: number): boolean {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "ts",
    "prompt": "function modp(n: number, p: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def modp(n : Long, p : Long) : Long = {\n        var ret = 1L\n        for (i <- 1L to n) {\n            ret = (2L * ret) % p\n        }\n        ret\n    }\n}\n\n### TypeScript version\n\nfunction modp(n: number, p: number): number {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "ts",
    "prompt": "function count_upper(s: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpper(s : String) : Long = {\n        s.zipWithIndex.count { case (c, i) => i % 2 == 0 && \"AEIOU\".contains(c) }\n    }\n}\n\n### TypeScript version\n\nfunction count_upper(s: string): number {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "ts",
    "prompt": "function multiply(a: number, b: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def multiply(a : Long, b : Long) : Long = {\n        abs(a % 10) * abs(b % 10)\n    }\n}\n\n### TypeScript version\n\nfunction multiply(a: number, b: number): number {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "ts",
    "prompt": "function unique_digits(x: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n        x.filter(_.toString.forall(_.asDigit % 2 == 1)).sorted\n    }\n}\n\n### TypeScript version\n\nfunction unique_digits(x: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "ts",
    "prompt": "function will_it_fly(q: number[], w: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        if(q.sum > w) {\n            false\n        } else {\n            q == q.reverse\n        }\n    }\n}\n\n### TypeScript version\n\nfunction will_it_fly(q: number[], w: number): boolean {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "ts",
    "prompt": "function is_multiply_prime(a: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n  assert.deepEqual(candidate(1001),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isMultiplyPrime(a : Long) : Boolean = {\n        def isPrime(n : Long) : Boolean = {\n            (2L to n-1L).forall(n % _ != 0)\n        }\n        (2L to 100L).exists(i => isPrime(i) && (2L to 100L).exists(j => isPrime(j) && (2L to 100L).exists(k => isPrime(k) && i*j*k == a)))\n    }\n}\n\n### TypeScript version\n\nfunction is_multiply_prime(a: number): boolean {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "ts",
    "prompt": "function maximum(arr: number[], k: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n        if (k == 0) {\n            List()\n        } else {\n            arr.sorted.takeRight(k.toInt)\n        }\n    }\n}\n\n### TypeScript version\n\nfunction maximum(arr: number[], k: number): number[] {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "ts",
    "prompt": "function separate_paren_groups(paren_string: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var currentString = ListBuffer[Char]()\n        var currentDepth = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n                currentDepth += 1\n                currentString += c\n            } else if (c == ')') {\n                currentDepth -= 1\n                currentString += c\n                if (currentDepth == 0) {\n                    result = result :+ currentString.mkString\n                    currentString.clear()\n                }\n            }\n        }\n        result\n    }\n}\n\n### TypeScript version\n\nfunction separate_paren_groups(paren_string: string): string[] {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "ts",
    "prompt": "function filter_integers(values: any[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterIntegers(values : List[Any]) : List[Long] = {\n        values.collect { case x: Long => x }\n    }\n}\n\n### TypeScript version\n\nfunction filter_integers(values: any[]): number[] {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "ts",
    "prompt": "function skjkasdkd(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def skjkasdkd(lst : List[Long]) : Long = {\n        def isPrime(n : Long) : Boolean = {\n            for (i <- 2L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            true\n        }\n        var maxx = 0L\n        for (i <- lst) {\n            if (i > maxx && isPrime(i)) {\n                maxx = i\n            }\n        }\n        maxx.toString.map(_.asDigit).sum\n    }\n}\n\n### TypeScript version\n\nfunction skjkasdkd(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "ts",
    "prompt": "function total_match(lst1: string[], lst2: string[]): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n        val l1 = lst1.map(_.length).sum\n        val l2 = lst2.map(_.length).sum\n        if (l1 <= l2) {\n            lst1\n        } else {\n            lst2\n        }\n    }\n}\n\n### TypeScript version\n\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "ts",
    "prompt": "function car_race_collision(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def carRaceCollision(n : Long) : Long = {\n        n * n\n    }\n}\n\n### TypeScript version\n\nfunction car_race_collision(n: number): number {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "ts",
    "prompt": "function is_simple_power(x: number, n: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n        if (n == 1) return x == 1\n        var power = 1L\n        while (power < x) {\n            power = power * n\n        }\n        power == x\n    }\n}\n\n### TypeScript version\n\nfunction is_simple_power(x: number, n: number): boolean {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "ts",
    "prompt": "function encode(message: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def encode(message : String) : String = {\n        val vowels = \"aeiouAEIOU\"\n        val vowelsReplace = vowels.map(c => (c, (c + 2).toChar)).toMap\n        message.map(c => if (vowels.contains(c)) vowelsReplace(c) else c).map(c => if (c.isLower) c.toUpper else c.toLower).mkString\n    }\n}\n\n### TypeScript version\n\nfunction encode(message: string): string {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "ts",
    "prompt": "function incr_list(l: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def incrList(l : List[Long]) : List[Long] = {\n        l.map(_ + 1)\n    }\n}\n\n### TypeScript version\n\nfunction incr_list(l: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "ts",
    "prompt": "function flip_case(string: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def flipCase(string : String) : String = {\n        string.map(c => if (c.isUpper) c.toLower else c.toUpper)\n    }\n}\n\n### TypeScript version\n\nfunction flip_case(string: string): string {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "ts",
    "prompt": "function vowels_count(s: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"ACEDY\"),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def vowelsCount(s : String) : Long = {\n        val vowels = \"aeiouAEIOU\"\n        var nVowels = s.count(vowels.contains(_))\n        if (s.last == 'y' || s.last == 'Y') {\n            nVowels += 1\n        }\n        nVowels\n    }\n}\n\n### TypeScript version\n\nfunction vowels_count(s: string): number {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "ts",
    "prompt": "function sorted_list_sum(lst: string[]): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortedListSum(lst : List[String]) : List[String] = {\n        val newLst = lst.filter(_.length % 2 == 0).sorted\n        newLst.sortBy(_.length)\n    }\n}\n\n### TypeScript version\n\nfunction sorted_list_sum(lst: string[]): string[] {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "ts",
    "prompt": "function words_string(s: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsString(s : String) : List[String] = {\n        if (s == \"\") {\n            List()\n        } else {\n            s.replaceAll(\",\", \" \").split(\"\\\\s+\").toList\n        }\n    }\n}\n\n### TypeScript version\n\nfunction words_string(s: string): string[] {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "ts",
    "prompt": "function even_odd_palindrome(n: number): [number, number] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n        def isPalindrome(n : Long) = n.toString == n.toString.reverse\n        var evenPalindromeCount = 0L\n        var oddPalindromeCount = 0L\n        for (i <- 1L to n) {\n            if (i % 2 == 1 && isPalindrome(i)) {\n                oddPalindromeCount += 1\n            } else if (i % 2 == 0 && isPalindrome(i)) {\n                evenPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)\n    }\n}\n\n### TypeScript version\n\nfunction even_odd_palindrome(n: number): [number, number] {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "ts",
    "prompt": "function triangle_area(a: number, b: number, c: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4, 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4, 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1, 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2, 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2, 2, 10),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1\n        }\n        val s = (a + b + c)/2.0\n        val area = pow(s * (s - a) * (s - b) * (s - c), 0.5)\n        return BigDecimal(area).setScale(2, BigDecimal.RoundingMode.HALF_UP).toFloat\n    }\n}\n\n### TypeScript version\n\nfunction triangle_area(a: number, b: number, c: number): number {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "ts",
    "prompt": "function check_dict_case(dict: {[key: string]: string}): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n            false\n        } else {\n            var state = \"start\"\n            for (key <- dict.keys) {\n                if (!key.isInstanceOf[String]) {\n                    state = \"mixed\"\n                } else if (state == \"start\") {\n                    if (key.forall(_.isUpper)) {\n                        state = \"upper\"\n                    } else if (key.forall(_.isLower)) {\n                        state = \"lower\"\n                    } else {\n                        state = \"mixed\"\n                    }\n                } else if ((state == \"upper\" && !key.forall(_.isUpper)) || (state == \"lower\" && !key.forall(_.isLower))) {\n                    state = \"mixed\"\n                }\n            }\n            state == \"upper\" || state == \"lower\"\n        }\n    }\n}\n\n### TypeScript version\n\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "ts",
    "prompt": "function tri(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tri(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(1)\n        }\n        var my_tri = ListBuffer[Long](1, 3)\n        for (i <- 2 to n.toInt) {\n            if (i % 2 == 0) {\n                my_tri += i / 2 + 1\n            } else {\n                my_tri += my_tri(i - 1) + my_tri(i - 2) + (i + 3) / 2\n            }\n        }\n        my_tri.toList\n    }\n}\n\n### TypeScript version\n\nfunction tri(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "ts",
    "prompt": "function median(l: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def median(l : List[Long]) : Float = {\n        val sortedL = l.sorted\n        if (sortedL.length % 2 == 1) {\n            sortedL(sortedL.length / 2)\n        } else {\n            (sortedL(sortedL.length / 2 - 1) + sortedL(sortedL.length / 2)) / 2.0f\n        }\n    }\n}\n\n### TypeScript version\n\nfunction median(l: number[]): number {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "ts",
    "prompt": "function change_base(x: number, base: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def changeBase(x : Long, base : Long) : String = {\n        var ret = \"\"\n        var y = x\n        while (y > 0) {\n            ret = (y % base).toString + ret\n            y /= base\n        }\n        ret\n    }\n}\n\n### TypeScript version\n\nfunction change_base(x: number, base: number): string {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "ts",
    "prompt": "function common(l1: number[], l2: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n        l1.intersect(l2).sorted\n    }\n}\n\n### TypeScript version\n\nfunction common(l1: number[], l2: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "ts",
    "prompt": "function cycpattern_check(a: string, b: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cycpattern_check;\n  assert.deepEqual(candidate(\"xyzw\", \"xyw\"),false);\n  assert.deepEqual(candidate(\"yello\", \"ell\"),true);\n  assert.deepEqual(candidate(\"whattup\", \"ptut\"),false);\n  assert.deepEqual(candidate(\"efef\", \"fee\"),true);\n  assert.deepEqual(candidate(\"abab\", \"aabb\"),false);\n  assert.deepEqual(candidate(\"winemtt\", \"tinem\"),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n        val l = b.length\n        val pat = b + b\n        for (i <- 0 to a.length - l) {\n            for (j <- 0 to l) {\n                if (a.slice(i, i + l) == pat.slice(j, j + l)) {\n                    return true\n                }\n            }\n        }\n        false\n    }\n}\n\n### TypeScript version\n\nfunction cycpattern_check(a: string, b: string): boolean {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "ts",
    "prompt": "function minSubArraySum(nums: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minSubArraySum(nums : List[Long]) : Long = {\n        var maxSum = 0L\n        var s = 0L\n        for (num <- nums) {\n            s += -num\n            if (s < 0) {\n                s = 0\n            }\n            maxSum = max(s, maxSum)\n        }\n        if (maxSum == 0) {\n            maxSum = nums.map(-_).max\n        }\n        -maxSum\n    }\n}\n\n### TypeScript version\n\nfunction minSubArraySum(nums: number[]): number {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "ts",
    "prompt": "function sort_array(array: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortArray(array : List[Long]) : List[Long] = {\n        if (array.length == 0) {\n            return List()\n        }\n        val isEven = (array(0) + array(array.length-1)) % 2 == 0\n        array.sorted(if (isEven) Ordering.Long.reverse else Ordering.Long)\n    }\n}\n\n### TypeScript version\n\nfunction sort_array(array: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "ts",
    "prompt": "function histogram(test: string): {[key: string]: number} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def histogram(test : String) : Map[String,Long] = {\n        var dict1 = Map[String,Long]()\n        var list1 = test.split(\" \")\n        var t = 0\n\n        for(i <- list1){\n            if(list1.count(_ == i) > t && i != \"\"){\n                t = list1.count(_ == i)\n            }\n        }\n        if(t > 0){\n            for(i <- list1){\n                if(list1.count(_ == i) == t){\n                    dict1 += (i -> t)\n                }\n            }\n        }\n        dict1\n    }\n}\n\n### TypeScript version\n\nfunction histogram(test: string): {[key: string]: number} {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "ts",
    "prompt": "function get_odd_collatz(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_odd_collatz;\n  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(5),[1, 5]);\n  assert.deepEqual(candidate(12),[1, 3, 5]);\n  assert.deepEqual(candidate(1),[1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getOddCollatz(n : Long) : List[Long] = {\n        var oddCollatz = if (n % 2 == 0) List() else List(n)\n        var num = n\n        while (num > 1) {\n            num = if (num % 2 == 0) num / 2 else num * 3 + 1\n            if (num % 2 == 1) {\n                oddCollatz = oddCollatz :+ num\n            }\n        }\n        oddCollatz.sorted\n    }\n}\n\n### TypeScript version\n\nfunction get_odd_collatz(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "ts",
    "prompt": "function derivative(xs: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def derivative(xs : List[Long]) : List[Long] = {\n        xs.zipWithIndex.tail.map{case (x, i) => i * x}\n    }\n}\n\n### TypeScript version\n\nfunction derivative(xs: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "ts",
    "prompt": "function fibfib(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fibfib(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else if (n == 1) {\n            0\n        } else if (n == 2) {\n            1\n        } else {\n            fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n        }\n    }\n}\n\n### TypeScript version\n\nfunction fibfib(n: number): number {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "ts",
    "prompt": "function truncate_number(number: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def truncateNumber(number : Float) : Float = {\n        number % 1.0f\n    }\n}\n\n### TypeScript version\n\nfunction truncate_number(number: number): number {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "ts",
    "prompt": "function max_element(l: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxElement(l : List[Long]) : Long = {\n        l.reduceLeft(_ max _)\n    }\n}\n\n### TypeScript version\n\nfunction max_element(l: number[]): number {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "ts",
    "prompt": "function closest_integer(value: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def closestInteger(value : String) : Long = {\n        if (value.count(_ == '.') == 1) {\n            var v = value\n            while (v.last == '0') {\n                v = v.dropRight(1)\n            }\n        }\n        val num = value.toDouble\n        if (value.takeRight(2) == \".5\") {\n            if (num > 0) {\n                ceil(num).toLong\n            } else {\n                floor(num).toLong\n            }\n        } else {\n            round(num).toLong\n        }\n    }\n}\n\n### TypeScript version\n\nfunction closest_integer(value: string): number {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "ts",
    "prompt": "function sum_product(numbers: number[]): [number, number] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val (sumValue, prodValue) = numbers.foldLeft((0L, 1L)) { case ((sum, prod), n) =>\n            (sum + n, prod * n)\n        }\n        (sumValue, prodValue)\n    }\n}\n\n### TypeScript version\n\nfunction sum_product(numbers: number[]): [number, number] {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "ts",
    "prompt": "function select_words(s: string, n: number): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def selectWords(s : String, n : Long) : List[String] = {\n        s.split(\" \").filter(word => word.count(c => !\"aeiouAEIOU\".contains(c)) == n).toList\n    }\n}\n\n### TypeScript version\n\nfunction select_words(s: string, n: number): string[] {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "ts",
    "prompt": "function add_elements(arr: number[], k: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addElements(arr : List[Long], k : Long) : Long = {\n        arr.take(k.toInt).filter(_.toString.length <= 2).sum\n    }\n}\n\n### TypeScript version\n\nfunction add_elements(arr: number[], k: number): number {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "ts",
    "prompt": "function eat(number: number, need: number, remaining: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4, 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2, 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4, 5, 1),[5, 0]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n        if(need <= remaining) List(number + need, remaining - need)\n        else List(number + remaining, 0)\n    }\n}\n\n### TypeScript version\n\nfunction eat(number: number, need: number, remaining: number): number[] {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "ts",
    "prompt": "function odd_count(lst: string[]): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = odd_count;\n  assert.deepEqual(candidate([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddCount(lst : List[String]) : List[String] = {\n        var res = List[String]()\n        for (arr <- lst) {\n            var n = arr.count(_ % 2 == 1)\n            res = res :+ \"the number of odd elements \" + n + \"n the str\"+ n +\"ng \"+ n +\" of the \"+ n +\"nput.\"\n        }\n        res\n    }\n}\n\n### TypeScript version\n\nfunction odd_count(lst: string[]): string[] {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "ts",
    "prompt": "function get_row(lst: number[][], x: number): [number, number][] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {\n        val coords = for (i <- 0 until lst.length; j <- 0 until lst(i).length if lst(i)(j) == x) yield (i, j)\n        coords.toList.sorted.sortBy(x => (x._1, -x._2)).map(x => (x._1.toLong, x._2.toLong))\n    }\n}\n\n### TypeScript version\n\nfunction get_row(lst: number[][], x: number): [number, number][] {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "ts",
    "prompt": "function filter_by_prefix(strings: string[], prefix: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n    }\n}\n\n### TypeScript version\n\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "ts",
    "prompt": "function choose_num(x: number, y: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6, 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7, 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def chooseNum(x : Long, y : Long) : Long = {\n        if (x > y) {\n            -1\n        } else if (y % 2 == 0) {\n            y\n        } else if (x == y) {\n            -1\n        } else {\n            y - 1\n        }\n    }\n}\n\n### TypeScript version\n\nfunction choose_num(x: number, y: number): number {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "ts",
    "prompt": "function prime_length(string: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_length;\n  assert.deepEqual(candidate(\"Hello\"),true);\n  assert.deepEqual(candidate(\"abcdcba\"),true);\n  assert.deepEqual(candidate(\"kittens\"),true);\n  assert.deepEqual(candidate(\"orange\"),false);\n  assert.deepEqual(candidate(\"wow\"),true);\n  assert.deepEqual(candidate(\"world\"),true);\n  assert.deepEqual(candidate(\"MadaM\"),true);\n  assert.deepEqual(candidate(\"Wow\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"HI\"),true);\n  assert.deepEqual(candidate(\"go\"),true);\n  assert.deepEqual(candidate(\"gogo\"),false);\n  assert.deepEqual(candidate(\"aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"Madam\"),true);\n  assert.deepEqual(candidate(\"M\"),false);\n  assert.deepEqual(candidate(\"0\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeLength(string : String) : Boolean = {\n        val l = string.length\n        if (l == 0 || l == 1) {\n            false\n        } else {\n            (2 to l-1).forall(l % _ != 0)\n        }\n    }\n}\n\n### TypeScript version\n\nfunction prime_length(string: string): boolean {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "ts",
    "prompt": "function sum_to_n(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(6),21);\n  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n  assert.deepEqual(candidate(100),5050);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumToN(n : Long) : Long = {\n        (0L to n).sum\n    }\n}\n\n### TypeScript version\n\nfunction sum_to_n(n: number): number {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "ts",
    "prompt": "function fix_spaces(text: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fixSpaces(text : String) : String = {\n        var newText = \"\"\n        var i = 0\n        var start, end = 0\n        while (i < text.length) {\n            if (text(i) == ' ') {\n                end += 1\n            } else {\n                if (end - start > 2) {\n                    newText += \"-\" + text(i)\n                } else if (end - start > 0) {\n                    newText += \"_\" * (end - start) + text(i)\n                } else {\n                    newText += text(i)\n                }\n                start = i + 1\n                end = i + 1\n            }\n            i += 1\n        }\n        if (end - start > 2) {\n            newText += \"-\"\n        } else if (end - start > 0) {\n            newText += \"_\"\n        }\n        newText\n    }\n}\n\n### TypeScript version\n\nfunction fix_spaces(text: string): string {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "ts",
    "prompt": "function rolling_max(numbers: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n        var runningMax : Long = 0\n        var result = ListBuffer[Long]()\n        for (n <- numbers) {\n            if (runningMax == 0) {\n                runningMax = n\n            } else {\n                runningMax = max(runningMax, n)\n            }\n            result += runningMax\n        }\n        result.toList\n    }\n}\n\n### TypeScript version\n\nfunction rolling_max(numbers: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "ts",
    "prompt": "function words_in_sentence(sentence: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\");\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"here is\"),\"is\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsInSentence(sentence : String) : String = {\n        val newLst = sentence.split(\" \").filter(word => {\n            val len = word.length\n            len == 2 || (len > 2 && !((2 until len) exists (len % _ == 0)))\n        })\n        newLst.mkString(\" \")\n    }\n}\n\n### TypeScript version\n\nfunction words_in_sentence(sentence: string): string {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "ts",
    "prompt": "function get_closest_vowel(word: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getClosestVowel(word : String) : String = {\n        if (word.length < 3) {\n            return \"\"\n        }\n        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I')\n        for (i <- Range(word.length-2, 0, -1)) {\n            if (vowels.contains(word(i))) {\n                if (!vowels.contains(word(i+1)) && !vowels.contains(word(i-1))) {\n                    return word(i).toString\n                }\n            }\n        }\n        \"\"\n    }\n}\n\n### TypeScript version\n\nfunction get_closest_vowel(word: string): string {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "ts",
    "prompt": "function compare(game: number[], guess: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n        game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n}\n\n### TypeScript version\n\nfunction compare(game: number[], guess: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "ts",
    "prompt": "function remove_duplicates(numbers: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n        val c = numbers.groupBy(identity).mapValues(_.size)\n        numbers.filter(c(_) <= 1)\n    }\n}\n\n### TypeScript version\n\nfunction remove_duplicates(numbers: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "ts",
    "prompt": "function same_chars(s0: string, s1: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\", \"aaccc\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        s0.toSet == s1.toSet\n    }\n}\n\n### TypeScript version\n\nfunction same_chars(s0: string, s1: string): boolean {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "ts",
    "prompt": "function parse_nested_parens(paren_string: string): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseNestedParens(paren_string : String) : List[Long] = {\n        def parseParenGroup(s : String) : Long = {\n            var depth = 0\n            var maxDepth = 0\n            for (c <- s) {\n                if (c == '(') {\n                    depth += 1\n                    maxDepth = max(depth, maxDepth)\n                } else {\n                    depth -= 1\n                }\n            }\n            maxDepth\n        }\n        paren_string.split(' ').filter(_ != \"\").map(parseParenGroup).toList\n    }\n}\n\n### TypeScript version\n\nfunction parse_nested_parens(paren_string: string): number[] {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "ts",
    "prompt": "function even_odd_count(num: number): [number, number] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n        var evenCount = 0\n        var oddCount = 0\n        for (i <- num.abs.toString) {\n            if (i.toInt % 2 == 0) {\n                evenCount += 1\n            } else {\n                oddCount += 1\n            }\n        }\n        (evenCount, oddCount)\n    }\n}\n\n### TypeScript version\n\nfunction even_odd_count(num: number): [number, number] {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "ts",
    "prompt": "function fruit_distribution(s: string, n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val lis = s.split(\" \").filter(_.forall(_.isDigit)).map(_.toLong)\n        n - lis.sum\n    }\n}\n\n### TypeScript version\n\nfunction fruit_distribution(s: string, n: number): number {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "ts",
    "prompt": "function string_xor(a: string, b: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringXor(a : String, b : String) : String = {\n        def xor(i : Char, j : Char) : Char = {\n            if(i == j) '0' else '1'\n        }\n        (a zip b).map(x => xor(x._1, x._2)).mkString\n    }\n}\n\n### TypeScript version\n\nfunction string_xor(a: string, b: string): string {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "ts",
    "prompt": "function strlen(string: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"),9);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strlen(string : String) : Long = {\n        string.length\n    }\n}\n\n### TypeScript version\n\nfunction strlen(string: string): number {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "ts",
    "prompt": "function string_sequence(n: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringSequence(n : Long) : String = {\n        (0L to n).mkString(\" \")\n    }\n}\n\n### TypeScript version\n\nfunction string_sequence(n: number): string {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "ts",
    "prompt": "function file_name_check(file_name: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"/this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\");\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"_f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fileNameCheck(file_name : String) : String = {\n        val suf = List(\"txt\", \"exe\", \"dll\")\n        val lst = file_name.split('.')\n        if (lst.length != 2) {\n            \"No\"\n        } else if (!suf.contains(lst(1))) {\n            \"No\"\n        } else if (lst(0).length == 0) {\n            \"No\"\n        } else if (!lst(0)(0).isLetter) {\n            \"No\"\n        } else if (lst(0).count(_.isDigit) > 3) {\n            \"No\"\n        } else {\n            \"Yes\"\n        }\n    }\n}\n\n### TypeScript version\n\nfunction file_name_check(file_name: string): string {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "ts",
    "prompt": "function can_arrange(arr: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def canArrange(arr : List[Long]) : Long = {\n        var ind = -1\n        var i = 1\n        while (i < arr.length) {\n            if (arr(i) < arr(i - 1)) {\n                ind = i\n            }\n            i += 1\n        }\n        ind\n    }\n}\n\n### TypeScript version\n\nfunction can_arrange(arr: number[]): number {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "ts",
    "prompt": "function add(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(_._2 % 2 == 1).filter(_._1 % 2 == 0).map(_._1).sum\n    }\n}\n\n### TypeScript version\n\nfunction add(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "ts",
    "prompt": "function intersperse(numbers: number[], delimeter: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n        if (numbers.isEmpty) {\n            List()\n        } else {\n            numbers.init.flatMap(List(_, delimeter)) :+ numbers.last\n        }\n    }\n}\n\n### TypeScript version\n\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "ts",
    "prompt": "function match_parens(lst: string[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def matchParens(lst : List[String]) : String = {\n        def check(s : String) : Boolean = {\n            var val_ = 0\n            for (i <- s) {\n                if (i == '(') {\n                    val_ = val_ + 1\n                } else {\n                    val_ = val_ - 1\n                }\n                if (val_ < 0) {\n                    return false\n                }\n            }\n            if (val_ == 0) true else false\n        }\n        val S1 = lst(0) + lst(1)\n        val S2 = lst(1) + lst(0)\n        if (check(S1) || check(S2)) \"Yes\" else \"No\"\n    }\n}\n\n### TypeScript version\n\nfunction match_parens(lst: string[]): string {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "ts",
    "prompt": "function filter_by_substring(strings: string[], substring: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n    }\n}\n\n### TypeScript version\n\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "ts",
    "prompt": "function find_max(words: string[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findMax(words : List[String]) : String = {\n        words.sortBy(w => (-w.toSet.size, w)).head\n    }\n}\n\n### TypeScript version\n\nfunction find_max(words: string[]): string {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "ts",
    "prompt": "function generate_integers(a: number, b: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = generate_integers;\n  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(17, 89),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val lower = max(2, min(a, b))\n        val upper = min(8, max(a, b))\n        (lower to upper).filter(_ % 2 == 0).toList\n    }\n}\n\n### TypeScript version\n\nfunction generate_integers(a: number, b: number): number[] {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "ts",
    "prompt": "function exchange(lst1: number[], lst2: number[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n        val odd = lst1.count(_ % 2 == 1)\n        val even = lst2.count(_ % 2 == 0)\n        if (even >= odd) {\n            \"YES\"\n        } else {\n            \"NO\"\n        }\n    }\n}\n\n### TypeScript version\n\nfunction exchange(lst1: number[], lst2: number[]): string {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "ts",
    "prompt": "function int_to_mini_roman(number: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intToMiniRoman(number : Long) : String = {\n        val num = List(1L, 4L, 5L, 9L, 10L, 40L, 50L, 90L, 100L, 400L, 500L, 900L, 1000L)\n        val sym = List(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\")\n        var i = 12\n        var res = \"\"\n        var n = number\n        while (n > 0) {\n            val div = n / num(i)\n            n %= num(i)\n            for (j <- 1L to div) {\n                res += sym(i)\n            }\n            i -= 1\n        }\n        res.toLowerCase\n    }\n}\n\n### TypeScript version\n\nfunction int_to_mini_roman(number: number): string {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "ts",
    "prompt": "function is_equal_to_sum_even(n: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_equal_to_sum_even;\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),true);\n  assert.deepEqual(candidate(11),false);\n  assert.deepEqual(candidate(12),true);\n  assert.deepEqual(candidate(13),false);\n  assert.deepEqual(candidate(16),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isEqualToSumEven(n : Long) : Boolean = {\n        n%2 == 0 && n >= 8\n    }\n}\n\n### TypeScript version\n\nfunction is_equal_to_sum_even(n: number): boolean {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "ts",
    "prompt": "function decimal_to_binary(decimal: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString + \"db\"\n    }\n}\n\n### TypeScript version\n\nfunction decimal_to_binary(decimal: number): string {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "ts",
    "prompt": "function simplify(x: string, n: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def simplify(x : String, n : String) : Boolean = {\n        val Array(a, b) = x.split(\"/\")\n        val Array(c, d) = n.split(\"/\")\n        val numerator = a.toLong * c.toLong\n        val denom = b.toLong * d.toLong\n        numerator % denom == 0\n    }\n}\n\n### TypeScript version\n\nfunction simplify(x: string, n: string): boolean {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "ts",
    "prompt": "function right_angle_triangle(a: number, b: number, c: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b\n    }\n}\n\n### TypeScript version\n\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "ts",
    "prompt": "function below_zero(operations: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowZero(operations : List[Long]) : Boolean = {\n        var balance = 0L\n        for (op <- operations) {\n            balance += op\n            if (balance < 0) {\n                return true\n            }\n        }\n        false\n    }\n}\n\n### TypeScript version\n\nfunction below_zero(operations: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "ts",
    "prompt": "function greatest_common_divisor(a: number, b: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (b == 0) {\n            a\n        } else {\n            greatestCommonDivisor(b, a % b)\n        }\n    }\n}\n\n### TypeScript version\n\nfunction greatest_common_divisor(a: number, b: number): number {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "ts",
    "prompt": "function f(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);\n  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);\n  assert.deepEqual(candidate(1),[1]);\n  assert.deepEqual(candidate(3),[1, 2, 6]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : List[Long] = {\n        var ret = ListBuffer[Long]()\n        for (i <- 1L to n) {\n            if (i%2 == 0) {\n                var x = 1L\n                for (j <- 1L to i) x *= j\n                ret += x\n            } else {\n                var x = 0L\n                for (j <- 1L to i) x += j\n                ret += x\n            }\n        }\n        ret.toList\n    }\n}\n\n### TypeScript version\n\nfunction f(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "ts",
    "prompt": "function monotonic(l: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def monotonic(l : List[Long]) : Boolean = {\n        l == l.sorted || l == l.sorted.reverse\n    }\n}\n\n### TypeScript version\n\nfunction monotonic(l: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "ts",
    "prompt": "function by_length(arr: number[]): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def byLength(arr : List[Long]) : List[String] = {\n        val dic = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n        val sortedArr = arr.sorted(Ordering.Long.reverse)\n        sortedArr.flatMap(dic.get)\n    }\n}\n\n### TypeScript version\n\nfunction by_length(arr: number[]): string[] {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "ts",
    "prompt": "function remove_vowels(text: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_vowels;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"abcdef\\nghijklm\"),\"bcdf\\nghjklm\");\n  assert.deepEqual(candidate(\"fedcba\"),\"fdcb\");\n  assert.deepEqual(candidate(\"eeeee\"),\"\");\n  assert.deepEqual(candidate(\"acBAA\"),\"cB\");\n  assert.deepEqual(candidate(\"EcBOO\"),\"cB\");\n  assert.deepEqual(candidate(\"ybcd\"),\"ybcd\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeVowels(text : String) : String = {\n        text.filterNot(\"aeiouAEIOU\".contains(_))\n    }\n}\n\n### TypeScript version\n\nfunction remove_vowels(text: string): string {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "ts",
    "prompt": "function iscube(a: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def iscube(a : Long) : Boolean = {\n        val b = abs(a)\n        pow(round(pow(b, 1.0/3)), 3) == b\n    }\n}\n\n### TypeScript version\n\nfunction iscube(a: number): boolean {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "ts",
    "prompt": "function reverse_delete(s: string, c: string): [string, boolean] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n        val s2 = s.filterNot(c.toSet)\n        (s2, s2 == s2.reverse)\n    }\n}\n\n### TypeScript version\n\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "ts",
    "prompt": "function mean_absolute_deviation(numbers: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0, 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x => abs(x - mean)).sum / numbers.length\n    }\n}\n\n### TypeScript version\n\nfunction mean_absolute_deviation(numbers: number[]): number {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "ts",
    "prompt": "function correct_bracketing(brackets: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n        var depth = 0\n        for (b <- brackets) {\n            if (b == '<') {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if (depth < 0) {\n                return false\n            }\n        }\n        depth == 0\n    }\n}\n\n### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "ts",
    "prompt": "function rescale_to_unit(numbers: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n        val minNumber = numbers.min\n        val maxNumber = numbers.max\n        numbers.map(x => (x - minNumber) / (maxNumber - minNumber))\n    }\n}\n\n### TypeScript version\n\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "ts",
    "prompt": "function intersection(interval1: [number, number], interval2: [number, number]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n        def isPrime(num : Long) : Boolean = {\n            if (num == 1 || num == 0) {\n                false\n            } else if (num == 2) {\n                true\n            } else {\n                (2L to sqrt(num).toLong).forall(num % _ != 0)\n            }\n        }\n        val l = max(interval1._1, interval2._1)\n        val r = min(interval1._2, interval2._2)\n        val length = r - l\n        if (length > 0 && isPrime(length)) {\n            \"YES\"\n        } else {\n            \"NO\"\n        }\n    }\n}\n\n### TypeScript version\n\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "ts",
    "prompt": "function hex_key(num: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hexKey(num : String) : Long = {\n        val primes = Set('2', '3', '5', '7', 'B', 'D')\n        num.count(primes)\n    }\n}\n\n### TypeScript version\n\nfunction hex_key(num: string): number {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "ts",
    "prompt": "function strange_sort_list(lst: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var res : ListBuffer[Long] = ListBuffer()\n        var switch : Boolean = true\n        var list : ListBuffer[Long] = ListBuffer(lst:_*)\n        while (list.nonEmpty) {\n            res.append(if (switch) list.min else list.max)\n            list -= res.last\n            switch = !switch\n        }\n        res.toList\n    }\n}\n\n### TypeScript version\n\nfunction strange_sort_list(lst: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "ts",
    "prompt": "function is_bored(S: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a walk\"),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isBored(S : String) : Long = {\n        val sentences = S.split(\"[.?!]\\\\s*\")\n        sentences.count(_.startsWith(\"I \"))\n    }\n}\n\n### TypeScript version\n\nfunction is_bored(S: string): number {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "ts",
    "prompt": "function all_prefixes(string: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def allPrefixes(string : String) : List[String] = {\n        (1 to string.length).map(string.take).toList\n    }\n}\n\n### TypeScript version\n\nfunction all_prefixes(string: string): string[] {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "ts",
    "prompt": "function how_many_times(string: string, substring: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def howManyTimes(string : String, substring : String) : Long = {\n        var times = 0L\n        for (i <- 0 to string.length - substring.length) {\n            if (string.slice(i, i + substring.length) == substring) {\n                times += 1\n            }\n        }\n        times\n    }\n}\n\n### TypeScript version\n\nfunction how_many_times(string: string, substring: string): number {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "ts",
    "prompt": "function solution(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solution(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter{case (x, i) => i%2==0 && x%2==1}.map(_._1).sum\n    }\n}\n\n### TypeScript version\n\nfunction solution(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "ts",
    "prompt": "function is_sorted(lst: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSorted(lst : List[Long]) : Boolean = {\n        val countDigit = lst.groupBy(identity).mapValues(_.size)\n        if (countDigit.values.exists(_ > 2)) {\n            false\n        } else {\n            lst == lst.sorted\n        }\n    }\n}\n\n### TypeScript version\n\nfunction is_sorted(lst: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "ts",
    "prompt": "function pluck(arr: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pluck(arr : List[Long]) : List[Long] = {\n        if(arr.isEmpty) return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if(evens.isEmpty) return List()\n        List(evens.min, arr.indexOf(evens.min))\n    }\n}\n\n### TypeScript version\n\nfunction pluck(arr: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "ts",
    "prompt": "function pairs_sum_to_zero(l: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n        l.combinations(2).exists(x => x.sum == 0)\n    }\n}\n\n### TypeScript version\n\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "ts",
    "prompt": "function make_palindrome(string: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def makePalindrome(string : String) : String = {\n        if (string.isEmpty) {\n            \"\"\n        } else {\n            val beginningOfSuffix = (0 until string.length).find(i => string.substring(i) == string.substring(i).reverse).get\n            string + string.substring(0, beginningOfSuffix).reverse\n        }\n    }\n}\n\n### TypeScript version\n\nfunction make_palindrome(string: string): string {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "ts",
    "prompt": "function starts_one_ends(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def startsOneEnds(n : Long) : Long = {\n        if (n == 1) 1\n        else 18 * pow(10, n - 2).toLong\n    }\n}\n\n### TypeScript version\n\nfunction starts_one_ends(n: number): number {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "ts",
    "prompt": "function get_positive(l: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getPositive(l : List[Long]) : List[Long] = {\n        l.filter(_ > 0)\n    }\n}\n\n### TypeScript version\n\nfunction get_positive(l: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "ts",
    "prompt": "function concatenate(strings: string[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = concatenate;\n  assert.deepEqual(candidate([]),\"\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"xyz\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def concatenate(strings : List[String]) : String = {\n        strings.mkString\n    }\n}\n\n### TypeScript version\n\nfunction concatenate(strings: string[]): string {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "ts",
    "prompt": "function is_nested(string: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isNested(string : String) : Boolean = {\n        val openingBracketIndex = string.zipWithIndex.filter(_._1 == '[').map(_._2)\n        val closingBracketIndex = string.zipWithIndex.filter(_._1 == ']').map(_._2).reverse\n        var cnt = 0\n        var i = 0\n        val l = closingBracketIndex.length\n        for (idx <- openingBracketIndex) {\n            if (i < l && idx < closingBracketIndex(i)) {\n                cnt += 1\n                i += 1\n            }\n        }\n        cnt >= 2\n    }\n}\n\n### TypeScript version\n\nfunction is_nested(string: string): boolean {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "ts",
    "prompt": "function is_palindrome(text: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPalindrome(text : String) : Boolean = {\n        text == text.reverse\n    }\n}\n\n### TypeScript version\n\nfunction is_palindrome(text: string): boolean {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "ts",
    "prompt": "function count_nums(arr: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countNums(arr : List[Long]) : Long = {\n        def digitsSum(n : Long) : Long = {\n            val neg = if (n < 0) -1 else 1\n            val digits = n.abs.toString.map(_.asDigit).toList\n            digits.head * neg + digits.tail.sum\n        }\n        arr.count(x => digitsSum(x) > 0)\n    }\n}\n\n### TypeScript version\n\nfunction count_nums(arr: number[]): number {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "ts",
    "prompt": "function factorize(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def factorize(n : Long) : List[Long] = {\n        var fact = ListBuffer[Long]()\n        var i = 2L\n        var nn = n\n        while (i <= sqrt(n) + 1) {\n            if (nn % i == 0) {\n                fact += i\n                nn /= i\n            } else {\n                i += 1\n            }\n        }\n        if (nn > 1) {\n            fact += nn\n        }\n        fact.toList\n    }\n}\n\n### TypeScript version\n\nfunction factorize(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "ts",
    "prompt": "function largest_prime_factor(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestPrimeFactor(n : Long) : Long = {\n        def isPrime(k : Long) : Boolean = {\n            if (k < 2) false\n            else (2L to sqrt(k).toLong).forall(k % _ != 0)\n        }\n        var largest = 1L\n        for (j <- 2L to n) {\n            if (n % j == 0 && isPrime(j)) {\n                largest = max(largest, j)\n            }\n        }\n        largest\n    }\n}\n\n### TypeScript version\n\nfunction largest_prime_factor(n: number): number {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "ts",
    "prompt": "function get_max_triples(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getMaxTriples(n : Long) : Long = {\n        val A = (1L to n).map(i => i*i - i + 1)\n        val ans = for {\n            i <- 0 until n.toInt\n            j <- i+1 until n.toInt\n            k <- j+1 until n.toInt\n            if (A(i) + A(j) + A(k)) % 3 == 0\n        } yield (A(i), A(j), A(k))\n        ans.length\n    }\n}\n\n### TypeScript version\n\nfunction get_max_triples(n: number): number {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "ts",
    "prompt": "function anti_shuffle(s: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def antiShuffle(s : String) : String = {\n        s.split(' ').map(_.sorted).mkString(\" \")\n    }\n}\n\n### TypeScript version\n\nfunction anti_shuffle(s: string): string {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "ts",
    "prompt": "function solve(N: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solve(N : Long) : String = {\n        (N.toString.map(_.asDigit).sum.toBinaryString)\n    }\n}\n\n### TypeScript version\n\nfunction solve(N: number): string {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "ts",
    "prompt": "function encrypt(s: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def encrypt(s : String) : String = {\n        val d = \"abcdefghijklmnopqrstuvwxyz\"\n        var out = \"\"\n        for (c <- s) {\n            if (d.contains(c)) {\n                out += d((d.indexOf(c)+2*2) % 26)\n            } else {\n                out += c\n            }\n        }\n        out\n    }\n}\n\n### TypeScript version\n\nfunction encrypt(s: string): string {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "ts",
    "prompt": "function make_a_pile(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def makeAPile(n : Long) : List[Long] = {\n        List.range(n, n + 2 * n, 2)\n    }\n}\n\n### TypeScript version\n\nfunction make_a_pile(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "ts",
    "prompt": "function is_prime(n: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            false\n        } else {\n            (2L to sqrt(n).toLong).forall(n % _ != 0)\n        }\n    }\n}\n\n### TypeScript version\n\nfunction is_prime(n: number): boolean {\n"
  }
]