[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc correct_bracketing(brackets: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction correct_bracketing(brackets){\n  let depth = 0;\n  for(let b of brackets){\n    if(b === '('){\n      depth += 1;\n    }else{\n      depth -= 1;\n    }\n    if(depth < 0){\n      return false;\n    }\n  }\n  return depth == 0;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc correct_bracketing(brackets: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc triangle_area(a: Int, h: Int) -> Double {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction triangle_area(a, h){\n  return a*h/2;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc triangle_area(a: Int, h: Int) -> Double {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc special_factorial(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction special_factorial(n){\n  let fact_i = 1;\n  let special_fact = 1;\n  for(let i=1; i<n+1; i++){\n    fact_i *= i;\n    special_fact *= fact_i;\n  }\n  return special_fact;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc special_factorial(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc largest_smallest_integers(lst: [Int]) -> (Int?, Int?) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7]) == (nil, 1))\nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7, 0]) == (nil, 1))\nassert(largest_smallest_integers(lst: [1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\nassert(largest_smallest_integers(lst: [4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\nassert(largest_smallest_integers(lst: [7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\nassert(largest_smallest_integers(lst: [] as [Int]) == (nil, nil))\nassert(largest_smallest_integers(lst: [0]) == (nil, nil))\nassert(largest_smallest_integers(lst: [-1, -3, -5, -6]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-1, -3, -5, -6, 0]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, 1]) == (-3, 1))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, -100, 1]) == (-3, 1))",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction largest_smallest_integers(lst){\n  let smallest = lst.filter(x => x < 0)\n  let largest = lst.filter(x => x > 0)\n  return [smallest.length ? Math.max(...smallest) : null, largest.length ? Math.min(...largest) : null]\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc largest_smallest_integers(lst: [Int]) -> (Int?, Int?) {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc move_one_ball(arr: [Int]) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction move_one_ball(arr){\n  if(arr.length==0){\n    return true;\n  }\n  let sorted_array=arr.slice().sort((a,b) => a-b);\n  let my_arr=[];\n  \n  let min_value=Math.min(...arr);\n  let min_index=arr.indexOf(min_value);\n  my_arr=arr.slice(min_index).concat(arr.slice(0,min_index));\n  for(let i=0; i<arr.length; i++){\n    if(my_arr[i]!=sorted_array[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc move_one_ball(arr: [Int]) -> Bool {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc digits(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction digits(n){\n  let product = 1;\n  let odd_count = 0;\n  for(let digit of String(n)){\n    let int_digit = Number(digit);\n    if(int_digit%2 === 1){\n      product *= int_digit;\n      odd_count += 1;\n    }\n  }\n  return odd_count === 0 ? 0 : product;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc digits(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc fib4(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction fib4(n){\n    let results = [0, 0, 2, 0];\n    if (n < 4){\n        return results[n];\n    }\n\n    for (let i = 4; i <= n; i++){\n        let sum = results[0] + results[1] + results[2] + results[3];\n        results.shift();\n        results.push(sum);\n    }\n\n    return results[3];\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc fib4(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc order_by_points(nums: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction order_by_points(nums){\n  function digits_sum(n){\n    let neg = 1;\n    if (n < 0) [n, neg] = [-1 * n, -1];\n    n = Array.from(String(n), Number);\n    n[0] = n[0] * neg;\n    return n.reduce((a, b) => a + b, 0);\n  }\n  return nums.sort((a, b) => digits_sum(a) - digits_sum(b));\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc order_by_points(nums: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_happy(s: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]) return false;\n  }\n  return true;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_happy(s: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc circular_shift(x: Int, shift: Int) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\")\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97, shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x: 11, shift: 101) == \"11\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction circular_shift(x, shift){\n  let s = String(x);\n  if(shift > s.length){\n    return s.split(\"\").reverse().join(\"\");\n  }else{\n    return s.slice(s.length-shift) + s.slice(0, s.length-shift);\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc circular_shift(x: Int, shift: Int) -> String {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc max_fill(grid: [[Int]], capacity: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1, 1, 1]], capacity: 9) == 2)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction max_fill(grid, capacity){\n  return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((a,b) => a+b)/capacity), 0);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc max_fill(grid: [[Int]], capacity: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction has_close_elements(numbers, threshold){\n  for(let idx in numbers){\n    for(let idx2 in numbers){\n      if(idx != idx2){\n        let distance = Math.abs(numbers[idx] - numbers[idx2]);\n        if(distance < threshold){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction numerical_letter_grade(grades){\n  let letter_grade = [];\n  for(let gpa of grades){\n    if(gpa == 4.0){\n      letter_grade.push(\"A+\");\n    }else if(gpa > 3.7){\n      letter_grade.push(\"A\");\n    }else if(gpa > 3.3){\n      letter_grade.push(\"A-\");\n    }else if(gpa > 3.0){\n      letter_grade.push(\"B+\");\n    }else if(gpa > 2.7){\n      letter_grade.push(\"B\");\n    }else if(gpa > 2.3){\n      letter_grade.push(\"B-\");\n    }else if(gpa > 2.0){\n      letter_grade.push(\"C+\");\n    }else if(gpa > 1.7){\n      letter_grade.push(\"C\");\n    }else if(gpa > 1.3){\n      letter_grade.push(\"C-\");\n    }else if(gpa > 1.0){\n      letter_grade.push(\"D+\");\n    }else if(gpa > 0.7){\n      letter_grade.push(\"D\");\n    }else if(gpa > 0.0){\n      letter_grade.push(\"D-\");\n    }else{\n      letter_grade.push(\"E\");\n    }\n  }\n  return letter_grade;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc x_or_y(n: Int, x: Int, y: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(x_or_y(n: 7, x: 34, y: 12) == 34)\nassert(x_or_y(n: 15, x: 8, y: 5) == 5)\nassert(x_or_y(n: 3, x: 33, y: 5212) == 33)\nassert(x_or_y(n: 1259, x: 3, y: 52) == 3)\nassert(x_or_y(n: 7919, x: -1, y: 12) == -1)\nassert(x_or_y(n: 3609, x: 1245, y: 583) == 583)\nassert(x_or_y(n: 91, x: 56, y: 129) == 129)\nassert(x_or_y(n: 6, x: 34, y: 1234) == 1234)\nassert(x_or_y(n: 1, x: 2, y: 0) == 0)\nassert(x_or_y(n: 2, x: 2, y: 0) == 2)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction x_or_y(n, x, y){\n  if (n === 1) return y;\n  for (let i = 2; i < n; i++){\n    if (n % i === 0) return y;\n  }\n  return x;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc x_or_y(n: Int, x: Int, y: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc specialFilter(nums: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int]) == 0)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction specialFilter(nums){\n  let count = 0;\n  for(let num of nums){\n    if(num > 10){\n      let odd_digits = [1, 3, 5, 7, 9];\n      let number_as_string = String(num);\n      if(odd_digits.includes(Number(number_as_string[0])) && odd_digits.includes(Number(number_as_string[number_as_string.length-1]))){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc specialFilter(nums: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc parse_music(music_string: String) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction parse_music(music_string){\n  let note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x).map(x => note_map[x]);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc parse_music(music_string: String) -> [Int] {\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\n\nextension Int: Error {}\nfunc split_words(txt: String) -> Result<[String], Int> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction split_words(txt){\n  if(txt.includes(\" \")){\n    return txt.split(\" \");\n  }else if(txt.includes(\",\")){\n    return txt.replace(/,/g, \" \").split(\" \");\n  }else{\n    return [...txt].filter(i => i.match(/[a-z]/) && i.charCodeAt(0)%2 == 0).length;\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\n\nextension Int: Error {}\nfunc split_words(txt: String) -> Result<[String], Int> {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc count_distinct_characters(string: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction count_distinct_characters(string){\n  return new Set(string.toLowerCase()).size\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc count_distinct_characters(string: String) -> Int {\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc bf(planet1: String, planet2: String) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") == [] as [String])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction bf(planet1, planet2){\n  let planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  if(!planet_names.includes(planet1) || !planet_names.includes(planet2) || planet1 == planet2){\n    return [];\n  }\n  let planet1_index = planet_names.indexOf(planet1);\n  let planet2_index = planet_names.indexOf(planet2);\n  if(planet1_index < planet2_index){\n    return planet_names.slice(planet1_index+1, planet2_index);\n  }else{\n    return planet_names.slice(planet2_index+1, planet1_index);\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc bf(planet1: String, planet2: String) -> [String] {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc digitSum(s: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction digitSum(s){\n  if(s === \"\") return 0;\n  return s.split(\"\").reduce((acc, char) => acc + (char.match(/[A-Z]/) ? char.charCodeAt(0) : 0), 0);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc digitSum(s: String) -> Int {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sum_squares(lst: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sum_squares(lst){\n  let result =[];\n  for(let i =0; i<lst.length; i++){\n    if(i %3 === 0){\n      result.push(lst[i]**2)\n    }else if(i % 4 === 0 && i%3 !== 0){\n      result.push(lst[i]**3)\n    }else{\n      result.push(lst[i])\n    }\n  }\n  return result.reduce((a,b) => a+b,0)\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sum_squares(lst: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc count_up_to(n: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_up_to(n: 5) == [2, 3])\nassert(count_up_to(n: 6) == [2, 3, 5])\nassert(count_up_to(n: 7) == [2, 3, 5])\nassert(count_up_to(n: 10) == [2, 3, 5, 7])\nassert(count_up_to(n: 0) == [] as [Int])\nassert(count_up_to(n: 22) == [2, 3, 5, 7, 11, 13, 17, 19])\nassert(count_up_to(n: 1) == [] as [Int])\nassert(count_up_to(n: 18) == [2, 3, 5, 7, 11, 13, 17])\nassert(count_up_to(n: 47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\nassert(count_up_to(n: 101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction count_up_to(n){\n  let primes = [];\n  for(let i=2; i<n; i++){\n    let is_prime = true;\n    for(let j=2; j<i; j++){\n      if(i%j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc count_up_to(n: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sum_squares(lst: [Double]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sum_squares(lst){\n  let squared = 0;\n  lst.forEach(i => squared += Math.ceil(i)**2);\n  return squared;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sum_squares(lst: [Double]) -> Int {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc unique(l: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction unique(l){\n  return [...new Set(l)].sort((a,b) => a-b);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc unique(l: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc fib(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction fib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc fib(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc fizz_buzz(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction fizz_buzz(n){\n  let ns = []\n  for(let i = 0; i < n; i++){\n    if(i % 11 == 0 || i % 13 == 0){\n      ns.push(i)\n    }\n  }\n  let s = ns.join('')\n  let ans = 0\n  for(let c of s){\n    ans += (c == '7')\n  }\n  return ans\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc fizz_buzz(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc Strongest_Extension(class_name: String, extensions: [String]) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction Strongest_Extension(class_name, extensions){\n    let strong = extensions[0];\n    let my_val = extensions[0].replace(/[^A-Z]/g, \"\").length - extensions[0].replace(/[^a-z]/g, \"\").length;\n    for(let s of extensions){\n        let val = s.replace(/[^A-Z]/g, \"\").length - s.replace(/[^a-z]/g, \"\").length;\n        if(val > my_val){\n            strong = s;\n            my_val = val;\n        }\n    }\n    let ans = class_name + \".\" + strong;\n    return ans;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc Strongest_Extension(class_name: String, extensions: [String]) -> String {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc find_closest_elements(numbers: [Double]) -> (Double, Double) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction find_closest_elements(numbers){\n  let closest_pair = null;\n  let distance = null;\n  \n  for(let i=0; i<numbers.length; i++){\n    for(let j=0; j<numbers.length; j++){\n      if(i !== j){\n        let new_distance = Math.abs(numbers[i] - numbers[j]);\n        if(distance === null){\n          distance = new_distance;\n          closest_pair = [numbers[i], numbers[j]].sort((a,b) => a-b);\n        }else if(new_distance < distance){\n          distance = new_distance;\n          closest_pair = [numbers[i], numbers[j]].sort((a,b) => a-b);\n        }\n      }\n    }\n  }\n  \n  return closest_pair;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc find_closest_elements(numbers: [Double]) -> (Double, Double) {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc valid_date(date: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction valid_date(date){\n  try{\n    date = date.trim()\n    var [month, day, year] = date.split('-').map(Number)\n    if (month < 1 || month > 12) return false\n    if ([1,3,5,7,8,10,12].includes(month) && (day < 1 || day > 31)) return false\n    if ([4,6,9,11].includes(month) && (day < 1 || day > 30)) return false\n    if (month == 2 && (day < 1 || day > 29)) return false\n  } catch {\n    return false\n  }\n  return true\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc valid_date(date: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc add(x: Int, y: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0) == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x: 7, y: 5) == 12)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction add(x, y){\n  return x + y\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc add(x: Int, y: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc triples_sum_to_zero(l: [Int]) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100]) == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction triples_sum_to_zero(l){\n  for(let i=0; i<l.length; i++){\n    for(let j=i+1; j<l.length; j++){\n      for(let k=j+1; k<l.length; k++){\n        if(l[i]+l[j]+l[k] === 0){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc triples_sum_to_zero(l: [Int]) -> Bool {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc largest_divisor(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) == 7)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction largest_divisor(n){\n  for(let i=n-1; i>=0; i--){\n    if(n%i === 0){\n      return i;\n    }\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc largest_divisor(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sort_numbers(numbers: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sort_numbers(numbers){\n  let value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  }\n  return numbers.split(' ').filter(x => x).sort((a,b) => value_map[a] - value_map[b]).join(' ');\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sort_numbers(numbers: String) -> String {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc smallest_change(arr: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(smallest_change(arr: [1, 2, 3, 5, 4, 7, 9, 6]) == 4)\nassert(smallest_change(arr: [1, 2, 3, 4, 3, 2, 2]) == 1)\nassert(smallest_change(arr: [1, 4, 2]) == 1)\nassert(smallest_change(arr: [1, 4, 4, 2]) == 1)\nassert(smallest_change(arr: [1, 2, 3, 2, 1]) == 0)\nassert(smallest_change(arr: [3, 1, 1, 3]) == 0)\nassert(smallest_change(arr: [1]) == 0)\nassert(smallest_change(arr: [0, 1]) == 1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction smallest_change(arr){\n  let ans = 0;\n  for(let i=0; i<arr.length/2; i++){\n    if(arr[i] !== arr[arr.length-i-1]){\n      ans++;\n    }\n  }\n  return ans;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc smallest_change(arr: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc below_threshold(l: [Int], t: Int) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(below_threshold(l: [1, 2, 4, 10], t: 100) == true)\nassert(below_threshold(l: [1, 20, 4, 10], t: 5) == false)\nassert(below_threshold(l: [1, 20, 4, 10], t: 21) == true)\nassert(below_threshold(l: [1, 20, 4, 10], t: 22) == true)\nassert(below_threshold(l: [1, 8, 4, 10], t: 11) == true)\nassert(below_threshold(l: [1, 8, 4, 10], t: 10) == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction below_threshold(l, t){\n  return l.every(e => e < t);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc below_threshold(l: [Int], t: Int) -> Bool {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc prod_signs(arr: [Int]) -> Int? {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction prod_signs(arr){\n  if(arr.length === 0) return null;\n  let prod = arr.includes(0) ? 0 : (-1) ** arr.filter(x => x < 0).length;\n  return prod * arr.map(Math.abs).reduce((a,b) => a+b);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc prod_signs(arr: [Int]) -> Int? {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc modp(n: Int, p: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(modp(n: 3, p: 5) == 3)\nassert(modp(n: 1101, p: 101) == 2)\nassert(modp(n: 0, p: 101) == 1)\nassert(modp(n: 3, p: 11) == 8)\nassert(modp(n: 100, p: 101) == 1)\nassert(modp(n: 30, p: 5) == 4)\nassert(modp(n: 31, p: 5) == 3)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction modp(n, p){\n  let ret = 1;\n  for(let i=0; i<n; i++){\n    ret = (2 * ret) % p;\n  }\n  return ret;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc modp(n: Int, p: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc count_upper(s: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction count_upper(s){\n  let count = 0;\n  for(let i=0; i<s.length; i+=2){\n    if(\"AEIOU\".includes(s[i])){\n      count++;\n    }\n  }\n  return count;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc count_upper(s: String) -> Int {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc multiply(a: Int, b: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc multiply(a: Int, b: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc unique_digits(x: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction unique_digits(x){\n  let odd_digit_elements = [];\n  for(let i of x){\n    if([...String(i)].every(c => parseInt(c) % 2 == 1)){\n      odd_digit_elements.push(i);\n    }\n  }\n  return odd_digit_elements.sort((a,b) => a-b);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc unique_digits(x: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc will_it_fly(q: [Int], w: Int) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(will_it_fly(q: [3, 2, 3], w: 9) == true)\nassert(will_it_fly(q: [1, 2], w: 5) == false)\nassert(will_it_fly(q: [3], w: 5) == true)\nassert(will_it_fly(q: [3, 2, 3], w: 1) == false)\nassert(will_it_fly(q: [1, 2, 3], w: 6) == false)\nassert(will_it_fly(q: [5], w: 5) == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction will_it_fly(q, w){\n  if(q.reduce((a,b) => a+b, 0) > w){\n    return false;\n  }\n  \n  for(let i=0, j=q.length-1; i<j; i++, j--){\n    if(q[i] !== q[j]){\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc will_it_fly(q: [Int], w: Int) -> Bool {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_multiply_prime(a: Int) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a: 1001) == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_multiply_prime(a){\n  function is_prime(n){\n    for(let j=2;j<n;j++){\n      if(n%j==0){\n        return false\n      }\n    }\n    return true\n  }\n  for(let i=2;i<101;i++){\n    if(!is_prime(i)) continue\n    for(let j=2;j<101;j++){\n      if(!is_prime(j)) continue\n      for(let k=2;k<101;k++){\n        if(!is_prime(k)) continue\n        if(i*j*k==a) return true\n      }\n    }\n  }\n  return false\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_multiply_prime(a: Int) -> Bool {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction maximum(arr, k){\n  if(k === 0){\n    return [];\n  }\n  arr.sort((a,b) => a-b);\n  return arr.slice(-k);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc separate_paren_groups(paren_string: String) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_string = [];\n  let current_depth = 0;\n\n  for(let c of paren_string){\n    if(c === '('){\n      current_depth += 1;\n      current_string.push(c);\n    } else if(c === ')'){\n      current_depth -= 1;\n      current_string.push(c);\n\n      if(current_depth === 0){\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc separate_paren_groups(paren_string: String) -> [String] {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction filter_integers(values){\n  return values.filter(x => Number.isInteger(x))\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc skjkasdkd(lst: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction skjkasdkd(lst){\n  function isPrime(n){\n    for(let i=2; i<=Math.sqrt(n); i++){\n      if(n%i === 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  let maxx = 0;\n  lst.forEach(i => {\n    if(i > maxx && isPrime(i)){\n      maxx = i;\n    }\n  });\n  return maxx.toString().split('').reduce((a,b) => parseInt(a) + parseInt(b));\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc skjkasdkd(lst: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc total_match(lst1: [String], lst2: [String]) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction total_match(lst1, lst2){\n  let l1 = lst1.reduce((a,b) => a+b.length, 0);\n  let l2 = lst2.reduce((a,b) => a+b.length, 0);\n  \n  return l1 <= l2 ? lst1 : lst2;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc total_match(lst1: [String], lst2: [String]) -> [String] {\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc string_to_md5(text: String) -> String? {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction string_to_md5(text){\n  const crypto = require('crypto')\n  return text ? crypto.createHash('md5').update(text).digest('hex') : null\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc string_to_md5(text: String) -> String? {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc car_race_collision(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n: 10) == 100)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction car_race_collision(n){\n  return n*n;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc car_race_collision(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_simple_power(x, n){\n  if(n == 1){\n    return x == 1;\n  }\n  let power = 1;\n  while(power < x){\n    power *= n;\n  }\n  return power == x;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc encode(message: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction encode(message){\n  const vowels = \"aeiouAEIOU\";\n  const vowelsReplace = Object.fromEntries([...vowels].map(v => [v, String.fromCharCode(v.charCodeAt(0) + 2)]));\n  message = message.split('').map(c => vowelsReplace[c] || c).join('');\n  return message.split('').map(c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join('');\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc encode(message: String) -> String {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc incr_list(l: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction incr_list(l){\n  return l.map(e => e+1);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc incr_list(l: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc flip_case(string: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction flip_case(string){\n  return string.split('').map(c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join('');\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc flip_case(string: String) -> String {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc vowels_count(s: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(vowels_count(s: \"abcde\") == 2)\nassert(vowels_count(s: \"Alone\") == 3)\nassert(vowels_count(s: \"key\") == 2)\nassert(vowels_count(s: \"bye\") == 1)\nassert(vowels_count(s: \"keY\") == 2)\nassert(vowels_count(s: \"bYe\") == 1)\nassert(vowels_count(s: \"ACEDY\") == 3)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction vowels_count(s){\n  let vowels = \"aeiouAEIOU\";\n  let n_vowels = [...s].filter(c => vowels.includes(c)).length;\n  if(s.slice(-1) === 'y' || s.slice(-1) === 'Y'){\n    n_vowels += 1;\n  }\n  return n_vowels;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc vowels_count(s: String) -> Int {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sorted_list_sum(lst: [String]) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sorted_list_sum(lst){\n  lst.sort();\n  let new_lst = [];\n  for(let i of lst){\n    if(i.length%2 === 0){\n      new_lst.push(i);\n    }\n  }\n  return new_lst.sort((a,b) => a.length-b.length);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sorted_list_sum(lst: [String]) -> [String] {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc even_odd_palindrome(n: Int) -> (Int, Int) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_palindrome(n: 123) == (8, 13))\nassert(even_odd_palindrome(n: 12) == (4, 6))\nassert(even_odd_palindrome(n: 3) == (1, 2))\nassert(even_odd_palindrome(n: 63) == (6, 8))\nassert(even_odd_palindrome(n: 25) == (5, 6))\nassert(even_odd_palindrome(n: 19) == (4, 6))\nassert(even_odd_palindrome(n: 9) == (4, 5))\nassert(even_odd_palindrome(n: 1) == (0, 1))",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction even_odd_palindrome(n){\n    function is_palindrome(n){\n        return String(n) == String(n).split(\"\").reverse().join(\"\");\n    }\n    let even_palindrome_count = 0;\n    let odd_palindrome_count = 0;\n    for(let i = 1; i <= n; i++){\n        if(i%2 == 1 && is_palindrome(i)){\n            odd_palindrome_count++;\n        }else if(i%2 == 0 && is_palindrome(i)){\n            even_palindrome_count++;\n        }\n    }\n    return [even_palindrome_count, odd_palindrome_count];\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc even_odd_palindrome(n: Int) -> (Int, Int) {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction triangle_area(a, b, c){\n  if(a+b <= c || a+c <= b || b+c <= a){\n    return -1;\n  }\n  let s = (a+b+c)/2;\n  let area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n  area = Math.round(area*100)/100;\n  return area;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc check_dict_case(dict: [String : String]) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length == 0){\n    return false;\n  }else{\n    let state = \"start\";\n    for(let key in dict){\n      if(typeof key !== \"string\"){\n        state = \"mixed\";\n        break;\n      }\n      if(state == \"start\"){\n        if(key === key.toUpperCase()){\n          state = \"upper\";\n        }else if(key === key.toLowerCase()){\n          state = \"lower\";\n        }else{\n          break;\n        }\n      }else if((state == \"upper\" && key !== key.toUpperCase()) || (state == \"lower\" && key !== key.toLowerCase())){\n        state = \"mixed\";\n        break;\n      }else{\n        continue;\n      }\n    }\n    return state == \"upper\" || state == \"lower\";\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc check_dict_case(dict: [String : String]) -> Bool {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc tri(n: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction tri(n){\n  if(n === 0){\n    return [1];\n  }\n  let my_tri = [1, 3];\n  for(let i=2; i<n+1; i++){\n    if(i%2 === 0){\n      my_tri.push(i/2+1);\n    }else{\n      my_tri.push(my_tri[i-1]+my_tri[i-2]+(i+3)/2);\n    }\n  }\n  return my_tri;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc tri(n: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc median(l: [Int]) -> Double {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction median(l){\n  l = l.sort((a,b) => a-b);\n  if(l.length % 2 == 1){\n    return l[Math.floor(l.length/2)];\n  }else{\n    return (l[l.length/2-1] + l[l.length/2])/2;\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc median(l: [Int]) -> Double {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc change_base(x: Int, base: Int) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction change_base(x, base){\n  let ret = \"\";\n  while (x > 0){\n    ret = x % base + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc change_base(x: Int, base: Int) -> String {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc longest(strings: [String]) -> String? {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(longest(strings: [] as [String]) == nil)\nassert(longest(strings: [\"x\", \"y\", \"z\"]) == \"x\")\nassert(longest(strings: [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction longest(strings){\n  if(strings.length == 0){\n    return null;\n  }\n  \n  let maxlen = Math.max(...strings.map(x => x.length));\n  for(let s of strings){\n    if(s.length == maxlen){\n      return s;\n    }\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc longest(strings: [String]) -> String? {\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sort_array(arr: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g) || []).length || a - b;\n  });\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sort_array(arr: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction common(l1, l2){\n  let ret = new Set();\n  l1.forEach(e1 => l2.forEach(e2 => {if(e1 === e2){ret.add(e1)}}));\n  return Array.from(ret).sort((a,b) => a-b);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc cycpattern_check(a: String, b: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction cycpattern_check(a, b){\n  let l = b.length;\n  let pat = b + b;\n  for(let i=0; i<a.length-l+1; i++){\n    for(let j=0; j<l+1; j++){\n      if(a.slice(i,i+l) === pat.slice(j,j+l)){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc cycpattern_check(a: String, b: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc minSubArraySum(nums: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction minSubArraySum(nums){\n  let max_sum = 0\n  let s = 0\n  for (let num of nums){\n    s += -num\n    if (s < 0){\n      s = 0\n    }\n    max_sum = Math.max(s, max_sum)\n  }\n  if (max_sum == 0){\n    max_sum = Math.max(...nums.map(i => -i))\n  }\n  let min_sum = -max_sum\n  return min_sum\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc minSubArraySum(nums: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sort_array(array: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sort_array(array){\n  return array.length == 0 ? [] : array.sort((a,b)=>(array[0]+array[array.length-1])%2==0 ? b-a : a-b);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sort_array(array: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc histogram(test: String) -> [String : Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction histogram(test){\n  let dict1 = {};\n  let list1 = test.split(\" \");\n  let t = 0;\n\n  for(let i of list1){\n    if(list1.filter(x => x === i).length > t && i !== ''){\n      t = list1.filter(x => x === i).length;\n    }\n  }\n  if(t > 0){\n    for(let i of list1){\n      if(list1.filter(x => x === i).length === t){\n        dict1[i] = t;\n      }\n    }\n  }\n  return dict1;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc histogram(test: String) -> [String : Int] {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc get_odd_collatz(n: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_odd_collatz(n: 14) == [1, 5, 7, 11, 13, 17])\nassert(get_odd_collatz(n: 5) == [1, 5])\nassert(get_odd_collatz(n: 12) == [1, 3, 5])\nassert(get_odd_collatz(n: 1) == [1])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction get_odd_collatz(n){\n  let odd_collatz = n%2 == 0 ? [] : [n];\n  while(n > 1){\n    if(n%2 == 0){\n      n = n/2;\n    }else{\n      n = n*3 + 1;\n    }\n    if(n%2 == 1){\n      odd_collatz.push(n);\n    }\n  }\n  return odd_collatz.sort((a,b) => a-b);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc get_odd_collatz(n: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc derivative(xs: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction derivative(xs){\n  return xs.map((x, i) => x*i).slice(1);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc derivative(xs: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc fibfib(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction fibfib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 0;\n  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc fibfib(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc truncate_number(number: Double) -> Double {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number: 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction truncate_number(number){\n  return number % 1;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc truncate_number(number: Double) -> Double {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc max_element(l: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction max_element(l){\n  let m = l[0];\n  for(let e of l){\n    if(e > m){\n      m = e;\n    }\n  }\n  return m;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc max_element(l: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc closest_integer(value: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_integer(value: \"10\") == 10)\nassert(closest_integer(value: \"14.5\") == 15)\nassert(closest_integer(value: \"-15.5\") == -16)\nassert(closest_integer(value: \"15.3\") == 15)\nassert(closest_integer(value: \"0\") == 0)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction closest_integer(value){\n  if(value.split('.').length == 2){\n    while(value[value.length-1] == '0'){\n      value = value.slice(0, -1);\n    }\n  }\n  let num = parseFloat(value);\n  if(value.slice(-2) == '.5'){\n    if(num > 0){\n      return Math.ceil(num);\n    }else{\n      return Math.floor(num);\n    }\n  }else if(value.length > 0){\n    return Math.round(num);\n  }else{\n    return 0;\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc closest_integer(value: String) -> Int {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc prime_fib(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction prime_fib(n){\n  function is_prime(p){\n    if(p < 2){\n      return false;\n    }\n    for(let k=2; k<=Math.min(Math.floor(Math.sqrt(p))+1, p-1); k++){\n      if(p % k === 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  let f = [0, 1];\n  while(true){\n    f.push(f[f.length-1] + f[f.length-2]);\n    if(is_prime(f[f.length-1])){\n      n--;\n    }\n    if(n === 0){\n      return f[f.length-1];\n    }\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc prime_fib(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sum_product(numbers){\n  let sum_value = 0;\n  let prod_value = 1;\n  \n  for(let n of numbers){\n    sum_value += n;\n    prod_value *= n;\n  }\n  \n  return [sum_value, prod_value];\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc select_words(s: String, n: Int) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction select_words(s, n){\n  let result = [];\n  s.split(\" \").forEach(word => {\n    let n_consonants = 0;\n    for(let i=0; i<word.length; i++){\n      if(![\"a\",\"e\",\"i\",\"o\",\"u\"].includes(word[i].toLowerCase())){\n        n_consonants++;\n      }\n    }\n    if(n_consonants === n){\n      result.push(word);\n    }\n  });\n  return result;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc select_words(s: String, n: Int) -> [String] {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc add_elements(arr: [Int], k: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction add_elements(arr, k){\n  return arr.slice(0,k).reduce((a,b) => (String(b).length <= 2) ? a+b : a, 0);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc add_elements(arr: [Int], k: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction eat(number, need, remaining){\n  if(need <= remaining){\n    return [number + need, remaining-need];\n  }else{\n    return [number + remaining, 0];\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc odd_count(lst: [String]) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction odd_count(lst){\n  let res = [];\n  for(let arr of lst){\n    let n = arr.split(\"\").filter(d => parseInt(d)%2 === 1).length;\n    res.push(\"the number of odd elements \" + n + \"n the str\"+ n +\"ng \"+ n +\" of the \"+ n +\"nput.\");\n  }\n  return res;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc odd_count(lst: [String]) -> [String] {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc next_smallest(lst: [Int]) -> Int? {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction next_smallest(lst){\n  lst = [...new Set(lst)].sort((a,b) => a-b);\n  return lst.length < 2 ? null : lst[1];\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc next_smallest(lst: [Int]) -> Int? {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc get_row(lst: [[Int]], x: Int) -> [(Int, Int)] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\nassert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst: [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3) == [(2, 2)])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction get_row(lst, x){\n  let coords = [];\n  for(let i=0; i<lst.length; i++){\n    for(let j=0; j<lst[i].length; j++){\n      if(lst[i][j] === x){\n        coords.push([i,j]);\n      }\n    }\n  }\n  return coords.sort((a,b) => a[0] - b[0] || b[1] - a[1]);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc get_row(lst: [[Int]], x: Int) -> [(Int, Int)] {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String] {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc choose_num(x: Int, y: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction choose_num(x, y){\n  if(x > y){\n    return -1;\n  }\n  if(y % 2 === 0){\n    return y;\n  }\n  if(x === y){\n    return -1;\n  }\n  return y - 1;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc choose_num(x: Int, y: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc prime_length(string: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction prime_length(string){\n  let l = string.length;\n  if(l == 0 || l == 1){\n    return false;\n  }\n  for(let i=2; i<l; i++){\n    if(l % i == 0){\n      return false;\n    }\n  }\n  return true;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc prime_length(string: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sum_to_n(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sum_to_n(n){\n  return n*(n+1)/2;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sum_to_n(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc fix_spaces(text: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\")\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text: \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text: \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction fix_spaces(text){\n  let new_text = \"\";\n  let i = 0;\n  let start = 0, end = 0;\n  while(i < text.length){\n    if(text[i] === \" \"){\n      end += 1;\n    }else{\n      if(end - start > 2){\n        new_text += \"-\"+text[i];\n      }else if(end - start > 0){\n        new_text += \"_\".repeat(end - start)+text[i];\n      }else{\n        new_text += text[i];\n      }\n      start = i+1;\n      end = i+1;\n    }\n    i+=1;\n  }\n  if(end - start > 2){\n    new_text += \"-\";\n  }else if(end - start > 0){\n    new_text += \"_\".repeat(end - start);\n  }\n  return new_text;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc fix_spaces(text: String) -> String {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc rolling_max(numbers: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction rolling_max(numbers){\n  let running_max = null;\n  let result = [];\n\n  for(let n of numbers){\n    if(running_max === null){\n      running_max = n;\n    } else {\n      running_max = Math.max(running_max, n);\n    }\n    result.push(running_max);\n  }\n  return result;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc rolling_max(numbers: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc words_in_sentence(sentence: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction words_in_sentence(sentence){\n  let new_lst = [];\n  for(let word of sentence.split(\" \")){\n    let flg = 0;\n    if(word.length == 1){\n      flg = 1;\n    }\n    for(let i=2; i<word.length; i++){\n      if(word.length%i == 0){\n        flg = 1;\n      }\n    }\n    if(flg == 0 || word.length == 2){\n      new_lst.push(word);\n    }\n  }\n  return new_lst.join(\" \");\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc words_in_sentence(sentence: String) -> String {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc get_closest_vowel(word: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction get_closest_vowel(word){\n  let vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n  if(word.length < 3){\n    return \"\";\n  }\n  for(let i=word.length-2; i>0; i--){\n    if(vowels.has(word[i])){\n      if(!vowels.has(word[i-1]) && !vowels.has(word[i+1])){\n        return word[i];\n      }\n    }\n  }\n  return \"\";\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc get_closest_vowel(word: String) -> String {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction compare(game, guess){\n  return game.map((x,i) => Math.abs(x-guess[i]));\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc remove_duplicates(numbers: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction remove_duplicates(numbers){\n  let c = {};\n  numbers.forEach(n => c[n] = (c[n] || 0) + 1);\n  return numbers.filter(n => c[n] <= 1);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc remove_duplicates(numbers: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction parse_nested_parens(paren_string){\n  function parse_paren_group(s){\n    let depth = 0;\n    let max_depth = 0;\n    for (let c of s){\n      if (c === '('){\n        depth += 1;\n        max_depth = Math.max(depth, max_depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ').filter(x => x).map(parse_paren_group);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc even_odd_count(num: Int) -> (Int, Int) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction even_odd_count(num){\n  let even_count = 0;\n  let odd_count = 0;\n  for(let i of String(Math.abs(num))){\n    if(parseInt(i)%2 === 0){\n      even_count += 1;\n    }else{\n      odd_count += 1;\n    }\n  }\n  return [even_count, odd_count];\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc even_odd_count(num: Int) -> (Int, Int) {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc fruit_distribution(s: String, n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction fruit_distribution(s, n){\n  let lis = []\n  for(let i of s.split(' ')){\n    if(i.match(/\\d+/)){\n      lis.push(parseInt(i))\n    }\n  }\n  return n - lis.reduce((a,b)=>a+b,0)\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc fruit_distribution(s: String, n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc string_xor(a: String, b: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_xor(a: \"111000\", b: \"101010\") == \"010010\")\nassert(string_xor(a: \"1\", b: \"1\") == \"0\")\nassert(string_xor(a: \"0101\", b: \"0000\") == \"0101\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction string_xor(a, b){\n  let result = '';\n  for(let i=0; i<a.length; i++){\n    result += a[i] === b[i] ? '0' : '1';\n  }\n  return result;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc string_xor(a: String, b: String) -> String {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc strlen(string: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction strlen(string){\n  return string.length;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc strlen(string: String) -> Int {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc string_sequence(n: Int) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction string_sequence(n){\n  return [...Array(n+1).keys()].join(' ');\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc string_sequence(n: Int) -> String {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc file_name_check(file_name: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\") == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\nassert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name: \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\nassert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name: \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\") == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name: \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\") == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\")\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name: \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\") == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name: \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\") == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name: \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\") == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction file_name_check(file_name){\n  let suf = ['txt', 'exe', 'dll'];\n  let lst = file_name.split('.');\n  if(lst.length != 2){\n    return 'No';\n  }\n  if(!suf.includes(lst[1])){\n    return 'No';\n  }\n  if(lst[0].length == 0 || !lst[0][0].match(/[a-zA-Z]/)){\n    return 'No';\n  }\n  let t = lst[0].match(/\\d/g);\n  if(t != null && t.length > 3){\n    return 'No';\n  }\n  return 'Yes';\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc file_name_check(file_name: String) -> String {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc can_arrange(arr: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction can_arrange(arr){\n  let ind=-1\n  let i=1\n  while (i<arr.length){\n    if (arr[i]<arr[i-1]){\n      ind=i\n    }\n    i+=1\n  }\n  return ind\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc can_arrange(arr: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc add(lst: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction add(lst){\n  return lst.filter((x,i) => i%2==1 && x%2==0).reduce((a,b) => a+b,0)\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc add(lst: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction intersperse(numbers, delimeter){\n  if (!numbers.length){\n    return [];\n  }\n\n  let result = [];\n\n  for (let i = 0; i < numbers.length - 1; i++){\n    result.push(numbers[i]);\n    result.push(delimeter);\n  }\n\n  result.push(numbers[numbers.length - 1]);\n\n  return result;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc match_parens(lst: [String]) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(match_parens(lst: [\"()(\", \")\"]) == \"Yes\")\nassert(match_parens(lst: [\")\", \")\"]) == \"No\")\nassert(match_parens(lst: [\"(()(())\", \"())())\"]) == \"No\")\nassert(match_parens(lst: [\")())\", \"(()()(\"]) == \"Yes\")\nassert(match_parens(lst: [\"(())))\", \"(()())((\"]) == \"Yes\")\nassert(match_parens(lst: [\"()\", \"())\"]) == \"No\")\nassert(match_parens(lst: [\"(()(\", \"()))()\"]) == \"Yes\")\nassert(match_parens(lst: [\"((((\", \"((())\"]) == \"No\")\nassert(match_parens(lst: [\")(()\", \"(()(\"]) == \"No\")\nassert(match_parens(lst: [\")(\", \")(\"]) == \"No\")\nassert(match_parens(lst: [\"(\", \")\"]) == \"Yes\")\nassert(match_parens(lst: [\")\", \"(\"]) == \"Yes\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction match_parens(lst){\n  function check(s){\n    let val = 0;\n    for(let i of s){\n      if(i === '('){\n        val++;\n      }else{\n        val--;\n      }\n      if(val < 0){\n        return false;\n      }\n    }\n    return val === 0;\n  }\n  \n  let S1 = lst[0] + lst[1];\n  let S2 = lst[1] + lst[0];\n  \n  return check(S1) || check(S2) ? 'Yes' : 'No';\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc match_parens(lst: [String]) -> String {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc filter_by_substring(strings: [String], substring: String) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction filter_by_substring(strings, substring){\n  return strings.filter(x => x.includes(substring))\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc filter_by_substring(strings: [String], substring: String) -> [String] {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc find_max(words: [String]) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction find_max(words){\n  return words.sort((a, b) => {\n    return (new Set(b)).size - (new Set(a)).size || a.localeCompare(b);\n  })[0];\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc find_max(words: [String]) -> String {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc generate_integers(a: Int, b: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(generate_integers(a: 2, b: 10) == [2, 4, 6, 8])\nassert(generate_integers(a: 10, b: 2) == [2, 4, 6, 8])\nassert(generate_integers(a: 132, b: 2) == [2, 4, 6, 8])\nassert(generate_integers(a: 17, b: 89) == [] as [Int])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction generate_integers(a, b){\n  let lower = Math.max(2, Math.min(a, b));\n  let upper = Math.min(8, Math.max(a, b));\n  \n  return Array.from({length: upper-lower+1}, (_, i) => i+lower).filter(i => i%2 === 0);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc generate_integers(a: Int, b: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc exchange(lst1: [Int], lst2: [Int]) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction exchange(lst1, lst2){\n  let odd = lst1.filter(i => i%2 === 1).length;\n  let even = lst2.filter(i => i%2 === 0).length;\n  return even >= odd ? \"YES\" : \"NO\";\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc exchange(lst1: [Int], lst2: [Int]) -> String {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc int_to_mini_roman(number: Int) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction int_to_mini_roman(number){\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n  let sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n  let i = 12;\n  let res = '';\n  while(number){\n    let div = Math.floor(number / num[i]);\n    number %= num[i];\n    while(div){\n      res += sym[i];\n      div--;\n    }\n    i--;\n  }\n  return res.toLowerCase();\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc int_to_mini_roman(number: Int) -> String {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_equal_to_sum_even(n: Int) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_equal_to_sum_even(n: 4) == false)\nassert(is_equal_to_sum_even(n: 6) == false)\nassert(is_equal_to_sum_even(n: 8) == true)\nassert(is_equal_to_sum_even(n: 10) == true)\nassert(is_equal_to_sum_even(n: 11) == false)\nassert(is_equal_to_sum_even(n: 12) == true)\nassert(is_equal_to_sum_even(n: 13) == false)\nassert(is_equal_to_sum_even(n: 16) == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_equal_to_sum_even(n){\n  return n%2 == 0 && n >= 8;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_equal_to_sum_even(n: Int) -> Bool {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc decimal_to_binary(decimal: Int) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction decimal_to_binary(decimal){\n  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc decimal_to_binary(decimal: Int) -> String {\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc sort_third(l: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction sort_third(l){\n  l = l.slice()\n  l.filter((_, i) => i % 3 === 0).sort().forEach((x, i) => l[3 * i] = x)\n  return l\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc sort_third(l: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc simplify(x: String, n: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(simplify(x: \"1/5\", n: \"5/1\") == true)\nassert(simplify(x: \"1/6\", n: \"2/1\") == false)\nassert(simplify(x: \"5/1\", n: \"3/1\") == true)\nassert(simplify(x: \"7/10\", n: \"10/2\") == false)\nassert(simplify(x: \"2/10\", n: \"50/10\") == true)\nassert(simplify(x: \"7/2\", n: \"4/2\") == true)\nassert(simplify(x: \"11/6\", n: \"6/1\") == true)\nassert(simplify(x: \"2/3\", n: \"5/2\") == false)\nassert(simplify(x: \"5/2\", n: \"3/5\") == false)\nassert(simplify(x: \"2/4\", n: \"8/4\") == true)\nassert(simplify(x: \"2/4\", n: \"4/2\") == true)\nassert(simplify(x: \"1/5\", n: \"5/1\") == true)\nassert(simplify(x: \"1/5\", n: \"1/5\") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction simplify(x, n){\n  let [a, b] = x.split(\"/\");\n  let [c, d] = n.split(\"/\");\n  let numerator = parseInt(a) * parseInt(c);\n  let denom = parseInt(b) * parseInt(d);\n  return numerator/denom == parseInt(numerator/denom);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc simplify(x: String, n: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc solve(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction solve(s){\n  let flg = 0;\n  let idx = 0;\n  let new_str = s.split('');\n  \n  for(let i of s){\n    if(i.match(/[a-z]/i)){\n      new_str[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();\n      flg = 1;\n    }\n    idx++;\n  }\n  \n  if(flg === 0){\n    return new_str.reverse().join('');\n  }\n  \n  return new_str.join('');\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc solve(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction right_angle_triangle(a, b, c){\n  return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc double_the_difference(lst: [Double]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction double_the_difference(lst){\n  return lst.filter(i => i > 0 && i%2!=0 && !/\\./.test(i)).reduce((a,b) => a + b**2, 0)\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc double_the_difference(lst: [Double]) -> Int {\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\n\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            func compare_one(a: Value, b: Value) -> Value? {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction compare_one(a, b){\n  let temp_a = a, temp_b = b;\n  if(typeof temp_a === 'string') temp_a = temp_a.replace(',','.');\n  if(typeof temp_b === 'string') temp_b = temp_b.replace(',','.');\n  if(parseFloat(temp_a) == parseFloat(temp_b)) return null;\n  return parseFloat(temp_a) > parseFloat(temp_b) ? a : b;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\n\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            func compare_one(a: Value, b: Value) -> Value? {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc below_zero(operations: [Int]) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction below_zero(operations){\n  let balance = 0;\n  \n  for(let op of operations){\n    balance += op;\n    if(balance < 0){\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc below_zero(operations: [Int]) -> Bool {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction greatest_common_divisor(a, b){\n  while(b){\n    [a, b] = [b, a % b]\n  }\n  return a\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc f(n: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction f(n){\n  let ret = [];\n  for(let i=1;i<=n;i++){\n    if(i%2==0){\n      let x = 1;\n      for(let j=1;j<=i;j++) x *= j;\n      ret.push(x);\n    }else{\n      let x = 0;\n      for(let j=1;j<=i;j++) x += j;\n      ret.push(x);\n    }\n  }\n  return ret;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc f(n: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc monotonic(l: [Int]) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction monotonic(l){\n  return l.every((x, i) => i == 0 || x >= l[i-1]) || l.every((x, i) => i == 0 || x <= l[i-1]);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc monotonic(l: [Int]) -> Bool {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc by_length(arr: [Int]) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction by_length(arr){\n  let dic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n  let sorted_arr = arr.sort((a,b) => b-a);\n  let new_arr = [];\n  for(let var_ of sorted_arr){\n    if(dic[var_]){\n      new_arr.push(dic[var_]);\n    }\n  }\n  return new_arr;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc by_length(arr: [Int]) -> [String] {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc check_if_last_char_is_a_letter(txt: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction check_if_last_char_is_a_letter(txt){\n  let check = txt.split(' ').pop();\n  return check.length == 1 && check.toLowerCase().charCodeAt(0) >= 97 && check.toLowerCase().charCodeAt(0) <= 122;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc check_if_last_char_is_a_letter(txt: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc iscube(a: Int) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction iscube(a){\n  a = Math.abs(a)\n  return Math.round(Math.pow(a, 1/3)) ** 3 == a\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc iscube(a: Int) -> Bool {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc reverse_delete(s: String, c: String) -> (String, Bool) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction reverse_delete(s, c){\n  s = s.split('').filter(char => !c.includes(char)).join('')\n  return [s, s.split('').reverse().join('') === s]\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc reverse_delete(s: String, c: String) -> (String, Bool) {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction mean_absolute_deviation(numbers){\n  let mean = numbers.reduce((a,b) => a+b) / numbers.length;\n  return numbers.reduce((a,b) => a + Math.abs(b-mean), 0) / numbers.length;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc correct_bracketing(brackets: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction correct_bracketing(brackets){\n  let depth = 0;\n  for(let b of brackets){\n    if(b === \"<\"){\n      depth++;\n    }else{\n      depth--;\n    }\n    if(depth < 0){\n      return false;\n    }\n  }\n  return depth === 0;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc correct_bracketing(brackets: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc rescale_to_unit(numbers: [Double]) -> [Double] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers: [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction rescale_to_unit(numbers){\n  let min_number = Math.min(...numbers);\n  let max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc rescale_to_unit(numbers: [Double]) -> [Double] {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc intersection(interval1: (Int, Int), interval2: (Int, Int)) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection(interval1: (1, 2), interval2: (2, 3)) == \"NO\")\nassert(intersection(interval1: (-1, 1), interval2: (0, 4)) == \"NO\")\nassert(intersection(interval1: (-3, -1), interval2: (-5, 5)) == \"YES\")\nassert(intersection(interval1: (-2, 2), interval2: (-4, 0)) == \"YES\")\nassert(intersection(interval1: (-11, 2), interval2: (-1, -1)) == \"NO\")\nassert(intersection(interval1: (1, 2), interval2: (3, 5)) == \"NO\")\nassert(intersection(interval1: (1, 2), interval2: (1, 2)) == \"NO\")\nassert(intersection(interval1: (-2, -2), interval2: (-3, -2)) == \"NO\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction intersection(interval1, interval2){\n  function is_prime(num){\n    if(num == 1 || num == 0){\n      return false;\n    }\n    if(num == 2){\n      return true;\n    }\n    for(let i=2; i<num; i++){\n      if(num%i == 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  let l = Math.max(interval1[0], interval2[0]);\n  let r = Math.min(interval1[1], interval2[1]);\n  let length = r - l;\n  if(length > 0 && is_prime(length)){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc intersection(interval1: (Int, Int), interval2: (Int, Int)) -> String {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc hex_key(num: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\") == 12)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction hex_key(num){\n  let primes = ['2', '3', '5', '7', 'B', 'D'];\n  let total = 0;\n  for(let i=0; i<num.length; i++){\n    if(primes.includes(num[i])){\n      total += 1;\n    }\n  }\n  return total;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc hex_key(num: String) -> Int {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction strange_sort_list(lst){\n  let res = [], switch_ = true;\n  while (lst.length > 0){\n    res.push(switch_ ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.slice(-1)[0]), 1);\n    switch_ = !switch_;\n  }\n  return res;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_bored(S: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_bored(S){\n  let sentences = S.split(/[.?!]\\s*/);\n  return sentences.filter(sentence => sentence.slice(0,2) == 'I ').length;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_bored(S: String) -> Int {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc all_prefixes(string: String) -> [String] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction all_prefixes(string){\n  let result = [];\n  for(let i=0; i<string.length; i++){\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc all_prefixes(string: String) -> [String] {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc how_many_times(string: String, substring: String) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction how_many_times(string, substring){\n  let times = 0;\n  \n  for(let i=0; i<string.length-substring.length+1; i++){\n    if(string.slice(i, i+substring.length) === substring){\n      times++;\n    }\n  }\n  \n  return times;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc how_many_times(string: String, substring: String) -> Int {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc solution(lst: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction solution(lst){\n  return lst.filter((x, i) => i%2 === 0 && x%2 === 1).reduce((a,b) => a+b, 0);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc solution(lst: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_sorted(lst: [Int]) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_sorted(lst){\n  let count_digit = {}\n  for (let i of lst){\n    count_digit[i] = (count_digit[i] || 0) + 1\n  }\n  if (lst.some(i => count_digit[i] > 2)){\n    return false\n  }\n  if (lst.slice(1).every((x, i) => x >= lst[i])){\n    return true\n  }\n  else{\n    return false\n  }\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_sorted(lst: [Int]) -> Bool {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc search(lst: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(lst: [5, 5, 5, 5, 1]) == 1)\nassert(search(lst: [4, 1, 4, 1, 4, 4]) == 4)\nassert(search(lst: [3, 3]) == -1)\nassert(search(lst: [8, 8, 8, 8, 8, 8, 8, 8]) == 8)\nassert(search(lst: [2, 3, 3, 2, 2]) == 2)\nassert(search(lst: [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\nassert(search(lst: [3, 2, 8, 2]) == 2)\nassert(search(lst: [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1)\nassert(search(lst: [8, 8, 3, 6, 5, 6, 4]) == -1)\nassert(search(lst: [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1)\nassert(search(lst: [1, 9, 10, 1, 3]) == 1)\nassert(search(lst: [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\nassert(search(lst: [1]) == 1)\nassert(search(lst: [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\nassert(search(lst: [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\nassert(search(lst: [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1)\nassert(search(lst: [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\nassert(search(lst: [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\nassert(search(lst: [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2)\nassert(search(lst: [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1)\nassert(search(lst: [10]) == -1)\nassert(search(lst: [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\nassert(search(lst: [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1)\nassert(search(lst: [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\nassert(search(lst: [3, 10, 10, 9, 2]) == -1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction search(lst){\n  let frq = Array(Math.max(...lst)+1).fill(0);\n  lst.forEach(i => frq[i]++);\n  \n  let ans = -1;\n  for(let i=1; i<frq.length; i++){\n    if(frq[i] >= i){\n      ans = i;\n    }\n  }\n  \n  return ans;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc search(lst: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc pluck(arr: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction pluck(arr){\n  if(arr.length == 0) return []\n  evens = arr.filter(x => x%2 == 0)\n  if(evens.length == 0) return []\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))]\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc pluck(arr: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction pairs_sum_to_zero(l){\n  for(let i=0; i<l.length; i++){\n    for(let j=i+1; j<l.length; j++){\n      if(l[i]+l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc make_palindrome(string: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\nassert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string: \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\nassert(make_palindrome(string: \"jerry\") == \"jerryrrej\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction make_palindrome(string){\n  if (!string) return '';\n\n  let beginning_of_suffix = 0;\n\n  while (string.slice(beginning_of_suffix) !== string.slice(beginning_of_suffix).split('').reverse().join('')){\n    beginning_of_suffix += 1;\n  }\n\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc make_palindrome(string: String) -> String {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc starts_one_ends(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction starts_one_ends(n){\n  return n == 1 ? 1 : 18 * (10 ** (n - 2));\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc starts_one_ends(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc get_positive(l: [Int]) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction get_positive(l){\n  return l.filter(e => e > 0);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc get_positive(l: [Int]) -> [Int] {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc concatenate(strings: [String]) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction concatenate(strings){\n  return strings.join('')\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc concatenate(strings: [String]) -> String {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_nested(string: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_nested(string){\n  let opening_bracket_index = [];\n  let closing_bracket_index = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === '['){\n      opening_bracket_index.push(i);\n    }else{\n      closing_bracket_index.push(i);\n    }\n  }\n  closing_bracket_index.reverse();\n  let cnt = 0;\n  let i = 0;\n  let l = closing_bracket_index.length;\n  for(let idx of opening_bracket_index){\n    if(i < l && idx < closing_bracket_index[i]){\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_nested(string: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_palindrome(text: String) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_palindrome(text: \"\") == true)\nassert(is_palindrome(text: \"aba\") == true)\nassert(is_palindrome(text: \"aaaaa\") == true)\nassert(is_palindrome(text: \"zbcd\") == false)\nassert(is_palindrome(text: \"xywyx\") == true)\nassert(is_palindrome(text: \"xywyz\") == false)\nassert(is_palindrome(text: \"xywzx\") == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_palindrome(text){\n  for(let i=0; i<text.length; i++){\n    if(text[i] != text[text.length-1-i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_palindrome(text: String) -> Bool {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc count_nums(arr: [Int]) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction count_nums(arr){\n  function digits_sum(n){\n    let neg = 1;\n    if(n < 0){\n      n = -1 * n;\n      neg = -1;\n    }\n    n = Array.from(String(n), Number);\n    n[0] = n[0] * neg;\n    return n.reduce((a,b) => a+b, 0);\n  }\n  return arr.map(digits_sum).filter(x => x > 0).length;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc count_nums(arr: [Int]) -> Int {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc factorize(n: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(factorize(n: 2) == [2])\nassert(factorize(n: 4) == [2, 2])\nassert(factorize(n: 8) == [2, 2, 2])\nassert(factorize(n: 57) == [3, 19])\nassert(factorize(n: 3249) == [3, 3, 19, 19])\nassert(factorize(n: 185193) == [3, 3, 3, 19, 19, 19])\nassert(factorize(n: 20577) == [3, 19, 19, 19])\nassert(factorize(n: 18) == [2, 3, 3])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction factorize(n){\n  let fact = [];\n  let i = 2;\n  while(i <= Math.sqrt(n) + 1){\n    if(n % i == 0){\n      fact.push(i);\n      n /= i;\n    }else{\n      i++;\n    }\n  }\n  if(n > 1){\n    fact.push(n);\n  }\n  return fact;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc factorize(n: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc largest_prime_factor(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction largest_prime_factor(n){\n  function is_prime(k){\n    if(k < 2){\n      return false;\n    }\n    for(let i=2; i<k; i++){\n      if(k % i == 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  let largest = 1;\n  for(let j=2; j<n+1; j++){\n    if(n % j == 0 && is_prime(j)){\n      largest = Math.max(largest, j);\n    }\n  }\n  return largest;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc largest_prime_factor(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc get_max_triples(n: Int) -> Int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction get_max_triples(n){\n  let A = Array.from({length: n}, (v, i) => (i+1)*(i+1)-i);\n  let ans = [];\n  for(let i=0; i<n; i++){\n    for(let j=i+1; j<n; j++){\n      for(let k=j+1; k<n; k++){\n        if((A[i]+A[j]+A[k])%3 === 0){\n          ans.push([A[i], A[j], A[k]]);\n        }\n      }\n    }\n  }\n  return ans.length;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc get_max_triples(n: Int) -> Int {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc anti_shuffle(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction anti_shuffle(s){\n  return s.split(' ').map(i => [...i].sort().join('')).join(' ');\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc anti_shuffle(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc solve(N: Int) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(N: 1000) == \"1\")\nassert(solve(N: 150) == \"110\")\nassert(solve(N: 147) == \"1100\")\nassert(solve(N: 333) == \"1001\")\nassert(solve(N: 963) == \"10010\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction solve(N){\n  return (N+'').split('').reduce((a,b) => +a + +b, 0).toString(2);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc solve(N: Int) -> String {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc minPath(grid: [[Int]], k: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(minPath(grid: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k: 3) == [1, 2, 1])\nassert(minPath(grid: [[5, 9, 3], [4, 1, 6], [7, 8, 2]], k: 1) == [1])\nassert(minPath(grid: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], k: 4) == [1, 2, 1, 2])\nassert(minPath(grid: [[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], k: 7) == [1, 10, 1, 10, 1, 10, 1])\nassert(minPath(grid: [[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], k: 5) == [1, 7, 1, 7, 1])\nassert(minPath(grid: [[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], k: 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1])\nassert(minPath(grid: [[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], k: 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\nassert(minPath(grid: [[2, 7, 4], [3, 1, 5], [6, 8, 9]], k: 8) == [1, 3, 1, 3, 1, 3, 1, 3])\nassert(minPath(grid: [[6, 1, 5], [3, 8, 9], [2, 7, 4]], k: 8) == [1, 5, 1, 5, 1, 5, 1, 5])\nassert(minPath(grid: [[1, 2], [3, 4]], k: 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\nassert(minPath(grid: [[1, 3], [3, 2]], k: 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction minPath(grid, k){\n  let n = grid.length;\n  let val = n * n + 1;\n  for(let i=0; i<n; i++){\n    for(let j=0; j<n; j++){\n      if(grid[i][j] === 1){\n        let temp = [];\n        if(i != 0){\n          temp.push(grid[i-1][j]);\n        }\n        if(j != 0){\n          temp.push(grid[i][j-1]);\n        }\n        if(i != n-1){\n          temp.push(grid[i+1][j]);\n        }\n        if(j != n-1){\n          temp.push(grid[i][j+1]);\n        }\n        val = Math.min(...temp);\n      }\n    }\n  }\n  let ans = [];\n  for(let i=0; i<k; i++){\n    if(i % 2 === 0){\n      ans.push(1);\n    }else{\n      ans.push(val);\n    }\n  }\n  return ans;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc minPath(grid: [[Int]], k: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc encrypt(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") == \"e\")",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction encrypt(s){\n  let d = 'abcdefghijklmnopqrstuvwxyz'\n  let out = ''\n  for (let c of s){\n    if (d.includes(c)){\n      out += d[(d.indexOf(c)+2*2) % 26]\n    } else {\n      out += c\n    }\n  }\n  return out\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc encrypt(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc make_a_pile(n: Int) -> [Int] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction make_a_pile(n){\n  return Array.from({length: n}, (_, i) => n + 2*i);\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc make_a_pile(n: Int) -> [Int] {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "swift",
    "prompt": "import Swift\nimport Foundation\nfunc is_prime(n: Int) -> Bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### JavaScript version\n\nfunction is_prime(n){\n  if(n < 2){\n    return false;\n  }\n  for(let k=2; k<n; k++){\n    if(n % k == 0){\n      return false;\n    }\n  }\n  return true;\n}\n\n### Swift version\n\nimport Swift\nimport Foundation\nfunc is_prime(n: Int) -> Bool {\n"
  }
]