[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool correct_bracketing(string brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool correct_bracketing(std::string brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool correct_bracketing(string brackets)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nfloat triangle_area(long a, long h)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(5L, 3L) == 7.5);\n    assert(candidate(2L, 2L) == 2.0);\n    assert(candidate(10L, 8L) == 40.0);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat triangle_area(long a, long h) {\n    return a * h / 2.0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nfloat triangle_area(long a, long h)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong special_factorial(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong special_factorial(long n) {\n    long fact_i = 1;\n    long special_fact = 1;\n    for(long i = 1; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong special_factorial(long n)\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n    std::optional<long> smallest;\n    std::optional<long> largest;\n    for (auto i : lst) {\n        if (i < 0 && (!smallest || i > *smallest)) {\n            smallest = i;\n        }\n        if (i > 0 && (!largest || i < *largest)) {\n            largest = i;\n        }\n    }\n    return std::make_tuple(smallest, largest);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool move_one_ball(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = move_one_ball;\n\n    assert(candidate([3L, 4L, 5L, 1L, 2L]) == true);\n    assert(candidate([3L, 5L, 10L, 1L, 2L]) == true);\n    assert(candidate([4L, 3L, 1L, 2L]) == false);\n    assert(candidate([3L, 5L, 4L, 1L, 2L]) == false);\n    assert(candidate([]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool move_one_ball(std::vector<long> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<long> sorted_array = arr;\n    std::sort(sorted_array.begin(), sorted_array.end());\n    std::vector<long> my_arr;\n    long min_value = *std::min_element(arr.begin(), arr.end());\n    long min_index = std::find(arr.begin(), arr.end(), min_value) - arr.begin();\n    my_arr.insert(my_arr.end(), arr.begin() + min_index, arr.end());\n    my_arr.insert(my_arr.end(), arr.begin(), arr.begin() + min_index);\n    return my_arr == sorted_array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool move_one_ball(long[] arr)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digits(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) == 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n    assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong digits(long n) {\n    long product = 1;\n    int odd_count = 0;\n    for (char digit : std::to_string(n)) {\n        int int_digit = digit - '0';\n        if (int_digit % 2 == 1) {\n            product *= int_digit;\n            odd_count++;\n        }\n    }\n    return odd_count == 0 ? 0 : product;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digits(long n)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fib4(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong fib4(long n) {\n    std::vector<long> results = {0, 0, 2, 0};\n    if (n < 4) {\n        return results[n];\n    }\n    for (long i = 4; i <= n; i++) {\n        long next = results[0] + results[1] + results[2] + results[3];\n        results.erase(results.begin());\n        results.push_back(next);\n    }\n    return results[3];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fib4(long n)\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_even(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_even;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [-10L, 3L, -5L, 2L, -3L, 3L, 5L, 0L, 9L, 1L, 123L]);\n    assert(candidate([5L, 8L, -12L, 4L, 23L, 2L, 3L, 11L, 12L, -10L]) == [-12L, 8L, 3L, 4L, 5L, 2L, 12L, 11L, 23L, -10L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> sort_even(std::vector<long> l) {\n    std::vector<long> evens;\n    for(int i=0;i<l.size();i+=2) evens.push_back(l[i]);\n    std::vector<long> odds;\n    for(int i=1;i<l.size();i+=2) odds.push_back(l[i]);\n    std::sort(evens.begin(), evens.end());\n    std::vector<long> ans;\n    for(int i=0;i<odds.size();i++) {\n        ans.push_back(evens[i]);\n        ans.push_back(odds[i]);\n    }\n    if(evens.size() > odds.size()) ans.push_back(evens[evens.size()-1]);\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_even(long[] l)\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] order_by_points(long[] nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> order_by_points(std::vector<long> nums) {\n    auto digits_sum = [](long n) -> long {\n        long neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        std::stringstream ss;\n        ss << n;\n        std::string s = ss.str();\n        std::vector<long> v;\n        for (auto c : s) {\n            v.push_back(c - '0');\n        }\n        v[0] = v[0] * neg;\n        return std::accumulate(v.begin(), v.end(), 0);\n    };\n    std::sort(nums.begin(), nums.end(), [&](long a, long b) {\n        return digits_sum(a) < digits_sum(b);\n    });\n    return nums;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] order_by_points(long[] nums)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_happy(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_happy(std::string s) {\n    if (s.size() < 3) {\n      return false;\n    }\n\n    for (int i = 0; i < s.size() - 2; i++) {\n      if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]) {\n        return false;\n      }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_happy(string s)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring circular_shift(long x, long shift)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        return std::string(s.rbegin(), s.rend());\n    } else {\n        return s.substr(s.size() - shift) + s.substr(0, s.size() - shift);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring circular_shift(long x, long shift)\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_fill(long[][] grid, long capacity)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = max_fill;\n\n    assert(candidate([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L) == 6L);\n    assert(candidate([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L) == 5L);\n    assert(candidate([[0L, 0L, 0L], [0L, 0L, 0L]], 5L) == 0L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 2L) == 4L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 9L) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n    long sum = 0;\n    for (auto arr : grid) {\n        sum += ceil(std::accumulate(arr.begin(), arr.end(), 0.0) / capacity);\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_fill(long[][] grid, long capacity)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool has_close_elements(float[] numbers, float threshold)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = has_close_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true);\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == true);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n    int n = numbers.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i != j) {\n                float distance = abs(numbers[i] - numbers[j]);\n                if (distance < threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool has_close_elements(float[] numbers, float threshold)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong x_or_y(long n, long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong x_or_y(long n, long x, long y) {\n    if (n == 1) {\n        return y;\n    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return y;\n            break;\n        }\n    }\n    return x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong x_or_y(long n, long x, long y)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong specialFilter(long[] nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong specialFilter(std::vector<long> nums) {\n    long count = 0;\n    for (auto num: nums) {\n        if (num > 10) {\n            std::string number_as_string = std::to_string(num);\n            if (number_as_string.front() % 2 == 1 && number_as_string.back() % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong specialFilter(long[] nums)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_music(string music_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> parse_music(std::string music_string) {\n  std::map<std::string, long> note_map = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n  std::vector<long> res;\n  std::istringstream iss(music_string);\n  std::string note;\n  while (iss >> note) {\n    if (note_map.count(note)) {\n      res.push_back(note_map[note]);\n    }\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_music(string music_string)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_distinct_characters(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_distinct_characters(std::string string) {\n    std::set<char> s;\n    for (auto c : string) {\n        s.insert(tolower(c));\n    }\n    return s.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_distinct_characters(string string)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digitSum(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\") == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\") == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\" How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong digitSum(std::string s) {\n    if (s == \"\") return 0;\n    long ans = 0;\n    for (char c : s) {\n        if (isupper(c)) ans += c;\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digitSum(string s)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong sum_squares(std::vector<long> lst) {\n    long result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(long[] lst)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] count_up_to(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    for (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] count_up_to(long n)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(float[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong sum_squares(std::vector<float> lst) {\n    long squared = 0;\n    for (auto i : lst) {\n        squared += std::ceil(i) * std::ceil(i);\n    }\n    return squared;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(float[] lst)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end()); l.erase(std::unique(l.begin(), l.end()), l.end()); return l;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique(long[] l)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fib(long n)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fizz_buzz(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fizz_buzz(long n) {\n    std::vector<long> ns;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            ns.push_back(i);\n        }\n    }\n    std::stringstream ss;\n    for (auto i : ns) {\n        ss << i;\n    }\n    std::string s = ss.str();\n    long ans = 0;\n    for (auto c : s) {\n        ans += (c == '7');\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fizz_buzz(long n)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring Strongest_Extension(string class_name, string[] extensions)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = Strongest_Extension;\n\n    assert(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\");\n    assert(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\");\n    assert(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\");\n    assert(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\");\n    assert(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\");\n    assert(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\");\n    assert(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\");\n    assert(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\");\n    assert(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n    std::string strong = extensions[0];\n    int my_val = std::count_if(strong.begin(), strong.end(), [](char c){return std::isupper(c);}) - std::count_if(strong.begin(), strong.end(), [](char c){return std::islower(c);});\n    for (std::string s : extensions) {\n        int val = std::count_if(s.begin(), s.end(), [](char c){return std::isupper(c);}) - std::count_if(s.begin(), s.end(), [](char c){return std::islower(c);});\n        if (val > my_val) {\n            strong = s;\n            my_val = val;\n        }\n    }\n    std::string ans = class_name + \".\" + strong;\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring Strongest_Extension(string class_name, string[] extensions)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(float, float) find_closest_elements(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::tuple<float, float> closest_pair;\n    float distance = -1;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i+1; j < numbers.size(); j++) {\n            float new_distance = std::abs(numbers[i] - numbers[j]);\n            if (distance == -1 || new_distance < distance) {\n                distance = new_distance;\n                closest_pair = std::make_tuple(std::min(numbers[i], numbers[j]), std::max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return closest_pair;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(float, float) find_closest_elements(float[] numbers)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool valid_date(string date)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool valid_date(std::string date) {\n    try {\n        date = date.substr(0, date.find(' '));\n        int month, day, year;\n        sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) {\n            return false;\n        }\n    } catch (...) {\n        return false;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool valid_date(string date)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add(long x, long y) {\n    return x + y;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long x, long y)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool triples_sum_to_zero(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool triples_sum_to_zero(std::vector<long> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool triples_sum_to_zero(long[] l)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_divisor(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong largest_divisor(long n) {\n    for(long i=n-1;i>=1;i--) {\n        if(n%i==0) {\n            return i;\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_divisor(long n)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring sort_numbers(string numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> value_map = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n    std::string num;\n    while (ss >> num) {\n        nums.push_back(num);\n    }\n    std::sort(nums.begin(), nums.end(), [&](std::string a, std::string b) {\n        return value_map[a] < value_map[b];\n    });\n    std::string res;\n    for (auto& num : nums) {\n        res += num + \" \";\n    }\n    res.pop_back();\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring sort_numbers(string numbers)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong smallest_change(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = smallest_change;\n\n    assert(candidate([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 3L, 2L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 2L, 3L, 2L, 1L]) == 0L);\n    assert(candidate([3L, 1L, 1L, 3L]) == 0L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([0L, 1L]) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong smallest_change(std::vector<long> arr) {\n    long ans = 0;\n    for (long i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong smallest_change(long[] arr)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_threshold(long[] l, long t)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool below_threshold(std::vector<long> l, long t) {\n    for (auto e: l) {\n        if (e >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_threshold(long[] l, long t)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) prod_signs(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result = candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get == -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L, 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L, 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 0;\n    auto neg_count = std::count_if(arr.begin(), arr.end(), [](long x){return x < 0;});\n    if (std::find(arr.begin(), arr.end(), 0) != arr.end()) prod = 0;\n    else prod = pow(-1, neg_count);\n    long sum = 0;\n    for (auto i : arr) sum += std::abs(i);\n    return prod * sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) prod_signs(long[] arr)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong modp(long n, long p)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong modp(long n, long p) {\n    long ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (2 * ret) % p;\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong modp(long n, long p)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_upper(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_upper(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i += 2) {\n        if (std::string(\"AEIOU\").find(s[i]) != std::string::npos) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_upper(string s)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong multiply(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong multiply(long a, long b) {\n    return abs(a % 10) * abs(b % 10);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong multiply(long a, long b)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique_digits(long[] x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> odd_digit_elements;\n    for (auto i : x) {\n        bool is_odd = true;\n        for (auto c : std::to_string(i)) {\n            if (c % 2 == 0) {\n                is_odd = false;\n                break;\n            }\n        }\n        if (is_odd) {\n            odd_digit_elements.push_back(i);\n        }\n    }\n    std::sort(odd_digit_elements.begin(), odd_digit_elements.end());\n    return odd_digit_elements;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique_digits(long[] x)\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool will_it_fly(long[] q, long w)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool will_it_fly(std::vector<long> q, long w) {\n    if (std::accumulate(q.begin(), q.end(), 0) > w) {\n        return false;\n    }\n    int i=0, j=q.size()-1;\n    while (i<j) {\n        if (q[i] != q[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool will_it_fly(long[] q, long w)\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_multiply_prime(long a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_multiply_prime(long a) {\n    auto is_prime = [&](long n) {\n        for (long j = 2; j < n; j++) {\n            if (n % j == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    for (long i = 2; i <= 100; i++) {\n        if (!is_prime(i)) continue;\n        for (long j = 2; j <= 100; j++) {\n            if (!is_prime(j)) continue;\n            for (long k = 2; k <= 100; k++) {\n                if (!is_prime(k)) continue;\n                if (i * j * k == a) return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_multiply_prime(long a)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] maximum(long[] arr, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n    if (k == 0) {\n        return {};\n    }\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> ans(arr.end() - k, arr.end());\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] maximum(long[] arr, long k)\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] separate_paren_groups(string paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = separate_paren_groups;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n    assert(candidate(\"(()(())((())))\") == [\"(()(())((())))\"]);\n    assert(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> result;\n    std::string current_string;\n    int current_depth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            current_depth++;\n            current_string.push_back(c);\n        } else if (c == ')') {\n            current_depth--;\n            current_string.push_back(c);\n            if (current_depth == 0) {\n                result.push_back(current_string);\n                current_string.clear();\n            }\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] separate_paren_groups(string paren_string)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong skjkasdkd(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = skjkasdkd;\n\n    assert(candidate([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L]) == 10L);\n    assert(candidate([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\n    assert(candidate([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L]) == 13L);\n    assert(candidate([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L]) == 11L);\n    assert(candidate([0L, 81L, 12L, 3L, 1L, 21L]) == 3L);\n    assert(candidate([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);\n    assert(candidate([8191L]) == 19L);\n    assert(candidate([8191L, 123456L, 127L, 7L]) == 19L);\n    assert(candidate([127L, 97L, 8192L]) == 10L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong skjkasdkd(std::vector<long> lst) {\n    auto isPrime = [](long n) -> bool {\n        for(long i=2;i<=sqrt(n);i++) {\n            if(n%i==0) return false;\n        }\n        return true;\n    };\n    long maxx = 0;\n    for(auto i:lst) {\n        if(i>maxx && isPrime(i)) maxx = i;\n    }\n    long result = 0;\n    std::string s = std::to_string(maxx);\n    for(auto c:s) result += c-'0';\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong skjkasdkd(long[] lst)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] total_match(string[] lst1, string[] lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int l1 = 0;\n    for (auto st : lst1) {\n        l1 += st.size();\n    }\n    int l2 = 0;\n    for (auto st : lst2) {\n        l2 += st.size();\n    }\n    if (l1 <= l2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] total_match(string[] lst1, string[] lst2)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong car_race_collision(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong car_race_collision(long n) {\n    return n*n;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong car_race_collision(long n)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_simple_power(long x, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_simple_power(long x, long n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    long power = 1;\n    while (power < x) {\n        power = power * n;\n    }\n    return power == x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_simple_power(long x, long n)\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encode(string message)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string encode(std::string message) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::map<char, char> vowels_replace;\n    for (char i : vowels) {\n        vowels_replace[i] = i + 2;\n    }\n    std::transform(message.begin(), message.end(), message.begin(), [](char c) {\n        return std::isupper(c) ? std::tolower(c) : std::toupper(c);\n    });\n    std::string result = \"\";\n    for (char i : message) {\n        if (vowels_replace.count(i)) {\n            result += vowels_replace[i];\n        } else {\n            result += i;\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encode(string message)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] incr_list(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto e : l) {\n    res.push_back(e + 1);\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] incr_list(long[] l)\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring flip_case(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string flip_case(std::string string) {\n    for (auto& c : string) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else {\n            c = toupper(c);\n        }\n    }\n    return string;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring flip_case(string string)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong vowels_count(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong vowels_count(std::string s) {\n    std::string vowels = \"aeiouAEIOU\";\n    long n_vowels = std::count_if(s.begin(), s.end(), [&](char c){return vowels.find(c) != std::string::npos;});\n    if (s.back() == 'y' || s.back() == 'Y') {\n        n_vowels += 1;\n    }\n    return n_vowels;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong vowels_count(string s)\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] sorted_list_sum(string[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n    std::sort(lst.begin(), lst.end());\n    std::vector<std::string> new_lst;\n    for (auto i:lst) {\n        if (i.size()%2 == 0) {\n            new_lst.push_back(i);\n        }\n    }\n    std::sort(new_lst.begin(), new_lst.end(), [](std::string a, std::string b){return a.size() < b.size();});\n    return new_lst;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] sorted_list_sum(string[] lst)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] words_string(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\") == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::string> words_string(std::string s) {\n    std::vector<std::string> result;\n    std::replace(s.begin(), s.end(), ',', ' ');\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] words_string(string s)\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_palindrome(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> even_odd_palindrome(long n) {\n    auto is_palindrome = [](long n) -> bool {\n        std::string s = std::to_string(n);\n        return std::equal(s.begin(), s.end(), s.rbegin());\n    };\n    long even_palindrome_count = 0;\n    long odd_palindrome_count = 0;\n    for(long i=1; i<=n; i++) {\n        if(i%2 == 1 && is_palindrome(i)) {\n            odd_palindrome_count++;\n        } else if(i%2 == 0 && is_palindrome(i)) {\n            even_palindrome_count++;\n        }\n    }\n    return std::make_tuple(even_palindrome_count, odd_palindrome_count);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_palindrome(long n)\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat triangle_area(long a, long b, long c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    area = round(area * 100) / 100;\n    return area;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat triangle_area(long a, long b, long c)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_dict_case(Nullable!(string[string]) dict)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    std::string state = \"start\";\n    for (auto const& [key, val] : dict) {\n        if (!std::all_of(key.begin(), key.end(), ::isalpha)) {\n            state = \"mixed\";\n            break;\n        }\n        if (state == \"start\") {\n            if (std::all_of(key.begin(), key.end(), ::isupper)) {\n                state = \"upper\";\n            } else if (std::all_of(key.begin(), key.end(), ::islower)) {\n                state = \"lower\";\n            } else {\n                break;\n            }\n        } else if ((state == \"upper\" && !std::all_of(key.begin(), key.end(), ::isupper)) || (state == \"lower\" && !std::all_of(key.begin(), key.end(), ::islower))) {\n            state = \"mixed\";\n            break;\n        }\n    }\n    return state == \"upper\" || state == \"lower\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_dict_case(Nullable!(string[string]) dict)\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] tri(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> tri(long n) {\n    if (n == 0) {\n        return {1};\n    }\n    std::vector<long> my_tri = {1, 3};\n    for (long i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            my_tri.push_back(i / 2 + 1);\n        } else {\n            my_tri.push_back(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2);\n        }\n    }\n    return my_tri;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] tri(long n)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat median(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n    } else {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat median(long[] l)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring change_base(long x, long base)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string change_base(long x, long base) {\n    std::string ret;\n    while (x > 0) {\n        ret = std::to_string(x % base) + ret;\n        x /= base;\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring change_base(long x, long base)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(string) longest(string[] strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    auto it = std::max_element(strings.begin(), strings.end(), [](const std::string& a, const std::string& b) {\n        return a.size() < b.size();\n    });\n    return *it;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(string) longest(string[] strings)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] common(long[] l1, long[] l2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::set<long> ret;\n    for (auto e1 : l1) {\n        for (auto e2 : l2) {\n            if (e1 == e2) {\n                ret.insert(e1);\n            }\n        }\n    }\n    std::vector<long> v(ret.begin(), ret.end());\n    std::sort(v.begin(), v.end());\n    return v;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] common(long[] l1, long[] l2)\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool cycpattern_check(string a, string b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = cycpattern_check;\n\n    assert(candidate(\"xyzw\", \"xyw\") == false);\n    assert(candidate(\"yello\", \"ell\") == true);\n    assert(candidate(\"whattup\", \"ptut\") == false);\n    assert(candidate(\"efef\", \"fee\") == true);\n    assert(candidate(\"abab\", \"aabb\") == false);\n    assert(candidate(\"winemtt\", \"tinem\") == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool cycpattern_check(std::string a, std::string b) {\n    int l = b.length();\n    std::string pat = b + b;\n    for(int i = 0; i <= a.length() - l; i++) {\n        for(int j = 0; j <= l; j++) {\n            if(a.substr(i, l) == pat.substr(j, l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool cycpattern_check(string a, string b)\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_array(long[] array)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> sort_array(std::vector<long> array) {\n    if (array.empty()) {\n        return std::vector<long>();\n    } else {\n        bool isReversed = (array[0] + array[array.size() - 1]) % 2 == 0;\n        std::sort(array.begin(), array.end(), [&](long a, long b) {\n            return isReversed ? a > b : a < b;\n        });\n        return array;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_array(long[] array)\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long[string]) histogram(string test)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> dict1;\n    std::stringstream ss(test);\n    std::string word;\n    long t = 0;\n    while (ss >> word) {\n        dict1[word]++;\n        if (dict1[word] > t) {\n            t = dict1[word];\n        }\n    }\n    std::map<std::string,long> result;\n    for (auto i : dict1) {\n        if (i.second == t) {\n            result[i.first] = t;\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long[string]) histogram(string test)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_odd_collatz(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_odd_collatz;\n\n    assert(candidate(14L) == [1L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(5L) == [1L, 5L]);\n    assert(candidate(12L) == [1L, 3L, 5L]);\n    assert(candidate(1L) == [1L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> get_odd_collatz(long n) {\n    std::vector<long> odd_collatz;\n    if (n%2==0) {\n        odd_collatz = {}; \n    } else {\n        odd_collatz = {n};\n    }\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n = n/2;\n        } else {\n            n = n*3 + 1;\n        }\n        if (n%2 == 1) {\n            odd_collatz.push_back(n);\n        }\n    }\n    std::sort(odd_collatz.begin(), odd_collatz.end());\n    return odd_collatz;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_odd_collatz(long n)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] derivative(long[] xs)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> derivative(std::vector<long> xs) {\n  std::vector<long> res;\n  for (int i = 1; i < xs.size(); ++i) {\n    res.push_back(i * xs[i]);\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] derivative(long[] xs)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fibfib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fibfib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fibfib(long n)\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat truncate_number(float number)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat truncate_number(float number) {\n    return number - floor(number);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat truncate_number(float number)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_element(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong max_element(std::vector<long> l) {\n    long m = l[0];\n    for (long e: l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_element(long[] l)\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong closest_integer(string value)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong closest_integer(std::string value) {\n    std::regex pattern(\"\\\\.0+$\");\n    value = std::regex_replace(value, pattern, \"\");\n    double num = std::stod(value);\n    if (value.back() == '5') {\n        if (num > 0) {\n            return std::ceil(num);\n        } else {\n            return std::floor(num);\n        }\n    } else {\n        return std::round(num);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong closest_integer(string value)\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong prime_fib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prime_fib;\n\n    assert(candidate(1L) == 2L);\n    assert(candidate(2L) == 3L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 13L);\n    assert(candidate(5L) == 89L);\n    assert(candidate(6L) == 233L);\n    assert(candidate(7L) == 1597L);\n    assert(candidate(8L) == 28657L);\n    assert(candidate(9L) == 514229L);\n    assert(candidate(10L) == 433494437L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong prime_fib(long n) {\n    auto is_prime = [](long p) {\n        if (p < 2) {\n            return false;\n        }\n        for (long k = 2; k < std::min((long)std::sqrt(p) + 1, p - 1); ++k) {\n            if (p % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    std::vector<long> f = {0, 1};\n    while (true) {\n        f.push_back(f.back() + f[f.size() - 2]);\n        if (is_prime(f.back())) {\n            n -= 1;\n        }\n        if (n == 0) {\n            return f.back();\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong prime_fib(long n)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) sum_product(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum_value = 0;\n    long prod_value = 1;\n\n    for (auto n: numbers) {\n        sum_value += n;\n        prod_value *= n;\n    }\n    return std::make_tuple(sum_value, prod_value);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) sum_product(long[] numbers)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] select_words(string s, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        long n_consonants = 0;\n        for (char c : word) {\n            if (std::string(\"aeiouAEIOU\").find(c) == std::string::npos) {\n                n_consonants++;\n            }\n        }\n        if (n_consonants == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] select_words(string s, long n)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add_elements(long[] arr, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add_elements(std::vector<long> arr, long k) {\n    long sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (std::to_string(arr[i]).size() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add_elements(long[] arr, long k)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] eat(long number, long need, long remaining)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> eat(long number, long need, long remaining) {\n    if(need <= remaining){\n        return { number + need , remaining-need };\n    } else{\n        return { number + remaining , 0};\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] eat(long number, long need, long remaining)\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] odd_count(string[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = odd_count;\n\n    assert(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n    assert(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n    assert(candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n    std::vector<std::string> res;\n    for (auto arr : lst) {\n        int n = std::count_if(arr.begin(), arr.end(), [](char c){return c%2==1;});\n        res.push_back(\"the number of odd elements \" + std::to_string(n) + \"n the str\"+ std::to_string(n) +\"ng \"+ std::to_string(n) +\" of the \"+ std::to_string(n) +\"nput.\");\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] odd_count(string[] lst)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) next_smallest(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::optional<long> next_smallest(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n    lst.erase(std::unique(lst.begin(), lst.end()), lst.end());\n    return lst.size() < 2 ? std::nullopt : std::make_optional(lst[1]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) next_smallest(long[] lst)\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long)[] get_row(long[][] lst, long x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L, 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L, 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L, 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L), tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]], 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L, 2L)]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n    std::vector<std::tuple<long, long>> coords;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(coords.begin(), coords.end(), [](auto a, auto b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return coords;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long)[] get_row(long[][] lst, long x)\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_prefix(string[] strings, string prefix)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto x: strings) {\n        if (x.find(prefix) == 0) {\n            res.push_back(x);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_prefix(string[] strings, string prefix)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong choose_num(long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x == y) {\n        return -1;\n    }\n    return y - 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong choose_num(long x, long y)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool prime_length(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prime_length;\n\n    assert(candidate(\"Hello\") == true);\n    assert(candidate(\"abcdcba\") == true);\n    assert(candidate(\"kittens\") == true);\n    assert(candidate(\"orange\") == false);\n    assert(candidate(\"wow\") == true);\n    assert(candidate(\"world\") == true);\n    assert(candidate(\"MadaM\") == true);\n    assert(candidate(\"Wow\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"HI\") == true);\n    assert(candidate(\"go\") == true);\n    assert(candidate(\"gogo\") == false);\n    assert(candidate(\"aaaaaaaaaaaaaaa\") == false);\n    assert(candidate(\"Madam\") == true);\n    assert(candidate(\"M\") == false);\n    assert(candidate(\"0\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool prime_length(std::string string) {\n    int l = string.size();\n    if (l == 0 || l == 1) {\n        return false;\n    }\n    for (int i = 2; i < l; i++) {\n        if (l % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool prime_length(string string)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_to_n(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong sum_to_n(long n) {\n    return (n * (n + 1)) / 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_to_n(long n)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] rolling_max(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = rolling_max;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 1L]) == [4L, 4L, 4L, 4L]);\n    assert(candidate([3L, 2L, 3L, 100L, 3L]) == [3L, 3L, 3L, 100L, 100L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long> result;\n    long running_max = 0;\n    for (long n : numbers) {\n        running_max = std::max(running_max, n);\n        result.push_back(running_max);\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] rolling_max(long[] numbers)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring words_in_sentence(string sentence)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string words_in_sentence(std::string sentence) {\n    std::vector<std::string> new_lst;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        int flg = 0;\n        if(word.size() == 1) {\n            flg = 1;\n        }\n        for(int i = 2; i < word.size(); i++) {\n            if(word.size()%i == 0) {\n                flg = 1;\n            }\n        }\n        if(flg == 0 || word.size() == 2) {\n            new_lst.push_back(word);\n        }\n    }\n    std::string res = \"\";\n    for(int i = 0; i < new_lst.size(); i++) {\n        res += new_lst[i];\n        if(i != new_lst.size()-1) {\n            res += \" \";\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring words_in_sentence(string sentence)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring get_closest_vowel(string word)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string get_closest_vowel(std::string word) {\n    if (word.size() < 3) {\n        return \"\";\n    }\n\n    std::set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'};\n    for (int i = word.size() - 2; i >= 1; i--) {\n        if (vowels.count(word[i])) {\n            if (!vowels.count(word[i+1]) && !vowels.count(word[i-1])) {\n                return std::string(1, word[i]);\n            }\n        }\n    }\n    return \"\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring get_closest_vowel(string word)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] compare(long[] game, long[] guess)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n    std::vector<long> res;\n    for(int i=0;i<game.size();i++){\n        res.push_back(abs(game[i]-guess[i]));\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] compare(long[] game, long[] guess)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] remove_duplicates(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n    std::map<long, long> c;\n    for (auto n : numbers) {\n        c[n]++;\n    }\n    std::vector<long> result;\n    for (auto n : numbers) {\n        if (c[n] <= 1) {\n            result.push_back(n);\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] remove_duplicates(long[] numbers)\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool same_chars(string s0, string s1)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool same_chars(std::string s0, std::string s1) {\n    return std::set<char>(s0.begin(), s0.end()) == std::set<char>(s1.begin(), s1.end());\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool same_chars(string s0, string s1)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_nested_parens(string paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n    std::string s;\n    while (ss >> s) {\n        long depth = 0, max_depth = 0;\n        for (char c : s) {\n            if (c == '(') {\n                depth++;\n                max_depth = std::max(depth, max_depth);\n            } else {\n                depth--;\n            }\n        }\n        res.push_back(max_depth);\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_nested_parens(string paren_string)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_count(long num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count = 0;\n    for (auto i: std::to_string(abs(num))) {\n        if (int(i)%2==0) {\n            even_count +=1;\n        } else {\n            odd_count +=1;\n        }\n    }\n    return std::make_tuple(even_count, odd_count);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_count(long num)\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fruit_distribution(string s, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fruit_distribution(std::string s, long n) {\n    std::vector<int> lis;\n    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word) {\n        if(std::regex_match(word, std::regex(\"\\\\d+\"))) {\n            lis.push_back(std::stoi(word));\n        }\n    }\n    return n - std::accumulate(lis.begin(), lis.end(), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fruit_distribution(string s, long n)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_xor(string a, string b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string string_xor(std::string a, std::string b) {\n    std::string ans;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) ans += '0';\n        else ans += '1';\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_xor(string a, string b)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong strlen(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong string_length(std::string string) {\n    return string.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong strlen(string string)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_sequence(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string string_sequence(long n) {\n    std::string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += std::to_string(i);\n        if (i != n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_sequence(long n)\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring file_name_check(string file_name)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\") == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n    assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\") == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\") == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\") == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\") == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"s.\") == \"No\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string file_name_check(std::string file_name) {\n    std::vector<std::string> suf = {\"txt\", \"exe\", \"dll\"};\n    std::vector<std::string> lst;\n    std::stringstream ss(file_name);\n    std::string item;\n    while (std::getline(ss, item, '.')) {\n        lst.push_back(item);\n    }\n    if (lst.size() != 2) {\n        return \"No\";\n    }\n    if (std::find(suf.begin(), suf.end(), lst[1]) == suf.end()) {\n        return \"No\";\n    }\n    if (lst[0].length() == 0) {\n        return \"No\";\n    }\n    if (!isalpha(lst[0][0])) {\n        return \"No\";\n    }\n    int t = std::count_if(lst[0].begin(), lst[0].end(), ::isdigit);\n    if (t > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring file_name_check(string file_name)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong can_arrange(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong can_arrange(std::vector<long> arr) {\n    long ind=-1;\n    long i=1;\n    while (i<arr.size()) {\n      if (arr[i]<arr[i-1]) {\n        ind=i;\n      }\n      i+=1;\n    }\n    return ind;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong can_arrange(long[] arr)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long[] lst)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] intersperse(long[] numbers, long delimeter)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n    if (numbers.empty()) {\n        return {};\n    }\n\n    std::vector<long> result;\n\n    for (auto n = numbers.begin(); n != numbers.end() - 1; ++n) {\n        result.push_back(*n);\n        result.push_back(delimeter);\n    }\n\n    result.push_back(numbers.back());\n\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] intersperse(long[] numbers, long delimeter)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring match_parens(string[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = match_parens;\n\n    assert(candidate([\"()(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \")\"]) == \"No\");\n    assert(candidate([\"(()(())\", \"())())\"]) == \"No\");\n    assert(candidate([\")())\", \"(()()(\"]) == \"Yes\");\n    assert(candidate([\"(())))\", \"(()())((\"]) == \"Yes\");\n    assert(candidate([\"()\", \"())\"]) == \"No\");\n    assert(candidate([\"(()(\", \"()))()\"]) == \"Yes\");\n    assert(candidate([\"((((\", \"((())\"]) == \"No\");\n    assert(candidate([\")(()\", \"(()(\"]) == \"No\");\n    assert(candidate([\")(\", \")(\"]) == \"No\");\n    assert(candidate([\"(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \"(\"]) == \"Yes\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string match_parens(std::vector<std::string> lst) {\n    auto check = [](std::string s) {\n        int val = 0;\n        for (auto i : s) {\n            if (i == '(') {\n                val = val + 1;\n            } else {\n                val = val - 1;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val == 0;\n    };\n    auto S1 = lst[0] + lst[1];\n    auto S2 = lst[1] + lst[0];\n    return check(S1) || check(S2) ? \"Yes\" : \"No\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring match_parens(string[] lst)\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_substring(string[] strings, string substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n  std::vector<std::string> result;\n  for (auto x : strings) {\n    if (x.find(substring) != std::string::npos) {\n      result.push_back(x);\n    }\n  }\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_substring(string[] strings, string substring)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring find_max(string[] words)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string find_max(std::vector<std::string> words) {\n    std::sort(words.begin(), words.end(), [](std::string a, std::string b) {\n        return std::make_pair(-std::set<char>(a.begin(), a.end()).size(), a) < std::make_pair(-std::set<char>(b.begin(), b.end()).size(), b);\n    });\n    return words[0];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring find_max(string[] words)\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] generate_integers(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> generate_integers(long a, long b) {\n    long lower = std::max(2l, std::min(a, b));\n    long upper = std::min(8l, std::max(a, b));\n    std::vector<long> res;\n    for (long i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] generate_integers(long a, long b)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring exchange(long[] lst1, long[] lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = exchange;\n\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L]) == \"YES\");\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L]) == \"NO\");\n    assert(candidate([1L, 2L, 3L, 4L], [2L, 1L, 4L, 3L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 4L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 3L]) == \"NO\");\n    assert(candidate([3L, 2L, 6L, 1L, 8L, 9L], [3L, 5L, 5L, 1L, 1L, 1L]) == \"NO\");\n    assert(candidate([100L, 200L], [200L, 200L]) == \"YES\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n    int odd = 0;\n    int even = 0;\n    for (auto i : lst1) {\n        if (i%2 == 1) {\n            odd++;\n        }\n    }\n    for (auto i : lst2) {\n        if (i%2 == 0) {\n            even++;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring exchange(long[] lst1, long[] lst2)\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring int_to_mini_roman(long number)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = int_to_mini_roman;\n\n    assert(candidate(19L) == \"xix\");\n    assert(candidate(152L) == \"clii\");\n    assert(candidate(251L) == \"ccli\");\n    assert(candidate(426L) == \"cdxxvi\");\n    assert(candidate(500L) == \"d\");\n    assert(candidate(1L) == \"i\");\n    assert(candidate(4L) == \"iv\");\n    assert(candidate(43L) == \"xliii\");\n    assert(candidate(90L) == \"xc\");\n    assert(candidate(94L) == \"xciv\");\n    assert(candidate(532L) == \"dxxxii\");\n    assert(candidate(900L) == \"cm\");\n    assert(candidate(994L) == \"cmxciv\");\n    assert(candidate(1000L) == \"m\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string int_to_mini_roman(long number) {\n    std::vector<long> num = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::vector<std::string> sym = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n    int i = 12;\n    std::string res = \"\";\n    while (number) {\n        long div = number / num[i];\n        number %= num[i];\n        while (div) {\n            res += sym[i];\n            div -= 1;\n        }\n        i -= 1;\n    }\n    std::transform(res.begin(), res.end(), res.begin(), ::tolower);\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring int_to_mini_roman(long number)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_equal_to_sum_even(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_equal_to_sum_even(long n) {\n    return n%2 == 0 && n >= 8;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_equal_to_sum_even(long n)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool simplify(string x, string n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\", \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\", \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/5\", \"1/5\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool simplify(std::string x, std::string n) {\n    std::stringstream ss1(x), ss2(n);\n    int a, b, c, d;\n    char slash;\n    ss1 >> a >> slash >> b;\n    ss2 >> c >> slash >> d;\n    int numerator = a * c;\n    int denom = b * d;\n    return numerator % denom == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool simplify(string x, string n)\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(\"AsDf\") == \"aSdF\");\n    assert(candidate(\"1234\") == \"4321\");\n    assert(candidate(\"ab\") == \"AB\");\n    assert(candidate(\"#a@C\") == \"#A@c\");\n    assert(candidate(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert(candidate(\"#6@2\") == \"2@6#\");\n    assert(candidate(\"#$a^D\") == \"#$A^d\");\n    assert(candidate(\"#ccc\") == \"#CCC\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::string solve(std::string s) {\n    bool flg = false;\n    std::string new_str = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            new_str[i] = isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n            flg = true;\n        }\n    }\n    if (!flg) {\n        std::reverse(new_str.begin(), new_str.end());\n    }\n    return new_str;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(string s)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool right_angle_triangle(long a, long b, long c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool right_angle_triangle(long a, long b, long c) {\n    return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool right_angle_triangle(long a, long b, long c)\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong double_the_difference(float[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong double_the_difference(std::vector<float> lst) {\n    long sum = 0;\n    for (auto i : lst) {\n        if (i > 0 && int(i)%2!=0 && i == int(i)) {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong double_the_difference(float[] lst)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_zero(long[] operations)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool below_zero(std::vector<long> operations) {\n    long balance = 0;\n    for (auto op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_zero(long[] operations)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong greatest_common_divisor(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong greatest_common_divisor(long a, long b) {\n    while (b) {\n        long temp = a % b; a = b; b = temp;\n    }\n    return a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong greatest_common_divisor(long a, long b)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] f(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L) == [1L, 2L, 6L, 24L, 15L]);\n    assert(candidate(7L) == [1L, 2L, 6L, 24L, 15L, 720L, 28L]);\n    assert(candidate(1L) == [1L]);\n    assert(candidate(3L) == [1L, 2L, 6L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> f(long n) {\n    std::vector<long> ret;\n    for(long i=1;i<=n;i++) {\n        if(i%2==0) {\n            long x=1;\n            for(long j=1;j<=i;j++) x*=j;\n            ret.push_back(x);\n        } else {\n            long x=0;\n            for(long j=1;j<=i;j++) x+=j;\n            ret.push_back(x);\n        }\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] f(long n)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool monotonic(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool monotonic(std::vector<long> l) {\n    return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.rbegin(), l.rend());\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool monotonic(long[] l)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] by_length(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> by_length(std::vector<long> arr) {\n    std::map<long, std::string> dic = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    std::vector<std::string> new_arr;\n    for (auto var: arr) {\n        if (dic.count(var)) {\n            new_arr.push_back(dic[var]);\n        }\n    }\n    return new_arr;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] by_length(long[] arr)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring remove_vowels(string text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = remove_vowels;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\");\n    assert(candidate(\"fedcba\") == \"fdcb\");\n    assert(candidate(\"eeeee\") == \"\");\n    assert(candidate(\"acBAA\") == \"cB\");\n    assert(candidate(\"EcBOO\") == \"cB\");\n    assert(candidate(\"ybcd\") == \"ybcd\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string remove_vowels(std::string text) {\n    std::string res;\n    for (char c : text) {\n        if (std::string(\"aeiouAEIOU\").find(c) == std::string::npos) {\n            res += c;\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring remove_vowels(string text)\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_if_last_char_is_a_letter(string txt)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = check_if_last_char_is_a_letter;\n\n    assert(candidate(\"apple\") == false);\n    assert(candidate(\"apple pi e\") == true);\n    assert(candidate(\"eeeee\") == false);\n    assert(candidate(\"A\") == true);\n    assert(candidate(\"Pumpkin pie \") == false);\n    assert(candidate(\"Pumpkin pie 1\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"eeeee e \") == false);\n    assert(candidate(\"apple pie\") == false);\n    assert(candidate(\"apple pi e \") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool check_if_last_char_is_a_letter(std::string txt) {\n    std::string check = txt.substr(txt.find_last_of(' ') + 1);\n    return (check.size() == 1 && std::isalpha(check[0]));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_if_last_char_is_a_letter(string txt)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool iscube(long a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool iscube(long a) {\n    a = abs(a);\n    return pow(round(pow(a, 1. / 3)), 3) == a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool iscube(long a)\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(string, bool) reverse_delete(string s, string c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n    s.erase(std::remove_if(s.begin(), s.end(), [&c](char x) { return c.find(x) != std::string::npos; }), s.end());\n    return {s, s == std::string(s.rbegin(), s.rend())};\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(string, bool) reverse_delete(string s, string c)\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat mean_absolute_deviation(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    float sum = 0;\n    for (auto x: numbers) {\n        sum += abs(x - mean);\n    }\n    return sum / numbers.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat mean_absolute_deviation(float[] numbers)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool correct_bracketing(string brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool correct_bracketing(std::string brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool correct_bracketing(string brackets)\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat[] rescale_to_unit(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n    float max_number = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> result;\n    for (auto x : numbers) {\n        result.push_back((x - min_number) / (max_number - min_number));\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat[] rescale_to_unit(float[] numbers)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n    auto is_prime = [](long num) {\n        if (num == 1 || num == 0) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        for (long i = 2; i < num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    long l = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long r = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    long length = r - l;\n    if (length > 0 && is_prime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong hex_key(string num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong hex_key(std::string num) {\n    std::string primes = \"2357BD\";\n    int total = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (primes.find(num[i]) != std::string::npos) {\n            total++;\n        }\n    }\n    return total;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong hex_key(string num)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] strange_sort_list(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n    bool switch_ = true;\n    while (lst.size()) {\n        res.push_back(switch_ ? *std::min_element(lst.begin(), lst.end()) : *std::max_element(lst.begin(), lst.end()));\n        lst.erase(std::find(lst.begin(), lst.end(), res.back()));\n        switch_ = !switch_;\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] strange_sort_list(long[] lst)\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong is_bored(string S)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong is_bored(std::string S) {\n    std::regex r(\"[.?!]\\\\s*\");\n    std::vector<std::string> sentences(std::sregex_token_iterator(S.begin(), S.end(), r, -1), std::sregex_token_iterator());\n    long res = 0;\n    for (auto sentence : sentences) {\n        res += sentence.substr(0, 2) == \"I \";\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong is_bored(string S)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] all_prefixes(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string> result;\n    for(int i=0;i<string.length();i++) {\n        result.push_back(string.substr(0,i+1));\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] all_prefixes(string string)\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong how_many_times(string string, string substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong how_many_times(std::string string, std::string substring) {\n    long times = 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong how_many_times(string string, string substring)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong solution(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong solution(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0 && lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong solution(long[] lst)\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_sorted(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_sorted(std::vector<long> lst) {\n    std::map<long, long> count_digit;\n    for (auto i: lst) {\n        count_digit[i]++;\n    }\n    for (auto i: lst) {\n        if (count_digit[i] > 2) {\n            return false;\n        }\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_sorted(long[] lst)\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong search(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L, 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L, 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L, 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L, 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong search(std::vector<long> lst) {\n    std::vector<long> frq(*std::max_element(lst.begin(), lst.end()) + 1, 0);\n    for (auto i : lst) {\n        frq[i]++;\n    }\n    long ans = -1;\n    for (int i = 1; i < frq.size(); i++) {\n        if (frq[i] >= i) {\n            ans = i;\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong search(long[] lst)\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] pluck(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> pluck(std::vector<long> arr) {\n    if(arr.size() == 0) return {};\n    std::vector<long> evens;\n    for(auto x: arr) if(x%2 == 0) evens.push_back(x);\n    if(evens.size() == 0) return {};\n    long min_val = *std::min_element(evens.begin(), evens.end());\n    return {min_val, std::find(arr.begin(), arr.end(), min_val) - arr.begin()};\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] pluck(long[] arr)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool pairs_sum_to_zero(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool pairs_sum_to_zero(std::vector<long> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool pairs_sum_to_zero(long[] l)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong starts_one_ends(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n    return 18 * pow(10, n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong starts_one_ends(long n)\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_positive(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto e : l) {\n        if(e > 0) {\n            res.push_back(e);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_positive(long[] l)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring concatenate(string[] strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = concatenate;\n\n    assert(candidate([]) == \"\");\n    assert(candidate([\"x\", \"y\", \"z\"]) == \"xyz\");\n    assert(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string concatenate(std::vector<std::string> strings) {\n    return std::accumulate(strings.begin(), strings.end(), std::string(\"\"));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring concatenate(string[] strings)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_nested(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_nested;\n\n    assert(candidate(\"[[]]\") == true);\n    assert(candidate(\"[]]]]]]][[[[[]\") == false);\n    assert(candidate(\"[][]\") == false);\n    assert(candidate(\"[]\") == false);\n    assert(candidate(\"[[[[]]]]\") == true);\n    assert(candidate(\"[]]]]]]]]]]\") == false);\n    assert(candidate(\"[][][[]]\") == true);\n    assert(candidate(\"[[]\") == false);\n    assert(candidate(\"[]]\") == false);\n    assert(candidate(\"[[]][[\") == true);\n    assert(candidate(\"[[][]]\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"[[[[[[[[\") == false);\n    assert(candidate(\"]]]]]]]]\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_nested(std::string string) {\n    std::vector<int> opening_bracket_index;\n    std::vector<int> closing_bracket_index;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '[') {\n            opening_bracket_index.push_back(i);\n        } else {\n            closing_bracket_index.push_back(i);\n        }\n    }\n    std::reverse(closing_bracket_index.begin(), closing_bracket_index.end());\n    int cnt = 0;\n    int i = 0;\n    int l = closing_bracket_index.size();\n    for (int idx : opening_bracket_index) {\n        if (i < l && idx < closing_bracket_index[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_nested(string string)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_palindrome(string text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != text[text.size() - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_palindrome(string text)\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_nums(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long n = arr[i];\n        long neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        std::vector<long> digits;\n        std::stringstream ss;\n        ss << n;\n        std::string str = ss.str();\n        for (int j = 0; j < str.size(); j++) {\n            digits.push_back(str[j] - '0');\n        }\n        digits[0] = digits[0] * neg;\n        long sum = 0;\n        for (int j = 0; j < digits.size(); j++) {\n            sum += digits[j];\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_nums(long[] arr)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] factorize(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> factorize(long n) {\n    std::vector<long> fact;\n    long i = 2;\n    while (i <= sqrt(n) + 1) {\n        if (n % i == 0) {\n            fact.push_back(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        fact.push_back(n);\n    }\n    return fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] factorize(long n)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_prime_factor(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong largest_prime_factor(long n) {\n    auto is_prime=[](long k){\n        if(k<2) return false;\n        for(long i=2;i<k;i++) if(k%i==0) return false;\n        return true;\n    };\n    long largest=1;\n    for(long j=2;j<=n;j++) if(n%j==0 && is_prime(j)) largest=std::max(largest,j);\n    return largest;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_prime_factor(long n)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong get_max_triples(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong get_max_triples(long n) {\n    std::vector<long> A;\n    for (long i = 1; i <= n; i++) {\n        A.push_back(i*i - i + 1);\n    }\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = i+1; j < n; j++) {\n            for (long k = j+1; k < n; k++) {\n                if ((A[i]+A[j]+A[k])%3 == 0) {\n                    ans++;\n                }\n            }\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong get_max_triples(long n)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring anti_shuffle(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string anti_shuffle(std::string s) {\n    std::stringstream ss(s);\n    std::string word, res;\n    while (ss >> word) {\n        std::sort(word.begin(), word.end());\n        res += word + \" \";\n    }\n    res.pop_back();\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring anti_shuffle(string s)\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(long N)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string solve(long N) {\n    std::string s = std::to_string(N);\n    long sum = 0;\n    for (int i = 0; i < s.size(); i++) {\n        sum += s[i] - '0';\n    }\n    std::bitset<64> b(sum);\n    return b.to_string().substr(b.to_string().find('1'));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(long N)\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] minPath(long[][] grid, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = minPath;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L) == [1L, 2L, 1L]);\n    assert(candidate([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L) == [1L]);\n    assert(candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]], 4L) == [1L, 2L, 1L, 2L]);\n    assert(candidate([[6L, 4L, 13L, 10L], [5L, 7L, 12L, 1L], [3L, 16L, 11L, 15L], [8L, 14L, 9L, 2L]], 7L) == [1L, 10L, 1L, 10L, 1L, 10L, 1L]);\n    assert(candidate([[8L, 14L, 9L, 2L], [6L, 4L, 13L, 15L], [5L, 7L, 1L, 12L], [3L, 10L, 11L, 16L]], 5L) == [1L, 7L, 1L, 7L, 1L]);\n    assert(candidate([[11L, 8L, 7L, 2L], [5L, 16L, 14L, 4L], [9L, 3L, 15L, 6L], [12L, 13L, 10L, 1L]], 9L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L]);\n    assert(candidate([[12L, 13L, 10L, 1L], [9L, 3L, 15L, 6L], [5L, 16L, 14L, 4L], [11L, 8L, 7L, 2L]], 12L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L]);\n    assert(candidate([[2L, 7L, 4L], [3L, 1L, 5L], [6L, 8L, 9L]], 8L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n    assert(candidate([[6L, 1L, 5L], [3L, 8L, 9L], [2L, 7L, 4L]], 8L) == [1L, 5L, 1L, 5L, 1L, 5L, 1L, 5L]);\n    assert(candidate([[1L, 2L], [3L, 4L]], 10L) == [1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L]);\n    assert(candidate([[1L, 3L], [3L, 2L]], 10L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n    long n = grid.size();\n    long val = n * n + 1;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                std::vector<long> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n\n                val = *std::min_element(temp.begin(), temp.end());\n            }\n        }\n    }\n\n    std::vector<long> ans;\n    for (long i = 0; i < k; i++) {\n        if (i % 2 == 0) {\n            ans.push_back(1);\n        } else {\n            ans.push_back(val);\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] minPath(long[][] grid, long k)\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encrypt(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string encrypt(std::string s) {\n    std::string d = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string out = \"\";\n    for (char c : s) {\n        if (d.find(c) != std::string::npos) {\n            out += d[(d.find(c)+2*2) % 26];\n        } else {\n            out += c;\n        }\n    }\n    return out;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encrypt(string s)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] make_a_pile(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> ans;\n    for(long i=0;i<n;i++) {\n        ans.push_back(n+2*i);\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] make_a_pile(long n)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_prime(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n    }\n    for (long k = 2; k < n; k++) {\n        if (n % k == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_prime(long n)\n"
  }
]