[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "jl",
    "prompt": "function correct_bracketing(brackets::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn correct_bracketing(brackets: String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction correct_bracketing(brackets::String)::Bool\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "jl",
    "prompt": "function triangle_area(a::Int64, h::Int64)::Float64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(5, 3) == 7.5)\n\t@test(candidate(2, 2) == 2.0)\n\t@test(candidate(10, 8) == 40.0)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn triangle_area(a: isize, h: isize) -> f64 {\n    (a * h) as f64 / 2.0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction triangle_area(a::Int64, h::Int64)::Float64\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "jl",
    "prompt": "function special_factorial(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn special_factorial(n: isize) -> isize {\n    let mut fact_i = 1;\n    let mut special_fact = 1;\n    for i in 1..=n {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    special_fact\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction special_factorial(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "jl",
    "prompt": "function largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let smallest = lst.iter().filter(|&x| x < &0).max().cloned();\n    let largest = lst.iter().filter(|&x| x > &0).min().cloned();\n    (smallest, largest)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "jl",
    "prompt": "function move_one_ball(arr::Vector{Int64})::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn move_one_ball(arr: Vec<isize>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n\n    let sorted_array = {\n        let mut arr = arr.clone();\n        arr.sort_unstable();\n        arr\n    };\n\n    let min_value = *arr.iter().min().unwrap();\n    let min_index = arr.iter().position(|&x| x == min_value).unwrap();\n    let mut my_arr = arr[min_index..].to_vec();\n    my_arr.extend(&arr[..min_index]);\n\n    my_arr == sorted_array\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction move_one_ball(arr::Vector{Int64})::Bool\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "jl",
    "prompt": "function digits(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn digits(n: isize) -> isize {\n    let mut product = 1;\n    let mut odd_count = 0;\n    for digit in n.to_string().chars() {\n        let int_digit = digit.to_digit(10).unwrap() as isize;\n        if int_digit % 2 == 1 {\n            product *= int_digit;\n            odd_count += 1;\n        }\n    }\n    if odd_count == 0 {\n        0\n    } else {\n        product\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction digits(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "jl",
    "prompt": "function fib4(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn fib4(n: isize) -> isize {\n    let mut results = vec![0, 0, 2, 0];\n    if n < 4 {\n        return results[n as usize];\n    }\n\n    for _ in 4..=n {\n        let next = results.iter().sum();\n        results.push(next);\n        results.remove(0);\n    }\n\n    *results.last().unwrap()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction fib4(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "jl",
    "prompt": "function sort_even(l::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sort_even;\n\t@test(candidate([1, 2, 3]) == [1, 2, 3])\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\t@test(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut evens = l.iter().step_by(2).copied().collect::<Vec<_>>();\n    let mut odds = l.iter().skip(1).step_by(2).copied().collect::<Vec<_>>();\n    evens.sort_unstable();\n    let mut ans = vec![];\n    for (e, o) in evens.iter().zip(odds.iter()) {\n        ans.push(*e);\n        ans.push(*o);\n    }\n    if evens.len() > odds.len() {\n        ans.push(evens[evens.len() - 1]);\n    }\n    ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sort_even(l::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "jl",
    "prompt": "function order_by_points(nums::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    fn digits_sum(n: isize) -> isize {\n        let neg = if n < 0 { -1 } else { 1 };\n        let mut n = n.abs().to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n        n[0] *= neg;\n        n.iter().sum()\n    }\n    let mut nums = nums.clone();\n    nums.sort_unstable_by_key(|&n| digits_sum(n));\n    nums\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "jl",
    "prompt": "function is_happy(s::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n\n    for i in 0..s.len()-2 {\n        if s[i..i+1] == s[i+1..i+2] || s[i+1..i+2] == s[i+2..i+3] || s[i..i+1] == s[i+2..i+3] {\n            return false;\n        }\n    }\n    true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction is_happy(s::String)::Bool\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "jl",
    "prompt": "function circular_shift(x::Int64, shift::Int64)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn circular_shift(x: isize, shift: isize) -> String {\n    let s = x.to_string();\n    if shift > s.len() as isize {\n        s.chars().rev().collect()\n    } else {\n        s[(s.len() - shift as usize)..].to_string() + &s[..(s.len() - shift as usize)]\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction circular_shift(x::Int64, shift::Int64)::String\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "jl",
    "prompt": "function max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().map(|arr| (arr.iter().sum::<isize>() as f64 / capacity as f64).ceil() as isize).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "jl",
    "prompt": "function has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n    for (idx, elem) in numbers.iter().enumerate() {\n        for (idx2, elem2) in numbers.iter().enumerate() {\n            if idx != idx2 {\n                let distance = (elem - elem2).abs();\n                if distance < threshold {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "jl",
    "prompt": "function numerical_letter_grade(grades::Vector{Float64})::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let mut letter_grade = vec![];\n    for gpa in grades {\n        if gpa == 4.0 {\n            letter_grade.push(\"A+\".to_string());\n        } else if gpa > 3.7 {\n            letter_grade.push(\"A\".to_string());\n        } else if gpa > 3.3 {\n            letter_grade.push(\"A-\".to_string());\n        } else if gpa > 3.0 {\n            letter_grade.push(\"B+\".to_string());\n        } else if gpa > 2.7 {\n            letter_grade.push(\"B\".to_string());\n        } else if gpa > 2.3 {\n            letter_grade.push(\"B-\".to_string());\n        } else if gpa > 2.0 {\n            letter_grade.push(\"C+\".to_string());\n        } else if gpa > 1.7 {\n            letter_grade.push(\"C\".to_string());\n        } else if gpa > 1.3 {\n            letter_grade.push(\"C-\".to_string());\n        } else if gpa > 1.0 {\n            letter_grade.push(\"D+\".to_string());\n        } else if gpa > 0.7 {\n            letter_grade.push(\"D\".to_string());\n        } else if gpa > 0.0 {\n            letter_grade.push(\"D-\".to_string());\n        } else {\n            letter_grade.push(\"E\".to_string());\n        }\n    }\n    letter_grade\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "jl",
    "prompt": "function x_or_y(n::Int64, x::Int64, y::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = x_or_y;\n\t@test(candidate(7, 34, 12) == 34)\n\t@test(candidate(15, 8, 5) == 5)\n\t@test(candidate(3, 33, 5212) == 33)\n\t@test(candidate(1259, 3, 52) == 3)\n\t@test(candidate(7919, -1, 12) == -1)\n\t@test(candidate(3609, 1245, 583) == 583)\n\t@test(candidate(91, 56, 129) == 129)\n\t@test(candidate(6, 34, 1234) == 1234)\n\t@test(candidate(1, 2, 0) == 0)\n\t@test(candidate(2, 2, 0) == 2)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn x_or_y(n: isize, x: isize, y: isize) -> isize {\n    if n == 1 {\n        return y;\n    }\n    for i in 2..n {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction x_or_y(n::Int64, x::Int64, y::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "jl",
    "prompt": "function specialFilter(nums::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&num| {\n        if *num > 10 {\n            let odd_digits = [1, 3, 5, 7, 9];\n            let number_as_string = num.to_string();\n            let first_digit = number_as_string.chars().next().unwrap().to_digit(10).unwrap() as isize;\n            let last_digit = number_as_string.chars().last().unwrap().to_digit(10).unwrap() as isize;\n            odd_digits.contains(&first_digit) && odd_digits.contains(&last_digit)\n        } else {\n            false\n        }\n    }).count() as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction specialFilter(nums::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "jl",
    "prompt": "function parse_music(music_string::String)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn parse_music(music_string: String) -> Vec<isize> {\n    let note_map = vec![(\"o\", 4), (\"o|\", 2), (\".|\", 1)];\n    music_string.split(' ').filter(|&x| x != \"\").map(|x| note_map.iter().find(|&&y| y.0 == x).unwrap().1).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction parse_music(music_string::String)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "jl",
    "prompt": "function count_distinct_characters(string::String)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().collect::<std::collections::HashSet<char>>().len() as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction count_distinct_characters(string::String)::Int64\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "jl",
    "prompt": "function digitSum(s::String)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn digitSum(s: String) -> isize {\n    if s == \"\" { return 0 }\n    s.chars().map(|c| if c.is_uppercase() { c as isize } else { 0 }).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction digitSum(s::String)::Int64\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "jl",
    "prompt": "function sum_squares(lst::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sum_squares(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().map(|(i, &x)| {\n        if i % 3 == 0 {\n            x.pow(2)\n        } else if i % 4 == 0 {\n            x.pow(3)\n        } else {\n            x\n        }\n    }).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sum_squares(lst::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "jl",
    "prompt": "function count_up_to(n::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn count_up_to(n: isize) -> Vec<isize> {\n    let mut primes = vec![];\n    for i in 2..n {\n        let mut is_prime = true;\n        for j in 2..i {\n            if i % j == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            primes.push(i);\n        }\n    }\n    primes\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction count_up_to(n::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "jl",
    "prompt": "function sum_squares(lst::Vector{Float64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sum_squares(lst::Vector{Float64})::Int64\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "jl",
    "prompt": "function unique(l::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn unique(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction unique(l::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "jl",
    "prompt": "function fib(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn fib(n: isize) -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction fib(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "jl",
    "prompt": "function fizz_buzz(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn fizz_buzz(n: isize) -> isize {\n    let ns = (0..n).filter(|i| i % 11 == 0 || i % 13 == 0);\n    let s = ns.map(|i| i.to_string()).collect::<String>();\n    s.chars().filter(|&c| c == '7').count() as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction fizz_buzz(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "jl",
    "prompt": "function Strongest_Extension(class_name::String, extensions::Vector{String})::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn Strongest_Extension(class_name: String, extensions: Vec<String>) -> String {\n    let mut strong = extensions[0].clone();\n    let mut my_val = extensions[0].chars().filter(|c| c.is_uppercase()).count() as isize - extensions[0].chars().filter(|c| c.is_lowercase()).count() as isize;\n    for s in extensions {\n        let val = s.chars().filter(|c| c.is_uppercase()).count() as isize - s.chars().filter(|c| c.is_lowercase()).count() as isize;\n        if val > my_val {\n            strong = s;\n            my_val = val;\n        }\n    }\n\n    format!(\"{}.{}\", class_name, strong)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction Strongest_Extension(class_name::String, extensions::Vector{String})::String\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "jl",
    "prompt": "function find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn find_closest_elements(numbers: Vec<f64>) -> (f64, f64) {\n    let mut closest_pair: Option<(f64, f64)> = None;\n    let mut distance: Option<f64> = None;\n\n    for (idx, elem) in numbers.iter().enumerate() {\n        for (idx2, elem2) in numbers.iter().enumerate() {\n            if idx != idx2 {\n                if distance.is_none() {\n                    distance = Some((elem - elem2).abs());\n                    closest_pair = Some((elem.min(*elem2), elem.max(*elem2)));\n                } else {\n                    let new_distance = (elem - elem2).abs();\n                    if new_distance < distance.unwrap() {\n                        distance = Some(new_distance);\n                        closest_pair = Some((elem.min(*elem2), elem.max(*elem2)));\n                    }\n                }\n            }\n        }\n    }\n\n    closest_pair.unwrap()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "jl",
    "prompt": "function valid_date(date::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn valid_date(date: String) -> bool {\n    let date = date.trim();\n    let parts: Vec<&str> = date.split('-').collect();\n    if parts.len() != 3 {\n        return false;\n    }\n    let month = parts[0].parse::<isize>().unwrap_or(0);\n    let day = parts[1].parse::<isize>().unwrap_or(0);\n    let year = parts[2].parse::<isize>().unwrap_or(0);\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false;\n        }\n        if year % 4 != 0 && day > 28 {\n            return false;\n        }\n    } else if [4, 6, 9, 11].contains(&month) {\n        if day < 1 || day > 30 {\n            return false;\n        }\n    } else {\n        if day < 1 || day > 31 {\n            return false;\n        }\n    }\n    true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction valid_date(date::String)::Bool\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "jl",
    "prompt": "function add(x::Int64, y::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction add(x::Int64, y::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "jl",
    "prompt": "function triples_sum_to_zero(l::Vector{Int64})::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len() {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "jl",
    "prompt": "function largest_divisor(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev() {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    1\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction largest_divisor(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "jl",
    "prompt": "function sort_numbers(numbers::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\") == \"zero one two three four five six\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sort_numbers(numbers: String) -> String {\n    let value_map = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ]\n    .iter()\n    .cloned()\n    .collect::<std::collections::HashMap<_, _>>();\n\n    let mut numbers = numbers.split(' ').filter(|x| !x.is_empty()).collect::<Vec<_>>();\n    numbers.sort_by_key(|x| value_map[x]);\n\n    numbers.join(\" \")\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sort_numbers(numbers::String)::String\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "jl",
    "prompt": "function smallest_change(arr::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction smallest_change(arr::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "jl",
    "prompt": "function below_threshold(l::Vector{Int64}, t::Int64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&e| e < t)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction below_threshold(l::Vector{Int64}, t::Int64)::Bool\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "jl",
    "prompt": "function modp(n::Int64, p::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn modp(n: isize, p: isize) -> isize {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (2 * ret) % p;\n    }\n    ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction modp(n::Int64, p::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "jl",
    "prompt": "function count_upper(s::String)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn count_upper(s: String) -> isize {\n    s.chars()\n        .step_by(2)\n        .filter(|c| \"AEIOU\".contains(*c))\n        .count() as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction count_upper(s::String)::Int64\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "jl",
    "prompt": "function multiply(a::Int64, b::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction multiply(a::Int64, b::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "jl",
    "prompt": "function unique_digits(x::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut odd_digit_elements = vec![];\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1) {\n            odd_digit_elements.push(i);\n        }\n    }\n    odd_digit_elements.sort();\n    odd_digit_elements\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction unique_digits(x::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "jl",
    "prompt": "function will_it_fly(q::Vector{Int64}, w::Int64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    if q.iter().sum::<isize>() > w {\n        return false;\n    }\n\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i < j {\n        if q[i] != q[j] {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "jl",
    "prompt": "function is_multiply_prime(a::Int64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn is_multiply_prime(a: isize) -> bool {\n    fn is_prime(n: isize) -> bool {\n        for j in 2..n {\n            if n % j == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    for i in 2..101 {\n        if !is_prime(i) {\n            continue;\n        }\n        for j in 2..101 {\n            if !is_prime(j) {\n                continue;\n            }\n            for k in 2..101 {\n                if !is_prime(k) {\n                    continue;\n                }\n                if i * j * k == a {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction is_multiply_prime(a::Int64)::Bool\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "jl",
    "prompt": "function maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    if k == 0 {\n        return vec![];\n    }\n    let mut arr = arr;\n    arr.sort();\n    arr[arr.len() - k as usize..].to_vec()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "jl",
    "prompt": "function separate_paren_groups(paren_string::String)::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = separate_paren_groups;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"])\n\t@test(candidate(\"(()(())((())))\") == [\"(()(())((())))\"])\n\t@test(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n    let mut result = vec![];\n    let mut current_string = vec![];\n    let mut current_depth = 0;\n\n    for c in paren_string.chars() {\n        if c == '(' {\n            current_depth += 1;\n            current_string.push(c);\n        } else if c == ')' {\n            current_depth -= 1;\n            current_string.push(c);\n\n            if current_depth == 0 {\n                result.push(current_string.iter().collect());\n                current_string.clear();\n            }\n        }\n    }\n\n    result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction separate_paren_groups(paren_string::String)::Vector{String}\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "jl",
    "prompt": "function skjkasdkd(lst::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = skjkasdkd;\n\t@test(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\t@test(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\n\t@test(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\t@test(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\t@test(candidate([0, 81, 12, 3, 1, 21]) == 3)\n\t@test(candidate([0, 8, 1, 2, 1, 7]) == 7)\n\t@test(candidate([8191]) == 19)\n\t@test(candidate([8191, 123456, 127, 7]) == 19)\n\t@test(candidate([127, 97, 8192]) == 10)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn skjkasdkd(lst: Vec<isize>) -> isize {\n    fn is_prime(n: isize) -> bool {\n        for i in 2..=(n as f64).sqrt() as isize {\n            if n % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    let mut maxx = 0;\n    for i in lst {\n        if i > maxx && is_prime(i) {\n            maxx = i;\n        }\n    }\n\n    maxx.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction skjkasdkd(lst::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "jl",
    "prompt": "function total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]), [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([])) == Vector{String}([]))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let l1: usize = lst1.iter().map(|s| s.len()).sum();\n    let l2: usize = lst2.iter().map(|s| s.len()).sum();\n    if l1 <= l2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String}\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "jl",
    "prompt": "function car_race_collision(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn car_race_collision(n: isize) -> isize {\n    n * n\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction car_race_collision(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "jl",
    "prompt": "function is_simple_power(x::Int64, n::Int64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn is_simple_power(x: isize, n: isize) -> bool {\n    if n == 1 {\n        return x == 1\n    }\n    let mut power = 1;\n    while power < x {\n        power *= n;\n    }\n    power == x\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction is_simple_power(x::Int64, n::Int64)::Bool\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "jl",
    "prompt": "function incr_list(l::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n    l.iter().map(|e| e + 1).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "jl",
    "prompt": "function flip_case(string::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn flip_case(string: String) -> String {\n    string.chars().map(|c| if c.is_ascii_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() }).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction flip_case(string::String)::String\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "jl",
    "prompt": "function vowels_count(s::String)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = vowels_count;\n\t@test(candidate(\"abcde\") == 2)\n\t@test(candidate(\"Alone\") == 3)\n\t@test(candidate(\"key\") == 2)\n\t@test(candidate(\"bye\") == 1)\n\t@test(candidate(\"keY\") == 2)\n\t@test(candidate(\"bYe\") == 1)\n\t@test(candidate(\"ACEDY\") == 3)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn vowels_count(s: String) -> isize {\n    let vowels = \"aeiouAEIOU\";\n    let mut n_vowels = s.chars().filter(|c| vowels.contains(*c)).count() as isize;\n    if s.ends_with('y') || s.ends_with('Y') {\n        n_vowels += 1;\n    }\n    n_vowels\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction vowels_count(s::String)::Int64\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "jl",
    "prompt": "function sorted_list_sum(lst::Vector{String})::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut lst = lst;\n    lst.sort();\n    let mut new_lst = vec![];\n    for i in lst {\n        if i.len() % 2 == 0 {\n            new_lst.push(i);\n        }\n    }\n    new_lst.sort_by_key(|x| x.len());\n    new_lst\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "jl",
    "prompt": "function words_string(s::String)::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn words_string(s: String) -> Vec<String> {\n    if s.is_empty() {\n        return vec![];\n    }\n\n    let s_list = s.chars().map(|c| if c == ',' { ' ' } else { c }).collect::<String>();\n    s_list.split_whitespace().map(|s| s.to_string()).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction words_string(s::String)::Vector{String}\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "jl",
    "prompt": "function even_odd_palindrome(n::Int64)::Tuple{Int64, Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = even_odd_palindrome;\n\t@test(candidate(123) == (8, 13))\n\t@test(candidate(12) == (4, 6))\n\t@test(candidate(3) == (1, 2))\n\t@test(candidate(63) == (6, 8))\n\t@test(candidate(25) == (5, 6))\n\t@test(candidate(19) == (4, 6))\n\t@test(candidate(9) == (4, 5))\n\t@test(candidate(1) == (0, 1))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn even_odd_palindrome(n: isize) -> (isize, isize) {\n    fn is_palindrome(n: isize) -> bool {\n        n.to_string() == n.to_string().chars().rev().collect::<String>()\n    }\n\n    let mut even_palindrome_count = 0;\n    let mut odd_palindrome_count = 0;\n\n    for i in 1..=n {\n        if i%2 == 1 && is_palindrome(i) {\n            odd_palindrome_count += 1;\n        } else if i%2 == 0 && is_palindrome(i) {\n            even_palindrome_count += 1;\n        }\n    }\n    (even_palindrome_count, odd_palindrome_count)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction even_odd_palindrome(n::Int64)::Tuple{Int64, Int64}\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "jl",
    "prompt": "function triangle_area(a::Int64, b::Int64, c::Int64)::Float64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n    let s = (a + b + c) as f64 / 2.0;\n    let area = (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n    (area * 100.0).round() / 100.0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "jl",
    "prompt": "function check_dict_case(dict::Dict{String, String}>)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nuse std::collections::HashMap;\n\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n    if dict.is_empty() {\n        return false;\n    }\n    let mut state = \"start\";\n    for key in dict.keys() {\n        if !key.is_ascii() {\n            state = \"mixed\";\n            break;\n        }\n        if state == \"start\" {\n            if key.chars().all(|c| c.is_uppercase()) {\n                state = \"upper\";\n            } else if key.chars().all(|c| c.is_lowercase()) {\n                state = \"lower\";\n            } else {\n                break;\n            }\n        } else if (state == \"upper\" && !key.chars().all(|c| c.is_uppercase()))\n            || (state == \"lower\" && !key.chars().all(|c| c.is_lowercase()))\n        {\n            state = \"mixed\";\n            break;\n        }\n    }\n    state == \"upper\" || state == \"lower\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "jl",
    "prompt": "function tri(n::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut my_tri = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            my_tri.push(i / 2 + 1);\n        } else {\n            my_tri.push(my_tri[(i - 1) as usize] + my_tri[(i - 2) as usize] + (i + 3) / 2);\n        }\n    }\n    my_tri\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction tri(n::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "jl",
    "prompt": "function median(l::Vector{Int64})::Float64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    if l.len() % 2 == 1 {\n        l[l.len() / 2] as f64\n    } else {\n        (l[l.len() / 2 - 1] + l[l.len() / 2]) as f64 / 2.0\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction median(l::Vector{Int64})::Float64\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "jl",
    "prompt": "function change_base(x::Int64, base::Int64)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn change_base(x: isize, base: isize) -> String {\n    let mut ret = String::new();\n    let mut x = x;\n    while x > 0 {\n        ret = format!(\"{}{}\", x % base, ret);\n        x /= base;\n    }\n    ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction change_base(x::Int64, base::Int64)::String\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "jl",
    "prompt": "function longest(strings::Vector{String})::Union{String, Nothing}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn longest(strings: Vec<String>) -> Option<String> {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let maxlen = strings.iter().map(|s| s.len()).max().unwrap();\n    strings.iter().find(|s| s.len() == maxlen).cloned()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction longest(strings::Vector{String})::Union{String, Nothing}\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "jl",
    "prompt": "function common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut ret = std::collections::HashSet::new();\n    for e1 in l1 {\n        for e2 in &l2 {\n            if e1 == *e2 {\n                ret.insert(e1);\n            }\n        }\n    }\n    let mut ret = ret.into_iter().collect::<Vec<_>>();\n    ret.sort();\n    ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "jl",
    "prompt": "function cycpattern_check(a::String, b::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = cycpattern_check;\n\t@test(candidate(\"xyzw\", \"xyw\") == false)\n\t@test(candidate(\"yello\", \"ell\") == true)\n\t@test(candidate(\"whattup\", \"ptut\") == false)\n\t@test(candidate(\"efef\", \"fee\") == true)\n\t@test(candidate(\"abab\", \"aabb\") == false)\n\t@test(candidate(\"winemtt\", \"tinem\") == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn cycpattern_check(a: String, b: String) -> bool {\n    let l = b.len();\n    let pat = b.clone() + &b;\n    for i in 0..=a.len() - l {\n        for j in 0..=l {\n            if a[i..i+l] == pat[j..j+l] {\n                return true;\n            }\n        }\n    }\n    false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction cycpattern_check(a::String, b::String)::Bool\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "jl",
    "prompt": "function minSubArraySum(nums::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n    let mut max_sum = 0;\n    let mut s = 0;\n    for num in nums.iter() {\n        s += -num;\n        if s < 0 {\n            s = 0;\n        }\n        max_sum = max_sum.max(s);\n    }\n    if max_sum == 0 {\n        max_sum = nums.iter().map(|&i| -i).max().unwrap();\n    }\n    let min_sum = -max_sum;\n    min_sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction minSubArraySum(nums::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "jl",
    "prompt": "function sort_array(array::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n    let reverse = (array[0] + array[array.len() - 1]) % 2 == 0;\n    let mut array = array;\n    array.sort_unstable();\n    if reverse {\n        array.reverse();\n    }\n    array\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "jl",
    "prompt": "function histogram(test::String)::Dict{String, Int64}>\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nuse std::collections::HashMap;\n\nfn histogram(test: String) -> HashMap<String, isize> {\n    let mut dict1 = HashMap::new();\n    let list1: Vec<&str> = test.split(\" \").collect();\n    let mut t = 0;\n\n    for i in &list1 {\n        if list1.iter().filter(|&x| x == i).count() > t && i != &\"\" {\n            t = list1.iter().filter(|&x| x == i).count();\n        }\n    }\n\n    if t > 0 {\n        for i in &list1 {\n            if list1.iter().filter(|&x| x == i).count() == t {\n                dict1.insert(i.to_string(), t as isize);\n            }\n        }\n    }\n\n    dict1\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction histogram(test::String)::Dict{String, Int64}>\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "jl",
    "prompt": "function get_odd_collatz(n::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n    let mut odd_collatz = if n % 2 == 0 { vec![] } else { vec![n] };\n\n    let mut n = n;\n    while n > 1 {\n        n = if n % 2 == 0 { n / 2 } else { n * 3 + 1 };\n        if n % 2 == 1 {\n            odd_collatz.push(n);\n        }\n    }\n\n    odd_collatz.sort();\n    odd_collatz\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction get_odd_collatz(n::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "jl",
    "prompt": "function derivative(xs::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    (1..xs.len()).map(|i| i as isize * xs[i]).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "jl",
    "prompt": "function fibfib(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = fibfib;\n\t@test(candidate(2) == 1)\n\t@test(candidate(1) == 0)\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 24)\n\t@test(candidate(10) == 81)\n\t@test(candidate(12) == 274)\n\t@test(candidate(14) == 927)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn fibfib(n: isize) -> isize {\n    match n {\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3),\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction fibfib(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "jl",
    "prompt": "function truncate_number(number::Float64)::Float64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn truncate_number(number: f64) -> f64 {\n    number % 1.0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction truncate_number(number::Float64)::Float64\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "jl",
    "prompt": "function max_element(l::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for e in l {\n        if e > m {\n            m = e;\n        }\n    }\n    m\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction max_element(l::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "jl",
    "prompt": "function closest_integer(value::String)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = closest_integer;\n\t@test(candidate(\"10\") == 10)\n\t@test(candidate(\"14.5\") == 15)\n\t@test(candidate(\"-15.5\") == -16)\n\t@test(candidate(\"15.3\") == 15)\n\t@test(candidate(\"0\") == 0)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn closest_integer(value: String) -> isize {\n    let num = value.parse::<f64>().unwrap();\n    let res = if value.ends_with(\".5\") {\n        if num > 0.0 {\n            num.ceil()\n        } else {\n            num.floor()\n        }\n    } else {\n        num.round()\n    };\n    res as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction closest_integer(value::String)::Int64\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "jl",
    "prompt": "function sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let mut sum_value = 0;\n    let mut prod_value = 1;\n\n    for n in numbers {\n        sum_value += n;\n        prod_value *= n;\n    }\n    (sum_value, prod_value)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64}\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "jl",
    "prompt": "function select_words(s::String, n::Int64)::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn select_words(s: String, n: isize) -> Vec<String> {\n    s.split_whitespace()\n        .filter(|word| {\n            word.chars()\n                .filter(|c| !matches!(c.to_ascii_lowercase(), 'a' | 'e' | 'i' | 'o' | 'u'))\n                .count() == n as usize\n        })\n        .map(|word| word.to_string())\n        .collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction select_words(s::String, n::Int64)::Vector{String}\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "jl",
    "prompt": "function add_elements(arr::Vector{Int64}, k::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k as usize).filter(|&elem| elem < &100).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction add_elements(arr::Vector{Int64}, k::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "jl",
    "prompt": "function eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize> {\n    if need <= remaining {\n        vec![number + need, remaining - need]\n    } else {\n        vec![number + remaining, 0]\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "jl",
    "prompt": "function odd_count(lst::Vector{String})::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let mut res = vec![];\n    for arr in lst {\n        let n = arr.chars().filter(|c| c.to_digit(10).unwrap() % 2 == 1).count();\n        res.push(format!(\"the number of odd elements {}n the str{}ng {} of the {}nput.\", n, n, n, n));\n    }\n    res\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction odd_count(lst::Vector{String})::Vector{String}\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "jl",
    "prompt": "function next_smallest(lst::Vector{Int64})::Union{Int64, Nothing}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        None\n    } else {\n        Some(lst[1])\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction next_smallest(lst::Vector{Int64})::Union{Int64, Nothing}\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "jl",
    "prompt": "function get_row(lst::Vector{Vector{Int64}}, x::Int64)::Vector{Tuple{Int64, Int64}}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n    let mut coords = vec![];\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n                coords.push((i as isize, j as isize));\n            }\n        }\n    }\n    coords.sort_by_key(|&x| (x.0, -x.1));\n    coords\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction get_row(lst::Vector{Vector{Int64}}, x::Int64)::Vector{Tuple{Int64, Int64}}\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "jl",
    "prompt": "function filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "jl",
    "prompt": "function choose_num(x::Int64, y::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    if x == y {\n        return -1;\n    }\n    y - 1\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction choose_num(x::Int64, y::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "jl",
    "prompt": "function prime_length(string::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn prime_length(string: String) -> bool {\n    let l = string.len();\n    if l == 0 || l == 1 {\n        return false;\n    }\n    for i in 2..l {\n        if l % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction prime_length(string::String)::Bool\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "jl",
    "prompt": "function sum_to_n(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sum_to_n(n: isize) -> isize {\n    (0..=n).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sum_to_n(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "jl",
    "prompt": "function fix_spaces(text::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn fix_spaces(text: String) -> String {\n    let mut new_text = String::new();\n    let mut i = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut chars = text.chars();\n    while let Some(c) = chars.next() {\n        if c == ' ' {\n            end += 1;\n        } else {\n            if end - start > 2 {\n                new_text.push('-');\n                new_text.push(c);\n            } else if end - start > 0 {\n                new_text.push_str(&\"_\".repeat(end - start));\n                new_text.push(c);\n            } else {\n                new_text.push(c);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if end - start > 2 {\n        new_text.push('-');\n    } else if end - start > 0 {\n        new_text.push_str(&\"_\".repeat(end - start));\n    }\n    new_text\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction fix_spaces(text::String)::String\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "jl",
    "prompt": "function rolling_max(numbers::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    let mut running_max = None;\n    let mut result = vec![];\n\n    for n in numbers {\n        running_max = match running_max {\n            None => Some(n),\n            Some(rm) => Some(rm.max(n)),\n        };\n\n        result.push(running_max.unwrap());\n    }\n\n    result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "jl",
    "prompt": "function words_in_sentence(sentence::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn words_in_sentence(sentence: String) -> String {\n    let mut new_lst = vec![];\n    for word in sentence.split_whitespace() {\n        let mut flg = 0;\n        if word.len() == 1 {\n            flg = 1;\n        }\n        for i in 2..word.len() {\n            if word.len() % i == 0 {\n                flg = 1;\n            }\n        }\n        if flg == 0 || word.len() == 2 {\n            new_lst.push(word);\n        }\n    }\n    new_lst.join(\" \")\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction words_in_sentence(sentence::String)::String\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "jl",
    "prompt": "function get_closest_vowel(word::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn get_closest_vowel(word: String) -> String {\n    if word.len() < 3 {\n        return \"\".to_string();\n    }\n\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"];\n    for i in (1..word.len()-1).rev() {\n        if vowels.contains(&&word[i..i+1]) {\n            if !vowels.contains(&&word[i-1..i]) && !vowels.contains(&&word[i+1..i+2]) {\n                return word[i..i+1].to_string();\n            }\n        }\n    }\n\n    \"\".to_string()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction get_closest_vowel(word::String)::String\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "jl",
    "prompt": "function compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "jl",
    "prompt": "function remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    let mut c = std::collections::HashMap::new();\n    for n in numbers.iter() {\n        let count = c.entry(n).or_insert(0);\n        *count += 1;\n    }\n    numbers.iter().filter(|&n| c[n] <= 1).cloned().collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "jl",
    "prompt": "function same_chars(s0::String, s1::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn same_chars(s0: String, s1: String) -> bool {\n    s0.chars().collect::<std::collections::HashSet<_>>() == s1.chars().collect::<std::collections::HashSet<_>>()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction same_chars(s0::String, s1::String)::Bool\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "jl",
    "prompt": "function parse_nested_parens(paren_string::String)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn parse_nested_parens(paren_string: String) -> Vec<isize> {\n    fn parse_paren_group(s: &str) -> isize {\n        let mut depth = 0;\n        let mut max_depth = 0;\n        for c in s.chars() {\n            if c == '(' {\n                depth += 1;\n                max_depth = max_depth.max(depth);\n            } else {\n                depth -= 1;\n            }\n        }\n\n        max_depth\n    }\n\n    paren_string.split(' ').filter(|&x| x != \"\").map(parse_paren_group).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "jl",
    "prompt": "function even_odd_count(num::Int64)::Tuple{Int64, Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for i in num.abs().to_string().chars() {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction even_odd_count(num::Int64)::Tuple{Int64, Int64}\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "jl",
    "prompt": "function fruit_distribution(s::String, n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn fruit_distribution(s: String, n: isize) -> isize {\n    let lis: Vec<isize> = s\n        .split_whitespace()\n        .filter_map(|x| x.parse().ok())\n        .collect();\n\n    n - lis.iter().sum::<isize>()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction fruit_distribution(s::String, n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "jl",
    "prompt": "function string_xor(a::String, b::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn string_xor(a: String, b: String) -> String {\n    a.chars()\n        .zip(b.chars())\n        .map(|(x, y)| if x == y { '0' } else { '1' })\n        .collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction string_xor(a::String, b::String)::String\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "jl",
    "prompt": "function strlen(string::String)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn strlen(string: String) -> isize {\n    string.len() as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction strlen(string::String)::Int64\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "jl",
    "prompt": "function string_sequence(n::Int64)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<_>>().join(\" \")\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction string_sequence(n::Int64)::String\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "jl",
    "prompt": "function file_name_check(file_name::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\") == \"No\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn file_name_check(file_name: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"];\n    let lst: Vec<&str> = file_name.split('.').collect();\n    if lst.len() != 2 {\n        return \"No\".to_string();\n    }\n    if !suf.contains(&lst[1]) {\n        return \"No\".to_string();\n    }\n    if lst[0].len() == 0 || !lst[0].chars().next().unwrap().is_alphabetic() {\n        return \"No\".to_string();\n    }\n    let t = lst[0].chars().filter(|c| c.is_digit(10)).count();\n    if t > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction file_name_check(file_name::String)::String\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "jl",
    "prompt": "function can_arrange(arr::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut ind = -1;\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            ind = i as isize;\n        }\n    }\n    ind\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction can_arrange(arr::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "jl",
    "prompt": "function add(lst::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn add(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, &x)| i%2==1 && x%2==0).map(|(_, x)| x).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction add(lst::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "jl",
    "prompt": "function intersperse(numbers::Vector{Int64}, delimeter::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n    let mut result = vec![];\n\n    for n in &numbers[..numbers.len() - 1] {\n        result.push(*n);\n        result.push(delimeter);\n    }\n\n    result.push(numbers[numbers.len() - 1]);\n\n    result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction intersperse(numbers::Vector{Int64}, delimeter::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "jl",
    "prompt": "function match_parens(lst::Vector{String})::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn match_parens(lst: Vec<String>) -> String {\n    fn check(s: &str) -> bool {\n        let mut val = 0;\n        for i in s.chars() {\n            if i == '(' {\n                val += 1;\n            } else {\n                val -= 1;\n            }\n            if val < 0 {\n                return false;\n            }\n        }\n        val == 0\n    }\n\n    let s1 = lst[0].clone() + &lst[1];\n    let s2 = lst[1].clone() + &lst[0];\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction match_parens(lst::Vector{String})::String\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "jl",
    "prompt": "function filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x| x.contains(&substring)).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "jl",
    "prompt": "function find_max(words::Vector{String})::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn find_max(words: Vec<String>) -> String {\n    words\n        .iter()\n        .min_by_key(|word| (-(word.chars().collect::<std::collections::HashSet<_>>().len() as isize), word.clone()))\n        .unwrap()\n        .clone()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction find_max(words::Vector{String})::String\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "jl",
    "prompt": "function generate_integers(a::Int64, b::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn generate_integers(a: isize, b: isize) -> Vec<isize> {\n    let lower = std::cmp::max(2, std::cmp::min(a, b));\n    let upper = std::cmp::min(8, std::cmp::max(a, b));\n\n    (lower..=upper).filter(|i| i % 2 == 0).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "jl",
    "prompt": "function exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n    let odd = lst1.iter().filter(|&i| i % 2 == 1).count();\n    let even = lst2.iter().filter(|&i| i % 2 == 0).count();\n    if even >= odd {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "jl",
    "prompt": "function is_equal_to_sum_even(n::Int64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn is_equal_to_sum_even(n: isize) -> bool {\n    n%2 == 0 && n >= 8\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction is_equal_to_sum_even(n::Int64)::Bool\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "jl",
    "prompt": "function decimal_to_binary(decimal::Int64)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = decimal_to_binary;\n\t@test(candidate(0) == \"db0db\")\n\t@test(candidate(32) == \"db100000db\")\n\t@test(candidate(103) == \"db1100111db\")\n\t@test(candidate(15) == \"db1111db\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn decimal_to_binary(decimal: isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction decimal_to_binary(decimal::Int64)::String\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "jl",
    "prompt": "function sort_third(l::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = sort_third;\n\t@test(candidate([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\n\t@test(candidate([5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\t@test(candidate([5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\n\t@test(candidate([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn sort_third(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    let mut third = Vec::new();\n    for i in (0..l.len()).step_by(3) {\n        third.push(l[i]);\n    }\n    third.sort();\n    for i in (0..l.len()).step_by(3) {\n        l[i] = third[i/3];\n    }\n    l\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction sort_third(l::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "jl",
    "prompt": "function simplify(x::String, n::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = simplify;\n\t@test(candidate(\"1/5\", \"5/1\") == true)\n\t@test(candidate(\"1/6\", \"2/1\") == false)\n\t@test(candidate(\"5/1\", \"3/1\") == true)\n\t@test(candidate(\"7/10\", \"10/2\") == false)\n\t@test(candidate(\"2/10\", \"50/10\") == true)\n\t@test(candidate(\"7/2\", \"4/2\") == true)\n\t@test(candidate(\"11/6\", \"6/1\") == true)\n\t@test(candidate(\"2/3\", \"5/2\") == false)\n\t@test(candidate(\"5/2\", \"3/5\") == false)\n\t@test(candidate(\"2/4\", \"8/4\") == true)\n\t@test(candidate(\"2/4\", \"4/2\") == true)\n\t@test(candidate(\"1/5\", \"5/1\") == true)\n\t@test(candidate(\"1/5\", \"1/5\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn simplify(x: String, n: String) -> bool {\n    let (a, b) = x.split_once(\"/\").unwrap();\n    let (c, d) = n.split_once(\"/\").unwrap();\n    let numerator = a.parse::<isize>().unwrap() * c.parse::<isize>().unwrap();\n    let denom = b.parse::<isize>().unwrap() * d.parse::<isize>().unwrap();\n    numerator % denom == 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction simplify(x::String, n::String)::Bool\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "jl",
    "prompt": "function solve(s::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"#\\$a^D\") == \"#\\$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn solve(s: String) -> String {\n    let mut flg = false;\n    let mut new_str = s.chars().collect::<Vec<char>>();\n    for i in 0..s.len() {\n        if new_str[i].is_alphabetic() {\n            new_str[i] = if new_str[i].is_lowercase() {\n                new_str[i].to_ascii_uppercase()\n            } else {\n                new_str[i].to_ascii_lowercase()\n            };\n            flg = true;\n        }\n    }\n    if !flg {\n        new_str.reverse();\n    }\n    new_str.iter().collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction solve(s::String)::String\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "jl",
    "prompt": "function right_angle_triangle(a::Int64, b::Int64, c::Int64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n    a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction right_angle_triangle(a::Int64, b::Int64, c::Int64)::Bool\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "jl",
    "prompt": "function double_the_difference(lst::Vector{Float64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&i| i > &0.0 && i%2.0!=0.0 && !i.to_string().contains(\".\")).map(|i| i.powi(2)).sum::<f64>() as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction double_the_difference(lst::Vector{Float64})::Int64\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "jl",
    "prompt": "function below_zero(operations::Vector{Int64})::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = below_zero;\n\t@test(candidate(Vector{Int64}([])) == false)\n\t@test(candidate([1, 2, -3, 1, 2, -3]) == false)\n\t@test(candidate([1, 2, -4, 5, 6]) == true)\n\t@test(candidate([1, -1, 2, -2, 5, -5, 4, -4]) == false)\n\t@test(candidate([1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\t@test(candidate([1, -2, 2, -2, 5, -5, 4, -4]) == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn below_zero(operations: Vec<isize>) -> bool {\n    let mut balance = 0;\n\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n\n    false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction below_zero(operations::Vector{Int64})::Bool\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "jl",
    "prompt": "function greatest_common_divisor(a::Int64, b::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    let (mut a, mut b) = (a, b);\n    while b != 0 {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    a\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "jl",
    "prompt": "function f(n::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn f(n: isize) -> Vec<isize> {\n    let mut ret = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n            let mut x = 1;\n            for j in 1..=i { x *= j; }\n            ret.push(x);\n        } else {\n            let mut x = 0;\n            for j in 1..=i { x += j; }\n            ret.push(x);\n        }\n    }\n    ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction f(n::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "jl",
    "prompt": "function monotonic(l::Vector{Int64})::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn monotonic(l: Vec<isize>) -> bool {\n    l.windows(2).all(|w| w[0] <= w[1]) || l.windows(2).all(|w| w[0] >= w[1])\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction monotonic(l::Vector{Int64})::Bool\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "jl",
    "prompt": "function by_length(arr::Vector{Int64})::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let dic = vec![\n        \"One\",\n        \"Two\",\n        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\",\n        \"Nine\",\n    ];\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable_by(|a, b| b.cmp(a));\n    sorted_arr\n        .iter()\n        .filter_map(|&var| dic.get((var - 1) as usize).map(|&s| s.to_string()))\n        .collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction by_length(arr::Vector{Int64})::Vector{String}\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "jl",
    "prompt": "function remove_vowels(text::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = remove_vowels;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\")\n\t@test(candidate(\"fedcba\") == \"fdcb\")\n\t@test(candidate(\"eeeee\") == \"\")\n\t@test(candidate(\"acBAA\") == \"cB\")\n\t@test(candidate(\"EcBOO\") == \"cB\")\n\t@test(candidate(\"ybcd\") == \"ybcd\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn remove_vowels(text: String) -> String {\n    text.chars().filter(|&c| !\"aeiouAEIOU\".contains(c)).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction remove_vowels(text::String)::String\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "jl",
    "prompt": "function check_if_last_char_is_a_letter(txt::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n    let check = txt.split(' ').last().unwrap();\n    check.len() == 1 && check.chars().next().unwrap().is_alphabetic()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "jl",
    "prompt": "function iscube(a::Int64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn iscube(a: isize) -> bool {\n    let a = a.abs();\n    (a as f64).powf(1. / 3.).round().powi(3) as isize == a\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction iscube(a::Int64)::Bool\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "jl",
    "prompt": "function reverse_delete(s::String, c::String)::Tuple{String, Bool}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn reverse_delete(s: String, c: String) -> (String, bool) {\n    let s = s.chars().filter(|&x| !c.contains(x)).collect::<String>();\n    (s.clone(), s.chars().rev().collect::<String>() == s)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction reverse_delete(s::String, c::String)::Tuple{String, Bool}\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "jl",
    "prompt": "function mean_absolute_deviation(numbers::Vector{Float64})::Float64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    numbers.iter().map(|x| (x - mean).abs()).sum::<f64>() / numbers.len() as f64\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "jl",
    "prompt": "function correct_bracketing(brackets::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn correct_bracketing(brackets: String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction correct_bracketing(brackets::String)::Bool\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "jl",
    "prompt": "function rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let min_number = numbers.iter().fold(f64::INFINITY, |a, &b| a.min(b));\n    let max_number = numbers.iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b));\n    numbers.iter().map(|x| (x - min_number) / (max_number - min_number)).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "jl",
    "prompt": "function intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64, Int64})::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String {\n    fn is_prime(num: isize) -> bool {\n        if num <= 1 {\n            return false;\n        }\n        for i in 2..num {\n            if num % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    let l = interval1.0.max(interval2.0);\n    let r = interval1.1.min(interval2.1);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64, Int64})::String\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "jl",
    "prompt": "function hex_key(num::String)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn hex_key(num: String) -> isize {\n    let primes = vec!['2', '3', '5', '7', 'B', 'D'];\n    num.chars().filter(|c| primes.contains(c)).count() as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction hex_key(num::String)::Int64\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "jl",
    "prompt": "function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = vec![];\n    let mut switch = true;\n    let mut lst = lst.clone();\n    while !lst.is_empty() {\n        if switch {\n            res.push(*lst.iter().min().unwrap());\n        } else {\n            res.push(*lst.iter().max().unwrap());\n        }\n        lst.remove(lst.iter().position(|&x| x == res[res.len() - 1]).unwrap());\n        switch = !switch;\n    }\n    res\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "jl",
    "prompt": "function all_prefixes(string::String)::Vector{String}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn all_prefixes(string: String) -> Vec<String> {\n    (1..=string.len()).map(|i| string[..i].to_string()).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction all_prefixes(string::String)::Vector{String}\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "jl",
    "prompt": "function solution(lst::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(idx, &x)| idx%2==0 && x%2==1).map(|(_, x)| x).sum()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction solution(lst::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "jl",
    "prompt": "function is_sorted(lst::Vector{Int64})::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn is_sorted(lst: Vec<isize>) -> bool {\n    let mut count_digit = std::collections::HashMap::new();\n    for i in &lst {\n        *count_digit.entry(i).or_insert(0) += 1;\n    }\n\n    if lst.iter().any(|i| count_digit[i] > 2) {\n        return false;\n    }\n\n    lst.windows(2).all(|w| w[0] <= w[1])\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction is_sorted(lst::Vector{Int64})::Bool\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "jl",
    "prompt": "function search(lst::Vector{Int64})::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = search;\n\t@test(candidate([5, 5, 5, 5, 1]) == 1)\n\t@test(candidate([4, 1, 4, 1, 4, 4]) == 4)\n\t@test(candidate([3, 3]) == -1)\n\t@test(candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8)\n\t@test(candidate([2, 3, 3, 2, 2]) == 2)\n\t@test(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\n\t@test(candidate([3, 2, 8, 2]) == 2)\n\t@test(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1)\n\t@test(candidate([8, 8, 3, 6, 5, 6, 4]) == -1)\n\t@test(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1)\n\t@test(candidate([1, 9, 10, 1, 3]) == 1)\n\t@test(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\n\t@test(candidate([1]) == 1)\n\t@test(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\n\t@test(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\n\t@test(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1)\n\t@test(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\n\t@test(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\n\t@test(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2)\n\t@test(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1)\n\t@test(candidate([10]) == -1)\n\t@test(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\n\t@test(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1)\n\t@test(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\n\t@test(candidate([3, 10, 10, 9, 2]) == -1)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn search(lst: Vec<isize>) -> isize {\n    let mut frq = vec![0; *lst.iter().max().unwrap() as usize + 1];\n    for i in lst {\n        frq[i as usize] += 1;\n    }\n\n    let mut ans = -1;\n    for i in 1..frq.len() {\n        if frq[i] >= i {\n            ans = i as isize;\n        }\n    }\n\n    ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction search(lst::Vector{Int64})::Int64\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "jl",
    "prompt": "function pluck(arr::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n    if arr.len() == 0 { return vec![]; }\n    let evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    if evens.is_empty() { return vec![]; }\n    let min_even = *evens.iter().min().unwrap();\n    let index = arr.iter().position(|&x| x == min_even).unwrap();\n    vec![min_even, index as isize]\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "jl",
    "prompt": "function pairs_sum_to_zero(l::Vector{Int64})::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = pairs_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, -2, 1]) == false)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 5, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([-3, 9, -1, 3, 2, 30]) == true)\n\t@test(candidate([-3, 9, -1, 3, 2, 31]) == true)\n\t@test(candidate([-3, 9, -1, 4, 2, 30]) == false)\n\t@test(candidate([-3, 9, -1, 4, 2, 31]) == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j] == 0 {\n                return true;\n            }\n        }\n    }\n    false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction pairs_sum_to_zero(l::Vector{Int64})::Bool\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "jl",
    "prompt": "function make_palindrome(string::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn make_palindrome(string: String) -> String {\n    if string.is_empty() {\n        return String::new();\n    }\n\n    let mut beginning_of_suffix = 0;\n\n    while string[beginning_of_suffix..] != string[beginning_of_suffix..].chars().rev().collect::<String>() {\n        beginning_of_suffix += 1;\n    }\n\n    string.clone() + &string[..beginning_of_suffix].chars().rev().collect::<String>()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction make_palindrome(string::String)::String\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "jl",
    "prompt": "function starts_one_ends(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn starts_one_ends(n: isize) -> isize {\n    if n == 1 { return 1 }\n    18 * (10isize.pow(n as u32 - 2))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction starts_one_ends(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "jl",
    "prompt": "function get_positive(l::Vector{Int64})::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|&e| e > 0).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "jl",
    "prompt": "function concatenate(strings::Vector{String})::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = concatenate;\n\t@test(candidate(Vector{String}([])) == \"\")\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"xyz\")\n\t@test(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn concatenate(strings: Vec<String>) -> String {\n    strings.join(\"\")\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction concatenate(strings::Vector{String})::String\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "jl",
    "prompt": "function is_nested(string::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn is_nested(string: String) -> bool {\n    let opening_bracket_index: Vec<usize> = string.match_indices(\"[\").map(|(i, _)| i).collect();\n    let mut closing_bracket_index: Vec<usize> = string.match_indices(\"]\").map(|(i, _)| i).collect();\n    closing_bracket_index.reverse();\n\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = closing_bracket_index.len();\n\n    for idx in opening_bracket_index {\n        if i < l && idx < closing_bracket_index[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n\n    cnt >= 2\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction is_nested(string::String)::Bool\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "jl",
    "prompt": "function is_palindrome(text::String)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn is_palindrome(text: String) -> bool {\n    text.chars().zip(text.chars().rev()).all(|(a, b)| a == b)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction is_palindrome(text::String)::Bool\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "jl",
    "prompt": "function factorize(n::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn factorize(n: isize) -> Vec<isize> {\n    let mut fact = vec![];\n    let mut i = 2;\n    let mut n = n;\n    while i <= (n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n            fact.push(i);\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\n    if n > 1 {\n        fact.push(n);\n    }\n    fact\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction factorize(n::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "jl",
    "prompt": "function largest_prime_factor(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15) == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330) == 11)\n\t@test(candidate(13195) == 29)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn largest_prime_factor(n: isize) -> isize {\n    fn is_prime(k: isize) -> bool {\n        if k < 2 {\n            return false;\n        }\n        for i in 2..k {\n            if k % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    let mut largest = 1;\n    for j in 2..=n {\n        if n % j == 0 && is_prime(j) {\n            largest = j;\n        }\n    }\n\n    largest\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction largest_prime_factor(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "jl",
    "prompt": "function get_max_triples(n::Int64)::Int64\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn get_max_triples(n: isize) -> isize {\n    let mut A = vec![0; n as usize];\n    for i in 1..=n {\n        A[i as usize - 1] = i*i - i + 1;\n    }\n\n    let mut ans = vec![];\n    for i in 0..n {\n        for j in i+1..n {\n            for k in j+1..n {\n                if (A[i as usize]+A[j as usize]+A[k as usize])%3 == 0 {\n                    ans.push((A[i as usize],A[j as usize],A[k as usize]));\n                }\n            }\n        }\n    }\n    ans.len() as isize\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction get_max_triples(n::Int64)::Int64\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "jl",
    "prompt": "function anti_shuffle(s::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn anti_shuffle(s: String) -> String {\n    s.split(' ')\n        .map(|word| {\n            let mut chars: Vec<char> = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect::<String>()\n        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction anti_shuffle(s::String)::String\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "jl",
    "prompt": "function solve(N::Int64)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn solve(N: isize) -> String {\n    format!(\"{:b}\", N.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>())\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction solve(N::Int64)::String\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "jl",
    "prompt": "function encrypt(s::String)::String\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") == \"e\")\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn encrypt(s: String) -> String {\n    let d = \"abcdefghijklmnopqrstuvwxyz\";\n    let mut out = String::new();\n    for c in s.chars() {\n        if let Some(i) = d.find(c) {\n            out.push(d.chars().nth((i + 4) % 26).unwrap());\n        } else {\n            out.push(c);\n        }\n    }\n    out\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction encrypt(s::String)::String\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "jl",
    "prompt": "function make_a_pile(n::Int64)::Vector{Int64}\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn make_a_pile(n: isize) -> Vec<isize> {\n    (0..n).map(|i| n + 2*i).collect()\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction make_a_pile(n::Int64)::Vector{Int64}\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "jl",
    "prompt": "function is_prime(n::Int64)::Bool\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "end\n\nusing Test\n\n@testset begin\n\ncandidate = is_prime;\n\t@test(candidate(6) == false)\n\t@test(candidate(101) == true)\n\t@test(candidate(11) == true)\n\t@test(candidate(13441) == true)\n\t@test(candidate(61) == true)\n\t@test(candidate(4) == false)\n\t@test(candidate(1) == false)\n\t@test(candidate(5) == true)\n\t@test(candidate(11) == true)\n\t@test(candidate(17) == true)\n\t@test(candidate(85) == false)\n\t@test(candidate(77) == false)\n\t@test(candidate(255379) == false)\nend\n",
    "stop_tokens": [
      "\n#",
      "\nend"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Rust program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Julia.\n\n### Rust version\n\nfn is_prime(n: isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for k in 2..n {\n        if n % k == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Julia version\n\nfunction is_prime(n::Int64)::Bool\n"
  }
]