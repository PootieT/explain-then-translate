[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n    depth=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ ${1:$i:1} == \"(\" ]]; then\n            (( depth++ ))\n        else\n            (( depth-- ))\n        fi\n        if (( depth < 0 )); then\n            echo \"false\"\n            return\n        fi\n    done\n    if (( depth == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long h) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((5L), (3L)) == (7.5f));\n    Debug.Assert(TriangleArea((2L), (2L)) == (2.0f));\n    Debug.Assert(TriangleArea((10L), (8L)) == (40.0f));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n    echo \"scale=1; $1 * $2 / 2\" | bc\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long h) {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SpecialFactorial(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n    n=$1\n    fact_i=1\n    special_fact=1\n    for (( i=1; i<=$n; i++ )); do\n        ((fact_i*=i))\n        ((special_fact*=fact_i))\n    done\n    echo $special_fact\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SpecialFactorial(long n) {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L, (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L, 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L, (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L, 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L, (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L, (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local lst=($1)\n    local smallest=($(echo \"${lst[@]}\" | tr ' ' '\\n' | awk '$1 < 0' | sort -n | tail -n 1))\n    local largest=($(echo \"${lst[@]}\" | tr ' ' '\\n' | awk '$1 > 0' | sort -n | head -n 1))\n    echo \"$smallest $largest\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool MoveOneBall(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>())) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local min_value=${sorted_arr[0]}\n    local min_index=$(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -n $min_value | cut -d: -f1)\n    local my_arr=(\"${arr[@]:$min_index}\" \"${arr[@]:0:$min_index}\")\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        if [[ ${my_arr[i]} -ne ${sorted_arr[i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool MoveOneBall(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digits(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n    n=$1\n    product=1\n    odd_count=0\n    for digit in $(echo $n | grep -o .); do\n        if [[ $((digit%2)) -eq 1 ]]; then\n            ((product*=digit))\n            ((odd_count++))\n        fi\n    done\n    if [[ $odd_count -eq 0 ]]; then\n        echo 0\n    else\n        echo $product\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digits(long n) {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib4(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n    results=(0 0 2 0)\n    if [ $1 -lt 4 ]; then\n        echo ${results[$1]}\n        return\n    fi\n\n    for ((i=4; i<=$1; i++)); do\n        results+=($((results[3] + results[2] + results[1] + results[0])))\n        unset results[0]\n        results=(\"${results[@]}\")\n    done\n\n    echo ${results[3]}\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib4(long n) {\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortEven(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).SequenceEqual((new List<long>(new long[]{(long)-10L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)5L, (long)0L, (long)9L, (long)1L, (long)123L}))));\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)5L, (long)8L, (long)-12L, (long)4L, (long)23L, (long)2L, (long)3L, (long)11L, (long)12L, (long)-10L}))).SequenceEqual((new List<long>(new long[]{(long)-12L, (long)8L, (long)3L, (long)4L, (long)5L, (long)2L, (long)12L, (long)11L, (long)23L, (long)-10L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_even() {\n    evens=($(echo $1 | tr ' ' '\\n' | awk 'NR%2==1' | sort -n))\n    odds=($(echo $1 | tr ' ' '\\n' | awk 'NR%2==0'))\n    ans=()\n    for ((i=0; i<${#evens[@]}; i++)); do\n        ans+=(${evens[i]})\n        ans+=(${odds[i]})\n    done\n    if [ ${#evens[@]} -gt ${#odds[@]} ]; then\n        ans+=(${evens[-1]})\n    fi\n    echo ${ans[@]}\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortEven(List<long> l) {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> OrderByPoints(List<long> nums) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).SequenceEqual((new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).SequenceEqual((new List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\norder_by_points() {\n    nums=($1)\n    digits_sum() {\n        n=$1\n        neg=1\n        if [[ $n -lt 0 ]]; then\n            n=$((-1 * n))\n            neg=-1\n        fi\n        n=($(echo $n | grep -o .))\n        n[0]=$((n[0] * neg))\n        sum=0\n        for i in ${n[@]}; do\n            ((sum+=i))\n        done\n        echo $sum\n    }\n    for (( i=0; i<${#nums[@]}; i++ )); do\n        for (( j=i+1; j<${#nums[@]}; j++ )); do\n            if [[ $(digits_sum ${nums[$i]}) -gt $(digits_sum ${nums[$j]}) ]]; then\n                temp=${nums[$i]}\n                nums[$i]=${nums[$j]}\n                nums[$j]=$temp\n            fi\n        done\n    done\n    echo \"${nums[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> OrderByPoints(List<long> nums) {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsHappy(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n  if [ ${#1} -lt 3 ]; then\n    echo \"false\"\n    return\n  fi\n\n  for (( i=0; i<${#1}-2; i++ )); do\n    if [[ ${1:i:1} == ${1:i+1:1} || ${1:i+1:1} == ${1:i+2:1} || ${1:i:1} == ${1:i+2:1} ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsHappy(string s) {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string CircularShift(long x, long shift) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n    s=$1\n    shift=$2\n    if [ $shift -gt ${#s} ]; then\n        echo $s | rev\n    else\n        echo ${s:$shift}${s:0:$shift}\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string CircularShift(long x, long shift) {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    arr=($1)\n    threshold=$2\n\n    for (( i=0; i<${#arr[@]}-1; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            if (( $(bc <<< \"${arr[$i]} - ${arr[$j]}\") < $threshold )); then\n                echo \"true\"\n                return\n            fi\n        done\n    done\n\n    echo \"false\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> NumericalLetterGrade(List<float> grades) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f}))).SequenceEqual((new List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.2f}))).SequenceEqual((new List<string>(new string[]{(string)\"D+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.5f}))).SequenceEqual((new List<string>(new string[]{(string)\"D-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f}))).SequenceEqual((new List<string>(new string[]{(string)\"E\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))).SequenceEqual((new List<string>(new string[]{(string)\"D\", (string)\"D-\", (string)\"C-\", (string)\"B\", (string)\"B+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f, (float)0.7f}))).SequenceEqual((new List<string>(new string[]{(string)\"E\", (string)\"D-\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    for gpa in $1; do\n        if [ $gpa == 4.0 ]; then\n            letter_grade+=\"A+ \"\n        elif [ $(echo \"$gpa > 3.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"A \"\n        elif [ $(echo \"$gpa > 3.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"A- \"\n        elif [ $(echo \"$gpa > 3.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B+ \"\n        elif [ $(echo \"$gpa > 2.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B \"\n        elif [ $(echo \"$gpa > 2.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B- \"\n        elif [ $(echo \"$gpa > 2.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C+ \"\n        elif [ $(echo \"$gpa > 1.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C \"\n        elif [ $(echo \"$gpa > 1.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C- \"\n        elif [ $(echo \"$gpa > 1.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D+ \"\n        elif [ $(echo \"$gpa > 0.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D \"\n        elif [ $(echo \"$gpa > 0.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D- \"\n        else\n            letter_grade+=\"E \"\n        fi\n    done\n    echo $letter_grade\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> NumericalLetterGrade(List<float> grades) {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long XOrY(long n, long x, long y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(XOrY((7L), (34L), (12L)) == (34L));\n    Debug.Assert(XOrY((15L), (8L), (5L)) == (5L));\n    Debug.Assert(XOrY((3L), (33L), (5212L)) == (33L));\n    Debug.Assert(XOrY((1259L), (3L), (52L)) == (3L));\n    Debug.Assert(XOrY((7919L), (-1L), (12L)) == (-1L));\n    Debug.Assert(XOrY((3609L), (1245L), (583L)) == (583L));\n    Debug.Assert(XOrY((91L), (56L), (129L)) == (129L));\n    Debug.Assert(XOrY((6L), (34L), (1234L)) == (1234L));\n    Debug.Assert(XOrY((1L), (2L), (0L)) == (0L));\n    Debug.Assert(XOrY((2L), (2L), (0L)) == (2L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    if [ $1 -eq 1 ]; then\n        echo $3\n    else\n        for ((i=2;i<$1;i++)); do\n            if [ $(($1 % $i)) -eq 0 ]; then\n                echo $3\n                break\n            fi\n        done\n        echo $2\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long XOrY(long n, long x, long y) {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Specialfilter(List<long> nums) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nspecialFilter() {\n    local count=0\n    for num in $1; do\n        if [[ $num -gt 10 && $(echo $num | awk '{print substr($0,1,1) \" \" substr($0,length,1)}') =~ ^[13579]\\ [13579]$ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Specialfilter(List<long> nums) {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseMusic(string music_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ParseMusic((\"\")).SequenceEqual((new List<long>())));\n    Debug.Assert(ParseMusic((\"o o o o\")).SequenceEqual((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\".| .| .| .|\")).SequenceEqual((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}))));\n    Debug.Assert(ParseMusic((\"o| o| .| .| o o o o\")).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L, (long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"o| .| o| .| o o| o o|\")).SequenceEqual((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)1L, (long)4L, (long)2L, (long)4L, (long)2L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n    local music_string=\"$1\"\n    local note_map=(\"o\" \"4\" \"o|\" \"2\" \".|\" \"1\")\n    local notes=()\n    for x in $music_string; do\n        if [[ -n \"$x\" ]]; then\n            for i in \"${!note_map[@]}\"; do\n                if [[ \"${note_map[i]}\" == \"$x\" ]]; then\n                    notes+=(\"${note_map[i+1]}\")\n                fi\n            done\n        fi\n    done\n    echo \"${notes[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseMusic(string music_string) {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountDistinctCharacters(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_distinct_characters() {\n    lowerCaseString=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    uniqueCharacters=$(echo $lowerCaseString | grep -o . | sort -u | tr -d '\\n')\n    echo ${#uniqueCharacters}\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountDistinctCharacters(string str) {\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> Bf(string planet1, string planet2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Bf((\"Jupiter\"), (\"Neptune\")).SequenceEqual((new List<string>(new string[]{(string)\"Saturn\", (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Mercury\")).SequenceEqual((new List<string>(new string[]{(string)\"Venus\"}))));\n    Debug.Assert(Bf((\"Mercury\"), (\"Uranus\")).SequenceEqual((new List<string>(new string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))));\n    Debug.Assert(Bf((\"Neptune\"), (\"Venus\")).SequenceEqual((new List<string>(new string[]{(string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Earth\")).SequenceEqual((new List<string>())));\n    Debug.Assert(Bf((\"Mars\"), (\"Earth\")).SequenceEqual((new List<string>())));\n    Debug.Assert(Bf((\"Jupiter\"), (\"Makemake\")).SequenceEqual((new List<string>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planet_names=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    if [[ ! \" ${planet_names[@]} \" =~ \" $1 \" ]] || [[ ! \" ${planet_names[@]} \" =~ \" $2 \" ]] || [ \"$1\" == \"$2\" ]; then\n        return\n    fi\n    planet1_index=$(echo \"${planet_names[@]}\" | grep -o \"$1\" | wc -l)\n    planet2_index=$(echo \"${planet_names[@]}\" | grep -o \"$2\" | wc -l)\n    if (( planet1_index < planet2_index )); then\n        echo \"${planet_names[@]:planet1_index + 1:planet2_index}\"\n    else\n        echo \"${planet_names[@]:planet2_index + 1:planet1_index}\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> Bf(string planet1, string planet2) {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digitsum(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Digitsum((\"\")) == (0L));\n    Debug.Assert(Digitsum((\"abAB\")) == (131L));\n    Debug.Assert(Digitsum((\"abcCd\")) == (67L));\n    Debug.Assert(Digitsum((\"helloE\")) == (69L));\n    Debug.Assert(Digitsum((\"woArBld\")) == (131L));\n    Debug.Assert(Digitsum((\"aAaaaXa\")) == (153L));\n    Debug.Assert(Digitsum((\" How are yOu?\")) == (151L));\n    Debug.Assert(Digitsum((\"You arE Very Smart\")) == (327L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ndigitSum() {\n    s=$1\n    sum=0\n    for (( i=0; i<${#s}; i++ )); do\n        char=${s:i:1}\n        if [[ $char =~ [A-Z] ]]; then\n            ((sum+=`printf \"%d\" \"'$char\"`))\n        fi\n    done\n    echo \"$sum\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digitsum(string s) {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (6L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)4L, (long)9L}))) == (14L));\n    Debug.Assert(SumSquares((new List<long>())) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L}))) == (9L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L}))) == (-3L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)0L}))) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-5L, (long)2L, (long)-1L, (long)-5L}))) == (-126L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-56L, (long)-99L, (long)1L, (long)0L, (long)-2L}))) == (3030L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)-1L}))) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-16L, (long)-9L, (long)-2L, (long)36L, (long)36L, (long)26L, (long)-20L, (long)25L, (long)-40L, (long)20L, (long)-4L, (long)12L, (long)-26L, (long)35L, (long)37L}))) == (-14196L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-3L, (long)17L, (long)-1L, (long)-15L, (long)13L, (long)-1L, (long)14L, (long)-14L, (long)-12L, (long)-5L, (long)14L, (long)-14L, (long)6L, (long)13L, (long)11L, (long)16L, (long)16L, (long)4L, (long)10L}))) == (-1448L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=($1)\n    local result=0\n    for (( i=0; i<${#lst[@]}; i++ )); do\n        if [[ $((i%3)) -eq 0 ]]; then\n            ((result+=lst[i]**2))\n        elif [[ $((i%4)) -eq 0 && $((i%3)) -ne 0 ]]; then\n            ((result+=lst[i]**3))\n        else\n            ((result+=lst[i]))\n        fi\n    done\n    echo \"$result\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> CountUpTo(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CountUpTo((5L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(CountUpTo((6L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((7L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((10L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(CountUpTo((0L)).SequenceEqual((new List<long>())));\n    Debug.Assert(CountUpTo((22L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L}))));\n    Debug.Assert(CountUpTo((1L)).SequenceEqual((new List<long>())));\n    Debug.Assert(CountUpTo((18L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(CountUpTo((47L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L}))));\n    Debug.Assert(CountUpTo((101L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L, (long)47L, (long)53L, (long)59L, (long)61L, (long)67L, (long)71L, (long)73L, (long)79L, (long)83L, (long)89L, (long)97L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n    n=$1\n    primes=()\n    for ((i=2;i<n;i++)); do\n        is_prime=true\n        for ((j=2;j<i;j++)); do\n            if ((i%j==0)); then\n                is_prime=false\n                break\n            fi\n        done\n        if $is_prime; then\n            primes+=($i)\n        fi\n    done\n    echo ${primes[@]}\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> CountUpTo(long n) {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<float> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n    for i in $1; do\n        squared=$((squared + $(echo \"scale=0; $(echo \"scale=0; $i\" | bc) / 1\" | bc) ** 2))\n    done\n    echo $squared\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<float> lst) {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Unique(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Unique((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n    local arr=($1)\n    local unique_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | uniq))\n    echo \"${unique_arr[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Unique(List<long> l) {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Fib((10L)) == (55L));\n    Debug.Assert(Fib((1L)) == (1L));\n    Debug.Assert(Fib((8L)) == (21L));\n    Debug.Assert(Fib((11L)) == (89L));\n    Debug.Assert(Fib((12L)) == (144L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib(long n) {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FizzBuzz(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n    n=$1\n    ns=()\n    for (( i=0; i<$n; i++ )); do\n        if [[ $((i%11)) -eq 0 || $((i%13)) -eq 0 ]]; then\n            ns+=($i)\n        fi\n    done\n    s=$(echo ${ns[@]} | tr ' ' '\\n' | grep -o '7' | wc -l)\n    echo $s\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FizzBuzz(long n) {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    class_name=$1\n    extensions=($2)\n    strong=${extensions[0]}\n    my_val=$(echo \"${extensions[0]}\" | awk '{print gsub(/[A-Z]/,\"&\") - gsub(/[a-z]/,\"&\")}')\n    for s in \"${extensions[@]}\"; do\n        val=$(echo \"$s\" | awk '{print gsub(/[A-Z]/,\"&\") - gsub(/[a-z]/,\"&\")}')\n        if [[ $val -gt $my_val ]]; then\n            strong=$s\n            my_val=$val\n        fi\n    done\n    echo \"$class_name.$strong\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(3.9f, 4.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))).Equals((Tuple.Create(5.0f, 5.9f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(2.0f, 2.2f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))).Equals((Tuple.Create(2.0f, 2.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))).Equals((Tuple.Create(2.2f, 3.1f))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    arr=($1)\n    closest_pair=()\n    distance=\"\"\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            new_distance=$(echo \"${arr[i]} - ${arr[j]}\" | bc -l | tr -d '-')\n            if [[ -z $distance ]]; then\n                distance=$new_distance\n                closest_pair=(\"${arr[i]}\" \"${arr[j]}\")\n            elif (( $(echo \"$new_distance < $distance\" | bc -l) )); then\n                distance=$new_distance\n                closest_pair=(\"${arr[i]}\" \"${arr[j]}\")\n            fi\n        done\n    done\n    echo \"${closest_pair[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool ValidDate(string date) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvalid_date() {\n    date=$1\n    month=$(echo $date | awk -F'-' '{print $1}')\n    day=$(echo $date | awk -F'-' '{print $2}')\n    year=$(echo $date | awk -F'-' '{print $3}')\n    if [[ $month -lt 1 || $month -gt 12 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]] && [[ $day -lt 1 || $day -gt 31 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]] && [[ $day -lt 1 || $day -gt 30 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 2 ]] && [[ $day -lt 1 || $day -gt 29 ]]; then\n        echo \"false\"\n        return\n    fi\n    echo \"true\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool ValidDate(string date) {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(long x, long y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Add((0L), (1L)) == (1L));\n    Debug.Assert(Add((1L), (0L)) == (1L));\n    Debug.Assert(Add((2L), (3L)) == (5L));\n    Debug.Assert(Add((5L), (7L)) == (12L));\n    Debug.Assert(Add((7L), (5L)) == (12L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n    expr $1 + $2\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(long x, long y) {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool TriplesSumToZero(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)-1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)5L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)-100L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)100L, (long)3L, (long)5L, (long)-100L}))) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n    l=($1)\n    for (( i=0; i<${#l[@]}; i++ )); do\n        for (( j=i+1; j<${#l[@]}; j++ )); do\n            for (( k=j+1; k<${#l[@]}; k++ )); do\n                if (( l[i] + l[j] + l[k] == 0 )); then\n                    echo true\n                    return\n                fi\n            done\n        done\n    done\n    echo false\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool TriplesSumToZero(List<long> l) {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestDivisor(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(LargestDivisor((3L)) == (1L));\n    Debug.Assert(LargestDivisor((7L)) == (1L));\n    Debug.Assert(LargestDivisor((10L)) == (5L));\n    Debug.Assert(LargestDivisor((100L)) == (50L));\n    Debug.Assert(LargestDivisor((49L)) == (7L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n  for (( i=$1-1; i>0; i-- )); do\n    if (( $1 % $i == 0 )); then\n      echo $i\n      return\n    fi\n  done\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestDivisor(long n) {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string SortNumbers(string numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n    value_map=(zero one two three four five six seven eight nine)\n    for word in $1; do\n        for i in ${!value_map[@]}; do\n            if [[ $word == ${value_map[$i]} ]]; then\n                echo $i\n            fi\n        done\n    done | sort | while read i; do\n        echo ${value_map[$i]}\n    done | tr '\\n' ' ' | sed 's/ $//'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string SortNumbers(string numbers) {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SmallestChange(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)4L, (long)7L, (long)9L, (long)6L}))) == (4L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)4L, (long)4L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)1L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)3L, (long)1L, (long)1L, (long)3L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n    arr=($1)\n    ans=0\n    for ((i=0; i<${#arr[@]}/2; i++)); do\n        if [[ ${arr[i]} -ne ${arr[${#arr[@]}-i-1]} ]]; then\n            ((ans++))\n        fi\n    done\n    echo $ans\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SmallestChange(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowThreshold(List<long> l, long t) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L})), (100L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (5L)) == (false));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (21L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (22L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)8L, (long)4L, (long)10L})), (11L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)8L, (long)4L, (long)10L})), (10L)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n    for e in $1; do\n        if [ $e -ge $2 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowThreshold(List<long> l, long t) {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> ProdSigns(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nprod_signs() {\n    arr=($1)\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        return\n    fi\n    if [[ ${arr[*]} =~ 0 ]]; then\n        echo 0\n        return\n    fi\n    negs=($(echo ${arr[*]} | sed 's/[^-]/0/g'))\n    prod=$(( ${#negs[@]} % 2 == 0 ? 1 : -1 ))\n    echo $(( prod * $(echo ${arr[*]} | sed 's/-//g' | tr ' ' '+' ) ))\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> ProdSigns(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Modp(long n, long p) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L), (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L), (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L), (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L), (5L)) == (3L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n    ret=1\n    for ((i=0;i<$1;i++)); do\n        ret=$((2 * ret % $2))\n    done\n    echo $ret\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Modp(long n, long p) {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountUpper(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CountUpper((\"aBCdEf\")) == (1L));\n    Debug.Assert(CountUpper((\"abcdefg\")) == (0L));\n    Debug.Assert(CountUpper((\"dBBE\")) == (0L));\n    Debug.Assert(CountUpper((\"B\")) == (0L));\n    Debug.Assert(CountUpper((\"U\")) == (1L));\n    Debug.Assert(CountUpper((\"\")) == (0L));\n    Debug.Assert(CountUpper((\"EEEE\")) == (2L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_upper() {\n    count=0\n    for ((i=0;i<${#1};i+=2)); do\n        if [[ \"${1:i:1}\" == [AEIOU] ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountUpper(string s) {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Multiply(long a, long b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    echo $(( ${1: -1} * ${2: -1} ))\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Multiply(long a, long b) {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> UniqueDigits(List<long> x) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).SequenceEqual((new List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L, (long)2033L, (long)111L, (long)151L}))).SequenceEqual((new List<long>(new long[]{(long)111L, (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L, (long)103L, (long)31L}))).SequenceEqual((new List<long>(new long[]{(long)31L, (long)135L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n    local arr=($1)\n    local odd_digit_elements=()\n    for i in \"${arr[@]}\"; do\n        if [[ $(echo $i | grep -E \"^[13579]+$\") ]]; then\n            odd_digit_elements+=($i)\n        fi\n    done\n    echo $(echo \"${odd_digit_elements[@]}\" | tr ' ' '\\n' | sort -n)\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> UniqueDigits(List<long> x) {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool WillItFly(List<long> q, long w) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n    q=($1)\n    w=$2\n    if (( $(echo \"${q[@]}\" | tr ' ' '+' | bc) > $w )); then\n        echo \"false\"\n        return\n    fi\n\n    i=0\n    j=${#q[@]}-1\n    while (( $i<$j )); do\n        if (( ${q[$i]} != ${q[$j]} )); then\n            echo \"false\"\n            return\n        fi\n        (( i++ ))\n        (( j-- ))\n    done\n    echo \"true\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool WillItFly(List<long> q, long w) {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Maximum(List<long> arr, long k) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).SequenceEqual((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).SequenceEqual((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).SequenceEqual((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).SequenceEqual((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).SequenceEqual((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    if [[ $2 -eq 0 ]]; then\n        return 0\n    fi\n    sorted=$(echo $1 | tr ' ' '\\n' | sort -n)\n    echo $sorted | tr ' ' '\\n' | tail -$2\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Maximum(List<long> arr, long k) {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SeparateParenGroups(string paren_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).SequenceEqual((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).SequenceEqual((new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).SequenceEqual((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).SequenceEqual((new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n    result=()\n    current_string=\"\"\n    current_depth=0\n\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $c == '(' ]]; then\n            (( current_depth++ ))\n            current_string+=$c\n        elif [[ $c == ')' ]]; then\n            (( current_depth-- ))\n            current_string+=$c\n\n            if [[ $current_depth == 0 ]]; then\n                result+=(\"$current_string\")\n                current_string=\"\"\n            fi\n        fi\n    done\n\n    echo \"${result[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SeparateParenGroups(string paren_string) {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> FilterIntegers(List<object> values) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FilterIntegers((new List<object>())).SequenceEqual((new List<long>())));\n    Debug.Assert(FilterIntegers((new List<object>(new object[]{4L, new List<object>(), 23.2f, 9L, \"adasd\"}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)9L}))));\n    Debug.Assert(FilterIntegers((new List<object>(new object[]{3L, \"c\", 3L, 3L, \"a\", \"b\"}))).SequenceEqual((new List<long>(new long[]{(long)3L, (long)3L, (long)3L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfilter_integers() {\n    result=()\n    for x in $1; do\n        if [[ $x =~ ^-?[0-9]+$ ]]; then\n            result+=($x)\n        fi\n    done\n    echo ${result[@]}\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> FilterIntegers(List<object> values) {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Skjkasdkd(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L}))) == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L}))) == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L}))) == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L}))) == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L, (long)8192L}))) == (10L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nskjkasdkd() {\n    arr=($1)\n    maxx=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $maxx ]]; then\n            is_prime=true\n            for (( j=2; j<$i; j++ )); do\n                if [[ $((i%j)) -eq 0 ]]; then\n                    is_prime=false\n                    break\n                fi\n            done\n            if $is_prime; then\n                maxx=$i\n            fi\n        fi\n    done\n    result=0\n    for (( i=0; i<${#maxx}; i++ )); do\n        result=$((result+${maxx:i:1}))\n    done\n    echo \"$result\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Skjkasdkd(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(TotalMatch((new List<string>()), (new List<string>())).SequenceEqual((new List<string>())));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\", (string)\"admin\", (string)\"project\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"5\"}))).SequenceEqual((new List<string>(new string[]{(string)\"4\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hii\"}))).SequenceEqual((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>()), (new List<string>(new string[]{(string)\"this\"}))).SequenceEqual((new List<string>())));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"this\"})), (new List<string>())).SequenceEqual((new List<string>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    l1=0\n    for st in $1; do\n        l1=$((l1+${#st}))\n    done\n\n    l2=0\n    for st in $2; do\n        l2=$((l2+${#st}))\n    done\n\n    if [ $l1 -le $l2 ]; then\n        echo $1\n    else\n        echo $2\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringToMd5(string text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StringToMd5((\"Hello world\")).Equals((\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    Debug.Assert(StringToMd5((\"\")).Equals(null));\n    Debug.Assert(StringToMd5((\"A B C\")).Equals((\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    Debug.Assert(StringToMd5((\"password\")).Equals((\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstring_to_md5() {\n    echo -n \"$1\" | md5sum | awk '{print $1}'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringToMd5(string text) {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CarRaceCollision(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CarRaceCollision((2L)) == (4L));\n    Debug.Assert(CarRaceCollision((3L)) == (9L));\n    Debug.Assert(CarRaceCollision((4L)) == (16L));\n    Debug.Assert(CarRaceCollision((8L)) == (64L));\n    Debug.Assert(CarRaceCollision((10L)) == (100L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n    echo $(($1*$1))\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CarRaceCollision(long n) {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSimplePower(long x, long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n    x=$1\n    n=$2\n    if [[ $n -eq 1 ]]; then\n        if [[ $x -eq 1 ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\n        fi\n        return\n    fi\n    power=1\n    while [[ $power -lt $x ]]; do\n        ((power*=n))\n    done\n    if [[ $power -eq $x ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSimplePower(long x, long n) {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> IncrList(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IncrList((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)3L, (long)2L}))));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)5L, (long)2L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).SequenceEqual((new List<long>(new long[]{(long)6L, (long)3L, (long)6L, (long)3L, (long)4L, (long)4L, (long)10L, (long)1L, (long)124L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n    echo $(echo $1 | tr ' ' '\\n' | awk '{print $1+1}' | tr '\\n' ' ')\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> IncrList(List<long> l) {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FlipCase(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nflip_case() {\n    echo $1 | tr '[:upper:][:lower:]' '[:lower:][:upper:]'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FlipCase(string str) {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long VowelsCount(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(VowelsCount((\"abcde\")) == (2L));\n    Debug.Assert(VowelsCount((\"Alone\")) == (3L));\n    Debug.Assert(VowelsCount((\"key\")) == (2L));\n    Debug.Assert(VowelsCount((\"bye\")) == (1L));\n    Debug.Assert(VowelsCount((\"keY\")) == (2L));\n    Debug.Assert(VowelsCount((\"bYe\")) == (1L));\n    Debug.Assert(VowelsCount((\"ACEDY\")) == (3L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n    s=$1\n    vowels=\"aeiouAEIOU\"\n    n_vowels=$(echo $s | grep -io \"[aeiou]\" | wc -l)\n    if [[ ${s: -1} == [yY] ]]; then\n        ((n_vowels++))\n    fi\n    echo $n_vowels\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long VowelsCount(string s) {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SortedListSum(List<string> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).SequenceEqual((new List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).SequenceEqual((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).SequenceEqual((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).SequenceEqual((new List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).SequenceEqual((new List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).SequenceEqual((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).SequenceEqual((new List<string>(new string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsorted_list_sum() {\n    lst=($1)\n    sorted_lst=($(echo \"${lst[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    new_lst=()\n    for i in \"${sorted_lst[@]}\"; do\n        if (( ${#i} % 2 == 0 )); then\n            new_lst+=($i)\n        fi\n    done\n    sorted_new_lst=($(echo \"${new_lst[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    sorted_by_length=($(echo \"${sorted_new_lst[@]}\" | tr ' ' '\\n' | awk '{print length, $0}' | sort -n -s | cut -d\" \" -f2-))\n    echo \"${sorted_by_length[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SortedListSum(List<string> lst) {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> WordsString(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(WordsString((\"Hi, my name is John\")).SequenceEqual((new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\", (string)\"is\", (string)\"John\"}))));\n    Debug.Assert(WordsString((\"One, two, three, four, five, six\")).SequenceEqual((new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))));\n    Debug.Assert(WordsString((\"Hi, my name\")).SequenceEqual((new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\"}))));\n    Debug.Assert(WordsString((\"One,, two, three, four, five, six,\")).SequenceEqual((new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))));\n    Debug.Assert(WordsString((\"\")).SequenceEqual((new List<string>())));\n    Debug.Assert(WordsString((\"ahmed     , gamal\")).SequenceEqual((new List<string>(new string[]{(string)\"ahmed\", (string)\"gamal\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_string() {\n    echo \"$1\" | tr ',' ' ' | awk '{$1=$1};1'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> WordsString(string s) {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(EvenOddPalindrome((123L)).Equals((Tuple.Create(8L, 13L))));\n    Debug.Assert(EvenOddPalindrome((12L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((3L)).Equals((Tuple.Create(1L, 2L))));\n    Debug.Assert(EvenOddPalindrome((63L)).Equals((Tuple.Create(6L, 8L))));\n    Debug.Assert(EvenOddPalindrome((25L)).Equals((Tuple.Create(5L, 6L))));\n    Debug.Assert(EvenOddPalindrome((19L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((9L)).Equals((Tuple.Create(4L, 5L))));\n    Debug.Assert(EvenOddPalindrome((1L)).Equals((Tuple.Create(0L, 1L))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n    is_palindrome() {\n        [[ $1 == $(echo $1 | rev) ]]\n    }\n\n    even_palindrome_count=0\n    odd_palindrome_count=0\n\n    for i in $(seq 1 $1); do\n        if (( i%2 == 1 )) && is_palindrome $i; then\n            (( odd_palindrome_count++ ))\n        elif (( i%2 == 0 )) && is_palindrome $i; then\n            (( even_palindrome_count++ ))\n        fi\n    done\n    echo \"$even_palindrome_count $odd_palindrome_count\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long b, long c) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n    if (( $1 + $2 <= $3 || $1 + $3 <= $2 || $2 + $3 <= $1 )); then\n        echo \"-1\"\n        return\n    fi\n    s=$(( ($1 + $2 + $3) / 2 ))\n    area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\" | bc)\n    echo $area\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long b, long c) {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>())) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    while IFS=, read -r key value; do\n        if [[ $key == \"\" ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $key != *[[:lower:]]* ]] && [[ $value != *[[:lower:]]* ]]; then\n            echo \"true\"\n            return\n        elif [[ $key != *[[:upper:]]* ]] && [[ $value != *[[:upper:]]* ]]; then\n            echo \"true\"\n            return\n        else\n            echo \"false\"\n            return\n        fi\n    done <<< \"$1\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Tri(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"1\"\n        return\n    fi\n\n    my_tri=(1 3)\n    for (( i=2; i<=$1; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            my_tri+=(\"$((i/2+1))\")\n        else\n            my_tri+=(\"$((my_tri[i-1]+my_tri[i-2]+(i+3)/2))\")\n        fi\n    done\n\n    echo \"${my_tri[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Tri(long n) {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float Median(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n    l=($(echo $1 | tr ' ' '\\n' | sort -n))\n    len=${#l[@]}\n    if (( len % 2 == 1 )); then\n        echo ${l[len/2]}\n    else\n        echo $(( (${l[len/2-1]} + ${l[len/2]}) / 2 ))\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float Median(List<long> l) {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string ChangeBase(long x, long numBase) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    x=$1\n    base=$2\n    ret=\"\"\n    while [[ $x -gt 0 ]]; do\n        ret=\"${x%$base}$ret\"\n        x=$((x/base))\n    done\n    echo $ret\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string ChangeBase(long x, long numBase) {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Longest(List<string> strings) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Longest((new List<string>())).Equals(null));\n    Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"x\")));\n    Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"yyy\", (string)\"zzzz\", (string)\"www\", (string)\"kkkk\", (string)\"abc\"}))).Equals((\"zzzz\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlongest() {\n  if [ -z \"$1\" ]; then\n    echo \"None\"\n    return\n  fi\n\n  maxlen=0\n  for s in $1; do\n    len=${#s}\n    if [ $len -gt $maxlen ]; then\n      maxlen=$len\n      longest=$s\n    fi\n  done\n\n  echo $longest\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Longest(List<string> strings) {\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortArray(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).SequenceEqual((new List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n    arr=($1)\n    sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    sorted_by_ones=($(echo \"${sorted_arr[@]}\" | tr ' ' '\\n' | awk '{print $1 \" \" $0}' | sort -n -k2 | awk '{print $1}'))\n    echo \"${sorted_by_ones[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortArray(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Common(List<long> l1, List<long> l2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L, (long)9L, (long)653L, (long)121L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n    ret=()\n    for e1 in $1; do\n        for e2 in $2; do\n            if [ $e1 -eq $e2 ]; then\n                ret+=($e1)\n            fi\n        done\n    done\n    echo \"${ret[@]}\" | tr ' ' '\\n' | sort -n\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Common(List<long> l1, List<long> l2) {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CycpatternCheck(string a, string b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    Debug.Assert(CycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    Debug.Assert(CycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    Debug.Assert(CycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    Debug.Assert(CycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    Debug.Assert(CycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n    l=${#2}\n    pat=\"$2$2\"\n    for (( i=0; i<${#1}-l+1; i++ )); do\n        for (( j=0; j<l+1; j++ )); do\n            if [[ \"${1:$i:$l}\" == \"${pat:$j:$l}\" ]]; then\n                echo true\n                return\n            fi\n        done\n    done\n    echo false\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CycpatternCheck(string a, string b) {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Minsubarraysum(List<long> nums) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L}))) == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L, (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L}))) == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L, (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n    max_sum=0\n    s=0\n    for num in $1; do\n        s+=-$num\n        if ((s < 0)); then\n            s=0\n        fi\n        max_sum=$((s > max_sum ? s : max_sum))\n    done\n    if ((max_sum == 0)); then\n        max_sum=$(echo $1 | tr ' ' '\\n' | awk '{print -$1}' | sort -n | head -n 1)\n    fi\n    min_sum=-$max_sum\n    echo $min_sum\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Minsubarraysum(List<long> nums) {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortArray(List<long> array) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).SequenceEqual((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L}))).SequenceEqual((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L, (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L, (long)11L}))).SequenceEqual((new List<long>(new long[]{(long)23L, (long)21L, (long)14L, (long)11L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n#\n#\n# $1 is a space-separated list\nsort_array() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\n' | sort -n))\n    local sorted_by_ones=($(echo \"${sorted_arr[@]}\" | tr ' ' '\n' | awk '{print $1 \" \" $0}' | sort -n -k2 | awk '{print $1}'))\n    echo \"${sorted_by_ones[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortArray(List<long> array) {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetOddCollatz(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetOddCollatz((14L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(GetOddCollatz((5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((12L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((1L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n    n=$1\n    if ((n%2==0)); then\n        odd_collatz=()\n    else\n        odd_collatz=($n)\n    fi\n    while ((n > 1)); do\n        if ((n%2==0)); then\n            n=$((n/2))\n        else\n            n=$((n*3+1))\n        fi\n        if ((n%2==1)); then\n            odd_collatz+=($n)\n        fi\n    done\n    printf '%s\\n' \"${odd_collatz[@]}\" | sort -n\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetOddCollatz(long n) {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Derivative(List<long> xs) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)6L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)2L, (long)1L, (long)0L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)0L, (long)16L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)1L}))).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n  xs=($1)\n  for ((i=1; i<${#xs[@]}; i++)); do\n    echo $((i * ${xs[i]}))\n  done\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Derivative(List<long> xs) {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fibfib(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1 ]]; then\n    echo 0\n  elif [[ $1 -eq 2 ]]; then\n    echo 1\n  else\n    echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n  fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fibfib(long n) {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxElement(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n    l=($1)\n    m=${l[0]}\n    for e in ${l[@]}; do\n        if ((e > m)); then\n            m=$e\n        fi\n    done\n    echo $m\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxElement(List<long> l) {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ClosestInteger(string value) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nclosest_integer() {\n    # TODO: implement me\n    echo 0\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ClosestInteger(string value) {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n    local sum=0\n    local prod=1\n    for n in $1; do\n        ((sum += n))\n        ((prod *= n))\n    done\n    echo \"$sum $prod\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SelectWords(string s, long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).SequenceEqual((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).SequenceEqual((new List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"), (2L)).SequenceEqual((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"), (4L)).SequenceEqual((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).SequenceEqual((new List<string>(new string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).SequenceEqual((new List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).SequenceEqual((new List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    s=$1\n    n=$2\n    result=()\n    for word in $s; do\n        n_consonants=$(echo $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [[ $n_consonants -eq $n ]]; then\n            result+=(\"$word\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SelectWords(string s, long n) {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long AddElements(List<long> arr, long k) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)41L, (long)57L, (long)76L, (long)87L, (long)88L, (long)99L})), (3L)) == (-4L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)111L, (long)121L, (long)3L, (long)4000L, (long)5L, (long)6L})), (2L)) == (0L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)11L, (long)21L, (long)3L, (long)90L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L)) == (125L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L)) == (24L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)1L})), (1L)) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n  arr=($1)\n  k=$2\n  sum=0\n  for ((i=0; i<k; i++)); do\n    elem=${arr[$i]}\n    if (( ${#elem} <= 2 )); then\n      ((sum+=elem))\n    fi\n  done\n  echo $sum\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long AddElements(List<long> arr, long k) {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Eat(long number, long need, long remaining) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Eat((5L), (6L), (10L)).SequenceEqual((new List<long>(new long[]{(long)11L, (long)4L}))));\n    Debug.Assert(Eat((4L), (8L), (9L)).SequenceEqual((new List<long>(new long[]{(long)12L, (long)1L}))));\n    Debug.Assert(Eat((1L), (10L), (10L)).SequenceEqual((new List<long>(new long[]{(long)11L, (long)0L}))));\n    Debug.Assert(Eat((2L), (11L), (5L)).SequenceEqual((new List<long>(new long[]{(long)7L, (long)0L}))));\n    Debug.Assert(Eat((4L), (5L), (7L)).SequenceEqual((new List<long>(new long[]{(long)9L, (long)2L}))));\n    Debug.Assert(Eat((4L), (5L), (1L)).SequenceEqual((new List<long>(new long[]{(long)5L, (long)0L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [[ $2 -le $3 ]]\n  then\n    echo $(( $1 + $2 )) $(( $3 - $2 ))\n  else\n    echo $(( $1 + $3 )) 0\n  fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Eat(long number, long need, long remaining) {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> NextSmallest(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnext_smallest() {\n    echo \"$1\" | tr ' ' '\\n' | sort -n | uniq | sed -n 2p\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> NextSmallest(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ChooseNum(long x, long y) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ChooseNum((12L), (15L)) == (14L));\n    Debug.Assert(ChooseNum((13L), (12L)) == (-1L));\n    Debug.Assert(ChooseNum((33L), (12354L)) == (12354L));\n    Debug.Assert(ChooseNum((5234L), (5233L)) == (-1L));\n    Debug.Assert(ChooseNum((6L), (29L)) == (28L));\n    Debug.Assert(ChooseNum((27L), (10L)) == (-1L));\n    Debug.Assert(ChooseNum((7L), (7L)) == (-1L));\n    Debug.Assert(ChooseNum((546L), (546L)) == (546L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $(($2 % 2)) -eq 0 ]; then\n        echo $2\n    elif [ $1 -eq $2 ]; then\n        echo -1\n    else\n        echo $(($2 - 1))\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ChooseNum(long x, long y) {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PrimeLength(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(PrimeLength((\"Hello\")) == (true));\n    Debug.Assert(PrimeLength((\"abcdcba\")) == (true));\n    Debug.Assert(PrimeLength((\"kittens\")) == (true));\n    Debug.Assert(PrimeLength((\"orange\")) == (false));\n    Debug.Assert(PrimeLength((\"wow\")) == (true));\n    Debug.Assert(PrimeLength((\"world\")) == (true));\n    Debug.Assert(PrimeLength((\"MadaM\")) == (true));\n    Debug.Assert(PrimeLength((\"Wow\")) == (true));\n    Debug.Assert(PrimeLength((\"\")) == (false));\n    Debug.Assert(PrimeLength((\"HI\")) == (true));\n    Debug.Assert(PrimeLength((\"go\")) == (true));\n    Debug.Assert(PrimeLength((\"gogo\")) == (false));\n    Debug.Assert(PrimeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    Debug.Assert(PrimeLength((\"Madam\")) == (true));\n    Debug.Assert(PrimeLength((\"M\")) == (false));\n    Debug.Assert(PrimeLength((\"0\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n  l=${#1}\n  if [ $l -eq 0 ] || [ $l -eq 1 ]\n  then\n    echo \"false\"\n    return 1\n  fi\n  for (( i=2; i<$l; i++ ))\n  do\n    if [ $(( $l % $i )) -eq 0 ]\n    then\n      echo \"false\"\n      return 1\n    fi\n  done\n  echo \"true\"\n  return 0\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PrimeLength(string str) {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumToN(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SumToN((1L)) == (1L));\n    Debug.Assert(SumToN((6L)) == (21L));\n    Debug.Assert(SumToN((11L)) == (66L));\n    Debug.Assert(SumToN((30L)) == (465L));\n    Debug.Assert(SumToN((100L)) == (5050L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n  echo $(( $1 * ($1 + 1) / 2 ))\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumToN(long n) {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FixSpaces(string text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfix_spaces() {\n    new_text=\"\"\n    i=0\n    start=0\n    end=0\n    while [ $i -lt ${#1} ]; do\n        if [ \"${1:$i:1}\" == \" \" ]; then\n            end=$((end+1))\n        else\n            if [ $((end-start)) -gt 2 ]; then\n                new_text+=\"-${1:$i:1}\"\n            elif [ $((end-start)) -gt 0 ]; then\n                new_text+=$(printf '_%.0s' $(seq 1 $((end-start))))${1:$i:1}\n            else\n                new_text+=\"${1:$i:1}\"\n            fi\n            start=$((i+1))\n            end=$((i+1))\n        fi\n        i=$((i+1))\n    done\n    if [ $((end-start)) -gt 2 ]; then\n        new_text+=\"-\"\n    elif [ $((end-start)) -gt 0 ]; then\n        new_text+=\"_\"\n    fi\n    echo $new_text\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FixSpaces(string text) {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RollingMax(List<long> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n    numbers=($1)\n    running_max=${numbers[0]}\n    result=()\n\n    for n in \"${numbers[@]}\"; do\n        if [[ $running_max -lt $n ]]; then\n            running_max=$n\n        fi\n        result+=($running_max)\n    done\n    echo \"${result[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RollingMax(List<long> numbers) {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string WordsInSentence(string sentence) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n    new_lst=()\n    for word in $1; do\n        flg=0\n        if [[ ${#word} -eq 1 ]]; then\n            flg=1\n        fi\n        for (( i=2; i<${#word}; i++ )); do\n            if [[ ${#word}%i -eq 0 ]]; then\n                flg=1\n            fi\n        done\n        if [[ $flg -eq 0 || ${#word} -eq 2 ]]; then\n            new_lst+=($word)\n        fi\n    done\n    echo \"${new_lst[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string WordsInSentence(string sentence) {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string GetClosestVowel(string word) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nget_closest_vowel() {\n    word=$1\n    vowels=\"aeiouAEIOU\"\n    for (( i=${#word}-2; i>0; i-- )); do\n        if [[ $vowels == *\"${word:$i:1}\"* ]]; then\n            if [[ $vowels != *\"${word:$((i+1)):1}\"* ]] && [[ $vowels != *\"${word:$((i-1)):1}\"* ]]; then\n                echo \"${word:$i:1}\"\n                return\n            fi\n        fi\n    done\n    echo \"\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string GetClosestVowel(string word) {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Compare(List<long> game, List<long> guess) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local game=($1)\n    local guess=($2)\n    local result=()\n    for ((i=0;i<${#game[@]};++i)); do\n        result+=($((${game[$i]}-${guess[$i]})))\n    done\n    echo ${result[@]}\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Compare(List<long> game, List<long> guess) {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RemoveDuplicates((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)3L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local arr=($1)\n    local c=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort | uniq -c | awk '{if ($1 == 1) print $2}'))\n    echo \"${c[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool SameChars(string s0, string s1) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n    if [[ $(echo $1 | grep -o . | sort | tr -d '\\n') == $(echo $2 | grep -o . | sort | tr -d '\\n') ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool SameChars(string s0, string s1) {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseNestedParens(string paren_string) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).SequenceEqual((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n  local IFS=' '\n  local -a arr=($1)\n  for x in \"${arr[@]}\"; do\n    if [[ -n \"$x\" ]]; then\n      depth=0\n      max_depth=0\n      for (( i=0; i<${#x}; i++ )); do\n        c=\"${x:i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n          depth=$((depth+1))\n          max_depth=$((depth>max_depth?depth:max_depth))\n        else\n          depth=$((depth-1))\n        fi\n      done\n      echo \"$max_depth\"\n    fi\n  done\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseNestedParens(string paren_string) {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddCount(long num) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(EvenOddCount((7L)).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(EvenOddCount((-78L)).Equals((Tuple.Create(1L, 1L))));\n    Debug.Assert(EvenOddCount((3452L)).Equals((Tuple.Create(2L, 2L))));\n    Debug.Assert(EvenOddCount((346211L)).Equals((Tuple.Create(3L, 3L))));\n    Debug.Assert(EvenOddCount((-345821L)).Equals((Tuple.Create(3L, 3L))));\n    Debug.Assert(EvenOddCount((-2L)).Equals((Tuple.Create(1L, 0L))));\n    Debug.Assert(EvenOddCount((-45347L)).Equals((Tuple.Create(2L, 3L))));\n    Debug.Assert(EvenOddCount((0L)).Equals((Tuple.Create(1L, 0L))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n    even_count=0\n    odd_count=0\n    for i in $(echo ${1#-} | grep -o .); do\n        if (( $i % 2 == 0 )); then\n            (( even_count++ ))\n        else\n            (( odd_count++ ))\n        fi\n    done\n    echo \"$even_count $odd_count\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddCount(long num) {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FruitDistribution(string s, long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FruitDistribution((\"5 apples and 6 oranges\"), (19L)) == (8L));\n    Debug.Assert(FruitDistribution((\"5 apples and 6 oranges\"), (21L)) == (10L));\n    Debug.Assert(FruitDistribution((\"0 apples and 1 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"1 apples and 0 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"2 apples and 3 oranges\"), (100L)) == (95L));\n    Debug.Assert(FruitDistribution((\"2 apples and 3 oranges\"), (5L)) == (0L));\n    Debug.Assert(FruitDistribution((\"1 apples and 100 oranges\"), (120L)) == (19L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n    echo $1 | tr ' ' '\\n' | grep -Eo '[0-9]+' | awk -v n=\"$2\" '{sum+=$1} END {print n-sum}'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FruitDistribution(string s, long n) {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringXor(string a, string b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    a=$1\n    b=$2\n    result=\"\"\n    for ((i=0; i<${#a}; i++)); do\n        if [[ \"${a:$i:1}\" == \"${b:$i:1}\" ]]; then\n            result+=\"0\"\n        else\n            result+=\"1\"\n        fi\n    done\n    echo $result\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringXor(string a, string b) {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Strlen(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Strlen((\"\")) == (0L));\n    Debug.Assert(Strlen((\"x\")) == (1L));\n    Debug.Assert(Strlen((\"asdasnakj\")) == (9L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstrlen() {\n    echo ${#1}\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Strlen(string str) {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringSequence(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n    echo $(seq 0 $1)\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringSequence(long n) {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FileNameCheck(string file_name) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfile_name_check() {\n    suf=(txt exe dll)\n    lst=(${1//./ })\n    if [ ${#lst[@]} -ne 2 ]; then\n        echo \"No\"\n        return\n    fi\n    if [[ ! \" ${suf[@]} \" =~ \" ${lst[1]} \" ]]; then\n        echo \"No\"\n        return\n    fi\n    if [ ${#lst[0]} -eq 0 ] || [[ ! ${lst[0]:0:1} =~ [a-zA-Z] ]]; then\n        echo \"No\"\n        return\n    fi\n    t=$(echo ${lst[0]} | grep -o '[0-9]' | wc -l)\n    if [ $t -gt 3 ]; then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FileNameCheck(string file_name) {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CanArrange(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n  arr=($1)\n  ind=-1\n  i=1\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] < arr[i-1] )); then\n      ind=$i\n    fi\n    (( i++ ))\n  done\n  echo $ind\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CanArrange(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n    echo $1 | awk '{for(i=2;i<=NF;i+=2) if($i%2==0) sum+=$i} END {print sum}'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Intersperse((new List<long>()), (7L)).SequenceEqual((new List<long>())));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)2L})), (8L)).SequenceEqual((new List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)3L, (long)8L, (long)2L}))));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)2L, (long)2L, (long)2L})), (2L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n    if [ -z \"$1\" ]; then\n        return\n    fi\n\n    result=()\n\n    for n in ${1% *} ; do\n        result+=($n)\n        result+=($2)\n    done\n\n    result+=(${1##* })\n\n    echo \"${result[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MatchParens(List<string> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"()(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\")\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(())\", (string)\"())())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")())\", (string)\"(()()(\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(())))\", (string)\"(()())((\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"()\", (string)\"())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(\", (string)\"()))()\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"((((\", (string)\"((())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(()\", (string)\"(()(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(\", (string)\")(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\"(\"}))).Equals((\"Yes\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n    lst=($1)\n    S1=${lst[0]}${lst[1]}\n    S2=${lst[1]}${lst[0]}\n    if [[ $(echo $S1 | grep -o '(' | wc -l) -eq $(echo $S1 | grep -o ')' | wc -l) ]] || [[ $(echo $S2 | grep -o '(' | wc -l) -eq $(echo $S2 | grep -o ')' | wc -l) ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MatchParens(List<string> lst) {\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool AnyInt(float x, float y, float z) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(AnyInt((float)2L, (float)3L, (float)1L) == (true));\n    Debug.Assert(AnyInt((2.5f), (float)2L, (float)3L) == (false));\n    Debug.Assert(AnyInt((1.5f), (float)5L, (3.5f)) == (false));\n    Debug.Assert(AnyInt((float)2L, (float)6L, (float)2L) == (false));\n    Debug.Assert(AnyInt((float)4L, (float)2L, (float)2L) == (true));\n    Debug.Assert(AnyInt((2.2f), (2.2f), (2.2f)) == (false));\n    Debug.Assert(AnyInt((float)-4L, (float)6L, (float)2L) == (true));\n    Debug.Assert(AnyInt((float)2L, (float)1L, (float)1L) == (true));\n    Debug.Assert(AnyInt((float)3L, (float)4L, (float)7L) == (true));\n    Debug.Assert(AnyInt((3.0f), (float)4L, (float)7L) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  if [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n    if (( $1 + $2 == $3 )) || (( $1 + $3 == $2 )) || (( $2 + $3 == $1 )); then\n      echo true\n    else\n      echo false\n    fi\n  else\n    echo false\n  fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool AnyInt(float x, float y, float z) {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FindMax(List<string> words) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_max() {\n    echo $1 | tr ' ' '\\n' | sort -u | sort -rn | head -1\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FindMax(List<string> words) {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GenerateIntegers(long a, long b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GenerateIntegers((2L), (10L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((10L), (2L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((132L), (2L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((17L), (89L)).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n    lower=$(( $1 < $2 ? $1 : $2 ))\n    upper=$(( $1 > $2 ? $1 : $2 ))\n    lower=$(( $lower > 2 ? $lower : 2 ))\n    upper=$(( $upper < 8 ? $upper : 8 ))\n    for ((i=$lower; i<=$upper; i+=2)); do\n        echo $i\n    done\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GenerateIntegers(long a, long b) {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)4L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)5L, (long)7L, (long)3L})), (new List<long>(new long[]{(long)2L, (long)6L, (long)4L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)5L, (long)7L, (long)3L})), (new List<long>(new long[]{(long)2L, (long)6L, (long)3L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)3L, (long)2L, (long)6L, (long)1L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)5L, (long)1L, (long)1L, (long)1L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)100L, (long)200L})), (new List<long>(new long[]{(long)200L, (long)200L}))).Equals((\"YES\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    lst1=($1)\n    lst2=($2)\n    odd=0\n    even=0\n    for i in \"${lst1[@]}\"; do\n        if ((i%2 == 1)); then\n            odd=$((odd+1))\n        fi\n    done\n    for i in \"${lst2[@]}\"; do\n        if ((i%2 == 0)); then\n            even=$((even+1))\n        fi\n    done\n    if ((even >= odd)); then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string IntToMiniRoman(long number) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n    num=(1 4 5 9 10 40 50 90 100 400 500 900 1000)\n    sym=(\"I\" \"IV\" \"V\" \"IX\" \"X\" \"XL\" \"L\" \"XC\" \"C\" \"CD\" \"D\" \"CM\" \"M\")\n    i=12\n    res=\"\"\n    number=$1\n    while [ $number -ne 0 ]; do\n        div=$((number / num[i]))\n        number=$((number % num[i]))\n        while [ $div -ne 0 ]; do\n            res+=\"${sym[i]}\"\n            div=$((div - 1))\n        done\n        i=$((i - 1))\n    done\n    echo $res | tr '[:upper:]' '[:lower:]'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string IntToMiniRoman(long number) {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsEqualToSumEven(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsEqualToSumEven((4L)) == (false));\n    Debug.Assert(IsEqualToSumEven((6L)) == (false));\n    Debug.Assert(IsEqualToSumEven((8L)) == (true));\n    Debug.Assert(IsEqualToSumEven((10L)) == (true));\n    Debug.Assert(IsEqualToSumEven((11L)) == (false));\n    Debug.Assert(IsEqualToSumEven((12L)) == (true));\n    Debug.Assert(IsEqualToSumEven((13L)) == (false));\n    Debug.Assert(IsEqualToSumEven((16L)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n    if (( $1 % 2 == 0 && $1 >= 8 )); then\n        echo true\n    else\n        echo false\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsEqualToSumEven(long n) {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string DecimalToBinary(long decimalNum) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string DecimalToBinary(long decimalNum) {\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortThird(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)8L, (long)3L, (long)4L, (long)6L, (long)9L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)8L, (long)3L, (long)4L, (long)6L, (long)9L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)9L, (long)4L, (long)8L, (long)3L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)6L, (long)9L, (long)4L, (long)8L, (long)3L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L, (long)1L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_third() {\n    l=($1)\n    for (( i=2; i<${#l[@]}; i+=3 )); do\n        j=$((i-2))\n        while (( j>=0 && l[j+3]<l[j] )); do\n            tmp=${l[j]}\n            l[j]=${l[j+3]}\n            l[j+3]=$tmp\n            j=$((j-3))\n        done\n    done\n    echo \"${l[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortThird(List<long> l) {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Simplify(string x, string n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Simplify((\"1/5\"), (\"5/1\")) == (true));\n    Debug.Assert(Simplify((\"1/6\"), (\"2/1\")) == (false));\n    Debug.Assert(Simplify((\"5/1\"), (\"3/1\")) == (true));\n    Debug.Assert(Simplify((\"7/10\"), (\"10/2\")) == (false));\n    Debug.Assert(Simplify((\"2/10\"), (\"50/10\")) == (true));\n    Debug.Assert(Simplify((\"7/2\"), (\"4/2\")) == (true));\n    Debug.Assert(Simplify((\"11/6\"), (\"6/1\")) == (true));\n    Debug.Assert(Simplify((\"2/3\"), (\"5/2\")) == (false));\n    Debug.Assert(Simplify((\"5/2\"), (\"3/5\")) == (false));\n    Debug.Assert(Simplify((\"2/4\"), (\"8/4\")) == (true));\n    Debug.Assert(Simplify((\"2/4\"), (\"4/2\")) == (true));\n    Debug.Assert(Simplify((\"1/5\"), (\"5/1\")) == (true));\n    Debug.Assert(Simplify((\"1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n    IFS=\"/\" read -ra x <<< \"$1\"\n    IFS=\"/\" read -ra n <<< \"$2\"\n    numerator=$(( ${x[0]} * ${n[0]} ))\n    denom=$(( ${x[1]} * ${n[1]} ))\n    if (( $numerator % $denom == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Simplify(string x, string n) {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsolve() {\n    flg=0\n    idx=0\n    new_str=($1)\n    for i in $1; do\n        if [[ $i =~ [a-zA-Z] ]]; then\n            new_str[$idx]=$(echo $i | tr '[:upper:][:lower:]' '[:lower:][:upper:]')\n            flg=1\n        fi\n        ((idx++))\n    done\n    s=\"\"\n    for i in ${new_str[@]}; do\n        s+=$i\n    done\n    if [[ $flg -eq 0 ]]; then\n        echo $s | rev\n    else\n        echo $s\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(string s) {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool RightAngleTriangle(long a, long b, long c) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n    if [[ $(($1*$1)) -eq $(($2*$2+$3*$3)) || $(($2*$2)) -eq $(($1*$1+$3*$3)) || $(($3*$3)) -eq $(($1*$1+$2*$2)) ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool RightAngleTriangle(long a, long b, long c) {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowZero(List<long> operations) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n    balance=0\n    for op in $1; do\n        ((balance+=op))\n        if [[ $balance -lt 0 ]]; then\n            echo true\n            return 0\n        fi\n    done\n    echo false\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowZero(List<long> operations) {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GreatestCommonDivisor(long a, long b) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GreatestCommonDivisor((3L), (7L)) == (1L));\n    Debug.Assert(GreatestCommonDivisor((10L), (15L)) == (5L));\n    Debug.Assert(GreatestCommonDivisor((49L), (14L)) == (7L));\n    Debug.Assert(GreatestCommonDivisor((144L), (60L)) == (12L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n    a=$1\n    b=$2\n    while [[ $b -ne 0 ]]; do\n        tmp=$b\n        b=$((a%b))\n        a=$tmp\n    done\n    echo $a\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GreatestCommonDivisor(long a, long b) {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> F(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(F((5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L}))));\n    Debug.Assert(F((7L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L, (long)720L, (long)28L}))));\n    Debug.Assert(F((1L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(F((3L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)6L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n    ret=()\n    for ((i=1;i<=$1;i++)); do\n        if ((i%2==0)); then\n            x=1\n            for ((j=1;j<=i;j++)); do ((x*=j)); done\n            ret+=($x)\n        else\n            x=0\n            for ((j=1;j<=i;j++)); do ((x+=j)); done\n            ret+=($x)\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> F(long n) {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Monotonic(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmonotonic() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local sorted_arr_reverse=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -nr))\n    if [[ \"${arr[*]}\" == \"${sorted_arr[*]}\" ]] || [[ \"${arr[*]}\" == \"${sorted_arr_reverse[*]}\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Monotonic(List<long> l) {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> ByLength(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).SequenceEqual((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).SequenceEqual((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).SequenceEqual((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).SequenceEqual((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).SequenceEqual((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n    dic=( One Two Three Four Five Six Seven Eight Nine )\n    sorted_arr=($(echo \"$1\" | tr ' ' '\\n' | sort -nr))\n    new_arr=()\n    for var in \"${sorted_arr[@]}\"; do\n        if [[ $var -ge 1 && $var -le 9 ]]; then\n            new_arr+=(\"${dic[var-1]}\")\n        fi\n    done\n    echo \"${new_arr[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> ByLength(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string RemoveVowels(string text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(RemoveVowels((\"\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"abcdef\\nghijklm\")).Equals((\"bcdf\\nghjklm\")));\n    Debug.Assert(RemoveVowels((\"fedcba\")).Equals((\"fdcb\")));\n    Debug.Assert(RemoveVowels((\"eeeee\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"acBAA\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"EcBOO\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"ybcd\")).Equals((\"ybcd\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n  echo $1 | tr -d 'aeiouAEIOU'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string RemoveVowels(string text) {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pi e\")) == (true));\n    Debug.Assert(CheckIfLastCharIsALetter((\"eeeee\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"A\")) == (true));\n    Debug.Assert(CheckIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"eeeee e \")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pie\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  check=$(echo $1 | awk '{print $NF}')\n  if [[ ${#check} -eq 1 && $(printf '%d' \"'${check,,}\") -ge 97 && $(printf '%d' \"'${check,,}\") -le 122 ]]; then\n    echo true\n  else\n    echo false\n  fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Iscube(long a) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n    a=$(echo $1 | tr -d '-')\n    if [ $(echo \"scale=0; $a^(1/3)\" | bc) -eq $a ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Iscube(long a) {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    s=$(echo $1 | tr -d $2)\n    if [ $s = $(echo $s | rev) ]; then\n        echo \"$s true\"\n    else\n        echo \"$s false\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n    depth=0\n    for (( i=0; i<${#1}; i++ )); do\n        b=${1:$i:1}\n        if [[ $b == \"<\" ]]; then\n            (( depth++ ))\n        else\n            (( depth-- ))\n        fi\n        if (( depth < 0 )); then\n            echo \"false\"\n            return\n        fi\n    done\n    if (( depth == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L, 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L, 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L, -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    is_prime() {\n        if [ $1 -eq 1 ] || [ $1 -eq 0 ]; then\n            return 1\n        fi\n        if [ $1 -eq 2 ]; then\n            return 0\n        fi\n        for (( i=2; i<$1; i++ )); do\n            if [ $(( $1 % $i )) -eq 0 ]; then\n                return 1\n            fi\n        done\n        return 0\n    }\n\n    l=$(echo $1 | cut -d' ' -f1)\n    r=$(echo $2 | cut -d' ' -f2)\n    length=$(( $r - $l ))\n    if [ $length -gt 0 ] && is_prime $length; then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HexKey(string num) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n    primes=\"2357BD\"\n    total=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ $primes == *\"${1:i:1}\"* ]]; then\n            (( total++ ))\n        fi\n    done\n    echo $total\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HexKey(string num) {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> StrangeSortList(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L, (long)-5L}))).SequenceEqual((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)111111L}))).SequenceEqual((new List<long>(new long[]{(long)111111L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local lst=$1\n    local res=()\n    local switch=true\n    while [ -n \"$lst\" ]; do\n        if $switch; then\n            res+=($(echo $lst | tr ' ' '\\n' | sort -n | head -n 1))\n        else\n            res+=($(echo $lst | tr ' ' '\\n' | sort -n | tail -n 1))\n        fi\n        lst=$(echo $lst | sed \"s/${res[-1]}//\")\n        switch=!$switch\n    done\n    echo \"${res[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> StrangeSortList(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long IsBored(string S) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for a walk\")) == (0L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n    # TODO: Implement this function.\n    echo 0\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long IsBored(string S) {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> AllPrefixes(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).SequenceEqual((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).SequenceEqual((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).SequenceEqual((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nall_prefixes() {\n    result=()\n    for (( i=0; i<${#1}; i++ )); do\n        result+=(${1:0:i+1})\n    done\n    echo ${result[@]}\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> AllPrefixes(string str) {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HowManyTimes(string str, string substring) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    times=0\n    for ((i=0; i<${#1}-${#2}+1; i++)); do\n        if [[ ${1:i:${#2}} == $2 ]]; then\n            ((times++))\n        fi\n    done\n    echo $times\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HowManyTimes(string str, string substring) {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Solution(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n    echo $1 | tr ' ' '\\n' | awk '{if(NR%2==1&&$1%2==1)sum+=$1}END{print sum}'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Solution(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSorted(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n    lst=($1)\n    declare -A count_digit\n    for i in \"${lst[@]}\"; do\n        ((count_digit[$i]++))\n    done\n    for i in \"${lst[@]}\"; do\n        if [[ ${count_digit[$i]} -gt 2 ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    for (( i=1; i<${#lst[@]}; i++ )); do\n        if [[ ${lst[i-1]} -gt ${lst[i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSorted(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Search(List<long> lst) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L, (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L, (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L, (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L, (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L, (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L, (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L, (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L, (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L, (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n    lst=($1)\n    frq=()\n    for i in ${lst[@]}; do\n        frq[$i]=$((frq[$i]+1))\n    done\n\n    ans=-1\n    for ((i=1; i<${#frq[@]}; i++)); do\n        if [[ ${frq[$i]} -ge $i ]]; then\n            ans=$i\n        fi\n    done\n\n    echo $ans\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Search(List<long> lst) {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Pluck(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).SequenceEqual((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npluck() {\n    local arr=($1)\n    local evens=($(echo \"${arr[@]}\" | tr ' ' '\\n' | awk '{if($1%2==0) print $1}' | sort -n))\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"\"\n    else\n        echo \"${evens[0]} $(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -n \"${evens[0]}\" | cut -d':' -f1 | head -n1)\"\n    fi\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Pluck(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PairsSumToZero(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n    l=($1)\n    for ((i=0; i<${#l[@]}; i++)); do\n        for ((j=i+1; j<${#l[@]}; j++)); do\n            if ((l[i] + l[j] == 0)); then\n                echo true\n                return\n            fi\n        done\n    done\n    echo false\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PairsSumToZero(List<long> l) {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MakePalindrome(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MakePalindrome((\"\")).Equals((\"\")));\n    Debug.Assert(MakePalindrome((\"x\")).Equals((\"x\")));\n    Debug.Assert(MakePalindrome((\"xyz\")).Equals((\"xyzyx\")));\n    Debug.Assert(MakePalindrome((\"xyx\")).Equals((\"xyx\")));\n    Debug.Assert(MakePalindrome((\"jerry\")).Equals((\"jerryrrej\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nmake_palindrome() {\n    local string=$1\n    local beginning_of_suffix=0\n\n    while [[ ${string:$beginning_of_suffix} != $(echo ${string:$beginning_of_suffix} | rev) ]]; do\n        ((beginning_of_suffix++))\n    done\n\n    echo \"$string$(echo ${string:0:$beginning_of_suffix} | rev)\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MakePalindrome(string str) {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long StartsOneEnds(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n    if [[ $1 -eq 1 ]]; then echo 1; return; fi\n    echo $(( 18 * (10 ** ($1 - 2)) ))\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long StartsOneEnds(long n) {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetPositive(List<long> l) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L, (long)4L, (long)5L, (long)6L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)3L, (long)9L, (long)123L, (long)1L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L}))).SequenceEqual((new List<long>())));\n    Debug.Assert(GetPositive((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n  echo $1 | tr ' ' '\\n' | awk '$1 > 0 {print $1}'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetPositive(List<long> l) {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Concatenate(List<string> strings) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Concatenate((new List<string>())).Equals((\"\")));\n    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"xyz\")));\n    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\", (string)\"w\", (string)\"k\"}))).Equals((\"xyzwk\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n    echo \"$1\" | tr -d ' '\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Concatenate(List<string> strings) {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsNested(string str) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"[[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"[]\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"[][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n    Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"[[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n    Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\")) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_nested() {\n    string=$1\n    opening_bracket_index=()\n    closing_bracket_index=()\n    for (( i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} == \"[\" ]]; then\n            opening_bracket_index+=($i)\n        else\n            closing_bracket_index+=($i)\n        fi\n    done\n    closing_bracket_index=($(echo \"${closing_bracket_index[@]}\" | tr ' ' '\\n' | tac | tr '\\n' ' '))\n    cnt=0\n    i=0\n    l=${#closing_bracket_index[@]}\n    for idx in ${opening_bracket_index[@]}; do\n        if [[ $i -lt $l && $idx -lt ${closing_bracket_index[$i]} ]]; then\n            cnt=$((cnt+1))\n            i=$((i+1))\n        fi\n    done\n    [[ $cnt -ge 2 ]] && echo true || echo false\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsNested(string str) {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPalindrome(string text) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n    text=$1\n    for (( i=0; i<${#text}; i++ )); do\n        if [[ ${text:i:1} != ${text: -1 -i:1} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPalindrome(string text) {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountNums(List<long> arr) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncount_nums() {\n    local arr=($1)\n    local count=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n            local digits_sum=$(echo $i | sed 's/./&+/g' | sed 's/.$//' | bc)\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountNums(List<long> arr) {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Factorize(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).SequenceEqual((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((20577L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n    n=$1\n    fact=()\n    i=2\n    while [[ $i -le $((n/2+1)) ]]; do\n        if [[ $((n%i)) -eq 0 ]]; then\n            fact+=($i)\n            n=$((n/i))\n        else\n            ((i++))\n        fi\n    done\n    if [[ $n -gt 1 ]]; then\n        fact+=($n)\n    fi\n    echo \"${fact[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Factorize(long n) {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestPrimeFactor(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n    largest=1\n    for ((j=2; j<=$1; j++)); do\n        if (( $1 % $j == 0 )) && is_prime $j; then\n            largest=$(( $largest > $j ? $largest : $j ))\n        fi\n    done\n    echo $largest\n}\n\nis_prime() {\n    if (( $1 < 2 )); then\n        return 1\n    fi\n    for ((i=2; i<$1; i++)); do\n        if (( $1 % $i == 0 )); then\n            return 1\n        fi\n    done\n    return 0\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestPrimeFactor(long n) {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GetMaxTriples(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n    n=$1\n    ans=0\n    for (( i=1; i<n; i++ )); do\n        for (( j=i+1; j<n; j++ )); do\n            for (( k=j+1; k<=n; k++ )); do\n                if (( (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 )); then\n                    (( ans++ ))\n                fi\n            done\n        done\n    done\n    echo \"$ans\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GetMaxTriples(long n) {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string AntiShuffle(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nanti_shuffle() {\n  echo \"$1\" | tr ' ' '\\n' | while read word; do\n    echo \"$word\" | grep -o . | sort | tr -d '\\n'\n    echo -n ' '\n  done | sed 's/ $//'\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string AntiShuffle(string s) {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(long N) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n    echo \"obase=2; $(echo $1 | sed 's/./&+/g; s/.$//')\" | bc\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(long N) {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})})), (3L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)9L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)2L})})), (1L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L}), (List<long>)new List<long>(new long[]{(long)13L, (long)14L, (long)15L, (long)16L})})), (4L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)13L, (long)10L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L, (long)12L, (long)1L}), (List<long>)new List<long>(new long[]{(long)3L, (long)16L, (long)11L, (long)15L}), (List<long>)new List<long>(new long[]{(long)8L, (long)14L, (long)9L, (long)2L})})), (7L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)10L, (long)1L, (long)10L, (long)1L, (long)10L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)14L, (long)9L, (long)2L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)13L, (long)15L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)12L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L, (long)11L, (long)16L})})), (5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)7L, (long)1L, (long)7L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)7L, (long)2L}), (List<long>)new List<long>(new long[]{(long)5L, (long)16L, (long)14L, (long)4L}), (List<long>)new List<long>(new long[]{(long)9L, (long)3L, (long)15L, (long)6L}), (List<long>)new List<long>(new long[]{(long)12L, (long)13L, (long)10L, (long)1L})})), (9L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)12L, (long)13L, (long)10L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)3L, (long)15L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)16L, (long)14L, (long)4L}), (List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)7L, (long)2L})})), (12L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)1L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)8L, (long)9L})})), (8L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)1L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)4L})})), (8L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)1L, (long)5L, (long)1L, (long)5L, (long)1L, (long)5L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L})})), (10L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L})})), (10L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=($(echo \"$1\" | tr ' ' '\\n'))\n    local k=$2\n    local n=${#grid[@]}\n    local val=$((n * n + 1))\n    for (( i=0; i<$n; i++ )); do\n        for (( j=0; j<$n; j++ )); do\n            if [[ ${grid[$i]:$j:1} -eq 1 ]]; then\n                temp=()\n                if [[ $i -ne 0 ]]; then\n                    temp+=(${grid[$((i-1))]:$j:1})\n                fi\n                if [[ $j -ne 0 ]]; then\n                    temp+=(${grid[$i]:$((j-1)):1})\n                fi\n                if [[ $i -ne $((n-1)) ]]; then\n                    temp+=(${grid[$((i+1))]:$j:1})\n                fi\n                if [[ $j -ne $((n-1)) ]]; then\n                    temp+=(${grid[$i]:$((j+1)):1})\n                fi\n                val=$(echo \"${temp[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n            fi\n        done\n    done\n    ans=()\n    for (( i=0; i<$k; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            ans+=(\"1\")\n        else\n            ans+=(\"$val\")\n        fi\n    done\n    echo \"${ans[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Encrypt(string s) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n    Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n    Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nencrypt() {\n    d='abcdefghijklmnopqrstuvwxyz'\n    out=''\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $d == *\"$c\"* ]]; then\n            out+=\"${d:(( ${d%%$c*} + 4 ) % 26 ):1}\"\n        else\n            out+=\"$c\"\n        fi\n    done\n    echo \"$out\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Encrypt(string s) {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> MakeAPile(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(MakeAPile((3L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(MakeAPile((4L)).SequenceEqual((new List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(MakeAPile((5L)).SequenceEqual((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)11L, (long)13L}))));\n    Debug.Assert(MakeAPile((6L)).SequenceEqual((new List<long>(new long[]{(long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)16L}))));\n    Debug.Assert(MakeAPile((8L)).SequenceEqual((new List<long>(new long[]{(long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)18L, (long)20L, (long)22L}))));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n    n=$1\n    for (( i=0; i<$n; i++ )); do\n        (( pile[i]=n+2*i ))\n    done\n    echo \"${pile[@]}\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> MakeAPile(long n) {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "cs",
    "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPrime(long n) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "public static void Main",
      "static void Main",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n    if [ $1 -lt 2 ]; then\n        echo \"false\"\n        return\n    fi\n    for (( k=2; k<$1; k++ )); do\n        if [ $(( $1 % $k )) -eq 0 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPrime(long n) {\n"
  }
]