[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "pl",
    "prompt": "sub correct_bracketing {\n    my($brackets) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"()\"),1) || $candidate->(\"()\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1) || $candidate->(\"(()())\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()\"),1) || $candidate->(\"()()(()())()\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1) || $candidate->(\"()()((()()())())(()()(()))\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((()())))\"),\"\") || $candidate->(\"((()())))\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")(()\"),\"\") || $candidate->(\")(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\") || $candidate->(\"(\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((((\"),\"\") || $candidate->(\"((((\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")\"),\"\") || $candidate->(\")\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\") || $candidate->(\"(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())())(()\"),\"\") || $candidate->(\"()()(()())())(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\") || $candidate->(\"()()(()())()))()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n        var depth = 0;\n        foreach (var b in brackets) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n\n### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "pl",
    "prompt": "sub triangle_area {\n    my($a, $h) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(5, 3),7.5) || $candidate->(5, 3)==7.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2),2.0) || $candidate->(2, 2)==2.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 8),40.0) || $candidate->(10, 8)==40.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long h) {\n        return a * h / 2.0f;\n    }\n}\n\n### Perl version\n\nsub triangle_area {\n    my($a, $h) = @_;\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "pl",
    "prompt": "sub special_factorial {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288) || $candidate->(4)==288) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560) || $candidate->(5)==34560) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000) || $candidate->(7)==125411328000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SpecialFactorial(long n) {\n        long fact_i = 1;\n        long special_fact = 1;\n        for (long i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}\n\n### Perl version\n\nsub special_factorial {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "pl",
    "prompt": "sub move_one_ball {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1) || $candidate->([3, 4, 5, 1, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1) || $candidate->([3, 5, 10, 1, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 1, 2]),\"\") || $candidate->([4, 3, 1, 2])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\") || $candidate->([3, 5, 4, 1, 2])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1) || $candidate->([])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sorted_array = arr.OrderBy(x => x).ToList();\n        var my_arr = new List<long>();\n        var min_value = arr.Min();\n        var min_index = arr.IndexOf(min_value);\n        my_arr = arr.Skip(min_index).Concat(arr.Take(min_index)).ToList();\n        for (int i = 0; i < arr.Count; i++) {\n            if (my_arr[i] != sorted_array[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Perl version\n\nsub move_one_ball {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "pl",
    "prompt": "sub digits {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5) || $candidate->(5)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5) || $candidate->(54)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1) || $candidate->(120)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5) || $candidate->(5014)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315) || $candidate->(98765)==315) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625) || $candidate->(5576543)==2625) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0) || $candidate->(2468)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digits(long n) {\n        long product = 1;\n        long odd_count = 0;\n        foreach (var digit in n.ToString()) {\n            var int_digit = int.Parse(digit.ToString());\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        return odd_count == 0 ? 0 : product;\n    }\n}\n\n### Perl version\n\nsub digits {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "pl",
    "prompt": "sub fib4 {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4) || $candidate->(5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28) || $candidate->(8)==28) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104) || $candidate->(10)==104) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386) || $candidate->(12)==386) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib4(long n) {\n        var results = new List<long> { 0, 0, 2, 0 };\n        if (n < 4) {\n            return results[(int)n];\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.Add(results[^1] + results[^2] + results[^3] + results[^4]);\n            results.RemoveAt(0);\n        }\n\n        return results[^1];\n    }\n}\n\n### Perl version\n\nsub fib4 {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "pl",
    "prompt": "sub order_by_points {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]) || $candidate->([1, 11, -1, -11, -12])==[-1, -11, 1, -12, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]) || $candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])==[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]) || $candidate->([1, -11, -32, 43, 54, -98, 2, -3])==[-3, -32, -98, -11, 1, 2, 43, 54]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]) || $candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])==[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]) || $candidate->([0, 6, 6, -76, -21, 23, 4])==[-76, -21, 0, 4, 23, 6, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> OrderByPoints(List<long> nums) {\n        Func<long, long> digits_sum = (long n) => {\n            long neg = 1;\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            var n_list = n.ToString().Select(x => long.Parse(x.ToString())).ToList();\n            n_list[0] = n_list[0] * neg;\n            return n_list.Sum();\n        };\n        return nums.OrderBy(digits_sum).ToList();\n    }\n}\n\n### Perl version\n\nsub order_by_points {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "pl",
    "prompt": "sub is_happy {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\") || $candidate->(\"a\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\") || $candidate->(\"aa\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1) || $candidate->(\"abcd\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\") || $candidate->(\"aabb\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1) || $candidate->(\"adb\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\") || $candidate->(\"xyy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1) || $candidate->(\"iopaxpoi\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\") || $candidate->(\"iopaxioi\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n### Perl version\n\nsub is_happy {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "pl",
    "prompt": "sub circular_shift {\n    my($x, $shift) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n        if(eq_deeply($candidate->(100, 2),\"001\") || $candidate->(100, 2)==\"001\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\") || $candidate->(12, 2)==\"12\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97, 8),\"79\") || $candidate->(97, 8)==\"79\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 1),\"21\") || $candidate->(12, 1)==\"21\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\") || $candidate->(11, 101)==\"11\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string CircularShift(long x, long shift) {\n        var s = x.ToString();\n        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n        } else {\n            return s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift);\n        }\n    }\n}\n\n### Perl version\n\nsub circular_shift {\n    my($x, $shift) = @_;\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "pl",
    "prompt": "sub max_fill {\n    my($grid, $capacity) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_fill;\n        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6) || $candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5) || $candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0) || $candidate->([[0, 0, 0], [0, 0, 0]], 5)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4) || $candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2) || $candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxFill(List<List<long>> grid, long capacity) {\n        return grid.Sum(arr => (long)Math.Ceiling(arr.Sum() / (double)capacity));\n    }\n}\n\n### Perl version\n\nsub max_fill {\n    my($grid, $capacity) = @_;\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "pl",
    "prompt": "sub has_close_elements {\n    my($numbers, $threshold) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1) || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\") || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1) || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\") || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1) || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\"\") || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = 0; j < numbers.Count; j++) {\n                if (i != j) {\n                    float distance = Math.Abs(numbers[i] - numbers[j]);\n                    if (distance < threshold) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\n### Perl version\n\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "pl",
    "prompt": "sub x_or_y {\n    my($n, $x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&x_or_y;\n        if(eq_deeply($candidate->(7, 34, 12),34) || $candidate->(7, 34, 12)==34) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 5),5) || $candidate->(15, 8, 5)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 33, 5212),33) || $candidate->(3, 33, 5212)==33) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1259, 3, 52),3) || $candidate->(1259, 3, 52)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7919, -1, 12),-1) || $candidate->(7919, -1, 12)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3609, 1245, 583),583) || $candidate->(3609, 1245, 583)==583) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(91, 56, 129),129) || $candidate->(91, 56, 129)==129) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 34, 1234),1234) || $candidate->(6, 34, 1234)==1234) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 0),0) || $candidate->(1, 2, 0)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 0),2) || $candidate->(2, 2, 0)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long XOrY(long n, long x, long y) {\n        if (n == 1) {\n            return y;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n\n### Perl version\n\nsub x_or_y {\n    my($n, $x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "pl",
    "prompt": "sub specialFilter {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&specialFilter;\n        if(eq_deeply($candidate->([5, -2, 1, -5]),0) || $candidate->([5, -2, 1, -5])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, -73, 14, -15]),1) || $candidate->([15, -73, 14, -15])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2) || $candidate->([33, -2, -3, 45, 21, 109])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4) || $candidate->([43, -12, 93, 125, 121, 109])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3) || $candidate->([71, -2, -33, 75, 21, 19])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0) || $candidate->([1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Specialfilter(List<long> nums) {\n        long count = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n                int[] odd_digits = { 1, 3, 5, 7, 9 };\n                string number_as_string = num.ToString();\n                if (odd_digits.Contains(int.Parse(number_as_string[0].ToString())) && odd_digits.Contains(int.Parse(number_as_string.Last().ToString()))) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n\n### Perl version\n\nsub specialFilter {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "pl",
    "prompt": "sub parse_music {\n    my($music_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_music;\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o o o o\"),[4, 4, 4, 4]) || $candidate->(\"o o o o\")==[4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".| .| .| .|\"),[1, 1, 1, 1]) || $candidate->(\".| .| .| .|\")==[1, 1, 1, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]) || $candidate->(\"o| o| .| .| o o o o\")==[2, 2, 1, 1, 4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]) || $candidate->(\"o| .| o| .| o o| o o|\")==[2, 1, 2, 1, 4, 2, 4, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseMusic(string music_string) {\n        var note_map = new Dictionary<string, long> { { \"o\", 4 }, { \"o|\", 2 }, { \".|\", 1 } };\n        return music_string.Split(' ').Where(x => x != \"\").Select(x => note_map[x]).ToList();\n    }\n}\n\n### Perl version\n\nsub parse_music {\n    my($music_string) = @_;\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "pl",
    "prompt": "sub count_distinct_characters {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5) || $candidate->(\"abcde\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdecadeCADE\"),5) || $candidate->(\"abcdecadeCADE\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1) || $candidate->(\"aaaaAAAAaaaa\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry jERRY JeRRRY\"),5) || $candidate->(\"Jerry jERRY JeRRRY\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n}\n\n### Perl version\n\nsub count_distinct_characters {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "pl",
    "prompt": "sub bf {\n    my($planet1, $planet2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n        if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]) || $candidate->(\"Jupiter\", \"Neptune\")==[\"Saturn\", \"Uranus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Mercury\"),[\"Venus\"]) || $candidate->(\"Earth\", \"Mercury\")==[\"Venus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]) || $candidate->(\"Mercury\", \"Uranus\")==[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]) || $candidate->(\"Neptune\", \"Venus\")==[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Earth\"),[]) || $candidate->(\"Earth\", \"Earth\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[]) || $candidate->(\"Mars\", \"Earth\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jupiter\", \"Makemake\"),[]) || $candidate->(\"Jupiter\", \"Makemake\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> Bf(string planet1, string planet2) {\n        var planet_names = new List<string> {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if (!planet_names.Contains(planet1) || !planet_names.Contains(planet2) || planet1 == planet2) {\n            return new List<string>();\n        }\n        var planet1_index = planet_names.IndexOf(planet1);\n        var planet2_index = planet_names.IndexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.GetRange(planet1_index + 1, planet2_index - planet1_index - 1);\n        } else {\n            return planet_names.GetRange(planet2_index + 1, planet1_index - planet2_index - 1);\n        }\n    }\n}\n\n### Perl version\n\nsub bf {\n    my($planet1, $planet2) = @_;\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "pl",
    "prompt": "sub digitSum {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digitSum;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abAB\"),131) || $candidate->(\"abAB\")==131) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcCd\"),67) || $candidate->(\"abcCd\")==67) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"helloE\"),69) || $candidate->(\"helloE\")==69) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"woArBld\"),131) || $candidate->(\"woArBld\")==131) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aAaaaXa\"),153) || $candidate->(\"aAaaaXa\")==153) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" How are yOu?\"),151) || $candidate->(\" How are yOu?\")==151) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You arE Very Smart\"),327) || $candidate->(\"You arE Very Smart\")==327) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Digitsum(string s) {\n        if (s == \"\") return 0;\n        return s.Sum(c => char.IsUpper(c) ? c : 0);\n    }\n}\n\n### Perl version\n\nsub digitSum {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "pl",
    "prompt": "sub sum_squares {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1, 2, 3]),6) || $candidate->([1, 2, 3])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 9]),14) || $candidate->([1, 4, 9])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9) || $candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1])==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3) || $candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1])==-3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),0) || $candidate->([0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126) || $candidate->([-1, -5, 2, -1, -5])==-126) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030) || $candidate->([-56, -99, 1, 0, -2])==3030) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0) || $candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196) || $candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])==-14196) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448) || $candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])==-1448) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<long> lst) {\n        var result = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result.Add(lst[i] * lst[i]);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                result.Add(lst[i] * lst[i] * lst[i]);\n            } else {\n                result.Add(lst[i]);\n            }\n        }\n        return result.Sum();\n    }\n}\n\n### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "pl",
    "prompt": "sub count_up_to {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_up_to;\n        if(eq_deeply($candidate->(5),[2, 3]) || $candidate->(5)==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[2, 3, 5]) || $candidate->(6)==[2, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[2, 3, 5]) || $candidate->(7)==[2, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),[2, 3, 5, 7]) || $candidate->(10)==[2, 3, 5, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[]) || $candidate->(0)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19]) || $candidate->(22)==[2, 3, 5, 7, 11, 13, 17, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[]) || $candidate->(1)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17]) || $candidate->(18)==[2, 3, 5, 7, 11, 13, 17]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) || $candidate->(47)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) || $candidate->(101)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> CountUpTo(long n) {\n        var primes = new List<long>();\n        for (long i = 2; i < n; i++) {\n            bool is_prime = true;\n            for (long j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.Add(i);\n            }\n        }\n        return primes;\n    }\n}\n\n### Perl version\n\nsub count_up_to {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "pl",
    "prompt": "sub sum_squares {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14) || $candidate->([1.0, 2.0, 3.0])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14) || $candidate->([1.0, 2.0, 3.0])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84) || $candidate->([1.0, 3.0, 5.0, 7.0])==84) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29) || $candidate->([1.4, 4.2, 0.0])==29) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6) || $candidate->([-2.4, 1.0, 1.0])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230) || $candidate->([100.0, 1.0, 15.0, 2.0])==10230) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000) || $candidate->([10000.0, 10000.0])==200000000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75) || $candidate->([-1.4, 4.6, 6.3])==75) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086) || $candidate->([-1.4, 17.9, 18.9, 19.9])==1086) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0) || $candidate->([0.0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1) || $candidate->([-1.0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2) || $candidate->([-1.0, 1.0, 0.0])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumSquares(List<float> lst) {\n        long squared = 0;\n        foreach (float i in lst) {\n            squared += (long)Math.Pow(Math.Ceiling(i), 2);\n        }\n        return squared;\n    }\n}\n\n### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "pl",
    "prompt": "sub unique {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]) || $candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123])==[0, 2, 3, 5, 9, 123]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Unique(List<long> l) {\n        return l.Distinct().OrderBy(x => x).ToList();\n    }\n}\n\n### Perl version\n\nsub unique {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "pl",
    "prompt": "sub fib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55) || $candidate->(10)==55) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21) || $candidate->(8)==21) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89) || $candidate->(11)==89) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144) || $candidate->(12)==144) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fib(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return Fib(n - 1) + Fib(n - 2);\n    }\n}\n\n### Perl version\n\nsub fib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "pl",
    "prompt": "sub fizz_buzz {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fizz_buzz;\n        if(eq_deeply($candidate->(50),0) || $candidate->(50)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(78),2) || $candidate->(78)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(79),3) || $candidate->(79)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),3) || $candidate->(100)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),6) || $candidate->(200)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4000),192) || $candidate->(4000)==192) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10000),639) || $candidate->(10000)==639) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100000),8026) || $candidate->(100000)==8026) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FizzBuzz(long n) {\n        var ns = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                ns.Add(i);\n            }\n        }\n        var s = string.Join(\"\", ns.Select(x => x.ToString()));\n        return s.Count(x => x == '7');\n    }\n}\n\n### Perl version\n\nsub fizz_buzz {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "pl",
    "prompt": "sub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\") || $candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"])==\"Watashi.eIGHt8OKe\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\") || $candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"])==\"Boku123.YEs.WeCaNe\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\") || $candidate->(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"])==\"__YESIMHERE.NuLl__\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\") || $candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"])==\"K.TAR\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\") || $candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"])==\"__HAHA.123\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\") || $candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"])==\"YameRore.okIWILL123\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\") || $candidate->(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"])==\"finNNalLLly.WoW\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\") || $candidate->(\"_\", [\"Bb\", \"91245\"])==\"_.Bb\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\") || $candidate->(\"Sp\", [\"671235\", \"Bb\"])==\"Sp.671235\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n        var strong = extensions[0];\n        var my_val = extensions[0].Count(x => char.IsUpper(x)) - extensions[0].Count(x => char.IsLower(x));\n        foreach (var s in extensions) {\n            var val = s.Count(x => char.IsUpper(x)) - s.Count(x => char.IsLower(x));\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n\n        return $\"{class_name}.{strong}\";\n    }\n}\n\n### Perl version\n\nsub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "pl",
    "prompt": "sub find_closest_elements {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]) || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])==[3.9, 4.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]) || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0])==[5.0, 5.9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])==[2.0, 2.2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])==[2.0, 2.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]) || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1])==[2.2, 3.1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n        Tuple<float, float> closest_pair = null;\n        float distance = float.PositiveInfinity;\n\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                float new_distance = Math.Abs(numbers[i] - numbers[j]);\n                if (new_distance < distance) {\n                    distance = new_distance;\n                    closest_pair = Tuple.Create(Math.Min(numbers[i], numbers[j]), Math.Max(numbers[i], numbers[j]));\n                }\n            }\n        }\n\n        return closest_pair;\n    }\n}\n\n### Perl version\n\nsub find_closest_elements {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "pl",
    "prompt": "sub valid_date {\n    my($date) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n        if(eq_deeply($candidate->(\"03-11-2000\"),1) || $candidate->(\"03-11-2000\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"),\"\") || $candidate->(\"15-01-2012\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-0-2040\"),\"\") || $candidate->(\"04-0-2040\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-04-2020\"),1) || $candidate->(\"06-04-2020\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"),1) || $candidate->(\"01-01-2007\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"03-32-2011\"),\"\") || $candidate->(\"03-32-2011\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\") || $candidate->(\"04-31-3000\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-06-2005\"),1) || $candidate->(\"06-06-2005\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"21-31-2000\"),\"\") || $candidate->(\"21-31-2000\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"),1) || $candidate->(\"04-12-2003\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04122003\"),\"\") || $candidate->(\"04122003\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"20030412\"),\"\") || $candidate->(\"20030412\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"),\"\") || $candidate->(\"2003-04\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04-12\"),\"\") || $candidate->(\"2003-04-12\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-2003\"),\"\") || $candidate->(\"04-2003\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool ValidDate(string date) {\n        try {\n            date = date.Trim();\n            int[] parts = date.Split('-').Select(int.Parse).ToArray();\n            int month = parts[0], day = parts[1], year = parts[2];\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (new int[] {1,3,5,7,8,10,12}.Contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (new int[] {4,6,9,11}.Contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n        } catch {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n### Perl version\n\nsub valid_date {\n    my($date) = @_;\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "pl",
    "prompt": "sub add {\n    my($x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->(0, 1),1) || $candidate->(0, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 0),1) || $candidate->(1, 0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),5) || $candidate->(2, 3)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 7),12) || $candidate->(5, 7)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),12) || $candidate->(7, 5)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(long x, long y) {\n        return x + y;\n    }\n}\n\n### Perl version\n\nsub add {\n    my($x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "pl",
    "prompt": "sub triples_sum_to_zero {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\") || $candidate->([1, 3, 5, 0])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -1]),\"\") || $candidate->([1, 3, 5, -1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),1) || $candidate->([1, 3, -2, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\") || $candidate->([1, 2, 3, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 7]),\"\") || $candidate->([1, 2, 5, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1) || $candidate->([2, 4, -5, 3, 9, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\") || $candidate->([1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -100]),\"\") || $candidate->([1, 3, 5, -100])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\") || $candidate->([100, 3, 5, -100])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool TriplesSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Perl version\n\nsub triples_sum_to_zero {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "pl",
    "prompt": "sub largest_divisor {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n        if(eq_deeply($candidate->(3),1) || $candidate->(3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1) || $candidate->(7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5) || $candidate->(10)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50) || $candidate->(100)==50) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7) || $candidate->(49)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 0;\n    }\n}\n\n### Perl version\n\nsub largest_divisor {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "pl",
    "prompt": "sub sort_numbers {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\") || $candidate->(\"three\")==\"three\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\") || $candidate->(\"three five nine\")==\"three five nine\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"),\"zero four five seven eight nine\") || $candidate->(\"five zero four seven nine eight\")==\"zero four five seven eight nine\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three two one zero\"),\"zero one two three four five six\") || $candidate->(\"six five four three two one zero\")==\"zero one two three four five six\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string SortNumbers(string numbers) {\n        var value_map = new Dictionary<string, int> {\n            {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\", 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n            {\"nine\", 9}\n        };\n        return string.Join(\" \", numbers.Split(' ').Where(x => x != \"\").OrderBy(x => value_map[x]));\n    }\n}\n\n### Perl version\n\nsub sort_numbers {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "pl",
    "prompt": "sub smallest_change {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&smallest_change;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4) || $candidate->([1, 2, 3, 5, 4, 7, 9, 6])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1) || $candidate->([1, 2, 3, 4, 3, 2, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2]),1) || $candidate->([1, 4, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 4, 2]),1) || $candidate->([1, 4, 4, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0) || $candidate->([1, 2, 3, 2, 1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 1, 1, 3]),0) || $candidate->([3, 1, 1, 3])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0) || $candidate->([1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1) || $candidate->([0, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SmallestChange(List<long> arr) {\n        long ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n    \n}\n\n### Perl version\n\nsub smallest_change {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "pl",
    "prompt": "sub below_threshold {\n    my($l, $t) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_threshold;\n        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1) || $candidate->([1, 2, 4, 10], 100)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 5),\"\") || $candidate->([1, 20, 4, 10], 5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1) || $candidate->([1, 20, 4, 10], 21)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1) || $candidate->([1, 20, 4, 10], 22)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1) || $candidate->([1, 8, 4, 10], 11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 10),\"\") || $candidate->([1, 8, 4, 10], 10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowThreshold(List<long> l, long t) {\n        return l.All(x => x < t);\n    }\n}\n\n### Perl version\n\nsub below_threshold {\n    my($l, $t) = @_;\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "pl",
    "prompt": "sub prod_signs {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9) || $candidate->([1, 2, 2, -4])==-9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0) || $candidate->([0, 1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10) || $candidate->([1, 1, 1, 2, 3, -1, 1])==-10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef) || $candidate->([])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20) || $candidate->([2, 4, 1, 2, -1, -1, 9])==20) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4) || $candidate->([-1, 1, -1, 1])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4) || $candidate->([-1, 1, 1, 1])==-4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 0]),0) || $candidate->([-1, 1, 1, 0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n        long prod = arr.Contains(0) ? 0 : (long)Math.Pow(-1, arr.Count(x => x < 0));\n        return prod * arr.Select(x => Math.Abs(x)).Sum();\n    }\n}\n\n### Perl version\n\nsub prod_signs {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "pl",
    "prompt": "sub modp {\n    my($n, $p) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3) || $candidate->(3, 5)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2) || $candidate->(1101, 101)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1) || $candidate->(0, 101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8) || $candidate->(3, 11)==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1) || $candidate->(100, 101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4) || $candidate->(30, 5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3) || $candidate->(31, 5)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Modp(long n, long p) {\n        long ret = 1;\n        for (long i = 0; i < n; i++) {\n            ret = (2 * ret) % p;\n        }\n        return ret;\n    }\n}\n\n### Perl version\n\nsub modp {\n    my($n, $p) = @_;\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "pl",
    "prompt": "sub count_upper {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n        if(eq_deeply($candidate->(\"aBCdEf\"),1) || $candidate->(\"aBCdEf\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0) || $candidate->(\"abcdefg\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dBBE\"),0) || $candidate->(\"dBBE\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"B\"),0) || $candidate->(\"B\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1) || $candidate->(\"U\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EEEE\"),2) || $candidate->(\"EEEE\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CountUpper(string s) {\n        long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i])) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n\n### Perl version\n\nsub count_upper {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "pl",
    "prompt": "sub multiply {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n        if(eq_deeply($candidate->(148, 412),16) || $candidate->(148, 412)==16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72) || $candidate->(19, 28)==72) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020, 1851),0) || $candidate->(2020, 1851)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14, -15),20) || $candidate->(14, -15)==20) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42) || $candidate->(76, 67)==42) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 27),49) || $candidate->(17, 27)==49) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 1),0) || $candidate->(0, 1)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0) || $candidate->(0, 0)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Multiply(long a, long b) {\n        return Math.Abs(a % 10) * Math.Abs(b % 10);\n    }\n}\n\n### Perl version\n\nsub multiply {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "pl",
    "prompt": "sub unique_digits {\n    my($x) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33]) || $candidate->([15, 33, 1422, 1])==[1, 15, 33]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[]) || $candidate->([152, 323, 1422, 10])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]) || $candidate->([12345, 2033, 111, 151])==[111, 151]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]) || $candidate->([135, 103, 31])==[31, 135]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> UniqueDigits(List<long> x) {\n        List<long> odd_digit_elements = new List<long>();\n        foreach (long i in x) {\n            if (i.ToString().All(c => c % 2 == 1)) {\n                odd_digit_elements.Add(i);\n            }\n        }\n        return odd_digit_elements.OrderBy(i => i).ToList();\n    }\n}\n\n### Perl version\n\nsub unique_digits {\n    my($x) = @_;\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "pl",
    "prompt": "sub will_it_fly {\n    my($q, $w) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n        if(eq_deeply($candidate->([3, 2, 3], 9),1) || $candidate->([3, 2, 3], 9)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\") || $candidate->([1, 2], 5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3], 5),1) || $candidate->([3], 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3], 1),\"\") || $candidate->([3, 2, 3], 1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], 6),\"\") || $candidate->([1, 2, 3], 6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1) || $candidate->([5], 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool WillItFly(List<long> q, long w) {\n        if (q.Sum() > w) {\n            return false;\n        }\n\n        int i = 0, j = q.Count - 1;\n        while (i < j) {\n            if (q[i] != q[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n### Perl version\n\nsub will_it_fly {\n    my($q, $w) = @_;\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "pl",
    "prompt": "sub is_multiply_prime {\n    my($a) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_multiply_prime;\n        if(eq_deeply($candidate->(5),\"\") || $candidate->(5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),1) || $candidate->(30)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1) || $candidate->(8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\") || $candidate->(10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1) || $candidate->(125)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(105),1) || $candidate->(105)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(126),\"\") || $candidate->(126)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(729),\"\") || $candidate->(729)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(891),\"\") || $candidate->(891)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1001),1) || $candidate->(1001)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsMultiplyPrime(long a) {\n        bool IsPrime(long n) {\n            for (long j = 2; j < n; j++) {\n                if (n % j == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        for (long i = 2; i <= 100; i++) {\n            if (!IsPrime(i)) continue;\n            for (long j = 2; j <= 100; j++) {\n                if (!IsPrime(j)) continue;\n                for (long k = 2; k <= 100; k++) {\n                    if (!IsPrime(k)) continue;\n                    if (i * j * k == a) return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    \n}\n\n### Perl version\n\nsub is_multiply_prime {\n    my($a) = @_;\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "pl",
    "prompt": "sub maximum {\n    my($arr, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]) || $candidate->([-3, -4, 5], 3)==[-4, -3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4]) || $candidate->([4, -4, 4], 2)==[4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2]) || $candidate->([-3, 2, 1, 2, -1, -2, 1], 1)==[2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]) || $candidate->([123, -123, 20, 0, 1, 2, -3], 3)==[2, 20, 123]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]) || $candidate->([-123, 20, 0, 1, 2, -3], 4)==[0, 1, 2, 20]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]) || $candidate->([5, 15, 0, 3, -13, -8, 0], 7)==[-13, -8, 0, 0, 3, 5, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]) || $candidate->([-1, 0, 2, 5, 3, -10], 2)==[3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5]) || $candidate->([1, 0, 5, -7], 1)==[5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4]) || $candidate->([4, -4], 2)==[-4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10]) || $candidate->([-10, 10], 2)==[-10, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]) || $candidate->([1, 2, 3, -23, 243, -400, 0], 0)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return new List<long>();\n        }\n        arr.Sort();\n        return arr.Skip(arr.Count - (int)k).ToList();\n    }\n}\n\n### Perl version\n\nsub maximum {\n    my($arr, $k) = @_;\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "pl",
    "prompt": "sub separate_paren_groups {\n    my($paren_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&separate_paren_groups;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]) || $candidate->(\"(()()) ((())) () ((())()())\")==[\"(()())\", \"((()))\", \"()\", \"((())()())\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]) || $candidate->(\"() (()) ((())) (((())))\")==[\"()\", \"(())\", \"((()))\", \"(((())))\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[\"(()(())((())))\"]) || $candidate->(\"(()(())((())))\")==[\"(()(())((())))\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]) || $candidate->(\"( ) (( )) (( )( ))\")==[\"()\", \"(())\", \"(()())\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SeparateParenGroups(string paren_string) {\n        var result = new List<string>();\n        var current_string = new List<char>();\n        var current_depth = 0;\n\n        foreach (var c in paren_string) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.Add(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.Add(c);\n\n                if (current_depth == 0) {\n                    result.Add(new string(current_string.ToArray()));\n                    current_string.Clear();\n                }\n            }\n        }\n\n        return result;\n    }\n}\n\n### Perl version\n\nsub separate_paren_groups {\n    my($paren_string) = @_;\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "pl",
    "prompt": "sub filter_integers {\n    my($values) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]) || $candidate->([4, {}, [], 23.2, 9, \"adasd\"])==[4, 9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]) || $candidate->([3, \"c\", 3, 3, \"a\", \"b\"])==[3, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> FilterIntegers(List<object> values) {\n        return values.OfType<long>().ToList();\n    }\n}\n\n### Perl version\n\nsub filter_integers {\n    my($values) = @_;\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "pl",
    "prompt": "sub skjkasdkd {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10) || $candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25) || $candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])==25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13) || $candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])==13) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11) || $candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])==11) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3) || $candidate->([0, 81, 12, 3, 1, 21])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7) || $candidate->([0, 8, 1, 2, 1, 7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191]),19) || $candidate->([8191])==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19) || $candidate->([8191, 123456, 127, 7])==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([127, 97, 8192]),10) || $candidate->([127, 97, 8192])==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Skjkasdkd(List<long> lst) {\n        Func<long, bool> isPrime = (long n) => {\n            for (long i = 2; i <= Math.Sqrt(n); i++) {\n                if (n % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        long maxx = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] > maxx && isPrime(lst[i])) {\n                maxx = lst[i];\n            }\n        }\n\n        return maxx.ToString().Select(x => long.Parse(x.ToString())).Sum();\n    }\n}\n\n### Perl version\n\nsub skjkasdkd {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "pl",
    "prompt": "sub total_match {\n    my($lst1, $lst2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&total_match;\n        if(eq_deeply($candidate->([], []),[]) || $candidate->([], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"])==[\"hi\", \"hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]) || $candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])==[\"hi\", \"admin\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]) || $candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])==[\"4\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"])==[\"hI\", \"Hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])==[\"hI\", \"hi\", \"hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"])==[\"hi\", \"admin\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], [\"this\"]),[]) || $candidate->([], [\"this\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\"], []),[]) || $candidate->([\"this\"], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n        var l1 = lst1.Sum(x => x.Length);\n        var l2 = lst2.Sum(x => x.Length);\n        return l1 <= l2 ? lst1 : lst2;\n    }\n}\n\n### Perl version\n\nsub total_match {\n    my($lst1, $lst2) = @_;\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "pl",
    "prompt": "sub car_race_collision {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n        if(eq_deeply($candidate->(2),4) || $candidate->(2)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),9) || $candidate->(3)==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16) || $candidate->(4)==16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64) || $candidate->(8)==64) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100) || $candidate->(10)==100) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CarRaceCollision(long n) {\n        return n*n;\n    }\n}\n\n### Perl version\n\nsub car_race_collision {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "pl",
    "prompt": "sub is_simple_power {\n    my($x, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n        if(eq_deeply($candidate->(16, 2),1) || $candidate->(16, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\") || $candidate->(143214, 16)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),1) || $candidate->(4, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),1) || $candidate->(9, 3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 4),1) || $candidate->(16, 4)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24, 2),\"\") || $candidate->(24, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(128, 4),\"\") || $candidate->(128, 4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\") || $candidate->(12, 6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1),1) || $candidate->(1, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 12),1) || $candidate->(1, 12)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSimplePower(long x, long n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        long power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n\n### Perl version\n\nsub is_simple_power {\n    my($x, $n) = @_;\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "pl",
    "prompt": "sub encode {\n    my($message) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\") || $candidate->(\"TEST\")==\"tgst\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\") || $candidate->(\"Mudasir\")==\"mWDCSKR\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\") || $candidate->(\"YES\")==\"ygs\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\") || $candidate->(\"This is a message\")==\"tHKS KS C MGSSCGG\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\") || $candidate->(\"I DoNt KnOw WhAt tO WrItE\")==\"k dQnT kNqW wHcT Tq wRkTg\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var vowels_replace = vowels.ToDictionary(x => x, x => (char)(x + 2));\n        message = new string(message.Select(x => char.IsLetter(x) ? (char)(x ^ 32) : x).ToArray());\n        return new string(message.Select(x => vowels_replace.ContainsKey(x) ? vowels_replace[x] : x).ToArray());\n    }\n}\n\n### Perl version\n\nsub encode {\n    my($message) = @_;\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "pl",
    "prompt": "sub incr_list {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]) || $candidate->([3, 2, 1])==[4, 3, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]) || $candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123])==[6, 3, 6, 3, 4, 4, 10, 1, 124]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> IncrList(List<long> l) {\n        return l.Select(e => e + 1).ToList();\n    }\n}\n\n### Perl version\n\nsub incr_list {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "pl",
    "prompt": "sub flip_case {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\") || $candidate->(\"Hello!\")==\"hELLO!\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") || $candidate->(\"These violent delights have violent ends\")==\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FlipCase(string str) {\n        return new string(str.Select(x => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)).ToArray());\n    }\n}\n\n### Perl version\n\nsub flip_case {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "pl",
    "prompt": "sub vowels_count {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n        if(eq_deeply($candidate->(\"abcde\"),2) || $candidate->(\"abcde\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3) || $candidate->(\"Alone\")==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"key\"),2) || $candidate->(\"key\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bye\"),1) || $candidate->(\"bye\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2) || $candidate->(\"keY\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bYe\"),1) || $candidate->(\"bYe\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ACEDY\"),3) || $candidate->(\"ACEDY\")==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long VowelsCount(string s) {\n        var vowels = \"aeiouAEIOU\";\n        var n_vowels = s.Count(c => vowels.Contains(c));\n        if (s.Last() == 'y' || s.Last() == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}\n\n### Perl version\n\nsub vowels_count {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "pl",
    "prompt": "sub even_odd_palindrome {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n        if(eq_deeply($candidate->(123),[8, 13]) || $candidate->(123)==[8, 13]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6]) || $candidate->(12)==[4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2]) || $candidate->(3)==[1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6, 8]) || $candidate->(63)==[6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5, 6]) || $candidate->(25)==[5, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4, 6]) || $candidate->(19)==[4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4, 5]) || $candidate->(9)==[4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0, 1]) || $candidate->(1)==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        bool IsPalindrome(long x) {\n            return x.ToString() == new string(x.ToString().Reverse().ToArray());\n        }\n\n        long evenPalindromeCount = 0;\n        long oddPalindromeCount = 0;\n\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 1 && IsPalindrome(i)) {\n                oddPalindromeCount++;\n            } else if (i % 2 == 0 && IsPalindrome(i)) {\n                evenPalindromeCount++;\n            }\n        }\n\n        return Tuple.Create(evenPalindromeCount, oddPalindromeCount);\n    }\n\n    \n}\n\n### Perl version\n\nsub even_odd_palindrome {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "pl",
    "prompt": "sub triangle_area {\n    my($a, $b, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(3, 4, 5),6.0) || $candidate->(3, 4, 5)==6.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 10),-1) || $candidate->(1, 2, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 5),8.18) || $candidate->(4, 8, 5)==8.18) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),1.73) || $candidate->(2, 2, 2)==1.73) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),-1) || $candidate->(1, 2, 3)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),16.25) || $candidate->(10, 5, 7)==16.25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 3),-1) || $candidate->(2, 6, 3)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),0.43) || $candidate->(1, 1, 1)==0.43) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),-1) || $candidate->(2, 2, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TriangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        var s = (a + b + c) / 2f;\n        var area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        area = Math.Round(area, 2);\n        return (float)area;\n    }\n}\n\n### Perl version\n\nsub triangle_area {\n    my($a, $b, $c) = @_;\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "pl",
    "prompt": "sub check_dict_case {\n    my($dict) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"}),1) || $candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"})==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\") || $candidate->({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"})==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\") || $candidate->({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"})==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\") || $candidate->({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1) || $candidate->({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}),1) || $candidate->({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"})==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\") || $candidate->({})==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n        if (dict.Count == 0) {\n            return false;\n        } else {\n            string state = \"start\";\n            foreach (string key in dict.Keys) {\n                if (!key.GetType().Equals(typeof(string))) {\n                    state = \"mixed\";\n                    break;\n                } else if (state == \"start\") {\n                    if (key.All(char.IsUpper)) {\n                        state = \"upper\";\n                    } else if (key.All(char.IsLower)) {\n                        state = \"lower\";\n                    } else {\n                        break;\n                    }\n                } else if ((state == \"upper\" && !key.All(char.IsUpper)) || (state == \"lower\" && !key.All(char.IsLower))) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return state == \"upper\" || state == \"lower\";\n        }\n    }\n}\n\n### Perl version\n\nsub check_dict_case {\n    my($dict) = @_;\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "pl",
    "prompt": "sub tri {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n        if(eq_deeply($candidate->(3),[1, 3, 2, 8]) || $candidate->(3)==[1, 3, 2, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3]) || $candidate->(4)==[1, 3, 2, 8, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15]) || $candidate->(5)==[1, 3, 2, 8, 3, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4]) || $candidate->(6)==[1, 3, 2, 8, 3, 15, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24]) || $candidate->(7)==[1, 3, 2, 8, 3, 15, 4, 24]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]) || $candidate->(8)==[1, 3, 2, 8, 3, 15, 4, 24, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]) || $candidate->(9)==[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]) || $candidate->(20)==[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1]) || $candidate->(0)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1, 3]) || $candidate->(1)==[1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Tri(long n) {\n        if (n == 0) {\n            return new List<long> { 1 };\n        }\n        var my_tri = new List<long> { 1, 3 };\n        for (long i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.Add(i / 2 + 1);\n            } else {\n                my_tri.Add(my_tri[(int)i - 1] + my_tri[(int)i - 2] + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n\n### Perl version\n\nsub tri {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "pl",
    "prompt": "sub median {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3) || $candidate->([3, 1, 2, 4, 5])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0) || $candidate->([-10, 4, 6, 1000, 10, 20])==8.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),5) || $candidate->([5])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5) || $candidate->([6, 5])==5.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7) || $candidate->([8, 1, 3, 9, 9, 2, 7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count % 2 == 1) {\n            return l[l.Count / 2];\n        } else {\n            return (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }\n    }\n}\n\n### Perl version\n\nsub median {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "pl",
    "prompt": "sub change_base {\n    my($x, $base) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n        if(eq_deeply($candidate->(8, 3),\"22\") || $candidate->(8, 3)==\"22\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\") || $candidate->(9, 3)==\"100\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234, 2),\"11101010\") || $candidate->(234, 2)==\"11101010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 2),\"10000\") || $candidate->(16, 2)==\"10000\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\") || $candidate->(8, 2)==\"1000\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 2),\"111\") || $candidate->(7, 2)==\"111\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),\"2\") || $candidate->(2, 3)==\"2\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\") || $candidate->(3, 4)==\"3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),\"4\") || $candidate->(4, 5)==\"4\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),\"5\") || $candidate->(5, 6)==\"5\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\") || $candidate->(6, 7)==\"6\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 8),\"7\") || $candidate->(7, 8)==\"7\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string ChangeBase(long x, long numBase) {\n        var ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString() + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n}\n\n### Perl version\n\nsub change_base {\n    my($x, $base) = @_;\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "pl",
    "prompt": "sub common {\n    my($l1, $l2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]) || $candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])==[1, 5, 653]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3]) || $candidate->([5, 3, 2, 8], [3, 2])==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]) || $candidate->([4, 3, 2, 8], [3, 2, 4])==[2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[]) || $candidate->([4, 3, 2, 8], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Common(List<long> l1, List<long> l2) {\n        var ret = new HashSet<long>();\n        foreach (var e1 in l1) {\n            foreach (var e2 in l2) {\n                if (e1 == e2) {\n                    ret.Add(e1);\n                }\n            }\n        }\n        return ret.OrderBy(x => x).ToList();\n    }\n}\n\n### Perl version\n\nsub common {\n    my($l1, $l2) = @_;\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "pl",
    "prompt": "sub cycpattern_check {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cycpattern_check;\n        if(eq_deeply($candidate->(\"xyzw\", \"xyw\"),\"\") || $candidate->(\"xyzw\", \"xyw\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"yello\", \"ell\"),1) || $candidate->(\"yello\", \"ell\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"whattup\", \"ptut\"),\"\") || $candidate->(\"whattup\", \"ptut\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"efef\", \"fee\"),1) || $candidate->(\"efef\", \"fee\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abab\", \"aabb\"),\"\") || $candidate->(\"abab\", \"aabb\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"winemtt\", \"tinem\"),1) || $candidate->(\"winemtt\", \"tinem\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CycpatternCheck(string a, string b) {\n        var l = b.Length;\n        var pat = b + b;\n        for (int i = 0; i <= a.Length - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.Substring(i, l) == pat.Substring(j, l)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Perl version\n\nsub cycpattern_check {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "pl",
    "prompt": "sub minSubArraySum {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minSubArraySum;\n        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1) || $candidate->([2, 3, 4, 1, 2, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3]),-6) || $candidate->([-1, -2, -3])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14) || $candidate->([-1, -2, -3, 2, -10])==-14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999) || $candidate->([-9999999999999999])==-9999999999999999) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0) || $candidate->([0, 10, 20, 1000000])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6) || $candidate->([-1, -2, -3, 10, -5])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6) || $candidate->([100, -1, -2, -3, 10, -5])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3) || $candidate->([10, 11, 13, 8, 3, 4])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33) || $candidate->([100, -33, 32, -1, 0, -2])==-33) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10]),-10) || $candidate->([-10])==-10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7]),7) || $candidate->([7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1]),-1) || $candidate->([1, -1])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Minsubarraysum(List<long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        foreach (long num in nums) {\n            s += -num;\n            if (s < 0) {\n                s = 0;\n            }\n            max_sum = Math.Max(s, max_sum);\n        }\n        if (max_sum == 0) {\n            max_sum = nums.Min() * -1;\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n}\n\n### Perl version\n\nsub minSubArraySum {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "pl",
    "prompt": "sub sort_array {\n    my($array) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]) || $candidate->([5])==[5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]) || $candidate->([2, 4, 3, 0, 1, 5])==[0, 1, 2, 3, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]) || $candidate->([2, 4, 3, 0, 1, 5, 6])==[6, 5, 4, 3, 2, 1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1]),[1, 2]) || $candidate->([2, 1])==[1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]) || $candidate->([15, 42, 87, 32, 11, 0])==[0, 11, 15, 32, 42, 87]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11]) || $candidate->([21, 14, 23, 11])==[23, 21, 14, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> SortArray(List<long> array) {\n        return array.Count == 0 ? new List<long>() : array.OrderBy(x => (array[0] + array[array.Count - 1]) % 2 == 0 ? -x : x).ToList();\n    }\n    \n}\n\n### Perl version\n\nsub sort_array {\n    my($array) = @_;\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "pl",
    "prompt": "sub get_odd_collatz {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_odd_collatz;\n        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17]) || $candidate->(14)==[1, 5, 7, 11, 13, 17]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 5]) || $candidate->(5)==[1, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[1, 3, 5]) || $candidate->(12)==[1, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1]) || $candidate->(1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetOddCollatz(long n) {\n        var odd_collatz = new List<long>();\n        if (n % 2 == 1) {\n            odd_collatz.Add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.Add(n);\n            }\n        }\n        return odd_collatz.OrderBy(x => x).ToList();\n    }\n}\n\n### Perl version\n\nsub get_odd_collatz {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "pl",
    "prompt": "sub derivative {\n    my($xs) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20]) || $candidate->([3, 1, 2, 4, 5])==[1, 4, 12, 20]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 6]) || $candidate->([1, 2, 3])==[2, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[2, 2]) || $candidate->([3, 2, 1])==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16]) || $candidate->([3, 2, 1, 0, 4])==[2, 2, 0, 16]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),[]) || $candidate->([1])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Derivative(List<long> xs) {\n        return xs.Select((x, i) => x * i).Skip(1).ToList();\n    }\n}\n\n### Perl version\n\nsub derivative {\n    my($xs) = @_;\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "pl",
    "prompt": "sub fibfib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n        if(eq_deeply($candidate->(2),1) || $candidate->(2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),0) || $candidate->(1)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4) || $candidate->(5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24) || $candidate->(8)==24) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81) || $candidate->(10)==81) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274) || $candidate->(12)==274) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927) || $candidate->(14)==927) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Fibfib(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);\n    }\n}\n\n### Perl version\n\nsub fibfib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "pl",
    "prompt": "sub truncate_number {\n    my($number) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5) || $candidate->(3.5)==0.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25) || $candidate->(1.25)==0.25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0) || $candidate->(123.0)==0.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float TruncateNumber(float number) {\n        return number % 1.0f;\n    }\n}\n\n### Perl version\n\nsub truncate_number {\n    my($number) = @_;\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "pl",
    "prompt": "sub max_element {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n        if(eq_deeply($candidate->([1, 2, 3]),3) || $candidate->([1, 2, 3])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124) || $candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])==124) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long MaxElement(List<long> l) {\n        long m = l[0];\n        foreach (long e in l) {\n            if (e > m) {\n                m = e;\n            }\n        }\n        return m;\n    }\n}\n\n### Perl version\n\nsub max_element {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "pl",
    "prompt": "sub closest_integer {\n    my($value) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10) || $candidate->(\"10\")==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15) || $candidate->(\"14.5\")==15) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16) || $candidate->(\"-15.5\")==-16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15) || $candidate->(\"15.3\")==15) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0) || $candidate->(\"0\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ClosestInteger(string value) {\n        if (value.Count(c => c == '.') == 1) {\n            while (value.Length > 0 && value.Last() == '0') {\n                value = value.Substring(0, value.Length - 1);\n            }\n        }\n\n        double num = double.Parse(value);\n        long res;\n\n        if (value.EndsWith(\".5\")) {\n            res = num > 0 ? (long)Math.Ceiling(num) : (long)Math.Floor(num);\n        } else {\n            res = (long)Math.Round(num);\n        }\n\n        return res;\n    }\n}\n\n### Perl version\n\nsub closest_integer {\n    my($value) = @_;\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "pl",
    "prompt": "sub prime_fib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n        if(eq_deeply($candidate->(1),2) || $candidate->(1)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),3) || $candidate->(2)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5) || $candidate->(3)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13) || $candidate->(4)==13) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89) || $candidate->(5)==89) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233) || $candidate->(6)==233) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597) || $candidate->(7)==1597) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657) || $candidate->(8)==28657) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229) || $candidate->(9)==514229) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437) || $candidate->(10)==433494437) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long PrimeFib(long n) {\n        bool IsPrime(long p) {\n            if (p < 2) return false;\n            for (long k = 2; k < Math.Min((long)Math.Sqrt(p) + 1, p - 1); k++)\n                if (p % k == 0) return false;\n            return true;\n        }\n        List<long> f = new List<long> { 0, 1 };\n        while (true) {\n            f.Add(f[^1] + f[^2]);\n            if (IsPrime(f[^1])) n--;\n            if (n == 0) return f[^1];\n        }\n    }\n    \n}\n\n### Perl version\n\nsub prime_fib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "pl",
    "prompt": "sub sum_product {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n        if(eq_deeply($candidate->([]),[0, 1]) || $candidate->([])==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1]) || $candidate->([1, 1, 1])==[3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 0]),[100, 0]) || $candidate->([100, 0])==[100, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 7]),[15, 105]) || $candidate->([3, 5, 7])==[15, 105]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10, 10]) || $candidate->([10])==[10, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sumValue = 0;\n        long prodValue = 1;\n\n        foreach (long n in numbers) {\n            sumValue += n;\n            prodValue *= n;\n        }\n        return Tuple.Create(sumValue, prodValue);\n    }\n    \n}\n\n### Perl version\n\nsub sum_product {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "pl",
    "prompt": "sub select_words {\n    my($s, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"]) || $candidate->(\"Mary had a little lamb\", 4)==[\"little\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]) || $candidate->(\"Mary had a little lamb\", 3)==[\"Mary\", \"lamb\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]) || $candidate->(\"simple white space\", 2)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"]) || $candidate->(\"Hello world\", 4)==[\"world\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"]) || $candidate->(\"Uncle sam\", 3)==[\"Uncle\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\", 4),[]) || $candidate->(\"\", 4)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]) || $candidate->(\"a b c d e f\", 1)==[\"b\", \"c\", \"d\", \"f\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> SelectWords(string s, long n) {\n        var result = new List<string>();\n        foreach (var word in s.Split()) {\n            var n_consonants = word.Count(c => !\"aeiouAEIOU\".Contains(c));\n            if (n_consonants == n) {\n                result.Add(word);\n            }\n        }\n        return result;\n    }\n}\n\n### Perl version\n\nsub select_words {\n    my($s, $n) = @_;\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "pl",
    "prompt": "sub add_elements {\n    my($arr, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_elements;\n        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4) || $candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)==-4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0) || $candidate->([111, 121, 3, 4000, 5, 6], 2)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125) || $candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)==125) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24) || $candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)==24) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1], 1),1) || $candidate->([1], 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long AddElements(List<long> arr, long k) {\n        return arr.Take((int)k).Where(x => x.ToString().Length <= 2).Sum();\n    }\n}\n\n### Perl version\n\nsub add_elements {\n    my($arr, $k) = @_;\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "pl",
    "prompt": "sub eat {\n    my($number, $need, $remaining) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n        if(eq_deeply($candidate->(5, 6, 10),[11, 4]) || $candidate->(5, 6, 10)==[11, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1]) || $candidate->(4, 8, 9)==[12, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 10, 10),[11, 0]) || $candidate->(1, 10, 10)==[11, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 11, 5),[7, 0]) || $candidate->(2, 11, 5)==[7, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2]) || $candidate->(4, 5, 7)==[9, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 1),[5, 0]) || $candidate->(4, 5, 1)==[5, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Eat(long number, long need, long remaining) {\n        if (need <= remaining) {\n            return new List<long> { number + need, remaining - need };\n        } else {\n            return new List<long> { number + remaining, 0 };\n        }\n    }\n}\n\n### Perl version\n\nsub eat {\n    my($number, $need, $remaining) = @_;\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "pl",
    "prompt": "sub odd_count {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_count;\n        if(eq_deeply($candidate->([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]) || $candidate->([\"1234567\"])==[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]) || $candidate->([\"3\", \"11111111\"])==[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]) || $candidate->([\"271\", \"137\", \"314\"])==[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> OddCount(List<string> lst) {\n        var res = new List<string>();\n        foreach (var arr in lst) {\n            var n = arr.Count(x => x % 2 == 1);\n            res.Add($\"the number of odd elements {n}n the str{n}ng {n} of the {n}nput.\");\n        }\n        return res;\n    }\n}\n\n### Perl version\n\nsub odd_count {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "pl",
    "prompt": "sub next_smallest {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2) || $candidate->([1, 2, 3, 4, 5])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2) || $candidate->([5, 1, 4, 3, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef) || $candidate->([])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef) || $candidate->([1, 1])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1) || $candidate->([1, 1, 1, 1, 0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef) || $candidate->([1, 1])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35) || $candidate->([-35, 34, 12, -45])==-35) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Nullable<long> NextSmallest(List<long> lst) {\n        lst = lst.Distinct().OrderBy(x => x).ToList();\n        return lst.Count < 2 ? null : lst[1];\n    }\n}\n\n### Perl version\n\nsub next_smallest {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "pl",
    "prompt": "sub get_row {\n    my($lst, $x) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_row;\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]) || $candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)==[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]) || $candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2)==[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]) || $candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)==[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], 1),[]) || $candidate->([], 1)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1]], 2),[]) || $candidate->([[1]], 2)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[], [1], [1, 2, 3]], 3),[[2, 2]]) || $candidate->([[], [1], [1, 2, 3]], 3)==[[2, 2]]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>> coords = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(Tuple.Create((long)i, (long)j));\n                }\n            }\n        }\n        coords.Sort((a, b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return coords;\n    }\n    \n}\n\n### Perl version\n\nsub get_row {\n    my($lst, $x) = @_;\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "pl",
    "prompt": "sub filter_by_prefix {\n    my($strings, $prefix) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[]) || $candidate->([], \"john\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]) || $candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")==[\"xxx\", \"xxxAAA\", \"xxx\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> FilterByPrefix(List<string> strings, string prefix) {\n        return strings.Where(x => x.StartsWith(prefix)).ToList();\n    }\n}\n\n### Perl version\n\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "pl",
    "prompt": "sub choose_num {\n    my($x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n        if(eq_deeply($candidate->(12, 15),14) || $candidate->(12, 15)==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1) || $candidate->(13, 12)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33, 12354),12354) || $candidate->(33, 12354)==12354) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5234, 5233),-1) || $candidate->(5234, 5233)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28) || $candidate->(6, 29)==28) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27, 10),-1) || $candidate->(27, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 7),-1) || $candidate->(7, 7)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546) || $candidate->(546, 546)==546) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long ChooseNum(long x, long y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n\n### Perl version\n\nsub choose_num {\n    my($x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "pl",
    "prompt": "sub prime_length {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n        if(eq_deeply($candidate->(\"Hello\"),1) || $candidate->(\"Hello\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1) || $candidate->(\"abcdcba\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"kittens\"),1) || $candidate->(\"kittens\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"orange\"),\"\") || $candidate->(\"orange\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1) || $candidate->(\"wow\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"world\"),1) || $candidate->(\"world\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MadaM\"),1) || $candidate->(\"MadaM\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1) || $candidate->(\"Wow\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"HI\"),1) || $candidate->(\"HI\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1) || $candidate->(\"go\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gogo\"),\"\") || $candidate->(\"gogo\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\") || $candidate->(\"aaaaaaaaaaaaaaa\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"),1) || $candidate->(\"Madam\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"M\"),\"\") || $candidate->(\"M\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),\"\") || $candidate->(\"0\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PrimeLength(string str) {\n        int l = str.Length;\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Perl version\n\nsub prime_length {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "pl",
    "prompt": "sub sum_to_n {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),21) || $candidate->(6)==21) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66) || $candidate->(11)==66) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465) || $candidate->(30)==465) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050) || $candidate->(100)==5050) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long SumToN(long n) {\n        return n * (n + 1) / 2;\n    }\n}\n\n### Perl version\n\nsub sum_to_n {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "pl",
    "prompt": "sub fix_spaces {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fix_spaces;\n        if(eq_deeply($candidate->(\"Example\"),\"Example\") || $candidate->(\"Example\")==\"Example\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir Hanif \"),\"Mudasir_Hanif_\") || $candidate->(\"Mudasir Hanif \")==\"Mudasir_Hanif_\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\") || $candidate->(\"Yellow Yellow  Dirty  Fellow\")==\"Yellow_Yellow__Dirty__Fellow\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Exa   mple\"),\"Exa-mple\") || $candidate->(\"Exa   mple\")==\"Exa-mple\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\") || $candidate->(\"   Exa 1 2 2 mple\")==\"-Exa_1_2_2_mple\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FixSpaces(string text) {\n        string new_text = \"\";\n        int i = 0;\n        int start = 0, end = 0;\n        while (i < text.Length) {\n            if (text[i] == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    new_text += \"-\"+text[i];\n                } else if (end - start > 0) {\n                    new_text += new string('_', end - start)+text[i];\n                } else {\n                    new_text += text[i];\n                }\n                start = i+1;\n                end = i+1;\n            }\n            i+=1;\n        }\n        if (end - start > 2) {\n            new_text += \"-\";\n        } else if (end - start > 0) {\n            new_text += \"_\";\n        }\n        return new_text;\n    }\n}\n\n### Perl version\n\nsub fix_spaces {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "pl",
    "prompt": "sub rolling_max {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4]) || $candidate->([1, 2, 3, 4])==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4]) || $candidate->([4, 3, 2, 1])==[4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]) || $candidate->([3, 2, 3, 100, 3])==[3, 3, 3, 100, 100]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RollingMax(List<long> numbers) {\n        long? running_max = null;\n        var result = new List<long>();\n\n        foreach (var n in numbers) {\n            if (running_max == null) {\n                running_max = n;\n            } else {\n                running_max = Math.Max(running_max.Value, n);\n            }\n\n            result.Add(running_max.Value);\n        }\n\n        return result;\n    }\n}\n\n### Perl version\n\nsub rolling_max {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "pl",
    "prompt": "sub words_in_sentence {\n    my($sentence) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_in_sentence;\n        if(eq_deeply($candidate->(\"This is a test\"),\"is\") || $candidate->(\"This is a test\")==\"is\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lets go for swimming\"),\"go for\") || $candidate->(\"lets go for swimming\")==\"go for\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"there is no place available here\"),\"there is no place\") || $candidate->(\"there is no place available here\")==\"there is no place\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi I am Hussein\"),\"Hi am Hussein\") || $candidate->(\"Hi I am Hussein\")==\"Hi am Hussein\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go for it\"),\"go for it\") || $candidate->(\"go for it\")==\"go for it\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here\"),\"\") || $candidate->(\"here\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here is\"),\"is\") || $candidate->(\"here is\")==\"is\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string WordsInSentence(string sentence) {\n        var new_lst = new List<string>();\n        foreach (var word in sentence.Split()) {\n            var flg = 0;\n            if (word.Length == 1) {\n                flg = 1;\n            }\n            for (var i = 2; i < word.Length; i++) {\n                if (word.Length % i == 0) {\n                    flg = 1;\n                }\n            }\n            if (flg == 0 || word.Length == 2) {\n                new_lst.Add(word);\n            }\n        }\n        return string.Join(\" \", new_lst);\n    }\n}\n\n### Perl version\n\nsub words_in_sentence {\n    my($sentence) = @_;\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "pl",
    "prompt": "sub get_closest_vowel {\n    my($word) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\") || $candidate->(\"yogurt\")==\"u\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"),\"u\") || $candidate->(\"full\")==\"u\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"),\"\") || $candidate->(\"easy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\") || $candidate->(\"eAsy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\") || $candidate->(\"ali\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bad\"),\"a\") || $candidate->(\"bad\")==\"a\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\") || $candidate->(\"most\")==\"o\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\") || $candidate->(\"ab\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ba\"),\"\") || $candidate->(\"ba\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\") || $candidate->(\"quick\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\") || $candidate->(\"anime\")==\"i\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Asia\"),\"\") || $candidate->(\"Asia\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\") || $candidate->(\"Above\")==\"o\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string GetClosestVowel(string word) {\n        if (word.Length < 3) {\n            return \"\";\n        }\n\n        var vowels = new HashSet<char> {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\n        for (int i = word.Length - 2; i >= 1; i--) {\n            if (vowels.Contains(word[i]) && !vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1])) {\n                return word[i].ToString();\n            }\n        }\n\n        return \"\";\n    }\n}\n\n### Perl version\n\nsub get_closest_vowel {\n    my($word) = @_;\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "pl",
    "prompt": "sub compare {\n    my($game, $guess) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]) || $candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])==[0, 0, 0, 0, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]) || $candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])==[0, 0, 0, 0, 0, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6]) || $candidate->([1, 2, 3], [-1, -2, -3])==[2, 4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]) || $candidate->([1, 2, 3, 5], [-1, 2, 3, 4])==[2, 0, 0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Compare(List<long> game, List<long> guess) {\n        return game.Zip(guess, (x, y) => Math.Abs(x - y)).ToList();\n    }\n}\n\n### Perl version\n\nsub compare {\n    my($game, $guess) = @_;\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "pl",
    "prompt": "sub remove_duplicates {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4]) || $candidate->([1, 2, 3, 4])==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]) || $candidate->([1, 2, 3, 2, 4, 3, 5])==[1, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n        var c = numbers.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());\n        return numbers.Where(x => c[x] <= 1).ToList();\n    }\n}\n\n### Perl version\n\nsub remove_duplicates {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "pl",
    "prompt": "sub same_chars {\n    my($s0, $s1) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&same_chars;\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),1) || $candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabc\"),1) || $candidate->(\"abcd\", \"dddddddabc\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dddddddabc\", \"abcd\"),1) || $candidate->(\"dddddddabc\", \"abcd\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcd\", \"dddddddabc\"),\"\") || $candidate->(\"eabcd\", \"dddddddabc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabcf\"),\"\") || $candidate->(\"abcd\", \"dddddddabcf\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\"\") || $candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\", \"aaccc\"),\"\") || $candidate->(\"aabb\", \"aaccc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool SameChars(string s0, string s1) {\n        return s0.ToHashSet().SetEquals(s1);\n    }\n}\n\n### Perl version\n\nsub same_chars {\n    my($s0, $s1) = @_;\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "pl",
    "prompt": "sub parse_nested_parens {\n    my($paren_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]) || $candidate->(\"(()()) ((())) () ((())()())\")==[2, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]) || $candidate->(\"() (()) ((())) (((())))\")==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4]) || $candidate->(\"(()(())((())))\")==[4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> ParseNestedParens(string paren_string) {\n        long ParseParenGroup(string s) {\n            long depth = 0;\n            long max_depth = 0;\n            foreach (char c in s) {\n                if (c == '(') {\n                    depth += 1;\n                    max_depth = Math.Max(depth, max_depth);\n                } else {\n                    depth -= 1;\n                }\n            }\n\n            return max_depth;\n        }\n\n        return paren_string.Split(' ').Where(x => x != \"\").Select(x => ParseParenGroup(x)).ToList();\n    }\n\n    \n}\n\n### Perl version\n\nsub parse_nested_parens {\n    my($paren_string) = @_;\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "pl",
    "prompt": "sub even_odd_count {\n    my($num) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n        if(eq_deeply($candidate->(7),[0, 1]) || $candidate->(7)==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1]) || $candidate->(-78)==[1, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2, 2]) || $candidate->(3452)==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3, 3]) || $candidate->(346211)==[3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3, 3]) || $candidate->(-345821)==[3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1, 0]) || $candidate->(-2)==[1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2, 3]) || $candidate->(-45347)==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1, 0]) || $candidate->(0)==[1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<long, long> EvenOddCount(long num) {\n        long even_count = 0;\n        long odd_count = 0;\n        foreach (char c in Math.Abs(num).ToString()) {\n            if (int.Parse(c.ToString()) % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n        return Tuple.Create(even_count, odd_count);\n    }\n}\n\n### Perl version\n\nsub even_odd_count {\n    my($num) = @_;\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "pl",
    "prompt": "sub fruit_distribution {\n    my($s, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8) || $candidate->(\"5 apples and 6 oranges\", 19)==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 21),10) || $candidate->(\"5 apples and 6 oranges\", 21)==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2) || $candidate->(\"0 apples and 1 oranges\", 3)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 0 oranges\", 3),2) || $candidate->(\"1 apples and 0 oranges\", 3)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95) || $candidate->(\"2 apples and 3 oranges\", 100)==95) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 5),0) || $candidate->(\"2 apples and 3 oranges\", 5)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19) || $candidate->(\"1 apples and 100 oranges\", 120)==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long FruitDistribution(string s, long n) {\n        var lis = new List<long>();\n        foreach (var i in s.Split(' ')) {\n            if (long.TryParse(i, out var x)) {\n                lis.Add(x);\n            }\n        }\n        return n - lis.Sum();\n    }\n}\n\n### Perl version\n\nsub fruit_distribution {\n    my($s, $n) = @_;\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "pl",
    "prompt": "sub string_xor {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\") || $candidate->(\"111000\", \"101010\")==\"010010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"1\"),\"0\") || $candidate->(\"1\", \"1\")==\"0\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\") || $candidate->(\"0101\", \"0000\")==\"0101\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringXor(string a, string b) {\n        Func<char, char, char> xor = (i, j) => i == j ? '0' : '1';\n        return string.Concat(a.Zip(b, xor));\n    }\n    \n}\n\n### Perl version\n\nsub string_xor {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "pl",
    "prompt": "sub strlen {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1) || $candidate->(\"x\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdasnakj\"),9) || $candidate->(\"asdasnakj\")==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Strlen(string str) {\n        return str.Length;\n    }\n}\n\n### Perl version\n\nsub strlen {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "pl",
    "prompt": "sub string_sequence {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n        if(eq_deeply($candidate->(0),\"0\") || $candidate->(0)==\"0\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\") || $candidate->(3)==\"0 1 2 3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"0 1 2 3 4 5 6 7 8 9 10\") || $candidate->(10)==\"0 1 2 3 4 5 6 7 8 9 10\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0, (int)n + 1));\n    }\n}\n\n### Perl version\n\nsub string_sequence {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "pl",
    "prompt": "sub file_name_check {\n    my($file_name) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&file_name_check;\n        if(eq_deeply($candidate->(\"example.txt\"),\"Yes\") || $candidate->(\"example.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1example.dll\"),\"No\") || $candidate->(\"1example.dll\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s1sdf3.asd\"),\"No\") || $candidate->(\"s1sdf3.asd\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K.dll\"),\"Yes\") || $candidate->(\"K.dll\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MY16FILE3.exe\"),\"Yes\") || $candidate->(\"MY16FILE3.exe\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"His12FILE94.exe\"),\"No\") || $candidate->(\"His12FILE94.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_Y.txt\"),\"No\") || $candidate->(\"_Y.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"?aREYA.exe\"),\"No\") || $candidate->(\"?aREYA.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"/this_is_valid.dll\"),\"No\") || $candidate->(\"/this_is_valid.dll\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.wow\"),\"No\") || $candidate->(\"this_is_valid.wow\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txt\"),\"Yes\") || $candidate->(\"this_is_valid.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txtexe\"),\"No\") || $candidate->(\"this_is_valid.txtexe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#this2_i4s_5valid.ten\"),\"No\") || $candidate->(\"#this2_i4s_5valid.ten\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"@this1_is6_valid.exe\"),\"No\") || $candidate->(\"@this1_is6_valid.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_12valid.6exe4.txt\"),\"No\") || $candidate->(\"this_is_12valid.6exe4.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"all.exe.txt\"),\"No\") || $candidate->(\"all.exe.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_No.exe\"),\"Yes\") || $candidate->(\"I563_No.exe\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is3youfault.txt\"),\"Yes\") || $candidate->(\"Is3youfault.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"no_one#knows.dll\"),\"Yes\") || $candidate->(\"no_one#knows.dll\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1I563_Yes3.exe\"),\"No\") || $candidate->(\"1I563_Yes3.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_Yes3.txtt\"),\"No\") || $candidate->(\"I563_Yes3.txtt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final..txt\"),\"No\") || $candidate->(\"final..txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final132\"),\"No\") || $candidate->(\"final132\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_f4indsartal132.\"),\"No\") || $candidate->(\"_f4indsartal132.\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".txt\"),\"No\") || $candidate->(\".txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s.\"),\"No\") || $candidate->(\"s.\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FileNameCheck(string file_name) {\n        var suf = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = file_name.Split('.');\n        if (lst.Length != 2) {\n            return \"No\";\n        }\n        if (!suf.Contains(lst[1])) {\n            return \"No\";\n        }\n        if (lst[0].Length == 0 || !Char.IsLetter(lst[0][0])) {\n            return \"No\";\n        }\n        var t = lst[0].Count(x => Char.IsDigit(x));\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\n### Perl version\n\nsub file_name_check {\n    my($file_name) = @_;\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "pl",
    "prompt": "sub can_arrange {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3) || $candidate->([1, 2, 4, 3, 5])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5]),-1) || $candidate->([1, 2, 4, 5])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2) || $candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4) || $candidate->([4, 8, 5, 7, 3])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),-1) || $candidate->([])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long CanArrange(List<long> arr) {\n        long ind = -1;\n        for (long i = 1; i < arr.Count; i++) {\n            if (arr[(int)i] < arr[(int)i - 1]) {\n                ind = i;\n            }\n        }\n        return ind;\n    }\n}\n\n### Perl version\n\nsub can_arrange {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "pl",
    "prompt": "sub add {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88) || $candidate->([4, 88])==88) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122) || $candidate->([4, 5, 6, 7, 2, 122])==122) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0) || $candidate->([4, 0, 6, 7])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12) || $candidate->([4, 4, 6, 8])==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n}\n\n### Perl version\n\nsub add {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "pl",
    "prompt": "sub intersperse {\n    my($numbers, $delimeter) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersperse;\n        if(eq_deeply($candidate->([], 7),[]) || $candidate->([], 7)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]) || $candidate->([5, 6, 3, 2], 8)==[5, 8, 6, 8, 3, 8, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2]) || $candidate->([2, 2, 2], 2)==[2, 2, 2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n        if (!numbers.Any()) {\n            return new List<long>();\n        }\n\n        var result = new List<long>();\n\n        for (int i = 0; i < numbers.Count - 1; i++) {\n            result.Add(numbers[i]);\n            result.Add(delimeter);\n        }\n\n        result.Add(numbers.Last());\n\n        return result;\n    }\n}\n\n### Perl version\n\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "pl",
    "prompt": "sub match_parens {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\") || $candidate->([\"()(\", \")\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \")\"]),\"No\") || $candidate->([\")\", \")\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\") || $candidate->([\"(()(())\", \"())())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")())\", \"(()()(\"]),\"Yes\") || $candidate->([\")())\", \"(()()(\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\") || $candidate->([\"(())))\", \"(()())((\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"()\", \"())\"]),\"No\") || $candidate->([\"()\", \"())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\") || $candidate->([\"(()(\", \"()))()\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"((((\", \"((())\"]),\"No\") || $candidate->([\"((((\", \"((())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\") || $candidate->([\")(()\", \"(()(\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(\", \")(\"]),\"No\") || $candidate->([\")(\", \")(\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\") || $candidate->([\"(\", \")\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \"(\"]),\"Yes\") || $candidate->([\")\", \"(\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MatchParens(List<string> lst) {\n        Func<string, bool> check = (string s) => {\n            int val = 0;\n            foreach (char c in s) {\n                if (c == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    return false;\n                }\n            }\n            return val == 0;\n        };\n\n        string S1 = lst[0] + lst[1];\n        string S2 = lst[1] + lst[0];\n        return check(S1) || check(S2) ? \"Yes\" : \"No\";\n    }\n}\n\n### Perl version\n\nsub match_parens {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "pl",
    "prompt": "sub filter_by_substring {\n    my($strings, $substring) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_substring;\n        if(eq_deeply($candidate->([], \"john\"),[]) || $candidate->([], \"john\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]) || $candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")==[\"xxx\", \"xxxAAA\", \"xxx\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]) || $candidate->([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\")==[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]) || $candidate->([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\")==[\"grunt\", \"prune\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> FilterBySubstring(List<string> strings, string substring) {\n        return strings.Where(x => x.Contains(substring)).ToList();\n    }\n}\n\n### Perl version\n\nsub filter_by_substring {\n    my($strings, $substring) = @_;\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "pl",
    "prompt": "sub find_max {\n    my($words) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\") || $candidate->([\"name\", \"of\", \"string\"])==\"string\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\") || $candidate->([\"name\", \"enam\", \"game\"])==\"enam\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\") || $candidate->([\"aaaaaaa\", \"bb\", \"cc\"])==\"aaaaaaa\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\") || $candidate->([\"abc\", \"cba\"])==\"abc\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\") || $candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"])==\"footbott\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\") || $candidate->([\"we\", \"are\", \"gonna\", \"rock\"])==\"gonna\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\") || $candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"])==\"nation\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\") || $candidate->([\"this\", \"is\", \"a\", \"prrk\"])==\"this\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\") || $candidate->([\"b\"])==\"b\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\") || $candidate->([\"play\", \"play\", \"play\"])==\"play\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string FindMax(List<string> words) {\n        return words.OrderBy(x => (-x.Distinct().Count(), x)).First();\n    }\n}\n\n### Perl version\n\nsub find_max {\n    my($words) = @_;\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "pl",
    "prompt": "sub generate_integers {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&generate_integers;\n        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8]) || $candidate->(2, 10)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8]) || $candidate->(10, 2)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8]) || $candidate->(132, 2)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 89),[]) || $candidate->(17, 89)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GenerateIntegers(long a, long b) {\n        long lower = Math.Max(2, Math.Min(a, b));\n        long upper = Math.Min(8, Math.Max(a, b));\n\n        List<long> result = new List<long>();\n        for (long i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n\n        return result;\n    }\n}\n\n### Perl version\n\nsub generate_integers {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "pl",
    "prompt": "sub exchange {\n    my($lst1, $lst2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\") || $candidate->([1, 2, 3, 4], [1, 2, 3, 4])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\") || $candidate->([1, 2, 3, 4], [1, 5, 3, 4])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\") || $candidate->([1, 2, 3, 4], [2, 1, 4, 3])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),\"YES\") || $candidate->([5, 7, 3], [2, 6, 4])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\") || $candidate->([5, 7, 3], [2, 6, 3])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\") || $candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200, 200]),\"YES\") || $candidate->([100, 200], [200, 200])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n        var odd = lst1.Count(x => x % 2 == 1);\n        var even = lst2.Count(x => x % 2 == 0);\n        return even >= odd ? \"YES\" : \"NO\";\n    }\n}\n\n### Perl version\n\nsub exchange {\n    my($lst1, $lst2) = @_;\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "pl",
    "prompt": "sub int_to_mini_roman {\n    my($number) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n        if(eq_deeply($candidate->(19),\"xix\") || $candidate->(19)==\"xix\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\") || $candidate->(152)==\"clii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"ccli\") || $candidate->(251)==\"ccli\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"cdxxvi\") || $candidate->(426)==\"cdxxvi\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(500),\"d\") || $candidate->(500)==\"d\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\") || $candidate->(1)==\"i\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"iv\") || $candidate->(4)==\"iv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"xliii\") || $candidate->(43)==\"xliii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"xc\") || $candidate->(90)==\"xc\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"xciv\") || $candidate->(94)==\"xciv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"dxxxii\") || $candidate->(532)==\"dxxxii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(900),\"cm\") || $candidate->(900)==\"cm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\") || $candidate->(994)==\"cmxciv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"m\") || $candidate->(1000)==\"m\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string IntToMiniRoman(long number) {\n        long[] num = { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };\n        string[] sym = { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" };\n        int i = 12;\n        string res = \"\";\n        while (number > 0) {\n            long div = number / num[i];\n            number %= num[i];\n            while (div > 0) {\n                res += sym[i];\n                div--;\n            }\n            i--;\n        }\n        return res.ToLower();\n    }\n}\n\n### Perl version\n\nsub int_to_mini_roman {\n    my($number) = @_;\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "pl",
    "prompt": "sub is_equal_to_sum_even {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_equal_to_sum_even;\n        if(eq_deeply($candidate->(4),\"\") || $candidate->(4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),\"\") || $candidate->(6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1) || $candidate->(8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),1) || $candidate->(10)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),\"\") || $candidate->(11)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),1) || $candidate->(12)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),\"\") || $candidate->(13)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16),1) || $candidate->(16)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsEqualToSumEven(long n) {\n        return n%2 == 0 && n >= 8;\n    }\n}\n\n### Perl version\n\nsub is_equal_to_sum_even {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "pl",
    "prompt": "sub decimal_to_binary {\n    my($decimal) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(0),\"db0db\") || $candidate->(0)==\"db0db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),\"db100000db\") || $candidate->(32)==\"db100000db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(103),\"db1100111db\") || $candidate->(103)==\"db1100111db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),\"db1111db\") || $candidate->(15)==\"db1111db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n}\n\n### Perl version\n\nsub decimal_to_binary {\n    my($decimal) = @_;\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "pl",
    "prompt": "sub simplify {\n    my($x, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1) || $candidate->(\"1/5\", \"5/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\", \"2/1\"),\"\") || $candidate->(\"1/6\", \"2/1\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1) || $candidate->(\"5/1\", \"3/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\", \"10/2\"),\"\") || $candidate->(\"7/10\", \"10/2\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1) || $candidate->(\"2/10\", \"50/10\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\", \"4/2\"),1) || $candidate->(\"7/2\", \"4/2\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1) || $candidate->(\"11/6\", \"6/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\", \"5/2\"),\"\") || $candidate->(\"2/3\", \"5/2\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\") || $candidate->(\"5/2\", \"3/5\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"8/4\"),1) || $candidate->(\"2/4\", \"8/4\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1) || $candidate->(\"2/4\", \"4/2\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1) || $candidate->(\"1/5\", \"5/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"1/5\"),\"\") || $candidate->(\"1/5\", \"1/5\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Simplify(string x, string n) {\n        var a = int.Parse(x.Split('/')[0]);\n        var b = int.Parse(x.Split('/')[1]);\n        var c = int.Parse(n.Split('/')[0]);\n        var d = int.Parse(n.Split('/')[1]);\n        var numerator = a * c;\n        var denom = b * d;\n        return numerator % denom == 0;\n    }\n}\n\n### Perl version\n\nsub simplify {\n    my($x, $n) = @_;\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "pl",
    "prompt": "sub solve {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\") || $candidate->(\"AsDf\")==\"aSdF\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"),\"4321\") || $candidate->(\"1234\")==\"4321\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"AB\") || $candidate->(\"ab\")==\"AB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\") || $candidate->(\"#a@C\")==\"#A@c\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#AsdfW^45\"),\"#aSDFw^45\") || $candidate->(\"#AsdfW^45\")==\"#aSDFw^45\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\") || $candidate->(\"#6@2\")==\"2@6#\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#$a^D\"),\"#$A^d\") || $candidate->(\"#$a^D\")==\"#$A^d\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\") || $candidate->(\"#ccc\")==\"#CCC\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(string s) {\n        var new_str = s.ToCharArray();\n        var flg = false;\n        for (var i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                new_str[i] = char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n                flg = true;\n            }\n        }\n        if (!flg) {\n            return new string(new_str.Reverse().ToArray());\n        }\n        return new string(new_str);\n    }\n}\n\n### Perl version\n\nsub solve {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "pl",
    "prompt": "sub right_angle_triangle {\n    my($a, $b, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1) || $candidate->(3, 4, 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\") || $candidate->(1, 2, 3)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1) || $candidate->(10, 6, 8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\") || $candidate->(2, 2, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1) || $candidate->(7, 24, 25)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\") || $candidate->(10, 5, 7)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1) || $candidate->(5, 12, 13)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1) || $candidate->(15, 8, 17)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1) || $candidate->(48, 55, 73)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\") || $candidate->(1, 1, 1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\") || $candidate->(2, 2, 10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool RightAngleTriangle(long a, long b, long c) {\n        return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n    }\n}\n\n### Perl version\n\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "pl",
    "prompt": "sub double_the_difference {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25) || $candidate->([5.0, 4.0])==25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0) || $candidate->([0.1, 0.2, 0.3])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0) || $candidate->([-10.0, -20.0, -30.0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0) || $candidate->([-1.0, -2.0, 8.0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34) || $candidate->([0.2, 3.0, 5.0])==34) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165) || $candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])==165) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long DoubleTheDifference(List<float> lst) {\n        return (long)lst.Where(x => x > 0 && x % 2 != 0 && !x.ToString().Contains(\".\")).Select(x => x * x).Sum();\n    }\n}\n\n### Perl version\n\nsub double_the_difference {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "pl",
    "prompt": "sub below_zero {\n    my($operations) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n        if(eq_deeply($candidate->([]),\"\") || $candidate->([])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),\"\") || $candidate->([1, 2, -3, 1, 2, -3])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1) || $candidate->([1, 2, -4, 5, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),\"\") || $candidate->([1, -1, 2, -2, 5, -5, 4, -4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1) || $candidate->([1, -1, 2, -2, 5, -5, 4, -5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1) || $candidate->([1, -2, 2, -2, 5, -5, 4, -4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n### Perl version\n\nsub below_zero {\n    my($operations) = @_;\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "pl",
    "prompt": "sub greatest_common_divisor {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&greatest_common_divisor;\n        if(eq_deeply($candidate->(3, 7),1) || $candidate->(3, 7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 15),5) || $candidate->(10, 15)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49, 14),7) || $candidate->(49, 14)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(144, 60),12) || $candidate->(144, 60)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GreatestCommonDivisor(long a, long b) {\n        while (b != 0) {\n            var t = b;\n            b = a % b;\n            a = t;\n        }\n\n        return a;\n    }\n}\n\n### Perl version\n\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "pl",
    "prompt": "sub f {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15]) || $candidate->(5)==[1, 2, 6, 24, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28]) || $candidate->(7)==[1, 2, 6, 24, 15, 720, 28]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1]) || $candidate->(1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2, 6]) || $candidate->(3)==[1, 2, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> F(long n) {\n        List<long> ret = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (i%2 == 0) {\n                long x = 1;\n                for (long j = 1; j <= i; j++) x *= j;\n                ret.Add(x);\n            } else {\n                long x = 0;\n                for (long j = 1; j <= i; j++) x += j;\n                ret.Add(x);\n            }\n        }\n        return ret;\n    }\n    \n}\n\n### Perl version\n\nsub f {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "pl",
    "prompt": "sub monotonic {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1) || $candidate->([1, 2, 4, 10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1) || $candidate->([1, 2, 4, 20])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\") || $candidate->([1, 20, 4, 10])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 0, -10]),1) || $candidate->([4, 1, 0, -10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1, 0]),1) || $candidate->([4, 1, 1, 0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\") || $candidate->([1, 2, 3, 2, 5, 60])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1) || $candidate->([1, 2, 3, 4, 5, 60])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1) || $candidate->([9, 9, 9, 9])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Monotonic(List<long> l) {\n        return l.SequenceEqual(l.OrderBy(x => x)) || l.SequenceEqual(l.OrderByDescending(x => x));\n    }\n}\n\n### Perl version\n\nsub monotonic {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "pl",
    "prompt": "sub by_length {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]) || $candidate->([2, 1, 1, 4, 5, 8, 2, 3])==[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 55]),[\"One\"]) || $candidate->([1, -1, 55])==[\"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]) || $candidate->([1, -1, 3, 2])==[\"Three\", \"Two\", \"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]) || $candidate->([9, 4, 8])==[\"Nine\", \"Eight\", \"Four\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> ByLength(List<long> arr) {\n        var dic = new Dictionary<long, string> {\n            {1, \"One\"},\n            {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"},\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n        var sorted_arr = arr.OrderByDescending(x => x);\n        var new_arr = new List<string>();\n        foreach (var var in sorted_arr) {\n            if (dic.ContainsKey(var)) {\n                new_arr.Add(dic[var]);\n            }\n        }\n        return new_arr;\n    }\n}\n\n### Perl version\n\nsub by_length {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "pl",
    "prompt": "sub remove_vowels {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"),\"bcdf\nghjklm\") || $candidate->(\"abcdef\nghijklm\")==\"bcdf\nghjklm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\") || $candidate->(\"fedcba\")==\"fdcb\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\") || $candidate->(\"eeeee\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"acBAA\"),\"cB\") || $candidate->(\"acBAA\")==\"cB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\") || $candidate->(\"EcBOO\")==\"cB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"),\"ybcd\") || $candidate->(\"ybcd\")==\"ybcd\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string RemoveVowels(string text) {\n        return new string(text.Where(c => !\"aeiouAEIOU\".Contains(c)).ToArray());\n    }\n}\n\n### Perl version\n\nsub remove_vowels {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "pl",
    "prompt": "sub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n        if(eq_deeply($candidate->(\"apple\"),\"\") || $candidate->(\"apple\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1) || $candidate->(\"apple pi e\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\") || $candidate->(\"eeeee\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A\"),1) || $candidate->(\"A\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\") || $candidate->(\"Pumpkin pie \")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie 1\"),\"\") || $candidate->(\"Pumpkin pie 1\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\") || $candidate->(\"eeeee e \")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pie\"),\"\") || $candidate->(\"apple pie\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e \"),\"\") || $candidate->(\"apple pi e \")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        var check = txt.Split(' ').Last();\n        return check.Length == 1 && 'a' <= check.ToLower()[0] && check.ToLower()[0] <= 'z';\n    }\n}\n\n### Perl version\n\nsub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "pl",
    "prompt": "sub iscube {\n    my($a) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\") || $candidate->(2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1) || $candidate->(-1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1) || $candidate->(64)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\") || $candidate->(180)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1) || $candidate->(1000)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1) || $candidate->(0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\") || $candidate->(1729)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool Iscube(long a) {\n        a = Math.Abs(a);\n        return Math.Pow(Math.Round(Math.Pow(a, 1.0 / 3)), 3) == a;\n    }\n}\n\n### Perl version\n\nsub iscube {\n    my($a) = @_;\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "pl",
    "prompt": "sub reverse_delete {\n    my($s, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"]) || $candidate->(\"abcde\", \"ae\")==[\"bcd\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\", \"b\"),[\"acdef\", \"\"]) || $candidate->(\"abcdef\", \"b\")==[\"acdef\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\", 1]) || $candidate->(\"abcdedcba\", \"ab\")==[\"cdedc\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dwik\", \"w\"),[\"dik\", \"\"]) || $candidate->(\"dwik\", \"w\")==[\"dik\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1]) || $candidate->(\"a\", \"a\")==[\"\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"\"),[\"abcdedcba\", 1]) || $candidate->(\"abcdedcba\", \"\")==[\"abcdedcba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"abcdedcba\", 1]) || $candidate->(\"abcdedcba\", \"v\")==[\"abcdedcba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1]) || $candidate->(\"vabba\", \"v\")==[\"abba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"mamma\", \"mia\"),[\"\", 1]) || $candidate->(\"mamma\", \"mia\")==[\"\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n        s = string.Concat(s.Where(x => !c.Contains(x)));\n        return Tuple.Create(s, s == new string(s.Reverse().ToArray()));\n    }\n    \n}\n\n### Perl version\n\nsub reverse_delete {\n    my($s, $c) = @_;\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "pl",
    "prompt": "sub mean_absolute_deviation {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5) || $candidate->([1.0, 2.0])==0.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0) || $candidate->([1.0, 2.0, 3.0, 4.0])==1.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0])==1.2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = numbers.Sum() / numbers.Count;\n        return numbers.Sum(x => Math.Abs(x - mean)) / numbers.Count;\n    }\n    \n}\n\n### Perl version\n\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "pl",
    "prompt": "sub correct_bracketing {\n    my($brackets) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1) || $candidate->(\"<>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1) || $candidate->(\"<<><>>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1) || $candidate->(\"<><><<><>><>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1) || $candidate->(\"<><><<<><><>><>><<><><<>>>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\") || $candidate->(\"<<<><>>>>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\") || $candidate->(\"><<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\") || $candidate->(\"<\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\") || $candidate->(\"<<<<\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\") || $candidate->(\">\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\") || $candidate->(\"<<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\") || $candidate->(\"<><><<><>><>><<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\") || $candidate->(\"<><><<><>><>>><>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n        var depth = 0;\n        foreach (var b in brackets) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n\n### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "pl",
    "prompt": "sub rescale_to_unit {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rescale_to_unit;\n        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0]) || $candidate->([2.0, 49.9])==[0.0, 1.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0]) || $candidate->([100.0, 49.9])==[1.0, 0.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0])==[0.0, 0.25, 0.5, 0.75, 1.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]) || $candidate->([2.0, 1.0, 5.0, 3.0, 4.0])==[0.25, 0.0, 1.0, 0.5, 0.75]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]) || $candidate->([12.0, 11.0, 15.0, 13.0, 14.0])==[0.25, 0.0, 1.0, 0.5, 0.75]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<float> RescaleToUnit(List<float> numbers) {\n        var min_number = numbers.Min();\n        var max_number = numbers.Max();\n        return numbers.Select(x => (x - min_number) / (max_number - min_number)).ToList();\n    }\n}\n\n### Perl version\n\nsub rescale_to_unit {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "pl",
    "prompt": "sub intersection {\n    my($interval1, $interval2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\") || $candidate->([1, 2], [2, 3])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1], [0, 4]),\"NO\") || $candidate->([-1, 1], [0, 4])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\") || $candidate->([-3, -1], [-5, 5])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, 2], [-4, 0]),\"YES\") || $candidate->([-2, 2], [-4, 0])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\") || $candidate->([-11, 2], [-1, -1])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 5]),\"NO\") || $candidate->([1, 2], [3, 5])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\") || $candidate->([1, 2], [1, 2])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -2], [-3, -2]),\"NO\") || $candidate->([-2, -2], [-3, -2])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n        bool IsPrime(long num) {\n            if (num == 1 || num == 0) {\n                return false;\n            }\n            if (num == 2) {\n                return true;\n            }\n            for (long i = 2; i < num; i++) {\n                if (num%i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        long l = Math.Max(interval1.Item1, interval2.Item1);\n        long r = Math.Min(interval1.Item2, interval2.Item2);\n        long length = r - l;\n        if (length > 0 && IsPrime(length)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    \n}\n\n### Perl version\n\nsub intersection {\n    my($interval1, $interval2) = @_;\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "pl",
    "prompt": "sub hex_key {\n    my($num) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1) || $candidate->(\"AB\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2) || $candidate->(\"1077E\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4) || $candidate->(\"ABED1A33\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2) || $candidate->(\"2020\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6) || $candidate->(\"123456789ABCDEF0\")==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"),12) || $candidate->(\"112233445566778899AABBCCDDEEFF00\")==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HexKey(string num) {\n        var primes = new HashSet<char> {'2', '3', '5', '7', 'B', 'D'};\n        return num.Count(c => primes.Contains(c));\n    }\n}\n\n### Perl version\n\nsub hex_key {\n    my($num) = @_;\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "pl",
    "prompt": "sub strange_sort_list {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3]) || $candidate->([1, 2, 3, 4])==[1, 4, 2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]) || $candidate->([5, 6, 7, 8, 9])==[5, 9, 6, 8, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]) || $candidate->([1, 2, 3, 4, 5])==[1, 5, 2, 4, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]) || $candidate->([5, 6, 7, 8, 9, 1])==[1, 9, 5, 8, 6, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5]) || $candidate->([5, 5, 5, 5])==[5, 5, 5, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]) || $candidate->([1, 2, 3, 4, 5, 6, 7, 8])==[1, 8, 2, 7, 3, 6, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]) || $candidate->([0, 2, 2, 2, 5, 5, -5, -5])==[-5, 5, -5, 5, 0, 2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111]) || $candidate->([111111])==[111111]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> StrangeSortList(List<long> lst) {\n        List<long> res = new List<long>();\n        bool switch_ = true;\n        while (lst.Count > 0) {\n            res.Add(switch_ ? lst.Min() : lst.Max());\n            lst.Remove(res.Last());\n            switch_ = !switch_;\n        }\n        return res;\n    }\n}\n\n### Perl version\n\nsub strange_sort_list {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "pl",
    "prompt": "sub is_bored {\n    my($S) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_bored;\n        if(eq_deeply($candidate->(\"Hello world\"),0) || $candidate->(\"Hello world\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is the sky blue?\"),0) || $candidate->(\"Is the sky blue?\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I love It !\"),1) || $candidate->(\"I love It !\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bIt\"),0) || $candidate->(\"bIt\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I feel good today. I will be productive. will kill It\"),2) || $candidate->(\"I feel good today. I will be productive. will kill It\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You and I are going for a walk\"),0) || $candidate->(\"You and I are going for a walk\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long IsBored(string S) {\n        var sentences = Regex.Split(S, @\"[.?!]\\s*\");\n        return sentences.Count(x => x.StartsWith(\"I \"));\n    }\n}\n\n### Perl version\n\nsub is_bored {\n    my($S) = @_;\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "pl",
    "prompt": "sub all_prefixes {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]) || $candidate->(\"asdfgh\")==[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\", \"WW\", \"WWW\"]) || $candidate->(\"WWW\")==[\"W\", \"WW\", \"WWW\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<string> AllPrefixes(string str) {\n        var result = new List<string>();\n\n        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n        }\n        return result;\n    }\n}\n\n### Perl version\n\nsub all_prefixes {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "pl",
    "prompt": "sub how_many_times {\n    my($string, $substring) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&how_many_times;\n        if(eq_deeply($candidate->(\"\", \"x\"),0) || $candidate->(\"\", \"x\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyxyxyx\", \"x\"),4) || $candidate->(\"xyxyxyx\", \"x\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"cacacacac\", \"cac\"),4) || $candidate->(\"cacacacac\", \"cac\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"john doe\", \"john\"),1) || $candidate->(\"john doe\", \"john\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long HowManyTimes(string str, string substring) {\n        long times = 0;\n\n        for (int i = 0; i <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}\n\n### Perl version\n\nsub how_many_times {\n    my($string, $substring) = @_;\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "pl",
    "prompt": "sub solution {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n        if(eq_deeply($candidate->([5, 8, 7, 1]),12) || $candidate->([5, 8, 7, 1])==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9) || $candidate->([3, 3, 3, 3, 3])==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 24, 321]),0) || $candidate->([30, 13, 24, 321])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 9]),5) || $candidate->([5, 9])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0) || $candidate->([2, 4, 8])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 23, 32]),23) || $candidate->([30, 13, 23, 32])==23) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 13, 2, 9]),3) || $candidate->([3, 13, 2, 9])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Solution(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 0 && x % 2 == 1).Sum();\n    }\n}\n\n### Perl version\n\nsub solution {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "pl",
    "prompt": "sub is_sorted {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n        if(eq_deeply($candidate->([5]),1) || $candidate->([5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1) || $candidate->([1, 2, 3, 4, 5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),\"\") || $candidate->([1, 3, 2, 4, 5])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1) || $candidate->([1, 2, 3, 4, 5, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1) || $candidate->([1, 2, 3, 4, 5, 6, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\") || $candidate->([1, 3, 2, 4, 5, 6, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1) || $candidate->([])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),\"\") || $candidate->([3, 2, 1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\") || $candidate->([1, 2, 2, 2, 3, 4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),\"\") || $candidate->([1, 2, 3, 3, 3, 4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1) || $candidate->([1, 2, 2, 3, 3, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),1) || $candidate->([1, 2, 3, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsSorted(List<long> lst) {\n        var count_digit = lst.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());\n        if (count_digit.Any(x => x.Value > 2)) {\n            return false;\n        }\n        if (lst.Zip(lst.Skip(1), (a, b) => a <= b).All(x => x)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n### Perl version\n\nsub is_sorted {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "pl",
    "prompt": "sub search {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1) || $candidate->([5, 5, 5, 5, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4) || $candidate->([4, 1, 4, 1, 4, 4])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3]),-1) || $candidate->([3, 3])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8) || $candidate->([8, 8, 8, 8, 8, 8, 8, 8])==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2) || $candidate->([2, 3, 3, 2, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1) || $candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8, 2]),2) || $candidate->([3, 2, 8, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1) || $candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1) || $candidate->([8, 8, 3, 6, 5, 6, 4])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1) || $candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1) || $candidate->([1, 9, 10, 1, 3])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5) || $candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4) || $candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2) || $candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1) || $candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4) || $candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4) || $candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2) || $candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1) || $candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1) || $candidate->([10])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2) || $candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1) || $candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1) || $candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1) || $candidate->([3, 10, 10, 9, 2])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long Search(List<long> lst) {\n        var frq = new long[lst.Max() + 1];\n        foreach (var i in lst) {\n            frq[i]++;\n        }\n\n        long ans = -1;\n        for (long i = 1; i < frq.Length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n\n        return ans;\n    }\n}\n\n### Perl version\n\nsub search {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "pl",
    "prompt": "sub pluck {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n        if(eq_deeply($candidate->([4, 2, 3]),[2, 1]) || $candidate->([4, 2, 3])==[2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 1]) || $candidate->([1, 2, 3])==[2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1]) || $candidate->([5, 0, 3, 0, 4, 2])==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3]) || $candidate->([1, 2, 3, 0, 5, 3])==[0, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1]) || $candidate->([5, 4, 8, 4, 8])==[4, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1]) || $candidate->([7, 6, 7, 1])==[6, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 7, 1]),[]) || $candidate->([7, 9, 7, 1])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Pluck(List<long> arr) {\n        if(arr.Count == 0) return new List<long>();\n        var evens = arr.Where(x => x % 2 == 0).ToList();\n        if(evens.Count == 0) return new List<long>();\n        return new List<long> { evens.Min(), arr.IndexOf(evens.Min()) };\n    }\n}\n\n### Perl version\n\nsub pluck {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "pl",
    "prompt": "sub pairs_sum_to_zero {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\") || $candidate->([1, 3, 5, 0])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),\"\") || $candidate->([1, 3, -2, 1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\") || $candidate->([1, 2, 3, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1) || $candidate->([2, 4, -5, 3, 5, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\") || $candidate->([1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1) || $candidate->([-3, 9, -1, 3, 2, 30])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1) || $candidate->([-3, 9, -1, 3, 2, 31])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),\"\") || $candidate->([-3, 9, -1, 4, 2, 30])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\") || $candidate->([-3, 9, -1, 4, 2, 31])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool PairsSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                if (l[i] + l[j] == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Perl version\n\nsub pairs_sum_to_zero {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "pl",
    "prompt": "sub make_palindrome {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\") || $candidate->(\"x\")==\"x\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyz\"),\"xyzyx\") || $candidate->(\"xyz\")==\"xyzyx\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyx\"),\"xyx\") || $candidate->(\"xyx\")==\"xyx\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\") || $candidate->(\"jerry\")==\"jerryrrej\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string MakePalindrome(string str) {\n        if (str == null) {\n            return \"\";\n        }\n\n        int beginningOfSuffix = 0;\n\n        while (str.Substring(beginningOfSuffix) != new string(str.Substring(beginningOfSuffix).Reverse().ToArray())) {\n            beginningOfSuffix += 1;\n        }\n\n        return str + new string(str.Substring(0, beginningOfSuffix).Reverse().ToArray());\n    }\n\n    \n}\n\n### Perl version\n\nsub make_palindrome {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "pl",
    "prompt": "sub starts_one_ends {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),18) || $candidate->(2)==18) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180) || $candidate->(3)==180) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800) || $candidate->(4)==1800) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000) || $candidate->(5)==18000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long StartsOneEnds(long n) {\n        if (n == 1) return 1;\n        return 18 * (long)Math.Pow(10, n - 2);\n    }\n}\n\n### Perl version\n\nsub starts_one_ends {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "pl",
    "prompt": "sub get_positive {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6]) || $candidate->([-1, -2, 4, 5, 6])==[4, 5, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]) || $candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])==[5, 3, 2, 3, 3, 9, 123, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2]),[]) || $candidate->([-1, -2])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> GetPositive(List<long> l) {\n        return l.Where(e => e > 0).ToList();\n    }\n}\n\n### Perl version\n\nsub get_positive {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "pl",
    "prompt": "sub concatenate {\n    my($strings) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate;\n        if(eq_deeply($candidate->([]),\"\") || $candidate->([])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"xyz\") || $candidate->([\"x\", \"y\", \"z\"])==\"xyz\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\") || $candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"])==\"xyzwk\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Concatenate(List<string> strings) {\n        return string.Concat(strings);\n    }\n}\n\n### Perl version\n\nsub concatenate {\n    my($strings) = @_;\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "pl",
    "prompt": "sub is_palindrome {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n        if(eq_deeply($candidate->(\"\"),1) || $candidate->(\"\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1) || $candidate->(\"aba\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaa\"),1) || $candidate->(\"aaaaa\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zbcd\"),\"\") || $candidate->(\"zbcd\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1) || $candidate->(\"xywyx\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyz\"),\"\") || $candidate->(\"xywyz\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywzx\"),\"\") || $candidate->(\"xywzx\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Perl version\n\nsub is_palindrome {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "pl",
    "prompt": "sub factorize {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n        if(eq_deeply($candidate->(2),[2]) || $candidate->(2)==[2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2]) || $candidate->(4)==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2, 2, 2]) || $candidate->(8)==[2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3, 19]) || $candidate->(57)==[3, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3, 3, 19, 19]) || $candidate->(3249)==[3, 3, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19]) || $candidate->(185193)==[3, 3, 3, 19, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3, 19, 19, 19]) || $candidate->(20577)==[3, 19, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 3]) || $candidate->(18)==[2, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Factorize(long n) {\n        var fact = new List<long>();\n        long i = 2;\n        while (i <= Math.Sqrt(n) + 1) {\n            if (n % i == 0) {\n                fact.Add(i);\n                n /= i;\n            } else {\n                i += 1;\n            }\n        }\n        if (n > 1) {\n            fact.Add(n);\n        }\n        return fact;\n    }\n}\n\n### Perl version\n\nsub factorize {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "pl",
    "prompt": "sub largest_prime_factor {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5) || $candidate->(15)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3) || $candidate->(27)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7) || $candidate->(63)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11) || $candidate->(330)==11) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29) || $candidate->(13195)==29) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long LargestPrimeFactor(long n) {\n        bool IsPrime(long k) {\n            if (k < 2) {\n                return false;\n            }\n            for (long i = 2; i < k; i++) {\n                if (k % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        long largest = 1;\n        for (long j = 2; j <= n; j++) {\n            if (n % j == 0 && IsPrime(j)) {\n                largest = Math.Max(largest, j);\n            }\n        }\n        return largest;\n    }\n    \n}\n\n### Perl version\n\nsub largest_prime_factor {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "pl",
    "prompt": "sub get_max_triples {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n        if(eq_deeply($candidate->(5),1) || $candidate->(5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),4) || $candidate->(6)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36) || $candidate->(10)==36) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361) || $candidate->(100)==53361) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static long GetMaxTriples(long n) {\n        long[] A = new long[n];\n        for (long i = 1; i <= n; i++) {\n            A[i-1] = i*i - i + 1;\n        }\n        List<(long, long, long)> ans = new List<(long, long, long)>();\n        for (long i = 0; i < n; i++) {\n            for (long j = i+1; j < n; j++) {\n                for (long k = j+1; k < n; k++) {\n                    if ((A[i]+A[j]+A[k])%3 == 0) {\n                        ans.Add((A[i],A[j],A[k]));\n                    }\n                }\n            }\n        }\n        return ans.Count;\n    }\n    \n}\n\n### Perl version\n\nsub get_max_triples {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "pl",
    "prompt": "sub anti_shuffle {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&anti_shuffle;\n        if(eq_deeply($candidate->(\"Hi\"),\"Hi\") || $candidate->(\"Hi\")==\"Hi\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hello\"),\"ehllo\") || $candidate->(\"hello\")==\"ehllo\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"number\"),\"bemnru\") || $candidate->(\"number\")==\"bemnru\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),\"abcd\") || $candidate->(\"abcd\")==\"abcd\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello World!!!\"),\"Hello !!!Wdlor\") || $candidate->(\"Hello World!!!\")==\"Hello !!!Wdlor\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\") || $candidate->(\"Hi. My name is Mister Robot. How are you?\")==\".Hi My aemn is Meirst .Rboot How aer ?ouy\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string AntiShuffle(string s) {\n        return string.Join(\" \", s.Split(' ').Select(i => new string(i.OrderBy(c => c).ToArray())));\n    }\n}\n\n### Perl version\n\nsub anti_shuffle {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "pl",
    "prompt": "sub solve {\n    my($N) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(1000),\"1\") || $candidate->(1000)==\"1\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(150),\"110\") || $candidate->(150)==\"110\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(147),\"1100\") || $candidate->(147)==\"1100\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(333),\"1001\") || $candidate->(333)==\"1001\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(963),\"10010\") || $candidate->(963)==\"10010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Solve(long N) {\n        return Convert.ToString(N.ToString().Sum(c => c - '0'), 2);\n    }\n}\n\n### Perl version\n\nsub solve {\n    my($N) = @_;\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "pl",
    "prompt": "sub minPath {\n    my($grid, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]) || $candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)==[1, 2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]) || $candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]) || $candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)==[1, 2, 1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]) || $candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)==[1, 10, 1, 10, 1, 10, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]) || $candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)==[1, 7, 1, 7, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]) || $candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)==[1, 6, 1, 6, 1, 6, 1, 6, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]) || $candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)==[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]) || $candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)==[1, 3, 1, 3, 1, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]) || $candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)==[1, 5, 1, 5, 1, 5, 1, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) || $candidate->([[1, 2], [3, 4]], 10)==[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) || $candidate->([[1, 3], [3, 2]], 10)==[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n        int n = grid.Count;\n        long val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    List<long> temp = new List<long>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n\n                    val = temp.Min();\n                }\n            }\n        }\n\n        List<long> ans = new List<long>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.Add(1);\n            } else {\n                ans.Add(val);\n            }\n        }\n        return ans;\n    }\n\n    \n}\n\n### Perl version\n\nsub minPath {\n    my($grid, $k) = @_;\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "pl",
    "prompt": "sub encrypt {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n        if(eq_deeply($candidate->(\"hi\"),\"lm\") || $candidate->(\"hi\")==\"lm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"ewhjklnop\") || $candidate->(\"asdfghjkl\")==\"ewhjklnop\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gf\"),\"kj\") || $candidate->(\"gf\")==\"kj\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\") || $candidate->(\"et\")==\"ix\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"faewfawefaewg\"),\"jeiajeaijeiak\") || $candidate->(\"faewfawefaewg\")==\"jeiajeaijeiak\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\") || $candidate->(\"hellomyfriend\")==\"lippsqcjvmirh\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") || $candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),\"e\") || $candidate->(\"a\")==\"e\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static string Encrypt(string s) {\n        var d = \"abcdefghijklmnopqrstuvwxyz\";\n        var out_ = \"\";\n        foreach (var c in s) {\n            if (d.Contains(c)) {\n                out_ += d[(d.IndexOf(c) + 2 * 2) % 26];\n            } else {\n                out_ += c;\n            }\n        }\n        return out_;\n    }\n}\n\n### Perl version\n\nsub encrypt {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "pl",
    "prompt": "sub make_a_pile {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n        if(eq_deeply($candidate->(3),[3, 5, 7]) || $candidate->(3)==[3, 5, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10]) || $candidate->(4)==[4, 6, 8, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13]) || $candidate->(5)==[5, 7, 9, 11, 13]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16]) || $candidate->(6)==[6, 8, 10, 12, 14, 16]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22]) || $candidate->(8)==[8, 10, 12, 14, 16, 18, 20, 22]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static List<long> MakeAPile(long n) {\n        return Enumerable.Range(0, (int)n).Select(i => n + 2 * i).ToList();\n    }\n}\n\n### Perl version\n\nsub make_a_pile {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "pl",
    "prompt": "sub is_prime {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n        if(eq_deeply($candidate->(6),\"\") || $candidate->(6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),1) || $candidate->(101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1) || $candidate->(11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1) || $candidate->(13441)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1) || $candidate->(61)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\") || $candidate->(4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\") || $candidate->(1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1) || $candidate->(5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1) || $candidate->(11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1) || $candidate->(17)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\") || $candidate->(85)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\") || $candidate->(77)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\") || $candidate->(255379)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "### C# version\n\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing System.Data;\nclass Problem {\n    public static bool IsPrime(long n) {\n        if (n < 2) {\n            return false;\n        }\n        for (long k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Perl version\n\nsub is_prime {\n    my($n) = @_;\n"
  }
]