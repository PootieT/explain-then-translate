[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool correct_bracketing(string brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n  (let loop ((depth 0)\n             (bs (string->list brackets)))\n    (cond\n      [(null? bs) (= depth 0)]\n      [(char=? (car bs) #\\() (loop (add1 depth) (cdr bs))]\n      [(char=? (car bs) #\\)) (and (> depth 0) (loop (sub1 depth) (cdr bs)))]\n      [else (loop depth (cdr bs))])))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool correct_bracketing(string brackets)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nfloat triangle_area(long a, long h)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(5L, 3L) == 7.5);\n    assert(candidate(2L, 2L) == 2.0);\n    assert(candidate(10L, 8L) == 40.0);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (triangle_area a h)\n  (/ (* a h) 2.0))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nfloat triangle_area(long a, long h)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong special_factorial(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (special_factorial n)\n  (define (fact i)\n    (if (zero? i) 1 (* i (fact (- i 1)))))\n  (define (special_fact i)\n    (if (zero? i) 1 (* (fact i) (special_fact (- i 1)))))\n  (special_fact n))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong special_factorial(long n)\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (largest_smallest_integers lst)\n  (define smallest (filter (lambda (x) (< x 0)) lst))\n  (define largest (filter (lambda (x) (> x 0)) lst))\n  (list (if (null? smallest) #f (apply max smallest))\n        (if (null? largest) #f (apply min largest))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool move_one_ball(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = move_one_ball;\n\n    assert(candidate([3L, 4L, 5L, 1L, 2L]) == true);\n    assert(candidate([3L, 5L, 10L, 1L, 2L]) == true);\n    assert(candidate([4L, 3L, 1L, 2L]) == false);\n    assert(candidate([3L, 5L, 4L, 1L, 2L]) == false);\n    assert(candidate([]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (move_one_ball arr)\n  (if (null? arr)\n      #t\n      (let ((sorted-array (sort arr <))\n            (my-arr '()))\n        (let ((min-value (apply min arr))\n              (min-index (index-of arr (apply min arr))))\n          (set! my-arr (append (drop arr min-index) (take arr min-index))))\n        (for/and ((i (in-range (length arr))))\n          (= (list-ref my-arr i) (list-ref sorted-array i))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool move_one_ball(long[] arr)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digits(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) == 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n    assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (digits n)\n  (define (odd? x) (= (modulo x 2) 1))\n  (define (product lst) (apply * lst))\n  (define digits (map (lambda (x) (string->number (string x))) (string->list (number->string n))))\n  (define odd-digits (filter odd? digits))\n  (if (null? odd-digits)\n      0\n      (product odd-digits)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digits(long n)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fib4(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (fib4 n)\n  (define results (list 0 0 2 0))\n  (if (< n 4)\n      (list-ref results n)\n      (begin\n        (for ([i (in-range 4 (add1 n))])\n          (set! results (append results (list (+ (last results) (list-ref (reverse results) 1) (list-ref (reverse results) 2) (list-ref (reverse results) 3))))))\n        (car (reverse results)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fib4(long n)\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_even(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_even;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [-10L, 3L, -5L, 2L, -3L, 3L, 5L, 0L, 9L, 1L, 123L]);\n    assert(candidate([5L, 8L, -12L, 4L, 23L, 2L, 3L, 11L, 12L, -10L]) == [-12L, 8L, 3L, 4L, 5L, 2L, 12L, 11L, 23L, -10L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (sort_even l)\n  (define evens (for/list ([i (in-range 0 (length l) 2)]) (list-ref l i)))\n  (define odds (for/list ([i (in-range 1 (length l) 2)]) (list-ref l i)))\n  (set! evens (sort evens <))\n  (define ans '())\n  (for ([e evens] [o odds])\n    (set! ans (append ans (list e o))))\n  (when (> (length evens) (length odds))\n    (set! ans (append ans (list (last evens)))))\n  ans)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_even(long[] l)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_happy(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (is_happy s)\n  (if (< (string-length s) 3)\n      #f\n      (for/and ([i (in-range (- (string-length s) 2))])\n        (not (or (char=? (string-ref s i) (string-ref s (+ i 1)))\n                 (char=? (string-ref s (+ i 1)) (string-ref s (+ i 2)))\n                 (char=? (string-ref s i) (string-ref s (+ i 2))))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_happy(string s)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring circular_shift(long x, long shift)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (circular_shift x shift)\n  (define s (number->string x))\n  (if (> shift (string-length s))\n      (list->string (reverse (string->list s)))\n      (string-append (substring s (- (string-length s) shift)) (substring s 0 (- (string-length s) shift)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring circular_shift(long x, long shift)\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_fill(long[][] grid, long capacity)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = max_fill;\n\n    assert(candidate([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L) == 6L);\n    assert(candidate([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L) == 5L);\n    assert(candidate([[0L, 0L, 0L], [0L, 0L, 0L]], 5L) == 0L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 2L) == 4L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 9L) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (max_fill grid capacity)\n  (apply + (map (lambda (arr) (ceiling (/ (apply + arr) capacity))) grid)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_fill(long[][] grid, long capacity)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool has_close_elements(float[] numbers, float threshold)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = has_close_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true);\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == true);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (has_close_elements numbers threshold)\n  (define (helper i j)\n    (cond [(= i (length numbers)) #f]\n          [(= j (length numbers)) (helper (+ i 1) (+ i 2))]\n          [(< (abs (- (list-ref numbers i) (list-ref numbers j))) threshold) #t]\n          [else (helper i (+ j 1))]))\n  (helper 0 1))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool has_close_elements(float[] numbers, float threshold)\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] numerical_letter_grade(float[] grades)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (numerical_letter_grade grades)\n  (define (grade gpa)\n    (cond [(= gpa 4.0) \"A+\"]\n          [(> gpa 3.7) \"A\"]\n          [(> gpa 3.3) \"A-\"]\n          [(> gpa 3.0) \"B+\"]\n          [(> gpa 2.7) \"B\"]\n          [(> gpa 2.3) \"B-\"]\n          [(> gpa 2.0) \"C+\"]\n          [(> gpa 1.7) \"C\"]\n          [(> gpa 1.3) \"C-\"]\n          [(> gpa 1.0) \"D+\"]\n          [(> gpa 0.7) \"D\"]\n          [(> gpa 0.0) \"D-\"]\n          [else \"E\"]))\n  (map grade grades))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] numerical_letter_grade(float[] grades)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong x_or_y(long n, long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (x_or_y n x y)\n  (cond\n    [(= n 1) y]\n    [(for/or ([i (in-range 2 n)]) (= (modulo n i) 0)) y]\n    [else x]))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong x_or_y(long n, long x, long y)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong specialFilter(long[] nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (specialFilter nums)\n  (define count 0)\n  (for ([num nums])\n    (when (> num 10)\n      (let ([number_as_string (number->string num)])\n        (when (and (odd? (string->number (substring number_as_string 0 1)))\n                   (odd? (string->number (substring number_as_string (- (string-length number_as_string) 1)))))\n          (set! count (add1 count))))))\n  count)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong specialFilter(long[] nums)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_music(string music_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (parse_music music_string)\n  (define note-map (hash \"o\" 4 \"o|\" 2 \".|\" 1))\n  (define (note->int note)\n    (hash-ref note-map note))\n  (filter-map note->int (string-split music_string \" \")))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_music(string music_string)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_distinct_characters(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (count_distinct_characters string)\n  (length (remove-duplicates (string->list (string-downcase string)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_distinct_characters(string string)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digitSum(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\") == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\") == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\" How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (digitSum s)\n  (if (string=? s \"\") 0\n      (for/sum ((char (in-string s)))\n        (if (char-upper-case? char) (char->integer char) 0))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digitSum(string s)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n  (define (f i)\n    (cond [(= (modulo i 3) 0) (expt (list-ref lst i) 2)]\n          [(and (= (modulo i 4) 0) (not (= (modulo i 3) 0))) (expt (list-ref lst i) 3)]\n          [else (list-ref lst i)]))\n  (apply + (map f (range (length lst)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(long[] lst)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] count_up_to(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (count_up_to n)\n  (define (is_prime x)\n    (and (> x 1) (not (ormap (lambda (i) (= (modulo x i) 0)) (range 2 x)))) )\n  (filter is_prime (range 2 n)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] count_up_to(long n)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(float[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n  (define (square x) (* x x))\n  (apply + (map square (map (lambda (x) (ceiling x)) lst))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(float[] lst)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (unique l)\n  (sort (remove-duplicates l) <))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique(long[] l)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (fib n)\n  (if (or (= n 0) (= n 1))\n      n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fib(long n)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fizz_buzz(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (fizz_buzz n)\n  (define ns (filter (lambda (x) (or (= (modulo x 11) 0) (= (modulo x 13) 0))) (range n)))\n  (define s (string-join (map number->string ns) \"\"))\n  (define ans (count (lambda (c) (char=? c #\\7)) (string->list s)))\n  ans)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fizz_buzz(long n)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring Strongest_Extension(string class_name, string[] extensions)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = Strongest_Extension;\n\n    assert(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\");\n    assert(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\");\n    assert(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\");\n    assert(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\");\n    assert(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\");\n    assert(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\");\n    assert(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\");\n    assert(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\");\n    assert(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (Strongest_Extension class_name extensions)\n  (define strong (first extensions))\n  (define my-val (- (length (regexp-match* #rx\"[A-Z]\" strong)) (length (regexp-match* #rx\"[a-z]\" strong))))\n  (for-each (lambda (s)\n              (let ([val (- (length (regexp-match* #rx\"[A-Z]\" s)) (length (regexp-match* #rx\"[a-z]\" s)))])\n                (when (> val my-val)\n                  (set! strong s)\n                  (set! my-val val))))\n            (cdr extensions))\n  (string-append class_name \".\" strong))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring Strongest_Extension(string class_name, string[] extensions)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(float, float) find_closest_elements(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (find_closest_elements numbers)\n  (define closest-pair #f)\n  (define distance #f)\n\n  (for ([i (in-range (length numbers))])\n    (for ([j (in-range (length numbers))])\n      (unless (= i j)\n        (let ([new-distance (abs (- (list-ref numbers i) (list-ref numbers j)))])\n          (when (or (not distance) (< new-distance distance))\n            (set! distance new-distance)\n            (set! closest-pair (sort (list (list-ref numbers i) (list-ref numbers j)) <)))))))\n\n  closest-pair)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(float, float) find_closest_elements(float[] numbers)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool valid_date(string date)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (valid_date date)\n  (define (is-valid-date month day year)\n    (cond [(or (< month 1) (> month 12)) #f]\n          [(and (member month '(1 3 5 7 8 10 12)) (or (< day 1) (> day 31))) #f]\n          [(and (member month '(4 6 9 11)) (or (< day 1) (> day 30))) #f]\n          [(and (= month 2) (or (< day 1) (> day 29))) #f]\n          [else #t]))\n  (with-handlers ([exn:fail? (lambda (e) #f)])\n    (let ([date-list (map string->number (string-split date \"-\"))])\n      (apply is-valid-date date-list))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool valid_date(string date)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (add x y)\n  (+ x y))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long x, long y)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool triples_sum_to_zero(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (triples_sum_to_zero l)\n  (for*/first ([i (in-range (length l))]\n               [j (in-range (add1 i) (length l))]\n               [k (in-range (add1 j) (length l))]\n               #:when (= 0 (+ (list-ref l i) (list-ref l j) (list-ref l k))))\n    #t))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool triples_sum_to_zero(long[] l)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_divisor(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (largest_divisor n)\n  (for/first ([i (reverse (range 1 n))] #:when (= (modulo n i) 0))\n    i))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_divisor(long n)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring sort_numbers(string numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (sort_numbers numbers)\n  (define value-map (hash \"zero\" 0 \"one\" 1 \"two\" 2 \"three\" 3 \"four\" 4 \"five\" 5 \"six\" 6 \"seven\" 7 \"eight\" 8 \"nine\" 9))\n  (string-join (sort (filter (lambda (x) (not (string=? x \"\"))) (string-split numbers \" \")) (lambda (a b) (< (hash-ref value-map a) (hash-ref value-map b)))) \" \"))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring sort_numbers(string numbers)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong smallest_change(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = smallest_change;\n\n    assert(candidate([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 3L, 2L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 2L, 3L, 2L, 1L]) == 0L);\n    assert(candidate([3L, 1L, 1L, 3L]) == 0L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([0L, 1L]) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (smallest_change arr)\n  (define ans 0)\n  (for ([i (in-range (quotient (length arr) 2))])\n    (when (not (= (list-ref arr i) (list-ref arr (- (length arr) i 1))))\n      (set! ans (+ ans 1))))\n  ans)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong smallest_change(long[] arr)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_threshold(long[] l, long t)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (below_threshold l t)\n  (for/and ([e l])\n    (< e t)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_threshold(long[] l, long t)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) prod_signs(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result = candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get == -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L, 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L, 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (prod_signs arr)\n  (if (null? arr) #f\n      (let ((prod (if (member 0 arr) 0 (expt -1 (length (filter (lambda (x) (< x 0)) arr))))))\n        (* prod (apply + (map abs arr))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) prod_signs(long[] arr)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong modp(long n, long p)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (modp n p)\n  (define ret 1)\n  (for ([i (in-range n)])\n    (set! ret (modulo (* 2 ret) p)))\n  ret)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong modp(long n, long p)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_upper(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (count_upper s)\n  (define count 0)\n  (for ([i (in-range 0 (string-length s) 2)])\n    (when (member (string-ref s i) (string->list \"AEIOU\"))\n      (set! count (+ count 1))))\n  count)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_upper(string s)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong multiply(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (multiply a b)\n  (abs (* (modulo a 10) (modulo b 10))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong multiply(long a, long b)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique_digits(long[] x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (unique_digits x)\n  (define (all-odd-digits? n)\n    (andmap odd? (map (lambda (c) (string->number (string c))) (string->list (number->string n)))))\n  (sort (filter all-odd-digits? x) <))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique_digits(long[] x)\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool will_it_fly(long[] q, long w)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (will_it_fly q w)\n  (cond [(> (apply + q) w) #f]\n        [(not (equal? q (reverse q))) #f]\n        [else #t]))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool will_it_fly(long[] q, long w)\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_multiply_prime(long a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (is_multiply_prime a)\n  (define (is-prime n)\n    (for/and ([j (in-range 2 n)])\n      (not (= (modulo n j) 0))))\n  (for/or ([i (in-range 2 101)])\n    (for/or ([j (in-range 2 101)])\n      (for/or ([k (in-range 2 101)])\n        (and (is-prime i) (is-prime j) (is-prime k) (= (* i j k) a))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_multiply_prime(long a)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] maximum(long[] arr, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (maximum arr k)\n  (if (= k 0)\n      '()\n      (list-tail (sort arr <) (- (length arr) k))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] maximum(long[] arr, long k)\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] separate_paren_groups(string paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = separate_paren_groups;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n    assert(candidate(\"(()(())((())))\") == [\"(()(())((())))\"]);\n    assert(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\() (set! current_depth (add1 current_depth))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\)) (set! current_depth (sub1 current_depth))\n           (set! current_string (append current_string (list c)))\n           (cond [(= current_depth 0) (set! result (append result (list (list->string current_string))))\n                  (set! current_string '())])]))\n  result)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] separate_paren_groups(string paren_string)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong skjkasdkd(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = skjkasdkd;\n\n    assert(candidate([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L]) == 10L);\n    assert(candidate([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\n    assert(candidate([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L]) == 13L);\n    assert(candidate([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L]) == 11L);\n    assert(candidate([0L, 81L, 12L, 3L, 1L, 21L]) == 3L);\n    assert(candidate([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);\n    assert(candidate([8191L]) == 19L);\n    assert(candidate([8191L, 123456L, 127L, 7L]) == 19L);\n    assert(candidate([127L, 97L, 8192L]) == 10L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (skjkasdkd lst)\n  (define (isPrime n)\n    (define (iter i)\n      (cond [(> i (sqrt n)) #t]\n            [(= (modulo n i) 0) #f]\n            [else (iter (+ i 1))]))\n    (if (< n 2) #f (iter 2)))\n\n  (define maxx 0)\n  (for ([i lst])\n    (when (and (> i maxx) (isPrime i))\n      (set! maxx i)))\n  (define result (apply + (map (lambda (d) (string->number (string d))) (string->list (number->string maxx)))))\n  result)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong skjkasdkd(long[] lst)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] total_match(string[] lst1, string[] lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (total_match lst1 lst2)\n  (define l1 (apply + (map string-length lst1)))\n  (define l2 (apply + (map string-length lst2)))\n  (if (<= l1 l2) lst1 lst2))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] total_match(string[] lst1, string[] lst2)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong car_race_collision(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (car_race_collision n)\n  (* n n))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong car_race_collision(long n)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_simple_power(long x, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (is_simple_power x n)\n  (if (= n 1)\n      (= x 1)\n      (let loop ((power 1))\n        (if (< power x)\n            (loop (* power n))\n            (= power x)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_simple_power(long x, long n)\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encode(string message)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (encode message)\n  (define vowels \"aeiouAEIOU\")\n  (define vowels-replace (make-hash '((#\\a . #\\c) (#\\e . #\\g) (#\\i . #\\k) (#\\o . #\\q) (#\\u . #\\w) (#\\A . #\\C) (#\\E . #\\G) (#\\I . #\\K) (#\\O . #\\Q) (#\\U . #\\W))))\n\n  (define (swap-case c)\n    (if (char-upper-case? c)\n        (char-downcase c)\n        (char-upcase c)))\n\n  (define (replace-vowels c)\n    (hash-ref vowels-replace c c))\n\n  (list->string (map replace-vowels (map swap-case (string->list message)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encode(string message)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] incr_list(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (incr_list l)\n  (map add1 l))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] incr_list(long[] l)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong vowels_count(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (vowels_count s)\n  (define vowels \"aeiouAEIOU\")\n  (define n_vowels (count (lambda (c) (member c (string->list vowels))) (string->list s)))\n  (if (or (char=? (last (string->list s)) #\\y) (char=? (last (string->list s)) #\\Y))\n      (+ n_vowels 1)\n      n_vowels))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong vowels_count(string s)\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] sorted_list_sum(string[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (sorted_list_sum lst)\n  (define (even-length? str) (= (modulo (string-length str) 2) 0))\n  (define new-lst (filter even-length? (sort lst string<?)))\n  (sort new-lst (lambda (a b) (< (string-length a) (string-length b)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] sorted_list_sum(string[] lst)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] words_string(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\") == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (words_string s)\n  (if (not s)\n      '()\n      (string-split (string-replace s \",\" \" \"))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] words_string(string s)\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_palindrome(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_palindrome(long n)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_dict_case(Nullable!(string[string]) dict)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (check_dict_case dict)\n  (define (is-upper s) (string=? s (string-upcase s)))\n  (define (is-lower s) (string=? s (string-downcase s)))\n\n  (cond [(zero? (hash-count dict)) #f]\n        [else\n         (let loop ([state \"start\"] [keys (hash-keys dict)])\n           (cond [(null? keys) (or (string=? state \"upper\") (string=? state \"lower\"))]\n                 [(not (string? (car keys))) #f]\n                 [(string=? state \"start\")\n                  (if (is-upper (car keys))\n                      (loop \"upper\" (cdr keys))\n                      (if (is-lower (car keys))\n                          (loop \"lower\" (cdr keys))\n                          #f))]\n\n                 [(or (and (string=? state \"upper\") (not (is-upper (car keys))))\n                      (and (string=? state \"lower\") (not (is-lower (car keys)))))\n                  #f]\n\n                 [else (loop state (cdr keys))]))]))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_dict_case(Nullable!(string[string]) dict)\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] tri(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (tri n)\n  (if (= n 0)\n      '(1)\n      (let ((my-tri '(1 3)))\n        (for ([i (in-range 2 (add1 n))])\n          (if (even? i)\n              (set! my-tri (append my-tri (list (/ (+ i 2) 2))))\n              (set! my-tri (append my-tri (list (+ (list-ref my-tri (- i 1)) (list-ref my-tri (- i 2)) (/ (+ i 3) 2)))))))\n        my-tri)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] tri(long n)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat median(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (median l)\n  (set! l (sort l <))\n  (if (odd? (length l))\n      (list-ref l (quotient (length l) 2))\n      (/ (+ (list-ref l (quotient (length l) 2))\n            (list-ref l (- (quotient (length l) 2) 1)))\n         2.0)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat median(long[] l)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring change_base(long x, long base)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (change_base x base)\n  (let loop ((x x) (ret \"\"))\n    (if (> x 0)\n        (loop (quotient x base) (string-append (number->string (modulo x base)) ret))\n        ret)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring change_base(long x, long base)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(string) longest(string[] strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (longest strings)\n  (if (null? strings)\n      #f\n      (let ((maxlen (apply max (map string-length strings))))\n        (findf (lambda (s) (= (string-length s) maxlen)) strings))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(string) longest(string[] strings)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] common(long[] l1, long[] l2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (common l1 l2)\n  (define ret (make-hash))\n  (for ([e1 l1])\n    (for ([e2 l2])\n      (when (= e1 e2)\n        (hash-set! ret e1 #t))))\n  (sort (hash-keys ret) <))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] common(long[] l1, long[] l2)\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong minSubArraySum(long[] nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (minSubArraySum nums)\n  (define max-sum 0)\n  (define s 0)\n  (for ([num nums])\n    (set! s (+ s (- num)))\n    (when (< s 0)\n      (set! s 0))\n    (set! max-sum (max s max-sum)))\n  (when (= max-sum 0)\n    (set! max-sum (apply max (map - nums))))\n  (define min-sum (- max-sum))\n  min-sum)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong minSubArraySum(long[] nums)\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_array(long[] array)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (sort_array array)\n  (if (null? array)\n      '()\n      (sort array (if (even? (+ (first array) (last array))) > <))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_array(long[] array)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_odd_collatz(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_odd_collatz;\n\n    assert(candidate(14L) == [1L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(5L) == [1L, 5L]);\n    assert(candidate(12L) == [1L, 3L, 5L]);\n    assert(candidate(1L) == [1L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (get_odd_collatz n)\n  (define (collatz-seq n)\n    (cond [(= n 1) (list 1)]\n          [(even? n) (cons n (collatz-seq (/ n 2)))]\n          [else (cons n (collatz-seq (+ (* n 3) 1)))]))\n  (let ([seq (collatz-seq n)])\n    (sort (filter odd? seq) <)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_odd_collatz(long n)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] derivative(long[] xs)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (derivative xs)\n  (cdr (map (lambda (x i) (* i x)) xs (range 0 (length xs)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] derivative(long[] xs)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fibfib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fibfib(long n)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_element(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (max_element l)\n  (apply max l))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_element(long[] l)\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong prime_fib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prime_fib;\n\n    assert(candidate(1L) == 2L);\n    assert(candidate(2L) == 3L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 13L);\n    assert(candidate(5L) == 89L);\n    assert(candidate(6L) == 233L);\n    assert(candidate(7L) == 1597L);\n    assert(candidate(8L) == 28657L);\n    assert(candidate(9L) == 514229L);\n    assert(candidate(10L) == 433494437L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (prime_fib n)\n  (define (is-prime? p)\n    (cond [(< p 2) #f]\n          [else (for/and ([k (in-range 2 (min (add1 (floor (sqrt p))) (sub1 p)))])\n                  (not (= 0 (modulo p k))))]))\n  (define f (list 0 1))\n  (let loop ([n n])\n    (cond [(= n 0) (car (reverse f))]\n          [else (begin\n                  (set! f (append f (list (+ (car (reverse f)) (cadr (reverse f))))))\n                  (if (is-prime? (car (reverse f)))\n                      (loop (sub1 n))\n                      (loop n)))])))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong prime_fib(long n)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) sum_product(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (sum_product numbers)\n  (define sum-value (apply + numbers))\n  (define prod-value (apply * numbers))\n  (list sum-value prod-value))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) sum_product(long[] numbers)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] select_words(string s, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (select_words s n)\n  (define (consonant? c)\n    (not (member (char-downcase c) '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (count consonant? (string->list word)))\n  (filter (lambda (word) (= (count-consonants word) n))\n          (string-split s)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] select_words(string s, long n)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add_elements(long[] arr, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (add_elements arr k)\n  (apply + (filter (lambda (x) (<= (string-length (number->string x)) 2)) (take arr k))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add_elements(long[] arr, long k)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] eat(long number, long need, long remaining)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (eat number need remaining)\n  (if (<= need remaining)\n      (list (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] eat(long number, long need, long remaining)\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] odd_count(string[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = odd_count;\n\n    assert(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n    assert(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n    assert(candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (odd_count lst)\n  (map (lambda (arr)\n         (let ([n (count (lambda (d) (odd? (string->number (string d)))) (string->list arr))])\n           (string-append \"the number of odd elements \" (number->string n) \"n the str\" (number->string n) \"ng \" (number->string n) \" of the \" (number->string n) \"nput.\")))\n       lst))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] odd_count(string[] lst)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) next_smallest(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (next_smallest lst)\n  (set! lst (sort (remove-duplicates lst) <))\n  (if (< (length lst) 2)\n      #f\n      (list-ref lst 1)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) next_smallest(long[] lst)\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long)[] get_row(long[][] lst, long x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L, 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L, 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L, 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L), tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]], 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L, 2L)]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (get_row lst x)\n  (define coords\n    (for*/list ([i (in-range (length lst))]\n                [j (in-range (length (list-ref lst i)))]\n                #:when (= (list-ref (list-ref lst i) j) x))\n      (list i j)))\n  (sort coords (lambda (a b) (or (< (first a) (first b))\n                                 (and (= (first a) (first b))\n                                      (> (second a) (second b)))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long)[] get_row(long[][] lst, long x)\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_prefix(string[] strings, string prefix)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-prefix? x prefix)) strings))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_prefix(string[] strings, string prefix)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong choose_num(long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (choose_num x y)\n  (cond\n    [(> x y) -1]\n    [(even? y) y]\n    [(= x y) -1]\n    [else (- y 1)]))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong choose_num(long x, long y)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool prime_length(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prime_length;\n\n    assert(candidate(\"Hello\") == true);\n    assert(candidate(\"abcdcba\") == true);\n    assert(candidate(\"kittens\") == true);\n    assert(candidate(\"orange\") == false);\n    assert(candidate(\"wow\") == true);\n    assert(candidate(\"world\") == true);\n    assert(candidate(\"MadaM\") == true);\n    assert(candidate(\"Wow\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"HI\") == true);\n    assert(candidate(\"go\") == true);\n    assert(candidate(\"gogo\") == false);\n    assert(candidate(\"aaaaaaaaaaaaaaa\") == false);\n    assert(candidate(\"Madam\") == true);\n    assert(candidate(\"M\") == false);\n    assert(candidate(\"0\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (prime_length string)\n  (define l (string-length string))\n  (and (> l 1)\n       (not (ormap (lambda (i) (= (modulo l i) 0)) (range 2 l)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool prime_length(string string)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_to_n(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (sum_to_n n)\n  (apply + (range 0 (add1 n))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_to_n(long n)\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring fix_spaces(string text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (fix_spaces text)\n  (define new_text \"\")\n  (define i 0)\n  (define start 0)\n  (define end 0)\n\n  (define (append_text! text)\n    (if (> (- end start) 2)\n        (set! new_text (string-append new_text \"-\" text))\n        (if (> (- end start) 0)\n            (set! new_text (string-append new_text (make-string (- end start) #\\_ ) text))\n            (set! new_text (string-append new_text text))))\n    (set! start (+ i 1))\n    (set! end (+ i 1)))\n\n  (for ([c (string->list text)])\n    (cond [(char=? c #\\space)\n           (set! end (+ end 1))]\n          [else\n           (append_text! (string c))]))\n\n  (if (> (- end start) 2)\n      (set! new_text (string-append new_text \"-\"))\n      (if (> (- end start) 0)\n          (set! new_text (string-append new_text (make-string (- end start) #\\_)))\n          (void)))\n  new_text)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring fix_spaces(string text)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] rolling_max(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = rolling_max;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 1L]) == [4L, 4L, 4L, 4L]);\n    assert(candidate([3L, 2L, 3L, 100L, 3L]) == [3L, 3L, 3L, 100L, 100L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (rolling_max numbers)\n  (define running-max #f)\n  (define result '())\n\n  (for ([n (in-list numbers)])\n    (set! running-max (if (not running-max) n (max running-max n)))\n    (set! result (append result (list running-max))))\n\n  result)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] rolling_max(long[] numbers)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring words_in_sentence(string sentence)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (words_in_sentence sentence)\n  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))  \n    (if (< n 2) #f (iter 2)))\n  (define (prime-word? word)\n    (or (= (string-length word) 2) (is-prime (string-length word))))\n  (string-join (filter prime-word? (string-split sentence)) \" \"))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring words_in_sentence(string sentence)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring get_closest_vowel(string word)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (get_closest_vowel word)\n  (define vowels (list \"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"O\" \"U\" \"I\"))\n  (let loop ([i (- (string-length word) 2)])\n    (if (< i 1)\n        \"\"\n        (if (member (substring word i (+ i 1)) vowels)\n            (if (and (not (member (substring word (- i 1) i) vowels))\n                     (not (member (substring word (+ i 1) (+ i 2)) vowels)))\n                (substring word i (+ i 1))\n                (loop (- i 1)))\n            (loop (- i 1))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring get_closest_vowel(string word)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] compare(long[] game, long[] guess)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (compare game guess)\n  (map abs (map - game guess)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] compare(long[] game, long[] guess)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] remove_duplicates(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (remove_duplicates numbers)\n  (define c (make-hash))\n  (for ([n numbers])\n    (hash-update! c n add1 0))\n  (filter (lambda (n) (<= (hash-ref c n 0) 1)) numbers))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] remove_duplicates(long[] numbers)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_nested_parens(string paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (parse_nested_parens paren_string)\n  (define (parse_paren_group s)\n    (define depth 0)\n    (define max_depth 0)\n    (for ([c (string->list s)])\n      (if (equal? c #\\()\n          (set! depth (+ depth 1))\n          (set! depth (- depth 1)))\n      (set! max_depth (max depth max_depth)))\n    max_depth)\n  (filter (lambda (x) (not (equal? x \"\"))) (map parse_paren_group (string-split paren_string \" \"))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_nested_parens(string paren_string)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_count(long num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (even_odd_count num)\n  (define even_count 0)\n  (define odd_count 0)\n  (for-each (lambda (i) (if (even? (string->number (string i))) (set! even_count (add1 even_count)) (set! odd_count (add1 odd_count)))) (string->list (number->string (abs num))))\n  (list even_count odd_count))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_count(long num)\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fruit_distribution(string s, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (fruit_distribution s n)\n  (define (string->intlist s)\n    (map string->number (string-split s)))\n  (- n (apply + (filter integer? (string->intlist s)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fruit_distribution(string s, long n)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_xor(string a, string b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (string_xor a b)\n  (define (xor i j)\n    (if (char=? i j) #\\0 #\\1))\n  (list->string (map xor (string->list a) (string->list b))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_xor(string a, string b)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong strlen(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (strlen string)\n  (string-length string))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong strlen(string string)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_sequence(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (string_sequence n)\n  (string-join (map number->string (range (add1 n)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_sequence(long n)\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring file_name_check(string file_name)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\") == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n    assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\") == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\") == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\") == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\") == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"s.\") == \"No\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (file_name_check file_name)\n  (define suf '(\"txt\" \"exe\" \"dll\"))\n  (define lst (string-split file_name \".\"))\n  (cond\n    [(not (= (length lst) 2)) \"No\"]\n    [(not (member (list-ref lst 1) suf)) \"No\"]\n    [(= (string-length (list-ref lst 0)) 0) \"No\"]\n    [(not (char-alphabetic? (string-ref (list-ref lst 0) 0))) \"No\"]\n    [(> (length (regexp-match* #rx\"[0-9]\" (list-ref lst 0))) 3) \"No\"]\n    [else \"Yes\"]))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring file_name_check(string file_name)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong can_arrange(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (can_arrange arr)\n  (define ind -1)\n  (for ([i (in-range 1 (length arr))])\n    (when (< (list-ref arr i) (list-ref arr (- i 1)))\n      (set! ind i)))\n  ind)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong can_arrange(long[] arr)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (add lst)\n  (apply + (filter even? (map (lambda (i) (list-ref lst i)) (range 1 (length lst) 2)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long[] lst)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] intersperse(long[] numbers, long delimeter)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (intersperse numbers delimeter)\n  (if (null? numbers)\n      '()\n      (let loop ((n (cdr numbers)) (result (list (car numbers))))\n        (if (null? n)\n            result\n            (loop (cdr n) (append result (list delimeter) (list (car n))))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] intersperse(long[] numbers, long delimeter)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring match_parens(string[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = match_parens;\n\n    assert(candidate([\"()(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \")\"]) == \"No\");\n    assert(candidate([\"(()(())\", \"())())\"]) == \"No\");\n    assert(candidate([\")())\", \"(()()(\"]) == \"Yes\");\n    assert(candidate([\"(())))\", \"(()())((\"]) == \"Yes\");\n    assert(candidate([\"()\", \"())\"]) == \"No\");\n    assert(candidate([\"(()(\", \"()))()\"]) == \"Yes\");\n    assert(candidate([\"((((\", \"((())\"]) == \"No\");\n    assert(candidate([\")(()\", \"(()(\"]) == \"No\");\n    assert(candidate([\")(\", \")(\"]) == \"No\");\n    assert(candidate([\"(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \"(\"]) == \"Yes\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (match_parens lst)\n  (define (check s)\n    (define (iter val s)\n      (cond\n        [(null? s) (if (= val 0) #t #f)]\n        [(eq? (car s) #\\() (iter (+ val 1) (cdr s))]\n        [(eq? (car s) #\\)) (if (< val 1) #f (iter (- val 1) (cdr s)))]\n        [else (iter val (cdr s))]))\n    (iter 0 (string->list s)))\n\n  (define S1 (string-append (list-ref lst 0) (list-ref lst 1)))\n  (define S2 (string-append (list-ref lst 1) (list-ref lst 0)))\n  (if (or (check S1) (check S2)) \"Yes\" \"No\"))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring match_parens(string[] lst)\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_substring(string[] strings, string substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (filter_by_substring strings substring)\n  (filter (lambda (x) (string-contains? x substring)) strings))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_substring(string[] strings, string substring)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring find_max(string[] words)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (find_max words)\n  (car (sort words (lambda (a b)\n                      (or (> (length (remove-duplicates (string->list a))) (length (remove-duplicates (string->list b))))\n                          (and (= (length (remove-duplicates (string->list a))) (length (remove-duplicates (string->list b))))\n                               (string<? a b)))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring find_max(string[] words)\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] generate_integers(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (generate_integers a b)\n  (define lower (max 2 (min a b)))\n  (define upper (min 8 (max a b)))\n  (filter even? (range lower (+ upper 1))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] generate_integers(long a, long b)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring exchange(long[] lst1, long[] lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = exchange;\n\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L]) == \"YES\");\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L]) == \"NO\");\n    assert(candidate([1L, 2L, 3L, 4L], [2L, 1L, 4L, 3L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 4L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 3L]) == \"NO\");\n    assert(candidate([3L, 2L, 6L, 1L, 8L, 9L], [3L, 5L, 5L, 1L, 1L, 1L]) == \"NO\");\n    assert(candidate([100L, 200L], [200L, 200L]) == \"YES\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (exchange lst1 lst2)\n  (define odd (count odd? lst1))\n  (define even (count even? lst2))\n  (if (>= even odd)\n      \"YES\"\n      \"NO\"))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring exchange(long[] lst1, long[] lst2)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_equal_to_sum_even(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (is_equal_to_sum_even n)\n  (and (even? n) (>= n 8)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_equal_to_sum_even(long n)\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring decimal_to_binary(long decimal)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (decimal_to_binary decimal)\n  (string-append \"db\" (number->string decimal 2) \"db\"))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring decimal_to_binary(long decimal)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool simplify(string x, string n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\", \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\", \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/5\", \"1/5\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (simplify x n)\n  (define a-b (string-split x \"/\"))\n  (define c-d (string-split n \"/\"))\n  (define numerator (* (string->number (first a-b)) (string->number (first c-d))))\n  (define denom (* (string->number (second a-b)) (string->number (second c-d))))\n  (= (/ numerator denom) (floor (/ numerator denom))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool simplify(string x, string n)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool right_angle_triangle(long a, long b, long c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (right_angle_triangle a b c)\n  (or (= (* a a) (+ (* b b) (* c c)))\n      (= (* b b) (+ (* a a) (* c c)))\n      (= (* c c) (+ (* a a) (* b b)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool right_angle_triangle(long a, long b, long c)\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong double_the_difference(float[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (double_the_difference lst)\n  (apply + (filter odd? (map (lambda (x) (* x x)) (filter (lambda (x) (and (> x 0) (integer? x))) lst)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong double_the_difference(float[] lst)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_zero(long[] operations)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (below_zero operations)\n  (let loop ([balance 0] [ops operations])\n    (cond [(null? ops) #f]\n          [(< (+ balance (car ops)) 0) #t]\n          [else (loop (+ balance (car ops)) (cdr ops))])))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_zero(long[] operations)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong greatest_common_divisor(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n      (greatest_common_divisor b (modulo a b))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong greatest_common_divisor(long a, long b)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] f(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L) == [1L, 2L, 6L, 24L, 15L]);\n    assert(candidate(7L) == [1L, 2L, 6L, 24L, 15L, 720L, 28L]);\n    assert(candidate(1L) == [1L]);\n    assert(candidate(3L) == [1L, 2L, 6L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (f n)\n  (define (factorial x)\n    (foldl * 1 (range 1 (+ x 1))))\n  (define (sum x)\n    (foldl + 0 (range 1 (+ x 1))))\n  (for/list ([i (range 1 (+ n 1))])\n    (if (even? i)\n        (factorial i)\n        (sum i))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] f(long n)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool monotonic(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (monotonic l)\n  (or (equal? l (sort l <))\n      (equal? l (sort l >))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool monotonic(long[] l)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] by_length(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (by_length arr)\n  (define dic (hash 1 \"One\" 2 \"Two\" 3 \"Three\" 4 \"Four\" 5 \"Five\" 6 \"Six\" 7 \"Seven\" 8 \"Eight\" 9 \"Nine\"))\n  (define sorted-arr (sort arr >))\n  (define new-arr '())\n  (for ([var sorted-arr])\n    (when (hash-ref dic var #f)\n      (set! new-arr (append new-arr (list (hash-ref dic var))))))\n\n  new-arr)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] by_length(long[] arr)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring remove_vowels(string text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = remove_vowels;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\");\n    assert(candidate(\"fedcba\") == \"fdcb\");\n    assert(candidate(\"eeeee\") == \"\");\n    assert(candidate(\"acBAA\") == \"cB\");\n    assert(candidate(\"EcBOO\") == \"cB\");\n    assert(candidate(\"ybcd\") == \"ybcd\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (remove_vowels text)\n  (list->string (filter (lambda (s) (not (member s '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))) (string->list text))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring remove_vowels(string text)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool iscube(long a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (iscube a)\n  (= (expt (round (expt (abs a) (/ 1 3))) 3) (abs a)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool iscube(long a)\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(string, bool) reverse_delete(string s, string c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (reverse_delete s c)\n  (define new-string (list->string (filter (lambda (char) (not (member char (string->list c)) )) (string->list s))))\n  (list new-string (equal? new-string (list->string (reverse (string->list new-string))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(string, bool) reverse_delete(string s, string c)\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat mean_absolute_deviation(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (mean_absolute_deviation numbers)\n  (define mean (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) (length numbers)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat mean_absolute_deviation(float[] numbers)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool correct_bracketing(string brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n  (let loop ([depth 0] [brackets (string->list brackets)])\n    (if (null? brackets)\n        (zero? depth)\n        (if (char=? (car brackets) #\\<)\n            (loop (+ depth 1) (cdr brackets))\n            (and (positive? depth) (loop (- depth 1) (cdr brackets)))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool correct_bracketing(string brackets)\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat[] rescale_to_unit(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (rescale_to_unit numbers)\n  (let ([min-number (apply min numbers)]\n        [max-number (apply max numbers)])\n    (map (\u03bb (x) (/ (- x min-number) (- max-number min-number))) numbers)))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat[] rescale_to_unit(float[] numbers)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (intersection interval1 interval2)\n  (define (is-prime num)\n    (cond [(or (= num 1) (= num 0)) #f]\n          [(= num 2) #t]\n          [else (for/and ([i (in-range 2 num)]) (not (= 0 (modulo num i))))]))\n\n  (define l (max (first interval1) (first interval2)))\n  (define r (min (second interval1) (second interval2)))\n  (define length (- r l))\n  (if (and (> length 0) (is-prime length))\n      \"YES\"\n      \"NO\"))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong hex_key(string num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (hex_key num)\n  (define primes '(#\\2 #\\3 #\\5 #\\7 #\\B #\\D))\n  (define total 0)\n  (for ((i (in-string num)))\n    (when (member i primes)\n      (set! total (+ total 1))))\n  total)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong hex_key(string num)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] strange_sort_list(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (strange_sort_list lst)\n  (let loop ((lst lst) (res '()) (switch #t))\n    (if (null? lst)\n        res\n        (let ((x (if switch (apply min lst) (apply max lst))))\n          (loop (remove x lst) (append res (list x)) (not switch))))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] strange_sort_list(long[] lst)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] all_prefixes(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (all_prefixes string)\n  (define result '())\n  (for ([i (in-range (string-length string))])\n    (set! result (append result (list (substring string 0 (+ i 1))))))\n  result)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] all_prefixes(string string)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong solution(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (solution lst)\n  (apply + (filter odd? (map (lambda (x) (list-ref lst x)) (range 0 (length lst) 2)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong solution(long[] lst)\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_sorted(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_sorted(long[] lst)\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong search(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L, 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L, 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L, 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L, 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (search lst)\n  (define frq (make-vector (+ (apply max lst) 1) 0))\n  (for-each (lambda (i) (vector-set! frq i (+ (vector-ref frq i) 1))) lst)\n  (define ans -1)\n  (for ([i (in-range 1 (vector-length frq))])\n    (when (>= (vector-ref frq i) i)\n      (set! ans i)))\n  ans)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong search(long[] lst)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool pairs_sum_to_zero(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (pairs_sum_to_zero l)\n  (define (helper l1)\n    (cond [(null? l1) #f]\n          [(member (- (car l1)) (cdr l1)) #t]\n          [else (helper (cdr l1))]))\n  (helper l))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool pairs_sum_to_zero(long[] l)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong starts_one_ends(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (starts_one_ends n)\n  (if (= n 1) 1\n      (* 18 (expt 10 (- n 2)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong starts_one_ends(long n)\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_positive(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (get_positive l)\n  (filter (lambda (e) (> e 0)) l))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_positive(long[] l)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring concatenate(string[] strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = concatenate;\n\n    assert(candidate([]) == \"\");\n    assert(candidate([\"x\", \"y\", \"z\"]) == \"xyz\");\n    assert(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (concatenate strings)\n  (string-append* strings))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring concatenate(string[] strings)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_nested(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_nested;\n\n    assert(candidate(\"[[]]\") == true);\n    assert(candidate(\"[]]]]]]][[[[[]\") == false);\n    assert(candidate(\"[][]\") == false);\n    assert(candidate(\"[]\") == false);\n    assert(candidate(\"[[[[]]]]\") == true);\n    assert(candidate(\"[]]]]]]]]]]\") == false);\n    assert(candidate(\"[][][[]]\") == true);\n    assert(candidate(\"[[]\") == false);\n    assert(candidate(\"[]]\") == false);\n    assert(candidate(\"[[]][[\") == true);\n    assert(candidate(\"[[][]]\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"[[[[[[[[\") == false);\n    assert(candidate(\"]]]]]]]]\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (is_nested string)\n  (define opening-bracket-index '())\n  (define closing-bracket-index '())\n  (for ([i (in-range (string-length string))])\n    (cond [(char=? (string-ref string i) #\\[) (set! opening-bracket-index (append opening-bracket-index (list i)))]\n          [(char=? (string-ref string i) #\\]) (set! closing-bracket-index (cons i closing-bracket-index))]))\n  (define cnt 0)\n  (define i 0)\n  (define l (length closing-bracket-index))\n  (for ([idx opening-bracket-index])\n    (cond [(and (< i l) (< idx (list-ref closing-bracket-index i)))\n           (set! cnt (add1 cnt))\n           (set! i (add1 i))]))\n  (>= cnt 2))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_nested(string string)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_palindrome(string text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (is_palindrome text)\n  (for/and ([i (in-range (string-length text))])\n    (equal? (string-ref text i)\n            (string-ref text (- (string-length text) 1 i)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_palindrome(string text)\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_nums(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (count_nums arr)\n  (define (digits_sum n)\n    (let ([neg (if (< n 0) -1 1)])\n      (let ([n (map (lambda (x) (string->number (string x))) (string->list (number->string (* n neg))))])\n        (apply + (cons (* (first n) neg) (rest n))))))\n\n  (length (filter (lambda (x) (> x 0)) (map digits_sum arr))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_nums(long[] arr)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] factorize(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (factorize n)\n  (define (isqrt x) (floor (sqrt x)))\n  (define (iter i n)\n    (cond ((> i (isqrt n)) (if (> n 1) (list n) '()))\n          ((zero? (modulo n i)) (cons i (iter i (quotient n i))))\n          (else (iter (+ i 1) n))))\n  (iter 2 n))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] factorize(long n)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_prime_factor(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (largest_prime_factor n)\n  (define (is_prime k)\n    (and (> k 1) (not (ormap (lambda (i) (= (modulo k i) 0)) (range 2 k)))) )\n  (define largest 1)\n  (for ([j (in-range 2 (add1 n))])\n    (when (and (= (modulo n j) 0) (is_prime j))\n      (set! largest (max largest j))))\n  largest)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_prime_factor(long n)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong get_max_triples(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (get_max_triples n)\n  (define A (for/list ([i (in-range 1 (add1 n))]) (- (* i i) i 1)))\n  (define ans '())\n  (for ([i (in-range n)])\n    (for ([j (in-range (add1 i) n)])\n      (for ([k (in-range (add1 j) n)])\n        (when (= (modulo (+ (list-ref A i) (list-ref A j) (list-ref A k)) 3) 0)\n          (set! ans (cons (list (list-ref A i) (list-ref A j) (list-ref A k)) ans))))))\n  (length ans))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong get_max_triples(long n)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring anti_shuffle(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (anti_shuffle s)\n  (string-join (map (lambda (i) (list->string (sort (string->list i) char<=?))) (string-split s \" \")) \" \"))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring anti_shuffle(string s)\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(long N)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (solve N)\n  (number->string (apply + (map (lambda (c) (string->number (string c))) (string->list (number->string N)))) 2))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(long N)\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] minPath(long[][] grid, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = minPath;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L) == [1L, 2L, 1L]);\n    assert(candidate([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L) == [1L]);\n    assert(candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]], 4L) == [1L, 2L, 1L, 2L]);\n    assert(candidate([[6L, 4L, 13L, 10L], [5L, 7L, 12L, 1L], [3L, 16L, 11L, 15L], [8L, 14L, 9L, 2L]], 7L) == [1L, 10L, 1L, 10L, 1L, 10L, 1L]);\n    assert(candidate([[8L, 14L, 9L, 2L], [6L, 4L, 13L, 15L], [5L, 7L, 1L, 12L], [3L, 10L, 11L, 16L]], 5L) == [1L, 7L, 1L, 7L, 1L]);\n    assert(candidate([[11L, 8L, 7L, 2L], [5L, 16L, 14L, 4L], [9L, 3L, 15L, 6L], [12L, 13L, 10L, 1L]], 9L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L]);\n    assert(candidate([[12L, 13L, 10L, 1L], [9L, 3L, 15L, 6L], [5L, 16L, 14L, 4L], [11L, 8L, 7L, 2L]], 12L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L]);\n    assert(candidate([[2L, 7L, 4L], [3L, 1L, 5L], [6L, 8L, 9L]], 8L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n    assert(candidate([[6L, 1L, 5L], [3L, 8L, 9L], [2L, 7L, 4L]], 8L) == [1L, 5L, 1L, 5L, 1L, 5L, 1L, 5L]);\n    assert(candidate([[1L, 2L], [3L, 4L]], 10L) == [1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L]);\n    assert(candidate([[1L, 3L], [3L, 2L]], 10L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n;; \n(define (minPath grid k)\n  (define n (length grid))\n  (define val (+ (* n n) 1))\n  (for ([i (in-range n)])\n    (for ([j (in-range n)])\n      (when (= (list-ref (list-ref grid i) j) 1)\n        (define temp '())\n        (when (> i 0) (set! temp (cons (list-ref (list-ref grid (- i 1)) j) temp)))\n        (when (> j 0) (set! temp (cons (list-ref (list-ref grid i) (- j 1)) temp)))\n        (when (< i (- n 1)) (set! temp (cons (list-ref (list-ref grid (+ i 1)) j) temp)))\n        (when (< j (- n 1)) (set! temp (cons (list-ref (list-ref grid i) (+ j 1)) temp)))\n        (set! val (apply min temp)))))\n  (define ans '())\n  (for ([i (in-range k)])\n    (if (even? i)\n        (set! ans (append ans (list 1)))\n        (set! ans (append ans (list val)))))\n  ans)\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] minPath(long[][] grid, long k)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] make_a_pile(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (make_a_pile n)\n  (for/list ([i n])\n    (+ n (* 2 i))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] make_a_pile(long n)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_prime(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "### Racket version\n\n#lang racket\n\n(define (is_prime n)\n  (if (< n 2)\n      #f\n      (for/and ([k (in-range 2 (- n 1))])\n        (not (= (modulo n k) 0)))))\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_prime(long n)\n"
  }
]