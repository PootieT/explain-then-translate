[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "rs",
    "prompt": "fn correct_bracketing(brackets: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction correct_bracketing($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] === \"(\") {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return False;\n        }\n    }\n    return $depth === 0;\n}\n?>\n\n### Rust version\n\nfn correct_bracketing(brackets: String) -> bool {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "rs",
    "prompt": "fn triangle_area(a: isize, h: isize) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction triangle_area($a, $h) {\n    return $a * $h / 2.0;\n}\n?>\n\n### Rust version\n\nfn triangle_area(a: isize, h: isize) -> f64 {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "rs",
    "prompt": "fn special_factorial(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction special_factorial($n) {\n    $fact_i = 1;\n    $special_fact = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact_i *= $i;\n        $special_fact *= $fact_i;\n    }\n    return $special_fact;\n}\n?>\n\n### Rust version\n\nfn special_factorial(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "rs",
    "prompt": "fn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]), (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]), (Some(-3), Some(1)));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction largest_smallest_integers($lst) {\n    $smallest = array_filter($lst, function($x) { return $x < 0; });\n    $largest = array_filter($lst, function($x) { return $x > 0; });\n    return [max($smallest) ?: null, min($largest) ?: null];\n}\n?>\n\n### Rust version\n\nfn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>) {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "rs",
    "prompt": "fn move_one_ball(arr: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = move_one_ball;\n    assert_eq!(candidate(vec![3, 4, 5, 1, 2]), true);\n    assert_eq!(candidate(vec![3, 5, 10, 1, 2]), true);\n    assert_eq!(candidate(vec![4, 3, 1, 2]), false);\n    assert_eq!(candidate(vec![3, 5, 4, 1, 2]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sorted_array = $arr;\n    sort($sorted_array);\n\n    $min_value = min($arr);\n    $min_index = array_search($min_value, $arr);\n    $my_arr = array_merge(array_slice($arr, $min_index), array_slice($arr, 0, $min_index));\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($my_arr[$i] != $sorted_array[$i]) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Rust version\n\nfn move_one_ball(arr: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "rs",
    "prompt": "fn digits(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction digits($n) {\n    $product = 1;\n    $odd_count = 0;\n    foreach(str_split($n) as $digit) {\n        $int_digit = intval($digit);\n        if ($int_digit%2 == 1) {\n            $product= $product*$int_digit;\n            $odd_count+=1;\n        }\n    }\n    if ($odd_count ==0) {\n        return 0;\n    } else {\n        return $product;\n    }\n}\n?>\n\n### Rust version\n\nfn digits(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "rs",
    "prompt": "fn fib4(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fib4($n) {\n    $results = [0, 0, 2, 0];\n    if ($n < 4) {\n        return $results[$n];\n    }\n\n    for ($i = 4; $i <= $n; $i++) {\n        array_push($results, $results[count($results)-1] + $results[count($results)-2] + $results[count($results)-3] + $results[count($results)-4]);\n        array_shift($results);\n    }\n\n    return $results[count($results)-1];\n}\n?>\n\n### Rust version\n\nfn fib4(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "rs",
    "prompt": "fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction order_by_points($nums) {\n    $digits_sum = function($n) {\n        $neg = 1;\n        if ($n < 0) {\n            $n = -1 * $n;\n            $neg = -1;\n        }\n        $n = array_map('intval', str_split($n));\n        $n[0] = $n[0] * $neg;\n        return array_sum($n);\n    };\n    usort($nums, function($a, $b) use ($digits_sum) {\n        return $digits_sum($a) - $digits_sum($b);\n    });\n    return $nums;\n}\n?>\n\n### Rust version\n\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "rs",
    "prompt": "fn is_happy(s: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_happy($s) {\n  if (strlen($s) < 3) {\n    return false;\n  }\n\n  for ($i = 0; $i < strlen($s) - 2; $i++) {\n    if ($s[$i] == $s[$i+1] || $s[$i+1] == $s[$i+2] || $s[$i] == $s[$i+2]) {\n      return false;\n    }\n  }\n  return true;\n}\n?>\n\n### Rust version\n\nfn is_happy(s: String) -> bool {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "rs",
    "prompt": "fn circular_shift(x: isize, shift: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction circular_shift($x, $shift) {\n    $s = strval($x);\n    if ($shift > strlen($s)) {\n        return strrev($s);\n    } else {\n        return substr($s, strlen($s) - $shift) . substr($s, 0, strlen($s) - $shift);\n    }\n}\n?>\n\n### Rust version\n\nfn circular_shift(x: isize, shift: isize) -> String {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "rs",
    "prompt": "fn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction has_close_elements($numbers, $threshold) {\n    foreach ($numbers as $idx => $elem) {\n        foreach ($numbers as $idx2 => $elem2) {\n            if ($idx != $idx2) {\n                $distance = abs($elem - $elem2);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n?>\n\n### Rust version\n\nfn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "rs",
    "prompt": "fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction numerical_letter_grade($grades) {\n    $letter_grade = [];\n    foreach ($grades as $gpa) {\n        if ($gpa == 4.0) {\n            $letter_grade[] = \"A+\";\n        } elseif ($gpa > 3.7) {\n            $letter_grade[] = \"A\";\n        } elseif ($gpa > 3.3) {\n            $letter_grade[] = \"A-\";\n        } elseif ($gpa > 3.0) {\n            $letter_grade[] = \"B+\";\n        } elseif ($gpa > 2.7) {\n            $letter_grade[] = \"B\";\n        } elseif ($gpa > 2.3) {\n            $letter_grade[] = \"B-\";\n        } elseif ($gpa > 2.0) {\n            $letter_grade[] = \"C+\";\n        } elseif ($gpa > 1.7) {\n            $letter_grade[] = \"C\";\n        } elseif ($gpa > 1.3) {\n            $letter_grade[] = \"C-\";\n        } elseif ($gpa > 1.0) {\n            $letter_grade[] = \"D+\";\n        } elseif ($gpa > 0.7) {\n            $letter_grade[] = \"D\";\n        } elseif ($gpa > 0.0) {\n            $letter_grade[] = \"D-\";\n        } else {\n            $letter_grade[] = \"E\";\n        }\n    }\n    return $letter_grade;\n}\n?>\n\n### Rust version\n\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "rs",
    "prompt": "fn x_or_y(n: isize, x: isize, y: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = x_or_y;\n    assert_eq!(candidate(7, 34, 12), 34);\n    assert_eq!(candidate(15, 8, 5), 5);\n    assert_eq!(candidate(3, 33, 5212), 33);\n    assert_eq!(candidate(1259, 3, 52), 3);\n    assert_eq!(candidate(7919, -1, 12), -1);\n    assert_eq!(candidate(3609, 1245, 583), 583);\n    assert_eq!(candidate(91, 56, 129), 129);\n    assert_eq!(candidate(6, 34, 1234), 1234);\n    assert_eq!(candidate(1, 2, 0), 0);\n    assert_eq!(candidate(2, 2, 0), 2);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction x_or_y($n, $x, $y) {\n    if ($n == 1) {\n        return $y;\n    }\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return $y;\n            break;\n        }\n    }\n    return $x;\n}\n?>\n\n### Rust version\n\nfn x_or_y(n: isize, x: isize, y: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "rs",
    "prompt": "fn specialFilter(nums: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction specialFilter($nums) {\n    $count = 0;\n    foreach($nums as $num) {\n        if ($num > 10) {\n            $odd_digits = [1, 3, 5, 7, 9];\n            $number_as_string = strval($num);\n            if (in_array(intval($number_as_string[0]), $odd_digits) && in_array(intval($number_as_string[-1]), $odd_digits)) {\n                $count += 1;\n            }\n        }\n    }\n    return $count;\n}\n?>\n\n### Rust version\n\nfn specialFilter(nums: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "rs",
    "prompt": "fn parse_music(music_string: String) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction parse_music($music_string) {\n    $note_map = ['o' => 4, 'o|' => 2, '.|' => 1];\n    return array_filter(array_map(function($x) use ($note_map) {\n        return $note_map[$x];\n    }, explode(' ', $music_string)));\n}\n?>\n\n### Rust version\n\nfn parse_music(music_string: String) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "rs",
    "prompt": "fn digitSum(s: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction digitSum($s) {\n    if ($s == \"\") return 0;\n    return array_sum(array_map(function ($char) {\n        return ord($char) * ctype_upper($char);\n    }, str_split($s)));\n}\n?>\n\n### Rust version\n\nfn digitSum(s: String) -> isize {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "rs",
    "prompt": "fn sum_squares(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sum_squares($lst) {\n    $result =[];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 === 0) {\n            $result[] = $lst[$i]**2;\n        } elseif ($i % 4 === 0 && $i % 3 !== 0) {\n            $result[] = $lst[$i]**3;\n        } else {\n            $result[] = $lst[$i];\n        }\n    }\n    return array_sum($result);\n}\n?>\n\n### Rust version\n\nfn sum_squares(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "rs",
    "prompt": "fn count_up_to(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = count_up_to;\n    assert_eq!(candidate(5), vec![2, 3]);\n    assert_eq!(candidate(6), vec![2, 3, 5]);\n    assert_eq!(candidate(7), vec![2, 3, 5]);\n    assert_eq!(candidate(10), vec![2, 3, 5, 7]);\n    assert_eq!(candidate(0), Vec::<isize>::new());\n    assert_eq!(candidate(22), vec![2, 3, 5, 7, 11, 13, 17, 19]);\n    assert_eq!(candidate(1), Vec::<isize>::new());\n    assert_eq!(candidate(18), vec![2, 3, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(47), vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n    assert_eq!(candidate(101), vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction count_up_to($n) {\n    $primes = [];\n\n    for ($i = 2; $i < $n; $i++) {\n        $is_prime = true;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j === 0) {\n                $is_prime = false;\n                break;\n            }\n        }\n        if ($is_prime) {\n            $primes[] = $i;\n        }\n    }\n\n    return $primes;\n}\n?>\n\n### Rust version\n\nfn count_up_to(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "rs",
    "prompt": "fn unique(l: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction unique($l) {\n    $unique = array_unique($l);\n    sort($unique);\n    return $unique;\n}\n?>\n\n### Rust version\n\nfn unique(l: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "rs",
    "prompt": "fn fib(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n?>\n\n### Rust version\n\nfn fib(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "rs",
    "prompt": "fn fizz_buzz(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fizz_buzz($n) {\n    $ns = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 === 0 || $i % 13 === 0) {\n            $ns[] = $i;\n        }\n    }\n    $s = implode('', array_map('strval', $ns));\n    $ans = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ans += ($s[$i] === '7');\n    }\n    return $ans;\n}\n?>\n\n### Rust version\n\nfn fizz_buzz(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "rs",
    "prompt": "fn Strongest_Extension(class_name: String, extensions: Vec<String>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"__YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]), String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"), vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"-_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]), String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"_\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction Strongest_Extension($class_name, $extensions) {\n    $strong = $extensions[0];\n    $my_val = strlen(preg_replace('/[^A-Z]/', '', $extensions[0])) - strlen(preg_replace('/[^a-z]/', '', $extensions[0]));\n    foreach ($extensions as $s) {\n        $val = strlen(preg_replace('/[^A-Z]/', '', $s)) - strlen(preg_replace('/[^a-z]/', '', $s));\n        if ($val > $my_val) {\n            $strong = $s;\n            $my_val = $val;\n        }\n    }\n    $ans = $class_name . \".\" . $strong;\n    return $ans;\n}\n?>\n\n### Rust version\n\nfn Strongest_Extension(class_name: String, extensions: Vec<String>) -> String {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "rs",
    "prompt": "fn find_closest_elements(numbers: Vec<f64>) -> (f64, f64) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = find_closest_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2]), (3.9, 4.0));\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0]), (5.0, 5.9));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2]), (2.0, 2.2));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0]), (2.0, 2.0));\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1]), (2.2, 3.1));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction find_closest_elements($numbers) {\n    $closest_pair = null;\n    $distance = null;\n\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = 0; $j < count($numbers); $j++) {\n            if ($i != $j) {\n                if ($distance === null) {\n                    $distance = abs($numbers[$i] - $numbers[$j]);\n                    $closest_pair = [$numbers[$i], $numbers[$j]];\n                } else {\n                    $new_distance = abs($numbers[$i] - $numbers[$j]);\n                    if ($new_distance < $distance) {\n                        $distance = $new_distance;\n                        $closest_pair = [$numbers[$i], $numbers[$j]];\n                    }\n                }\n            }\n        }\n    }\n\n    sort($closest_pair);\n    return $closest_pair;\n}\n?>\n\n### Rust version\n\nfn find_closest_elements(numbers: Vec<f64>) -> (f64, f64) {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "rs",
    "prompt": "fn valid_date(date: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction valid_date($date) {\n    try {\n        $date = trim($date);\n        list($month, $day, $year) = explode('-', $date);\n        $month = (int)$month;\n        $day = (int)$day;\n        $year = (int)$year;\n        if ($month < 1 || $month > 12) {\n            return false;\n        }\n        if (in_array($month, [1,3,5,7,8,10,12]) && ($day < 1 || $day > 31)) {\n            return false;\n        }\n        if (in_array($month, [4,6,9,11]) && ($day < 1 || $day > 30)) {\n            return false;\n        }\n        if ($month == 2 && ($day < 1 || $day > 29)) {\n            return false;\n        }\n    } catch (Exception $e) {\n        return false;\n    }\n\n    return true;\n}\n?>\n\n### Rust version\n\nfn valid_date(date: String) -> bool {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "rs",
    "prompt": "fn add(x: isize, y: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction add($x, $y) {\n    return $x + $y;\n}\n?>\n\n### Rust version\n\nfn add(x: isize, y: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "rs",
    "prompt": "fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction triples_sum_to_zero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n?>\n\n### Rust version\n\nfn triples_sum_to_zero(l: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "rs",
    "prompt": "fn largest_divisor(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction largest_divisor($n) {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n}\n?>\n\n### Rust version\n\nfn largest_divisor(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "rs",
    "prompt": "fn sort_numbers(numbers: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sort_numbers($numbers) {\n    $value_map = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    ];\n    $arr = array_filter(explode(' ', $numbers));\n    usort($arr, function($a, $b) use ($value_map) {\n        return $value_map[$a] - $value_map[$b];\n    });\n    return implode(' ', $arr);\n}\n?>\n\n### Rust version\n\nfn sort_numbers(numbers: String) -> String {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "rs",
    "prompt": "fn smallest_change(arr: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction smallest_change($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n?>\n\n### Rust version\n\nfn smallest_change(arr: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "rs",
    "prompt": "fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction below_threshold($l, $t) {\n    foreach ($l as $e) {\n        if ($e >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Rust version\n\nfn below_threshold(l: Vec<isize>, t: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "rs",
    "prompt": "fn prod_signs(arr: Vec<isize>) -> Option<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction prod_signs($arr) {\n    if (empty($arr)) return null;\n    $prod = in_array(0, $arr) ? 0 : pow(-1, count(array_filter($arr, function($x) { return $x < 0; })));\n    return $prod * array_sum(array_map('abs', $arr));\n}\n?>\n\n### Rust version\n\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "rs",
    "prompt": "fn modp(n: isize, p: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!(candidate(3, 5), 3);\n    assert_eq!(candidate(1101, 101), 2);\n    assert_eq!(candidate(0, 101), 1);\n    assert_eq!(candidate(3, 11), 8);\n    assert_eq!(candidate(100, 101), 1);\n    assert_eq!(candidate(30, 5), 4);\n    assert_eq!(candidate(31, 5), 3);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction modp($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = (2 * $ret) % $p;\n    }\n    return $ret;\n}\n?>\n\n### Rust version\n\nfn modp(n: isize, p: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "rs",
    "prompt": "fn count_upper(s: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction count_upper($s) {\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (strpos(\"AEIOU\", $s[$i]) !== false) {\n            $count += 1;\n        }\n    }\n    return $count;\n}\n?>\n\n### Rust version\n\nfn count_upper(s: String) -> isize {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "rs",
    "prompt": "fn multiply(a: isize, b: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction multiply($a, $b) {\n    return abs($a % 10) * abs($b % 10);\n}\n?>\n\n### Rust version\n\nfn multiply(a: isize, b: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "rs",
    "prompt": "fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction unique_digits($x) {\n    $odd_digit_elements = [];\n    foreach($x as $i) {\n        if (preg_match('/^[13579]+$/', $i)) {\n            $odd_digit_elements[] = $i;\n        }\n    }\n    sort($odd_digit_elements);\n    return $odd_digit_elements;\n}\n?>\n\n### Rust version\n\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "rs",
    "prompt": "fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction will_it_fly($q, $w) {\n    if (array_sum($q) > $w) {\n        return false;\n    }\n\n    $i = 0;\n    $j = count($q)-1;\n    while ($i<$j) {\n        if ($q[$i] != $q[$j]) {\n            return false;\n        }\n        $i+=1;\n        $j-=1;\n    }\n    return true;\n}\n?>\n\n### Rust version\n\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "rs",
    "prompt": "fn is_multiply_prime(a: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_multiply_prime($a) {\n    $is_prime=function($n) {\n        for ($j = 2; $j < $n; $j++) {\n            if ($n % $j == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    for ($i = 2; $i < 101; $i++) {\n        if (!$is_prime($i)) {\n            continue;\n        }\n        for ($j = 2; $j < 101; $j++) {\n            if (!$is_prime($j)) {\n                continue;\n            }\n            for ($k = 2; $k < 101; $k++) {\n                if (!$is_prime($k)) {\n                    continue;\n                }\n                if ($i*$j*$k == $a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n?>\n\n### Rust version\n\nfn is_multiply_prime(a: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "rs",
    "prompt": "fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction maximum($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    sort($arr);\n    return array_slice($arr, -$k);\n}\n?>\n\n### Rust version\n\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "rs",
    "prompt": "fn separate_paren_groups(paren_string: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![String::from(\"(()())\"), String::from(\"((()))\"), String::from(\"()\"), String::from(\"((())()())\")]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\")), vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"((()))\"), String::from(\"(((())))\")]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![String::from(\"(()(())((())))\")]);\n    assert_eq!(candidate(String::from(\"( ) (( )) (( )( ))\")), vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"(()())\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction separate_paren_groups($paren_string) {\n    $result = [];\n    $current_string = [];\n    $current_depth = 0;\n\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $c = $paren_string[$i];\n        if ($c === '(') {\n            $current_depth += 1;\n            $current_string[] = $c;\n        } elseif ($c === ')') {\n            $current_depth -= 1;\n            $current_string[] = $c;\n\n            if ($current_depth === 0) {\n                $result[] = implode($current_string);\n                $current_string = [];\n            }\n        }\n    }\n\n    return $result;\n}\n?>\n\n### Rust version\n\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "rs",
    "prompt": "fn skjkasdkd(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191, 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction skjkasdkd($lst) {\n    $isPrime = function($n) {\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    $maxx = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] > $maxx && $isPrime($lst[$i])) {\n            $maxx = $lst[$i];\n        }\n    }\n    $result = array_sum(str_split(strval($maxx)));\n    return $result;\n}\n?>\n\n### Rust version\n\nfn skjkasdkd(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "rs",
    "prompt": "fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction total_match($lst1, $lst2) {\n    $l1 = array_reduce($lst1, function($acc, $st) {\n        return $acc + strlen($st);\n    }, 0);\n    $l2 = array_reduce($lst2, function($acc, $st) {\n        return $acc + strlen($st);\n    }, 0);\n\n    return $l1 <= $l2 ? $lst1 : $lst2;\n}\n?>\n\n### Rust version\n\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "rs",
    "prompt": "fn string_to_md5(text: String) -> Option<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction string_to_md5($text) {\n    return $text ? md5($text) : null;\n}\n?>\n\n### Rust version\n\nfn string_to_md5(text: String) -> Option<String> {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "rs",
    "prompt": "fn car_race_collision(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 9);\n    assert_eq!(candidate(4), 16);\n    assert_eq!(candidate(8), 64);\n    assert_eq!(candidate(10), 100);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction car_race_collision($n) {\n    return $n**2;\n}\n?>\n\n### Rust version\n\nfn car_race_collision(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "rs",
    "prompt": "fn is_simple_power(x: isize, n: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_simple_power($x, $n) {\n    if ($n == 1) {\n        return $x == 1;\n    }\n    $power = 1;\n    while ($power < $x) {\n        $power = $power * $n;\n    }\n    return $power == $x;\n}\n?>\n\n### Rust version\n\nfn is_simple_power(x: isize, n: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "rs",
    "prompt": "fn encode(message: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $vowels_replace = array_combine(str_split($vowels), array_map(function($i) { return chr(ord($i) + 2); }, str_split($vowels)));\n    $message = strtolower($message) ^ strtoupper($message) ^ $message;\n    return strtr($message, $vowels_replace);\n}\n?>\n\n### Rust version\n\nfn encode(message: String) -> String {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "rs",
    "prompt": "fn incr_list(l: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction incr_list($l) {\n    return array_map(function($e) { return $e + 1; }, $l);\n}\n?>\n\n### Rust version\n\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "rs",
    "prompt": "fn flip_case(string: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction flip_case($string) {\n    return strtolower($string) ^ strtoupper($string) ^ $string;\n}\n?>\n\n### Rust version\n\nfn flip_case(string: String) -> String {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "rs",
    "prompt": "fn vowels_count(s: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction vowels_count($s) {\n    $vowels = \"aeiouAEIOU\";\n    $n_vowels = count(array_filter(str_split($s), function($c) use ($vowels) {\n        return strpos($vowels, $c) !== false;\n    }));\n    if (substr($s, -1) === 'y' || substr($s, -1) === 'Y') {\n        $n_vowels++;\n    }\n    return $n_vowels;\n}\n?>\n\n### Rust version\n\nfn vowels_count(s: String) -> isize {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "rs",
    "prompt": "fn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]), vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"bbbb\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sorted_list_sum($lst) {\n    sort($lst);\n    $new_lst = [];\n    foreach ($lst as $i) {\n        if (strlen($i)%2 == 0) {\n            $new_lst[] = $i;\n        }\n    }\n    usort($new_lst, function($a, $b) {\n        return strlen($a) - strlen($b);\n    });\n    return $new_lst;\n}\n?>\n\n### Rust version\n\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "rs",
    "prompt": "fn even_odd_palindrome(n: isize) -> (isize, isize) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = even_odd_palindrome;\n    assert_eq!(candidate(123), (8, 13));\n    assert_eq!(candidate(12), (4, 6));\n    assert_eq!(candidate(3), (1, 2));\n    assert_eq!(candidate(63), (6, 8));\n    assert_eq!(candidate(25), (5, 6));\n    assert_eq!(candidate(19), (4, 6));\n    assert_eq!(candidate(9), (4, 5));\n    assert_eq!(candidate(1), (0, 1));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction even_odd_palindrome($n) {\n    $is_palindrome=function($n) {\n        return strval($n) === strrev(strval($n));\n    };\n\n    $even_palindrome_count = 0;\n    $odd_palindrome_count = 0;\n\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 === 1 && $is_palindrome($i)) {\n            $odd_palindrome_count += 1;\n        } elseif ($i % 2 === 0 && $is_palindrome($i)) {\n            $even_palindrome_count += 1;\n        }\n    }\n\n    return [$even_palindrome_count, $odd_palindrome_count];\n}\n?>\n\n### Rust version\n\nfn even_odd_palindrome(n: isize) -> (isize, isize) {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "rs",
    "prompt": "fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction triangle_area($a, $b, $c) {\n    if ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) {\n        return -1;\n    }\n    $s = ($a + $b + $c)/2;\n    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    $area = round($area, 2);\n    return $area;\n}\n?>\n\n### Rust version\n\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "rs",
    "prompt": "use std::collections::HashMap;\n\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\")), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")), (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"), String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])), true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction check_dict_case($dict) {\n    if (count($dict) == 0) {\n        return false;\n    } else {\n        $state = \"start\";\n        foreach ($dict as $key => $value) {\n            if (!is_string($key)) {\n                $state = \"mixed\";\n                break;\n            }\n            if ($state == \"start\") {\n                if (ctype_upper($key)) {\n                    $state = \"upper\";\n                } elseif (ctype_lower($key)) {\n                    $state = \"lower\";\n                } else {\n                    break;\n                }\n            } elseif (($state == \"upper\" && !ctype_upper($key)) || ($state == \"lower\" && !ctype_lower($key))) {\n                $state = \"mixed\";\n                break;\n            } else {\n                continue;\n            }\n        }\n        return $state == \"upper\" || $state == \"lower\";\n    }\n}\n?>\n\n### Rust version\n\nuse std::collections::HashMap;\n\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "rs",
    "prompt": "fn tri(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction tri($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $my_tri = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $my_tri[] = $i / 2 + 1;\n        } else {\n            $my_tri[] = $my_tri[$i - 1] + $my_tri[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $my_tri;\n}\n?>\n\n### Rust version\n\nfn tri(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "rs",
    "prompt": "fn median(l: Vec<isize>) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction median($l) {\n    sort($l);\n    if (count($l) % 2 == 1) {\n        return $l[count($l) / 2];\n    } else {\n        return ($l[count($l) / 2 - 1] + $l[count($l) / 2]) / 2.0;\n    }\n}\n?>\n\n### Rust version\n\nfn median(l: Vec<isize>) -> f64 {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "rs",
    "prompt": "fn change_base(x: isize, base: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction change_base($x, $base) {\n    $ret = \"\";\n    while ($x > 0) {\n        $ret = strval($x % $base) . $ret;\n        $x = intdiv($x, $base);\n    }\n    return $ret;\n}\n?>\n\n### Rust version\n\nfn change_base(x: isize, base: isize) -> String {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "rs",
    "prompt": "fn longest(strings: Vec<String>) -> Option<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction longest($strings) {\n    if (!$strings) {\n        return null;\n    }\n\n    $maxlen = max(array_map('strlen', $strings));\n    foreach ($strings as $s) {\n        if (strlen($s) == $maxlen) {\n            return $s;\n        }\n    }\n}\n?>\n\n### Rust version\n\nfn longest(strings: Vec<String>) -> Option<String> {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "rs",
    "prompt": "fn common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction common($l1, $l2) {\n    $ret = array();\n    foreach ($l1 as $e1) {\n        foreach ($l2 as $e2) {\n            if ($e1 == $e2) {\n                $ret[] = $e1;\n            }\n        }\n    }\n    $ret = array_unique($ret);\n    sort($ret);\n    return $ret;\n}\n?>\n\n### Rust version\n\nfn common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "rs",
    "prompt": "fn cycpattern_check(a: String, b: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = cycpattern_check;\n    assert_eq!(candidate(String::from(\"xyzw\"), String::from(\"xyw\")), false);\n    assert_eq!(candidate(String::from(\"yello\"), String::from(\"ell\")), true);\n    assert_eq!(candidate(String::from(\"whattup\"), String::from(\"ptut\")), false);\n    assert_eq!(candidate(String::from(\"efef\"), String::from(\"fee\")), true);\n    assert_eq!(candidate(String::from(\"abab\"), String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"winemtt\"), String::from(\"tinem\")), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction cycpattern_check($a, $b) {\n    $l = strlen($b);\n    $pat = $b . $b;\n    for ($i = 0; $i < strlen($a) - $l + 1; $i++) {\n        for ($j = 0; $j < $l + 1; $j++) {\n            if (substr($a, $i, $l) == substr($pat, $j, $l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n?>\n\n### Rust version\n\nfn cycpattern_check(a: String, b: String) -> bool {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "rs",
    "prompt": "fn minSubArraySum(nums: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction minSubArraySum($nums) {\n    $max_sum = 0;\n    $s = 0;\n    foreach ($nums as $num) {\n        $s += -$num;\n        if ($s < 0) {\n            $s = 0;\n        }\n        $max_sum = max($s, $max_sum);\n    }\n    if ($max_sum == 0) {\n        $max_sum = max(array_map(function($i) {return -$i;}, $nums));\n    }\n    $min_sum = -$max_sum;\n    return $min_sum;\n}\n?>\n\n### Rust version\n\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "rs",
    "prompt": "fn sort_array(array: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sort_array($array) {\n    return empty($array) ? [] : (function() use($array) {\n        $is_even = ($array[0] + $array[count($array) - 1]) % 2 === 0;\n        sort($array);\n        return $is_even ? array_reverse($array) : $array;\n    })();\n}\n?>\n\n### Rust version\n\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "rs",
    "prompt": "use std::collections::HashMap;\n\nfn histogram(test: String) -> HashMap<String, isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")), HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"a\"), 1)]));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction histogram($test) {\n    $dict1=[];\n    $list1=explode(\" \", $test);\n    $t=0;\n\n    foreach ($list1 as $i) {\n        if (substr_count($test, $i) > $t && $i != '') {\n            $t = substr_count($test, $i);\n        }\n    }\n    if ($t > 0) {\n        foreach ($list1 as $i) {\n            if (substr_count($test, $i) == $t) {\n                $dict1[$i] = $t;\n            }\n        }\n    }\n    return $dict1;\n}\n?>\n\n### Rust version\n\nuse std::collections::HashMap;\n\nfn histogram(test: String) -> HashMap<String, isize> {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "rs",
    "prompt": "fn get_odd_collatz(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_odd_collatz($n) {\n    if ($n%2==0) {\n        $odd_collatz = [];\n    } else {\n        $odd_collatz = [$n];\n    }\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n/2;\n        } else {\n            $n = $n*3 + 1;\n        }\n        if ($n%2 == 1) {\n            array_push($odd_collatz, intval($n));\n        }\n    }\n    sort($odd_collatz);\n    return $odd_collatz;\n}\n?>\n\n### Rust version\n\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "rs",
    "prompt": "fn derivative(xs: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction derivative($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $i * $xs[$i];\n    }\n    return $result;\n}\n?>\n\n### Rust version\n\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "rs",
    "prompt": "fn fibfib(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n?>\n\n### Rust version\n\nfn fibfib(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "rs",
    "prompt": "fn truncate_number(number: f64) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction truncate_number($number) {\n    return fmod($number, 1.0);\n}\n?>\n\n### Rust version\n\nfn truncate_number(number: f64) -> f64 {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "rs",
    "prompt": "fn max_element(l: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction max_element($l) {\n    $m = $l[0];\n    foreach ($l as $e) {\n        if ($e > $m) {\n            $m = $e;\n        }\n    }\n    return $m;\n}\n?>\n\n### Rust version\n\nfn max_element(l: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "rs",
    "prompt": "fn prime_fib(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = prime_fib;\n    assert_eq!(candidate(1), 2);\n    assert_eq!(candidate(2), 3);\n    assert_eq!(candidate(3), 5);\n    assert_eq!(candidate(4), 13);\n    assert_eq!(candidate(5), 89);\n    assert_eq!(candidate(6), 233);\n    assert_eq!(candidate(7), 1597);\n    assert_eq!(candidate(8), 28657);\n    assert_eq!(candidate(9), 514229);\n    assert_eq!(candidate(10), 433494437);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction prime_fib($n) {\n    $is_prime=function($p) {\n        if ($p < 2) {\n            return False;\n        }\n        for ($k = 2; $k < min(intval(sqrt($p)) + 1, $p - 1); $k++) {\n            if ($p % $k == 0) {\n                return False;\n            }\n        }\n        return True;\n    };\n    $f = [0, 1];\n    while (True) {\n        $f[] = $f[count($f) - 1] + $f[count($f) - 2];\n        if ($is_prime($f[count($f) - 1])) {\n            $n -= 1;\n        }\n        if ($n == 0) {\n            return $f[count($f) - 1];\n        }\n    }\n}\n?>\n\n### Rust version\n\nfn prime_fib(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "rs",
    "prompt": "fn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sum_product($numbers) {\n    $sum_value = 0;\n    $prod_value = 1;\n\n    foreach($numbers as $n) {\n        $sum_value += $n;\n        $prod_value *= $n;\n    }\n    return [$sum_value, $prod_value];\n}\n?>\n\n### Rust version\n\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "rs",
    "prompt": "fn select_words(s: String, n: isize) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\")]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction select_words($s, $n) {\n    $result = [];\n    foreach (explode(\" \", $s) as $word) {\n        $n_consonants = 0;\n        foreach (str_split($word) as $c) {\n            if (!in_array(strtolower($c), [\"a\",\"e\",\"i\",\"o\",\"u\"])) {\n                $n_consonants += 1;\n            }\n        }\n        if ($n_consonants == $n) {\n            array_push($result, $word);\n        }\n    }\n    return $result;\n}\n?>\n\n### Rust version\n\nfn select_words(s: String, n: isize) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "rs",
    "prompt": "fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction add_elements($arr, $k) {\n    return array_sum(array_filter(array_slice($arr, 0, $k), function($elem) {\n        return strlen(strval($elem)) <= 2;\n    }));\n}\n?>\n\n### Rust version\n\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "rs",
    "prompt": "fn eat(number: isize, need: isize, remaining: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction eat($number, $need, $remaining) {\n    if($need <= $remaining) {\n        return [$number + $need, $remaining - $need];\n    } else {\n        return [$number + $remaining, 0];\n    }\n}\n?>\n\n### Rust version\n\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "rs",
    "prompt": "fn odd_count(lst: Vec<String>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!(candidate(vec![String::from(\"1234567\")]), vec![String::from(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]);\n    assert_eq!(candidate(vec![String::from(\"3\"), String::from(\"11111111\")]), vec![String::from(\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]);\n    assert_eq!(candidate(vec![String::from(\"271\"), String::from(\"137\"), String::from(\"314\")]), vec![String::from(\"the number of odd elements 2n the str2ng 2 of the 2nput.\"), String::from(\"the number of odd elements 3n the str3ng 3 of the 3nput.\"), String::from(\"the number of odd elements 2n the str2ng 2 of the 2nput.\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction odd_count($lst) {\n    $res = [];\n    foreach ($lst as $arr) {\n        $n = array_sum(array_map(function($d) { return (int)$d%2==1; }, str_split($arr)));\n        $res[] = \"the number of odd elements \" . $n . \"n the str\". $n .\"ng \". $n .\" of the \". $n .\"nput.\";\n    }\n    return $res;\n}\n?>\n\n### Rust version\n\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "rs",
    "prompt": "fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction next_smallest($lst) {\n    $lst = array_unique($lst);\n    sort($lst);\n    return count($lst) < 2 ? null : $lst[1];\n}\n?>\n\n### Rust version\n\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "rs",
    "prompt": "fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5, 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1), Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]], 3), vec![(2, 2)]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_row($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $v) {\n            if ($v === $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        if ($a[0] === $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $coords;\n}\n?>\n\n### Rust version\n\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "rs",
    "prompt": "fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction filter_by_prefix($strings, $prefix) {\n    $result = [];\n    foreach ($strings as $x) {\n        if (strpos($x, $prefix) === 0) {\n            $result[] = $x;\n        }\n    }\n    return $result;\n}\n?>\n\n### Rust version\n\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "rs",
    "prompt": "fn choose_num(x: isize, y: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction choose_num($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x == $y) {\n        return -1;\n    }\n    return $y - 1;\n}\n?>\n\n### Rust version\n\nfn choose_num(x: isize, y: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "rs",
    "prompt": "fn prime_length(string: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction prime_length($string) {\n    $l = strlen($string);\n    if ($l == 0 || $l == 1) {\n        return false;\n    }\n    for ($i = 2; $i < $l; $i++) {\n        if ($l % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Rust version\n\nfn prime_length(string: String) -> bool {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "rs",
    "prompt": "fn sum_to_n(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = sum_to_n;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(6), 21);\n    assert_eq!(candidate(11), 66);\n    assert_eq!(candidate(30), 465);\n    assert_eq!(candidate(100), 5050);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction sum_to_n($n) {\n    return array_sum(range(0, $n));\n}\n?>\n\n### Rust version\n\nfn sum_to_n(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "rs",
    "prompt": "fn fix_spaces(text: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fix_spaces($text) {\n    $new_text = \"\";\n    $i = 0;\n    $start = $end = 0;\n    while ($i < strlen($text)) {\n        if ($text[$i] == \" \") {\n            $end += 1;\n        } else {\n            if ($end - $start > 2) {\n                $new_text .= \"-\".$text[$i];\n            } elseif ($end - $start > 0) {\n                $new_text .= str_repeat(\"_\", $end - $start).$text[$i];\n            } else {\n                $new_text .= $text[$i];\n            }\n            $start = $end = $i+1;\n        }\n        $i+=1;\n    }\n    if ($end - $start > 2) {\n        $new_text .= \"-\";\n    } elseif ($end - $start > 0) {\n        $new_text .= \"_\";\n    }\n    return $new_text;\n}\n?>\n\n### Rust version\n\nfn fix_spaces(text: String) -> String {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "rs",
    "prompt": "fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction rolling_max($numbers) {\n    $running_max = null;\n    $result = [];\n\n    foreach ($numbers as $n) {\n        if ($running_max === null) {\n            $running_max = $n;\n        } else {\n            $running_max = max($running_max, $n);\n        }\n\n        $result[] = $running_max;\n    }\n\n    return $result;\n}\n?>\n\n### Rust version\n\nfn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "rs",
    "prompt": "fn words_in_sentence(sentence: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction words_in_sentence($sentence) {\n    $new_lst = [];\n    foreach(explode(\" \", $sentence) as $word) {\n        $flg = 0;\n        if (strlen($word) == 1) {\n            $flg = 1;\n        }\n        for ($i = 2; $i < strlen($word); $i++) {\n            if (strlen($word)%$i == 0) {\n                $flg = 1;\n            }\n        }\n        if ($flg == 0 || strlen($word) == 2) {\n            array_push($new_lst, $word);\n        }\n    }\n    return join(\" \", $new_lst);\n}\n?>\n\n### Rust version\n\nfn words_in_sentence(sentence: String) -> String {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "rs",
    "prompt": "fn get_closest_vowel(word: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_closest_vowel($word) {\n    if (strlen($word) < 3) {\n        return \"\";\n    }\n\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'];\n    for ($i = strlen($word)-2; $i > 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            if (!in_array($word[$i+1], $vowels) && !in_array($word[$i-1], $vowels)) {\n                return $word[$i];\n            }\n        }\n    }\n    return \"\";\n}\n?>\n\n### Rust version\n\nfn get_closest_vowel(word: String) -> String {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "rs",
    "prompt": "fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction compare($game, $guess) {\n    return array_map(function($x, $y) { return abs($x - $y); }, $game, $guess);\n}\n?>\n\n### Rust version\n\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "rs",
    "prompt": "fn same_chars(s0: String, s1: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"aabb\"), String::from(\"aaccc\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction same_chars($s0, $s1) {\n    return array_diff(str_split($s0), str_split($s1)) == array_diff(str_split($s1), str_split($s0));\n}\n?>\n\n### Rust version\n\nfn same_chars(s0: String, s1: String) -> bool {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "rs",
    "prompt": "fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![4]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction parse_nested_parens($paren_string) {\n    $parse_paren_group = function($s) {\n        $depth = 0;\n        $max_depth = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] === '(') {\n                $depth += 1;\n                $max_depth = max($depth, $max_depth);\n            } else {\n                $depth -= 1;\n            }\n        }\n\n        return $max_depth;\n    };\n\n    return array_map($parse_paren_group, array_filter(explode(' ', $paren_string)));\n}\n?>\n\n### Rust version\n\nfn parse_nested_parens(paren_string: String) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "rs",
    "prompt": "fn even_odd_count(num: isize) -> (isize, isize) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction even_odd_count($num) {\n    $even_count = 0;\n    $odd_count = 0;\n    foreach (str_split(abs($num)) as $i) {\n        if ($i % 2 == 0) {\n            $even_count += 1;\n        } else {\n            $odd_count += 1;\n        }\n    }\n    return [$even_count, $odd_count];\n}\n?>\n\n### Rust version\n\nfn even_odd_count(num: isize) -> (isize, isize) {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "rs",
    "prompt": "fn fruit_distribution(s: String, n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction fruit_distribution($s, $n) {\n    $lis = [];\n    foreach (explode(' ', $s) as $i) {\n        if (is_numeric($i)) {\n            array_push($lis, intval($i));\n        }\n    }\n    return $n - array_sum($lis);\n}\n?>\n\n### Rust version\n\nfn fruit_distribution(s: String, n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "rs",
    "prompt": "fn string_xor(a: String, b: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = string_xor;\n    assert_eq!(candidate(String::from(\"111000\"), String::from(\"101010\")), String::from(\"010010\"));\n    assert_eq!(candidate(String::from(\"1\"), String::from(\"1\")), String::from(\"0\"));\n    assert_eq!(candidate(String::from(\"0101\"), String::from(\"0000\")), String::from(\"0101\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction string_xor($a, $b) {\n    $xor = function($i, $j) {\n        return $i === $j ? '0' : '1';\n    };\n\n    return join('', array_map($xor, str_split($a), str_split($b)));\n}\n?>\n\n### Rust version\n\nfn string_xor(a: String, b: String) -> String {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "rs",
    "prompt": "fn string_sequence(n: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction string_sequence($n) {\n    return implode(' ', range(0, $n));\n}\n?>\n\n### Rust version\n\nfn string_sequence(n: isize) -> String {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "rs",
    "prompt": "fn file_name_check(file_name: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!(candidate(String::from(\"example.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1example.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"s1sdf3.asd\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"K.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"MY16FILE3.exe\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"His12FILE94.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_Y.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"?aREYA.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"/this_is_valid.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.wow\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txtexe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"#this2_i4s_5valid.ten\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"@this1_is6_valid.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_12valid.6exe4.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"all.exe.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_No.exe\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"Is3youfault.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"no_one#knows.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1I563_Yes3.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_Yes3.txtt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final..txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final132\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_f4indsartal132.\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\".txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"s.\")), String::from(\"No\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction file_name_check($file_name) {\n    $suf = ['txt', 'exe', 'dll'];\n    $lst = explode('.', $file_name);\n    if (count($lst) != 2) {\n        return 'No';\n    }\n    if (!in_array($lst[1], $suf)) {\n        return 'No';\n    }\n    if (strlen($lst[0]) == 0) {\n        return 'No';\n    }\n    if (!ctype_alpha($lst[0][0])) {\n        return 'No';\n    }\n    $t = preg_match_all('/\\d/', $lst[0]);\n    if ($t > 3) {\n        return 'No';\n    }\n    return 'Yes';\n}\n?>\n\n### Rust version\n\nfn file_name_check(file_name: String) -> String {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "rs",
    "prompt": "fn can_arrange(arr: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction can_arrange($arr) {\n    $ind = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i-1]) {\n            $ind = $i;\n        }\n    }\n    return $ind;\n}\n?>\n\n### Rust version\n\nfn can_arrange(arr: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "rs",
    "prompt": "fn add(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction add($lst) {\n  $sum = 0;\n  for ($i = 1; $i < count($lst); $i += 2) {\n    if ($lst[$i] % 2 == 0) {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n?>\n\n### Rust version\n\nfn add(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "rs",
    "prompt": "fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction intersperse($numbers, $delimeter) {\n    if (empty($numbers)) {\n        return [];\n    }\n\n    $result = [];\n\n    foreach ($numbers as $n) {\n        $result[] = $n;\n        $result[] = $delimeter;\n    }\n\n    array_pop($result);\n\n    return $result;\n}\n?>\n\n### Rust version\n\nfn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "rs",
    "prompt": "fn match_parens(lst: Vec<String>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"(())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction match_parens($lst) {\n    $check = function($s) {\n        $val = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] == '(') {\n                $val += 1;\n            } else {\n                $val -= 1;\n            }\n            if ($val < 0) {\n                return false;\n            }\n        }\n        return $val == 0;\n    };\n\n    $S1 = $lst[0] . $lst[1];\n    $S2 = $lst[1] . $lst[0];\n    return $check($S1) || $check($S2) ? 'Yes' : 'No';\n}\n?>\n\n### Rust version\n\nfn match_parens(lst: Vec<String>) -> String {\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "rs",
    "prompt": "fn any_int(x: f64, y: f64, z: f64) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction any_int($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\n?>\n\n### Rust version\n\nfn any_int(x: f64, y: f64, z: f64) -> bool {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "rs",
    "prompt": "fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction filter_by_substring($strings, $substring) {\n    return array_values(array_filter($strings, function($x) use ($substring) {\n        return strpos($x, $substring) !== false;\n    }));\n}\n?>\n\n### Rust version\n\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "rs",
    "prompt": "fn find_max(words: Vec<String>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"game\")]), String::from(\"enam\"));\n    assert_eq!(candidate(vec![String::from(\"aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"));\n    assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]), String::from(\"abc\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"footbott\")]), String::from(\"footbott\"));\n    assert_eq!(candidate(vec![String::from(\"we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]), String::from(\"gonna\"));\n    assert_eq!(candidate(vec![String::from(\"we\"), String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"nation\")]), String::from(\"nation\"));\n    assert_eq!(candidate(vec![String::from(\"this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"this\"));\n    assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"b\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"), String::from(\"play\")]), String::from(\"play\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction find_max($words) {\n    usort($words, function($a, $b) {\n        return (count(array_unique(str_split($b))) <=> count(array_unique(str_split($a)))) ?: strcmp($a, $b);\n    });\n\n    return $words[0];\n}\n?>\n\n### Rust version\n\nfn find_max(words: Vec<String>) -> String {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "rs",
    "prompt": "fn generate_integers(a: isize, b: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction generate_integers($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 === 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n?>\n\n### Rust version\n\nfn generate_integers(a: isize, b: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "rs",
    "prompt": "fn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = exchange;\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![1, 2, 3, 4]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![1, 5, 3, 4]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![2, 1, 4, 3]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![5, 7, 3], vec![2, 6, 4]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![5, 7, 3], vec![2, 6, 3]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![3, 2, 6, 1, 8, 9], vec![3, 5, 5, 1, 1, 1]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![100, 200], vec![200, 200]), String::from(\"YES\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction exchange($lst1, $lst2) {\n  $odd = 0;\n  $even = 0;\n  foreach ($lst1 as $i) {\n    if ($i%2 == 1) {\n      $odd += 1;\n    }\n  }\n  foreach ($lst2 as $i) {\n    if ($i%2 == 0) {\n      $even += 1;\n    }\n  }\n  if ($even >= $odd) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n?>\n\n### Rust version\n\nfn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "rs",
    "prompt": "fn int_to_mini_roman(number: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction int_to_mini_roman($number) {\n    $num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    $sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n    $i = 12;\n    $res = '';\n    while ($number) {\n        $div = intdiv($number, $num[$i]);\n        $number %= $num[$i];\n        while ($div) {\n            $res .= $sym[$i];\n            $div--;\n        }\n        $i--;\n    }\n    return strtolower($res);\n}\n?>\n\n### Rust version\n\nfn int_to_mini_roman(number: isize) -> String {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "rs",
    "prompt": "fn is_equal_to_sum_even(n: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_equal_to_sum_even($n) {\n    return $n%2 == 0 && $n >= 8;\n}\n?>\n\n### Rust version\n\nfn is_equal_to_sum_even(n: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "rs",
    "prompt": "fn decimal_to_binary(decimal: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction decimal_to_binary($decimal) {\n    return \"db\".decbin($decimal).\"db\";\n}\n?>\n\n### Rust version\n\nfn decimal_to_binary(decimal: isize) -> String {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "rs",
    "prompt": "fn simplify(x: String, n: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = simplify;\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"5/1\")), true);\n    assert_eq!(candidate(String::from(\"1/6\"), String::from(\"2/1\")), false);\n    assert_eq!(candidate(String::from(\"5/1\"), String::from(\"3/1\")), true);\n    assert_eq!(candidate(String::from(\"7/10\"), String::from(\"10/2\")), false);\n    assert_eq!(candidate(String::from(\"2/10\"), String::from(\"50/10\")), true);\n    assert_eq!(candidate(String::from(\"7/2\"), String::from(\"4/2\")), true);\n    assert_eq!(candidate(String::from(\"11/6\"), String::from(\"6/1\")), true);\n    assert_eq!(candidate(String::from(\"2/3\"), String::from(\"5/2\")), false);\n    assert_eq!(candidate(String::from(\"5/2\"), String::from(\"3/5\")), false);\n    assert_eq!(candidate(String::from(\"2/4\"), String::from(\"8/4\")), true);\n    assert_eq!(candidate(String::from(\"2/4\"), String::from(\"4/2\")), true);\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"5/1\")), true);\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"1/5\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction simplify($x, $n) {\n    list($a, $b) = explode(\"/\", $x);\n    list($c, $d) = explode(\"/\", $n);\n    $numerator = $a * $c;\n    $denom = $b * $d;\n    if ($numerator / $denom == floor($numerator / $denom)) {\n        return true;\n    }\n    return false;\n}\n?>\n\n### Rust version\n\nfn simplify(x: String, n: String) -> bool {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "rs",
    "prompt": "fn solve(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction solve($s) {\n    $flg = 0;\n    $idx = 0;\n    $new_str = str_split($s);\n    foreach ($new_str as &$i) {\n        if (ctype_alpha($i)) {\n            $i = ctype_upper($i) ? strtolower($i) : strtoupper($i);\n            $flg = 1;\n        }\n        $idx += 1;\n    }\n    $s = implode($new_str);\n    if ($flg == 0) {\n        return strrev($s);\n    }\n    return $s;\n}\n?>\n\n### Rust version\n\nfn solve(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "rs",
    "prompt": "fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction right_angle_triangle($a, $b, $c) {\n    return $a*$a == $b*$b + $c*$c || $b*$b == $a*$a + $c*$c || $c*$c == $a*$a + $b*$b;\n}\n?>\n\n### Rust version\n\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "rs",
    "prompt": "fn below_zero(operations: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction below_zero($operations) {\n    $balance = 0;\n\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n?>\n\n### Rust version\n\nfn below_zero(operations: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "rs",
    "prompt": "fn greatest_common_divisor(a: isize, b: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction greatest_common_divisor($a, $b) {\n    while ($b) {\n        [$a, $b] = [$b, $a % $b];\n    }\n    return $a;\n}\n?>\n\n### Rust version\n\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "rs",
    "prompt": "fn f(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction f($n) {\n    $ret = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i%2 == 0) {\n            $x = 1;\n            for ($j = 1; $j <= $i; $j++) $x *= $j;\n            $ret[] = $x;\n        } else {\n            $x = 0;\n            for ($j = 1; $j <= $i; $j++) $x += $j;\n            $ret[] = $x;\n        }\n    }\n    return $ret;\n}\n?>\n\n### Rust version\n\nfn f(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "rs",
    "prompt": "fn by_length(arr: Vec<isize>) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction by_length($arr) {\n    $dic = [\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    ];\n    rsort($arr);\n    $new_arr = [];\n    foreach ($arr as $var) {\n        if (array_key_exists($var, $dic)) {\n            $new_arr[] = $dic[$var];\n        }\n    }\n    return $new_arr;\n}\n?>\n\n### Rust version\n\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "rs",
    "prompt": "fn remove_vowels(text: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction remove_vowels($text) {\n    return preg_replace(\"/[aeiou]/i\", \"\", $text);\n}\n?>\n\n### Rust version\n\nfn remove_vowels(text: String) -> String {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "rs",
    "prompt": "fn check_if_last_char_is_a_letter(txt: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction check_if_last_char_is_a_letter($txt) {\n    $check = explode(' ', $txt);\n    $check = end($check);\n    return (strlen($check) == 1 && (ord(strtolower($check)) >= 97 && ord(strtolower($check)) <= 122));\n}\n?>\n\n### Rust version\n\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "rs",
    "prompt": "fn iscube(a: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction iscube($a) {\n    $a = abs($a);\n    return pow(round(pow($a, 1/3)), 3) == $a;\n}\n?>\n\n### Rust version\n\nfn iscube(a: isize) -> bool {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "rs",
    "prompt": "fn reverse_delete(s: String, c: String) -> (String, bool) {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = reverse_delete;\n    assert_eq!(candidate(String::from(\"abcde\"), String::from(\"ae\")), (String::from(\"bcd\"), false));\n    assert_eq!(candidate(String::from(\"abcdef\"), String::from(\"b\")), (String::from(\"acdef\"), false));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"ab\")), (String::from(\"cdedc\"), true));\n    assert_eq!(candidate(String::from(\"dwik\"), String::from(\"w\")), (String::from(\"dik\"), false));\n    assert_eq!(candidate(String::from(\"a\"), String::from(\"a\")), (String::from(\"\"), true));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"\")), (String::from(\"abcdedcba\"), true));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"v\")), (String::from(\"abcdedcba\"), true));\n    assert_eq!(candidate(String::from(\"vabba\"), String::from(\"v\")), (String::from(\"abba\"), true));\n    assert_eq!(candidate(String::from(\"mamma\"), String::from(\"mia\")), (String::from(\"\"), true));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction reverse_delete($s, $c) {\n    $s = str_replace(str_split($c), '', $s);\n    return [$s, strrev($s) == $s];\n}\n?>\n\n### Rust version\n\nfn reverse_delete(s: String, c: String) -> (String, bool) {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "rs",
    "prompt": "fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction mean_absolute_deviation($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    return array_sum(array_map(function($x) use ($mean) { return abs($x - $mean); }, $numbers)) / count($numbers);\n}\n?>\n\n### Rust version\n\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "rs",
    "prompt": "fn correct_bracketing(brackets: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction correct_bracketing($brackets) {\n    $depth = 0;\n    foreach (str_split($brackets) as $b) {\n        if ($b == \"<\") {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return False;\n        }\n    }\n    return $depth == 0;\n}\n?>\n\n### Rust version\n\nfn correct_bracketing(brackets: String) -> bool {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "rs",
    "prompt": "fn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction rescale_to_unit($numbers) {\n    $min_number = min($numbers);\n    $max_number = max($numbers);\n    return array_map(function($x) use ($min_number, $max_number) {\n        return ($x - $min_number) / ($max_number - $min_number);\n    }, $numbers);\n}\n?>\n\n### Rust version\n\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "rs",
    "prompt": "fn intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1, 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)), String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)), String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"NO\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction intersection($interval1, $interval2) {\n    $is_prime=function($num) {\n        if ($num == 1 || $num == 0) {\n            return false;\n        }\n        if ($num == 2) {\n            return true;\n        }\n        for ($i = 2; $i < $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    if ($length > 0 && $is_prime($length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n?>\n\n### Rust version\n\nfn intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "rs",
    "prompt": "fn hex_key(num: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!(candidate(String::from(\"AB\")), 1);\n    assert_eq!(candidate(String::from(\"1077E\")), 2);\n    assert_eq!(candidate(String::from(\"ABED1A33\")), 4);\n    assert_eq!(candidate(String::from(\"2020\")), 2);\n    assert_eq!(candidate(String::from(\"123456789ABCDEF0\")), 6);\n    assert_eq!(candidate(String::from(\"112233445566778899AABBCCDDEEFF00\")), 12);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction hex_key($num) {\n    $primes = ['2', '3', '5', '7', 'B', 'D'];\n    $total = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $primes)) {\n            $total += 1;\n        }\n    }\n    return $total;\n}\n?>\n\n### Rust version\n\nfn hex_key(num: String) -> isize {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "rs",
    "prompt": "fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction strange_sort_list($lst) {\n    $res = [];\n    $switch = true;\n    while ($lst) {\n        $res[] = $switch ? min($lst) : max($lst);\n        unset($lst[array_search(end($res), $lst)]);\n        $switch = !$switch;\n    }\n    return $res;\n}\n?>\n\n### Rust version\n\nfn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "rs",
    "prompt": "fn is_bored(S: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are going for a walk\")), 0);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_bored($S) {\n    $sentences = preg_split('/[.?!]\\s*/', $S);\n    return count(array_filter($sentences, function($sentence) {\n        return substr($sentence, 0, 2) == 'I ';\n    }));\n}\n?>\n\n### Rust version\n\nfn is_bored(S: String) -> isize {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "rs",
    "prompt": "fn all_prefixes(string: String) -> Vec<String> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction all_prefixes($string) {\n    $result = [];\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $result[] = substr($string, 0, $i+1);\n    }\n\n    return $result;\n}\n?>\n\n### Rust version\n\nfn all_prefixes(string: String) -> Vec<String> {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "rs",
    "prompt": "fn how_many_times(string: String, substring: String) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"john\")), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction how_many_times($string, $substring) {\n    $times = 0;\n\n    for ($i = 0; $i <= strlen($string) - strlen($substring); $i++) {\n        if (substr($string, $i, strlen($substring)) == $substring) {\n            $times += 1;\n        }\n    }\n\n    return $times;\n}\n?>\n\n### Rust version\n\nfn how_many_times(string: String, substring: String) -> isize {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "rs",
    "prompt": "fn solution(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3, 13, 2, 9]), 3);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction solution($lst) {\n    return array_sum(array_filter($lst, function($x, $idx) {\n        return $idx%2==0 && $x%2==1;\n    }, ARRAY_FILTER_USE_BOTH));\n}\n?>\n\n### Rust version\n\nfn solution(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "rs",
    "prompt": "fn is_sorted(lst: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_sorted($lst) {\n    $count_digit = array_fill_keys($lst, 0);\n    foreach ($lst as $i) {\n        $count_digit[$i]++;\n    }\n    if (in_array(true, array_map(function($i) use ($count_digit) {\n        return $count_digit[$i] > 2;\n    }, $lst))) {\n        return false;\n    }\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Rust version\n\nfn is_sorted(lst: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "rs",
    "prompt": "fn search(lst: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5, 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n    assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8, 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n    assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3, 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1, 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]), 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]), -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]), 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction search($lst) {\n    $frq = array_fill(0, max($lst) + 1, 0);\n    foreach ($lst as $i) {\n        $frq[$i]++;\n    }\n\n    $ans = -1;\n    for ($i = 1; $i < count($frq); $i++) {\n        if ($frq[$i] >= $i) {\n            $ans = $i;\n        }\n    }\n\n    return $ans;\n}\n?>\n\n### Rust version\n\nfn search(lst: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "rs",
    "prompt": "fn pluck(arr: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4, 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]), vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n    assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7, 9, 7, 1]), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction pluck($arr) {\n  if(count($arr) == 0) return [];\n  $evens = array_filter($arr, function($x) { return $x%2 == 0; });\n  if($evens == []) return [];\n  return [min($evens), array_search(min($evens), $arr)];\n}\n?>\n\n### Rust version\n\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "rs",
    "prompt": "fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction pairs_sum_to_zero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n?>\n\n### Rust version\n\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "rs",
    "prompt": "fn make_palindrome(string: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"x\")), String::from(\"x\"));\n    assert_eq!(candidate(String::from(\"xyz\")), String::from(\"xyzyx\"));\n    assert_eq!(candidate(String::from(\"xyx\")), String::from(\"xyx\"));\n    assert_eq!(candidate(String::from(\"jerry\")), String::from(\"jerryrrej\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction make_palindrome($string) {\n    if (!$string) {\n        return '';\n    }\n\n    $beginning_of_suffix = 0;\n\n    while (substr($string, $beginning_of_suffix) != strrev(substr($string, $beginning_of_suffix))) {\n        $beginning_of_suffix++;\n    }\n\n    return $string . strrev(substr($string, 0, $beginning_of_suffix));\n}\n?>\n\n### Rust version\n\nfn make_palindrome(string: String) -> String {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "rs",
    "prompt": "fn starts_one_ends(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction starts_one_ends($n) {\n    if ($n == 1) return 1;\n    return 18 * pow(10, $n - 2);\n}\n?>\n\n### Rust version\n\nfn starts_one_ends(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "rs",
    "prompt": "fn get_positive(l: Vec<isize>) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_positive($l) {\n    $result = array();\n    foreach ($l as $e) {\n        if ($e > 0) {\n            $result[] = $e;\n        }\n    }\n    return $result;\n}\n?>\n\n### Rust version\n\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "rs",
    "prompt": "fn concatenate(strings: Vec<String>) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction concatenate($strings) {\n    return implode($strings);\n}\n?>\n\n### Rust version\n\nfn concatenate(strings: Vec<String>) -> String {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "rs",
    "prompt": "fn is_nested(string: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_nested($string) {\n    $opening_bracket_index = [];\n    $closing_bracket_index = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($opening_bracket_index, $i);\n        } else {\n            array_push($closing_bracket_index, $i);\n        }\n    }\n    $closing_bracket_index = array_reverse($closing_bracket_index);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closing_bracket_index);\n    foreach ($opening_bracket_index as $idx) {\n        if ($i < $l && $idx < $closing_bracket_index[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n?>\n\n### Rust version\n\nfn is_nested(string: String) -> bool {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "rs",
    "prompt": "fn is_palindrome(text: String) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_palindrome($text) {\n    for ($i = 0; $i < strlen($text); $i++) {\n        if ($text[$i] != $text[strlen($text) - 1 - $i]) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Rust version\n\nfn is_palindrome(text: String) -> bool {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "rs",
    "prompt": "fn count_nums(arr: Vec<isize>) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]), 1);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction count_nums($arr) {\n    $digits_sum = function($n) {\n        $neg = 1;\n        if ($n < 0) {\n            $n = -1 * $n;\n            $neg = -1;\n        }\n        $n = array_map('intval', str_split($n));\n        $n[0] = $n[0] * $neg;\n        return array_sum($n);\n    };\n    return count(array_filter(array_map($digits_sum, $arr), function($x) { return $x > 0; }));\n}\n?>\n\n### Rust version\n\nfn count_nums(arr: Vec<isize>) -> isize {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "rs",
    "prompt": "fn factorize(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction factorize($n) {\n    $fact = [];\n    $i = 2;\n    while ($i <= intval(sqrt($n) + 1)) {\n        if ($n % $i === 0) {\n            $fact[] = $i;\n            $n /= $i;\n        } else {\n            $i += 1;\n        }\n    }\n\n    if ($n > 1) {\n        $fact[] = $n;\n    }\n    return $fact;\n}\n?>\n\n### Rust version\n\nfn factorize(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "rs",
    "prompt": "fn largest_prime_factor(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction largest_prime_factor($n) {\n    $is_prime=function($k) {\n        if ($k < 2) {\n            return false;\n        }\n        for ($i = 2; $i < $k; $i++) {\n            if ($k % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    $largest = 1;\n    for ($j = 2; $j <= $n; $j++) {\n        if ($n % $j == 0 && $is_prime($j)) {\n            $largest = max($largest, $j);\n        }\n    }\n    return $largest;\n}\n?>\n\n### Rust version\n\nfn largest_prime_factor(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "rs",
    "prompt": "fn get_max_triples(n: isize) -> isize {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction get_max_triples($n) {\n    $A = array_map(function($i) { return $i*$i - $i + 1; }, range(1, $n));\n    $ans = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i+1; $j < $n; $j++) {\n            for ($k = $j+1; $k < $n; $k++) {\n                if (($A[$i]+$A[$j]+$A[$k])%3 == 0) {\n                    $ans[] = [$A[$i], $A[$j], $A[$k]];\n                }\n            }\n        }\n    }\n    return count($ans);\n}\n?>\n\n### Rust version\n\nfn get_max_triples(n: isize) -> isize {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "rs",
    "prompt": "fn anti_shuffle(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction anti_shuffle($s) {\n    $words = explode(' ', $s);\n    $sorted_words = array_map(function($i) {\n        $chars = str_split($i);\n        sort($chars);\n        return implode($chars);\n    }, $words);\n    return implode(' ', $sorted_words);\n}\n?>\n\n### Rust version\n\nfn anti_shuffle(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "rs",
    "prompt": "fn solve(N: isize) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction solve($N) {\n    return decbin(array_sum(str_split($N)));\n}\n?>\n\n### Rust version\n\nfn solve(N: isize) -> String {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "rs",
    "prompt": "fn minPath(grid: Vec<Vec<isize>>, k: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = minPath;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3), vec![1, 2, 1]);\n    assert_eq!(candidate(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1), vec![1]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12], vec![13, 14, 15, 16]], 4), vec![1, 2, 1, 2]);\n    assert_eq!(candidate(vec![vec![6, 4, 13, 10], vec![5, 7, 12, 1], vec![3, 16, 11, 15], vec![8, 14, 9, 2]], 7), vec![1, 10, 1, 10, 1, 10, 1]);\n    assert_eq!(candidate(vec![vec![8, 14, 9, 2], vec![6, 4, 13, 15], vec![5, 7, 1, 12], vec![3, 10, 11, 16]], 5), vec![1, 7, 1, 7, 1]);\n    assert_eq!(candidate(vec![vec![11, 8, 7, 2], vec![5, 16, 14, 4], vec![9, 3, 15, 6], vec![12, 13, 10, 1]], 9), vec![1, 6, 1, 6, 1, 6, 1, 6, 1]);\n    assert_eq!(candidate(vec![vec![12, 13, 10, 1], vec![9, 3, 15, 6], vec![5, 16, 14, 4], vec![11, 8, 7, 2]], 12), vec![1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n    assert_eq!(candidate(vec![vec![2, 7, 4], vec![3, 1, 5], vec![6, 8, 9]], 8), vec![1, 3, 1, 3, 1, 3, 1, 3]);\n    assert_eq!(candidate(vec![vec![6, 1, 5], vec![3, 8, 9], vec![2, 7, 4]], 8), vec![1, 5, 1, 5, 1, 5, 1, 5]);\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4]], 10), vec![1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n    assert_eq!(candidate(vec![vec![1, 3], vec![3, 2]], 10), vec![1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction minPath($grid, $k) {\n    $n = count($grid);\n    $val = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n\n                $val = min($temp);\n            }\n        }\n    }\n\n    $ans = [];\n    for ($i = 0; $i < $k; $i++) {\n        if ($i % 2 == 0) {\n            $ans[] = 1;\n        } else {\n            $ans[] = $val;\n        }\n    }\n    return $ans;\n}\n?>\n\n### Rust version\n\nfn minPath(grid: Vec<Vec<isize>>, k: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "rs",
    "prompt": "fn encrypt(s: String) -> String {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\")), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\")), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")), String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction encrypt($s) {\n    $d = 'abcdefghijklmnopqrstuvwxyz';\n    $out = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if (strpos($d, $c) !== false) {\n            $out .= $d[(strpos($d, $c)+4) % 26];\n        } else {\n            $out .= $c;\n        }\n    }\n    return $out;\n}\n?>\n\n### Rust version\n\nfn encrypt(s: String) -> String {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "rs",
    "prompt": "fn make_a_pile(n: isize) -> Vec<isize> {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction make_a_pile($n) {\n    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $n + 2*$i;\n    }\n    return $pile;\n}\n?>\n\n### Rust version\n\nfn make_a_pile(n: isize) -> Vec<isize> {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "rs",
    "prompt": "fn is_prime(n: isize) -> bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n}\n",
    "stop_tokens": [
      "\n}"
    ],
    "translation_prompt": "### PHP version\n\n<?php\nfunction is_prime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($k = 2; $k < $n; $k++) {\n        if ($n % $k == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n?>\n\n### Rust version\n\nfn is_prime(n: isize) -> bool {\n"
  }
]