[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nbool correct_bracketing(string brackets) \n{\n    int depth = 0;\n    foreach (b; brackets)\n    {\n        if (b == '(')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"3\") = \"7.5\" ]]\n    [[ $(candidate \"2\" \"2\") = \"2.0\" ]]\n    [[ $(candidate \"10\" \"8\") = \"40.0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nfloat triangle_area(long a, long h) \n{\n    return a * h / 2.0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.range;\nimport std.math;\nlong special_factorial(long n) \n{\n    long fact_i = 1;\n    long special_fact = 1;\n    foreach(i; 1 .. n+1)\n    {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool move_one_ball(long[] arr) \n{\n    if (arr.empty)\n        return true;\n    auto sorted_array = arr.dup.sort;\n    auto my_arr = arr[arr.minIndex .. $] ~ arr[0 .. arr.minIndex];\n    foreach (i; 0 .. arr.length)\n    {\n        if (my_arr[i] != sorted_array[i])\n            return false;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong digits(long n)\n{\n    long product = 1;\n    long odd_count = 0;\n    foreach (digit; to!string(n))\n    {\n        long int_digit = to!long(digit.to!string);\n        if (int_digit % 2 == 1)\n        {\n            product *= int_digit;\n            odd_count++;\n        }\n    }\n    if (odd_count == 0)\n        return 0;\n    else\n        return product;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong fib4(long n) \n{\n    auto results = [0L, 0L, 2L, 0L];\n    if (n < 4) return results[n];\n\n    foreach (i; 4..n+1)\n    {\n        results ~= results[$-1] + results[$-2] + results[$-3] + results[$-4];\n        results = results[1..$];\n    }\n\n    return results[$-1];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nbool is_happy(string s) \n{\n    if (s.length < 3)\n      return false;\n\n    foreach (i; 0 .. s.length - 2) {\n      if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n        return false;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring circular_shift(long x, long shift)\n{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s.dup.reverse;\n    else\n        return s[s.length - shift .. $] ~ s[0 .. s.length - shift];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong max_fill(long[][] grid, long capacity) \n{\n    long sum = 0;\n    foreach (row; grid) \n    {\n        sum += ceil(cast(double) row.sum / capacity);\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    has_close_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.3\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.05\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\" \"0.95\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\" \"0.8\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.0\" \"0.1\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"1.0\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"0.5\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool has_close_elements(float[] numbers, float threshold)\n{\n    foreach (i, elem; numbers)\n    {\n        foreach (j, elem2; numbers)\n        {\n            if (i != j)\n            {\n                float distance = abs(elem - elem2);\n                if (distance < threshold)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    x_or_y \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\" \"34\" \"12\") = \"34\" ]]\n    [[ $(candidate \"15\" \"8\" \"5\") = \"5\" ]]\n    [[ $(candidate \"3\" \"33\" \"5212\") = \"33\" ]]\n    [[ $(candidate \"1259\" \"3\" \"52\") = \"3\" ]]\n    [[ $(candidate \"7919\" \"-1\" \"12\") = \"-1\" ]]\n    [[ $(candidate \"3609\" \"1245\" \"583\") = \"583\" ]]\n    [[ $(candidate \"91\" \"56\" \"129\") = \"129\" ]]\n    [[ $(candidate \"6\" \"34\" \"1234\") = \"1234\" ]]\n    [[ $(candidate \"1\" \"2\" \"0\") = \"0\" ]]\n    [[ $(candidate \"2\" \"2\" \"0\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1) return y;\n    foreach (i; 2 .. n) {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_music(string music_string)\n{\n    long[string] note_map = [\"o\": 4, \"o|\": 2, \".|\": 1];\n    return music_string.split(\" \").filter!(x => x).map!(x => note_map[x]).array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"6\" ]]\n    [[ $(candidate \"1 4 9\") = \"14\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1 1 1 1 1 1\") = \"9\" ]]\n    [[ $(candidate \"-1 -1 -1 -1 -1 -1 -1 -1 -1\") = \"-3\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"-1 -5 2 -1 -5\") = \"-126\" ]]\n    [[ $(candidate \"-56 -99 1 0 -2\") = \"3030\" ]]\n    [[ $(candidate \"-1 0 0 0 0 0 0 0 -1\") = \"0\" ]]\n    [[ $(candidate \"-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37\") = \"-14196\" ]]\n    [[ $(candidate \"-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10\") = \"-1448\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_squares(long[] lst)\n{\n    long[] result;\n    foreach (i, x; lst)\n    {\n        if (i % 3 == 0)\n            result ~= x^^2;\n        else if (i % 4 == 0 && i % 3 != 0)\n            result ~= x^^3;\n        else\n            result ~= x;\n    }\n    return result.sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    count_up_to \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"2 3\" ]]\n    [[ $(candidate \"6\") = \"2 3 5\" ]]\n    [[ $(candidate \"7\") = \"2 3 5\" ]]\n    [[ $(candidate \"10\") = \"2 3 5 7\" ]]\n    [[ $(candidate \"0\") = \"\" ]]\n    [[ $(candidate \"22\") = \"2 3 5 7 11 13 17 19\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n    [[ $(candidate \"18\") = \"2 3 5 7 11 13 17\" ]]\n    [[ $(candidate \"47\") = \"2 3 5 7 11 13 17 19 23 29 31 37 41 43\" ]]\n    [[ $(candidate \"101\") = \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nlong[] count_up_to(long n) \n{\n    long[] primes;\n    for (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        foreach (j; 2 .. i) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes ~= i;\n        }\n    }\n    return primes;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.0\") = \"14\" ]]\n    [[ $(candidate \"1.0 2.0 3.0\") = \"14\" ]]\n    [[ $(candidate \"1.0 3.0 5.0 7.0\") = \"84\" ]]\n    [[ $(candidate \"1.4 4.2 0.0\") = \"29\" ]]\n    [[ $(candidate \"-2.4 1.0 1.0\") = \"6\" ]]\n    [[ $(candidate \"100.0 1.0 15.0 2.0\") = \"10230\" ]]\n    [[ $(candidate \"10000.0 10000.0\") = \"200000000\" ]]\n    [[ $(candidate \"-1.4 4.6 6.3\") = \"75\" ]]\n    [[ $(candidate \"-1.4 17.9 18.9 19.9\") = \"1086\" ]]\n    [[ $(candidate \"0.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0\") = \"1\" ]]\n    [[ $(candidate \"-1.0 1.0 0.0\") = \"2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong sum_squares(float[] lst) \n{\n    long squared = 0;\n    foreach (i; lst)\n    {\n        squared += ceil(i)^^2;\n    }\n    return squared;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 3 5 2 3 3 9 0 123\") = \"0 2 3 5 9 123\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique(long[] l) \n{\n    return l.sort.uniq.array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nlong fib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fizz_buzz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"50\") = \"0\" ]]\n    [[ $(candidate \"78\") = \"2\" ]]\n    [[ $(candidate \"79\") = \"3\" ]]\n    [[ $(candidate \"100\") = \"3\" ]]\n    [[ $(candidate \"200\") = \"6\" ]]\n    [[ $(candidate \"4000\") = \"192\" ]]\n    [[ $(candidate \"10000\") = \"639\" ]]\n    [[ $(candidate \"100000\") = \"8026\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.string;\nimport std.conv;\nimport std.format;\nimport std.algorithm;\nimport std.typecons;\nimport std.range;\nimport std.math;\nimport std.array;\nlong fizz_buzz(long n) \n{\n    auto ns = iota(0, n).filter!(i => i % 11 == 0 || i % 13 == 0).array;\n    auto s = ns.map!(to!string).join;\n    return count(s, '7');\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1\" \"0\") = \"1\" ]]\n    [[ $(candidate \"2\" \"3\") = \"5\" ]]\n    [[ $(candidate \"5\" \"7\") = \"12\" ]]\n    [[ $(candidate \"7\" \"5\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong add(long x, long y) \n{\n    return x + y;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    triples_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 5 -1\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2 1\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate \"1 2 5 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 -5 3 9 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"1 3 5 -100\") = \"false\" ]]\n    [[ $(candidate \"100 3 5 -100\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool triples_sum_to_zero(long[] l) \n{\n    foreach (i; 0 .. l.length)\n        foreach (j; i+1 .. l.length)\n            foreach (k; j+1 .. l.length)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    largest_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1\" ]]\n    [[ $(candidate \"7\") = \"1\" ]]\n    [[ $(candidate \"10\") = \"5\" ]]\n    [[ $(candidate \"100\") = \"50\" ]]\n    [[ $(candidate \"49\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_divisor(long n)\n{\n    foreach_reverse (i; 1 .. n)\n    {\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sort_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"three\") = \"three\" ]]\n    [[ $(candidate \"three five nine\") = \"three five nine\" ]]\n    [[ $(candidate \"five zero four seven nine eight\") = \"zero four five seven eight nine\" ]]\n    [[ $(candidate \"six five four three two one zero\") = \"zero one two three four five six\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring sort_numbers(string numbers) \n{\n    auto value_map = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9];\n    return numbers.split().filter!(x => x.length > 0).array.sort!((x, y) => value_map[x] < value_map[y]).join(\" \");\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    smallest_change \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 5 4 7 9 6\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 3 2 2\") = \"1\" ]]\n    [[ $(candidate \"1 4 2\") = \"1\" ]]\n    [[ $(candidate \"1 4 4 2\") = \"1\" ]]\n    [[ $(candidate \"1 2 3 2 1\") = \"0\" ]]\n    [[ $(candidate \"3 1 1 3\") = \"0\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"0 1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong smallest_change(long[] arr) \n{\n    long ans = 0;\n    foreach (i; 0 .. arr.length / 2)\n        if (arr[i] != arr[arr.length - i - 1])\n            ans += 1;\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    below_threshold \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\" \"100\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\" \"5\") = \"false\" ]]\n    [[ $(candidate \"1 20 4 10\" \"21\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\" \"22\") = \"true\" ]]\n    [[ $(candidate \"1 8 4 10\" \"11\") = \"true\" ]]\n    [[ $(candidate \"1 8 4 10\" \"10\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_threshold(long[] l, long t)\n{\n    return all!(i => i < t)(l);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong modp(long n, long p) \n{\n    long ret = 1;\n    foreach(i; 0 .. n)\n        ret = (2 * ret) % p;\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    multiply \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"148\" \"412\") = \"16\" ]]\n    [[ $(candidate \"19\" \"28\") = \"72\" ]]\n    [[ $(candidate \"2020\" \"1851\") = \"0\" ]]\n    [[ $(candidate \"14\" \"-15\") = \"20\" ]]\n    [[ $(candidate \"76\" \"67\") = \"42\" ]]\n    [[ $(candidate \"17\" \"27\") = \"49\" ]]\n    [[ $(candidate \"0\" \"1\") = \"0\" ]]\n    [[ $(candidate \"0\" \"0\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong multiply(long a, long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.string;\nimport std.format;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport std.range;\nlong[] unique_digits(long[] x) \n{\n    long[] odd_digit_elements = [];\n    foreach (i; x)\n    {\n        if (all!((c) => to!int(c) % 2 == 1)(to!string(i)))\n        {\n            odd_digit_elements ~= i;\n        }\n    }\n    odd_digit_elements.sort;\n    return odd_digit_elements;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nbool will_it_fly(long[] q, long w) \n{\n    if (q.sum > w) return false;\n    auto i = 0, j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j]) return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_multiply_prime() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_multiply_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"false\" ]]\n    [[ $(candidate \"30\") = \"true\" ]]\n    [[ $(candidate \"8\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"125\") = \"true\" ]]\n    [[ $(candidate \"105\") = \"true\" ]]\n    [[ $(candidate \"126\") = \"false\" ]]\n    [[ $(candidate \"729\") = \"false\" ]]\n    [[ $(candidate \"891\") = \"false\" ]]\n    [[ $(candidate \"1001\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long n)\n    {\n        foreach(j; 2..n)\n            if(n % j == 0)\n                return false;\n        return true;\n    }\n\n    foreach(i; 2..101)\n    {\n        if(!is_prime(i)) continue;\n        foreach(j; 2..101)\n        {\n            if(!is_prime(j)) continue;\n            foreach(k; 2..101)\n            {\n                if(!is_prime(k)) continue;\n                if(i*j*k == a) return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_multiply_prime() {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong[] maximum(long[] arr, long k) \n{\n    if (k == 0) \n    {\n        return [];\n    }\n    arr.sort();\n    return arr[$-k .. $];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    separate_paren_groups \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"(()()) ((())) () ((())()())\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"() (()) ((())) (((())))\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"(()(())((())))\" ]]\n    [[ $(candidate \"( ) (( )) (( )( ))\") = \"() (()) (()())\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.string;\nimport std.conv;\nimport std.array;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.format;\nimport std.math;\nstring[] separate_paren_groups(string paren_string) \n{\n    string[] result;\n    string current_string;\n    int current_depth = 0;\n\n    foreach (c; paren_string)\n    {\n        if (c == '(')\n        {\n            current_depth += 1;\n            current_string ~= c;\n        }\n        else if (c == ')')\n        {\n            current_depth -= 1;\n            current_string ~= c;\n\n            if (current_depth == 0)\n            {\n                result ~= current_string;\n                current_string = \"\";\n            }\n        }\n    }\n\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] total_match(string[] lst1, string[] lst2)\n{\n    auto l1 = lst1.map!(a => a.length).sum;\n    auto l2 = lst2.map!(a => a.length).sum;\n    return l1 <= l2 ? lst1 : lst2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nlong car_race_collision(long n) \n{\n    return n*n;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) \n        return x == 1;\n    long power = 1;\n    while (power < x) \n        power *= n;\n    return power == x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    incr_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"3 2 1\") = \"4 3 2\" ]]\n    [[ $(candidate \"5 2 5 2 3 3 9 0 123\") = \"6 3 6 3 4 4 10 1 124\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.range;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.format;\nimport std.math;\nimport std.conv;\nlong[] incr_list(long[] l) \n{\n    return l.map!(a => a+1).array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    vowels_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"2\" ]]\n    [[ $(candidate \"Alone\") = \"3\" ]]\n    [[ $(candidate \"key\") = \"2\" ]]\n    [[ $(candidate \"bye\") = \"1\" ]]\n    [[ $(candidate \"keY\") = \"2\" ]]\n    [[ $(candidate \"bYe\") = \"1\" ]]\n    [[ $(candidate \"ACEDY\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong vowels_count(string s) \n{\n    string vowels = \"aeiouAEIOU\";\n    long n_vowels = count(s.filter!(c => vowels.canFind(c)));\n    if (s[$-1] == 'y' || s[$-1] == 'Y')\n        n_vowels += 1;\n    return n_vowels;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsorted_list_sum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sorted_list_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aa a aaa\") = \"aa\" ]]\n    [[ $(candidate \"school AI asdf b\") = \"AI asdf school\" ]]\n    [[ $(candidate \"d b c a\") = \"\" ]]\n    [[ $(candidate \"d dcba abcd a\") = \"abcd dcba\" ]]\n    [[ $(candidate \"AI ai au\") = \"AI ai au\" ]]\n    [[ $(candidate \"a b b c c a\") = \"\" ]]\n    [[ $(candidate \"aaaa bbbb dd cc\") = \"cc dd aaaa bbbb\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nstring[] sorted_list_sum(string[] lst) \n{\n    lst.sort();\n    string[] new_lst = [];\n    foreach(i; lst)\n    {\n        if (i.length % 2 == 0)\n        {\n            new_lst ~= i;\n        }\n    }\n    new_lst.sort!((a, b) => a.length < b.length);\n    return new_lst;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsorted_list_sum() {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nwords_string() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    words_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi, my name is John\") = \"Hi my name is John\" ]]\n    [[ $(candidate \"One, two, three, four, five, six\") = \"One two three four five six\" ]]\n    [[ $(candidate \"Hi, my name\") = \"Hi my name\" ]]\n    [[ $(candidate \"One,, two, three, four, five, six,\") = \"One two three four five six\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"ahmed     , gamal\") = \"ahmed gamal\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.range;\nimport std.typecons;\nimport std.algorithm;\nimport std.format;\nimport std.conv;\nimport std.math;\nimport std.array;\nimport std.string;\nstring[] words_string(string s) \n{\n    if (s.length == 0)\n        return [];\n\n    string s_list;\n    foreach (letter; s)\n    {\n        if (letter == ',')\n            s_list ~= ' ';\n        else\n            s_list ~= letter;\n    }\n\n    return array(splitter(s_list));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_string() {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    even_odd_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"8 13\" ]]\n    [[ $(candidate \"12\") = \"4 6\" ]]\n    [[ $(candidate \"3\") = \"1 2\" ]]\n    [[ $(candidate \"63\") = \"6 8\" ]]\n    [[ $(candidate \"25\") = \"5 6\" ]]\n    [[ $(candidate \"19\") = \"4 6\" ]]\n    [[ $(candidate \"9\") = \"4 5\" ]]\n    [[ $(candidate \"1\") = \"0 1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.range;\nimport std.typecons;\nimport std.algorithm;\nimport std.format;\nimport std.conv;\nimport std.math;\nimport std.array;\nimport std.string;\nTuple!(long, long) even_odd_palindrome(long n) \n{\n    bool is_palindrome(long n)\n    {\n        return to!string(n) == to!string(n).dup.reverse;\n    }\n\n    long even_palindrome_count = 0;\n    long odd_palindrome_count = 0;\n\n    foreach (i; 1 .. n+1)\n    {\n        if (i%2 == 1 && is_palindrome(i))\n        {\n            odd_palindrome_count += 1;\n        }\n        else if (i%2 == 0 && is_palindrome(i))\n        {\n            even_palindrome_count += 1;\n        }\n    }\n    return tuple(even_palindrome_count, odd_palindrome_count);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nlong[] tri(long n) \n{\n    if (n == 0)\n        return [1];\n    long[] my_tri = [1, 3];\n    foreach (i; 2 .. n + 1)\n    {\n        if (i % 2 == 0)\n            my_tri ~= i / 2 + 1;\n        else\n            my_tri ~= my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2;\n    }\n    return my_tri;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nfloat median(long[] l) \n{\n    l.sort();\n    if (l.length % 2 == 1) {\n        return l[l.length / 2];\n    } else {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    change_base \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8\" \"3\") = \"22\" ]]\n    [[ $(candidate \"9\" \"3\") = \"100\" ]]\n    [[ $(candidate \"234\" \"2\") = \"11101010\" ]]\n    [[ $(candidate \"16\" \"2\") = \"10000\" ]]\n    [[ $(candidate \"8\" \"2\") = \"1000\" ]]\n    [[ $(candidate \"7\" \"2\") = \"111\" ]]\n    [[ $(candidate \"2\" \"3\") = \"2\" ]]\n    [[ $(candidate \"3\" \"4\") = \"3\" ]]\n    [[ $(candidate \"4\" \"5\") = \"4\" ]]\n    [[ $(candidate \"5\" \"6\") = \"5\" ]]\n    [[ $(candidate \"6\" \"7\") = \"6\" ]]\n    [[ $(candidate \"7\" \"8\") = \"7\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nstring change_base(long x, long base) \n{\n    string ret = \"\";\n    while (x > 0) {\n        ret = to!string(x % base) ~ ret;\n        x /= base;\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    common \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\") = \"1 5 653\" ]]\n    [[ $(candidate \"5 3 2 8\" \"3 2\") = \"2 3\" ]]\n    [[ $(candidate \"4 3 2 8\" \"3 2 4\") = \"2 3 4\" ]]\n    [[ $(candidate \"4 3 2 8\" \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] common(long[] l1, long[] l2)\n{\n    auto ret = l1.filter!(e => l2.canFind(e)).array;\n    ret.sort;\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    cycpattern_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"xyzw\" \"xyw\") = \"false\" ]]\n    [[ $(candidate \"yello\" \"ell\") = \"true\" ]]\n    [[ $(candidate \"whattup\" \"ptut\") = \"false\" ]]\n    [[ $(candidate \"efef\" \"fee\") = \"true\" ]]\n    [[ $(candidate \"abab\" \"aabb\") = \"false\" ]]\n    [[ $(candidate \"winemtt\" \"tinem\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool cycpattern_check(string a, string b) \n{\n    auto l = b.length;\n    auto pat = b ~ b;\n    foreach(i; 0 .. a.length - l + 1)\n        foreach(j; 0 .. l + 1)\n            if (a[i .. i + l] == pat[j .. j + l])\n                return true;\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    minSubArraySum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 4 1 2 4\") = \"1\" ]]\n    [[ $(candidate \"-1 -2 -3\") = \"-6\" ]]\n    [[ $(candidate \"-1 -2 -3 2 -10\") = \"-14\" ]]\n    [[ $(candidate \"-9999999999999999\") = \"-9999999999999999\" ]]\n    [[ $(candidate \"0 10 20 1000000\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"100 -1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"10 11 13 8 3 4\") = \"3\" ]]\n    [[ $(candidate \"100 -33 32 -1 0 -2\") = \"-33\" ]]\n    [[ $(candidate \"-10\") = \"-10\" ]]\n    [[ $(candidate \"7\") = \"7\" ]]\n    [[ $(candidate \"1 -1\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong minSubArraySum(long[] nums) \n{\n    long max_sum = 0;\n    long s = 0;\n    foreach (num; nums)\n    {\n        s += -num;\n        if (s < 0)\n            s = 0;\n        max_sum = max(s, max_sum);\n    }\n    if (max_sum == 0)\n        max_sum = nums.map!(a => -a).maxElement;\n    long min_sum = -max_sum;\n    return min_sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.string;\nimport std.conv;\nimport std.format;\nimport std.algorithm;\nimport std.typecons;\nimport std.range;\nimport std.math;\nimport std.array;\nlong[] sort_array(long[] array)\n{\n    return array.length == 0 ? [] : array.sort!((a, b) => (array[0] + array[$ - 1]) % 2 == 0? a>b : a<b)(numbers);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nhistogram() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long[string]) histogram(string test) \n{\n    long[string] dict1;\n    string[] list1 = test.split;\n    long t = 0;\n\n    foreach (i; list1)\n    {\n        if (list1.count(i) > t && i != \"\")\n        {\n            t = list1.count(i);\n        }\n    }\n\n    if (t > 0)\n    {\n        foreach (i; list1)\n        {\n            if (list1.count(i) == t)\n            {\n                dict1[i] = t;\n            }\n        }\n    }\n\n    return dict1.empty ? Nullable!(long[string])() : Nullable!(long[string])(dict1);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhistogram() {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_odd_collatz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"14\") = \"1 5 7 11 13 17\" ]]\n    [[ $(candidate \"5\") = \"1 5\" ]]\n    [[ $(candidate \"12\") = \"1 3 5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.range;\nimport std.typecons;\nimport std.algorithm;\nimport std.format;\nimport std.conv;\nimport std.math;\nimport std.array;\nimport std.string;\nlong[] get_odd_collatz(long n) \n{\n    long[] odd_collatz;\n    if (n%2==0)\n    {\n        odd_collatz = [];\n    }\n    else\n    {\n        odd_collatz = [n];\n    }\n    while (n > 1)\n    {\n        if (n % 2 == 0)\n        {\n            n = n/2;\n        }\n        else\n        {\n            n = n*3 + 1;\n        }\n\n        if (n%2 == 1)\n        {\n            odd_collatz ~= to!long(n);\n        }\n    }\n    odd_collatz.sort;\n    return odd_collatz;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    derivative \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"1 4 12 20\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 6\" ]]\n    [[ $(candidate \"3 2 1\") = \"2 2\" ]]\n    [[ $(candidate \"3 2 1 0 4\") = \"2 2 0 16\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong[] derivative(long[] xs) \n{\n    long[] result;\n    for (size_t i = 1; i < xs.length; i++)\n    {\n        result ~= i * xs[i];\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fibfib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"24\" ]]\n    [[ $(candidate \"10\") = \"81\" ]]\n    [[ $(candidate \"12\") = \"274\" ]]\n    [[ $(candidate \"14\") = \"927\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a floating point\ntruncate_number() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    truncate_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3.5\") = \"0.5\" ]]\n    [[ $(candidate \"1.25\") = \"0.25\" ]]\n    [[ $(candidate \"123.0\") = \"0.0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nfloat truncate_number(float number) \n{\n    return number % 1.0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a floating point\ntruncate_number() {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    max_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"3\" ]]\n    [[ $(candidate \"5 3 -5 2 -3 3 9 0 124 1 -10\") = \"124\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_element(long[] l)\n{\n    return l.maxElement;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nclosest_integer() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong closest_integer(string value) \n{\n    auto num = value.to!double;\n    if (value.endsWith(\".5\"))\n    {\n        if (num > 0)\n        {\n            return ceil(num).to!long;\n        }\n        else\n        {\n            return floor(num).to!long;\n        }\n    }\n    else if (value.length > 0)\n    {\n        return round(num).to!long;\n    }\n    else\n    {\n        return 0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nclosest_integer() {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0 1\" ]]\n    [[ $(candidate \"1 1 1\") = \"3 1\" ]]\n    [[ $(candidate \"100 0\") = \"100 0\" ]]\n    [[ $(candidate \"3 5 7\") = \"15 105\" ]]\n    [[ $(candidate \"10\") = \"10 10\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum_value = 0;\n    long prod_value = 1;\n\n    foreach(n; numbers)\n    {\n        sum_value += n;\n        prod_value *= n;\n    }\n    return tuple(sum_value, prod_value);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nlong add_elements(long[] arr, long k) \n{\n    return arr[0..k].filter!(a => to!string(a).length <= 2).sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] eat(long number, long need, long remaining)\n{\n    return need <= remaining ? [number + need, remaining - need] : [number + remaining, 0];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_row \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 4\\n1 0\\n2 5\\n2 0\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\" \"2\") = \"0 1\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 1 3 4 5 6\\n1 2 1 4 5 6\\n1 2 3 1 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 0\\n2 1\\n2 0\\n3 2\\n3 0\\n4 3\\n4 0\\n5 4\\n5 0\\n6 5\\n6 0\" ]]\n    [[ $(candidate \"\" \"1\") = \"\" ]]\n    [[ $(candidate \"1\" \"2\") = \"\" ]]\n    [[ $(candidate \"\\n1\\n1 2 3\" \"3\") = \"2 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nTuple!(long, long)[] get_row(long[][] lst, long x) \n{\n    auto coords = array(iota(lst.length).map!(i => iota(lst[i].length).map!(j => Tuple!(long, long)(i, j)).filter!(t => lst[t[0]][t[1]] == x)).joiner);\n    coords.sort!((a, b) => a[0] < b[0] ? true : a[0] > b[0] ? false : a[1] > b[1]);\n    return coords;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") = \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\") = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (y % 2 == 0)\n        return y;\n    if (x == y)\n        return -1;\n    return y - 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    prime_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\") = \"true\" ]]\n    [[ $(candidate \"abcdcba\") = \"true\" ]]\n    [[ $(candidate \"kittens\") = \"true\" ]]\n    [[ $(candidate \"orange\") = \"false\" ]]\n    [[ $(candidate \"wow\") = \"true\" ]]\n    [[ $(candidate \"world\") = \"true\" ]]\n    [[ $(candidate \"MadaM\") = \"true\" ]]\n    [[ $(candidate \"Wow\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"HI\") = \"true\" ]]\n    [[ $(candidate \"go\") = \"true\" ]]\n    [[ $(candidate \"gogo\") = \"false\" ]]\n    [[ $(candidate \"aaaaaaaaaaaaaaa\") = \"false\" ]]\n    [[ $(candidate \"Madam\") = \"true\" ]]\n    [[ $(candidate \"M\") = \"false\" ]]\n    [[ $(candidate \"0\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nbool prime_length(string string) \n{\n    auto l = string.length;\n    if (l == 0 || l == 1)\n        return false;\n    foreach (i; 2 .. l)\n        if (l % i == 0)\n            return false;\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sum_to_n \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"66\" ]]\n    [[ $(candidate \"30\") = \"465\" ]]\n    [[ $(candidate \"100\") = \"5050\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong sum_to_n(long n) \n{\n    return n * (n + 1) / 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] rolling_max(long[] numbers)\n{\n    long running_max = 0;\n    long[] result;\n\n    foreach (n; numbers)\n    {\n        if (running_max == 0)\n            running_max = n;\n        else\n            running_max = max(running_max, n);\n\n        result ~= running_max;\n    }\n\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    words_in_sentence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"This is a test\") = \"is\" ]]\n    [[ $(candidate \"lets go for swimming\") = \"go for\" ]]\n    [[ $(candidate \"there is no place available here\") = \"there is no place\" ]]\n    [[ $(candidate \"Hi I am Hussein\") = \"Hi am Hussein\" ]]\n    [[ $(candidate \"go for it\") = \"go for it\" ]]\n    [[ $(candidate \"here\") = \"\" ]]\n    [[ $(candidate \"here is\") = \"is\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring words_in_sentence(string sentence) \n{\n    string[] new_lst;\n    foreach (word; sentence.split)\n    {\n        bool flg = false;\n        if (word.length == 1)\n            flg = true;\n        foreach (i; 2 .. word.length)\n            if (word.length % i == 0)\n                flg = true;\n        if (!flg || word.length == 2)\n            new_lst ~= word;\n    }\n    return new_lst.join(\" \");\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong[] compare(long[] game, long[] guess) \n{\n    return game.zip(guess).map!(a => abs(a[0] - a[1])).array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nremove_duplicates() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.range;\nimport std.typecons;\nimport std.algorithm;\nimport std.format;\nimport std.conv;\nimport std.math;\nimport std.array;\nimport std.string;\nlong[] remove_duplicates(long[] numbers) \n{\n    return numbers.filter!(i => numbers.count(i) <= 1).array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nremove_duplicates() {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong[] parse_nested_parens(string paren_string) \n{\n    long[] res;\n    foreach(x; paren_string.split(' ').filter!(x => x.length > 0))\n    {\n        long depth = 0;\n        long max_depth = 0;\n        foreach(c; x)\n        {\n            if(c == '(')\n            {\n                depth += 1;\n                max_depth = max(depth, max_depth);\n            }\n            else\n            {\n                depth -= 1;\n            }\n        }\n        res ~= max_depth;\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nTuple!(long, long) even_odd_count(long num) \n{\n    long even_count = 0;\n    long odd_count = 0;\n    foreach (i; to!string(abs(num)))\n    {\n        if (to!int(i) % 2 == 0)\n            even_count += 1;\n        else\n            odd_count += 1;\n    }\n    return tuple(even_count, odd_count);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    fruit_distribution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 apples and 6 oranges\" \"19\") = \"8\" ]]\n    [[ $(candidate \"5 apples and 6 oranges\" \"21\") = \"10\" ]]\n    [[ $(candidate \"0 apples and 1 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 apples and 0 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"100\") = \"95\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 apples and 100 oranges\" \"120\") = \"19\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fruit_distribution(string s, long n) \n{\n    auto lis = s.split(' ').filter!(a => a.isNumeric).map!(a => a.to!long).array;\n    return n - lis.sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    string_xor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"111000\" \"101010\") = \"010010\" ]]\n    [[ $(candidate \"1\" \"1\") = \"0\" ]]\n    [[ $(candidate \"0101\" \"0000\") = \"0101\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_xor(string a, string b)\n{\n    string result;\n    foreach (i, j; zip(a, b))\n    {\n        result ~= (i == j ? '0' : '1');\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nstrlen() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    strlen \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"x\") = \"1\" ]]\n    [[ $(candidate \"asdasnakj\") = \"9\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong strlen(string string) \n{\n    return string.length;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstrlen() {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    string_sequence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"3\") = \"0 1 2 3\" ]]\n    [[ $(candidate \"10\") = \"0 1 2 3 4 5 6 7 8 9 10\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.range;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.format;\nimport std.math;\nimport std.conv;\nstring string_sequence(long n) \n{\n    return join(iota(0, n + 1).map!(to!string).array, \" \");\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong can_arrange(long[] arr)\n{\n    long ind = -1;\n    foreach (i; 1 .. arr.length)\n    {\n        if (arr[i] < arr[i-1])\n            ind = i;\n    }\n    return ind;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 88\") = \"88\" ]]\n    [[ $(candidate \"4 5 6 7 2 122\") = \"122\" ]]\n    [[ $(candidate \"4 0 6 7\") = \"0\" ]]\n    [[ $(candidate \"4 4 6 8\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long[] lst) \n{\n    return lst[1..lst.length].stride(2).filter!(x => x % 2 == 0).sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    intersperse \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"7\") = \"\" ]]\n    [[ $(candidate \"5 6 3 2\" \"8\") = \"5 8 6 8 3 8 2\" ]]\n    [[ $(candidate \"2 2 2\" \"2\") = \"2 2 2 2 2\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0) return [];\n\n    long[] result;\n\n    foreach (n; numbers[0 .. $-1]) {\n        result ~= n;\n        result ~= delimeter;\n    }\n\n    result ~= numbers[$-1];\n\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    match_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()( )\") = \"Yes\" ]]\n    [[ $(candidate \") )\") = \"No\" ]]\n    [[ $(candidate \"(()(()) ())())\") = \"No\" ]]\n    [[ $(candidate \")()) (()()(\") = \"Yes\" ]]\n    [[ $(candidate \"(()))) (()())((\") = \"Yes\" ]]\n    [[ $(candidate \"() ())\") = \"No\" ]]\n    [[ $(candidate \"(()( ()))()\") = \"Yes\" ]]\n    [[ $(candidate \"(((( ((())\") = \"No\" ]]\n    [[ $(candidate \")(() (()(\") = \"No\" ]]\n    [[ $(candidate \")( )(\") = \"No\" ]]\n    [[ $(candidate \"( )\") = \"Yes\" ]]\n    [[ $(candidate \") (\") = \"Yes\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nstring match_parens(string[] lst) \n{\n    bool check(string s)\n    {\n        int val = 0;\n        foreach(i; s)\n        {\n            if(i == '(')\n                val = val + 1;\n            else\n                val = val - 1;\n            if(val < 0)\n                return false;\n        }\n        return val == 0;\n    }\n\n    auto S1 = lst[0] ~ lst[1];\n    auto S2 = lst[1] ~ lst[0];\n    return check(S1) || check(S2) ? \"Yes\" : \"No\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    generate_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"10\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"10\" \"2\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"132\" \"2\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"17\" \"89\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong[] generate_integers(long a, long b) \n{\n    auto lower = max(2, min(a, b));\n    auto upper = min(8, max(a, b));\n    return iota(lower, upper+1).filter!(i => i % 2 == 0).array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    exchange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\" \"1 2 3 4\") = \"YES\" ]]\n    [[ $(candidate \"1 2 3 4\" \"1 5 3 4\") = \"NO\" ]]\n    [[ $(candidate \"1 2 3 4\" \"2 1 4 3\") = \"YES\" ]]\n    [[ $(candidate \"5 7 3\" \"2 6 4\") = \"YES\" ]]\n    [[ $(candidate \"5 7 3\" \"2 6 3\") = \"NO\" ]]\n    [[ $(candidate \"3 2 6 1 8 9\" \"3 5 5 1 1 1\") = \"NO\" ]]\n    [[ $(candidate \"100 200\" \"200 200\") = \"YES\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring exchange(long[] lst1, long[] lst2)\n{\n    auto odd = count!(i => i % 2 == 1)(lst1);\n    auto even = count!(i => i % 2 == 0)(lst2);\n    return even >= odd ? \"YES\" : \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    int_to_mini_roman \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"19\") = \"xix\" ]]\n    [[ $(candidate \"152\") = \"clii\" ]]\n    [[ $(candidate \"251\") = \"ccli\" ]]\n    [[ $(candidate \"426\") = \"cdxxvi\" ]]\n    [[ $(candidate \"500\") = \"d\" ]]\n    [[ $(candidate \"1\") = \"i\" ]]\n    [[ $(candidate \"4\") = \"iv\" ]]\n    [[ $(candidate \"43\") = \"xliii\" ]]\n    [[ $(candidate \"90\") = \"xc\" ]]\n    [[ $(candidate \"94\") = \"xciv\" ]]\n    [[ $(candidate \"532\") = \"dxxxii\" ]]\n    [[ $(candidate \"900\") = \"cm\" ]]\n    [[ $(candidate \"994\") = \"cmxciv\" ]]\n    [[ $(candidate \"1000\") = \"m\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring int_to_mini_roman(long number) \n{\n    auto num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    auto sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n    auto i = 12;\n    string res;\n    while (number) \n    {\n        auto div = number / num[i];\n        number %= num[i];\n        while (div) \n        {\n            res ~= sym[i];\n            div--;\n        }\n        i--;\n    }\n    return res.toLower();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_equal_to_sum_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"8\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"false\" ]]\n    [[ $(candidate \"12\") = \"true\" ]]\n    [[ $(candidate \"13\") = \"false\" ]]\n    [[ $(candidate \"16\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nbool is_equal_to_sum_even(long n) \n{\n    return n%2 == 0 && n >= 8;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nstring decimal_to_binary(long decimal) \n{\n    return \"db\" ~ to!string(decimal, 2) ~ \"db\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_third() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_third(long[] l)\n{\n    long[] copy = l.dup;\n    copy[0..$].stride(3).sort();\n    return copy;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_third() {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    simplify \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1/5\" \"5/1\") = \"true\" ]]\n    [[ $(candidate \"1/6\" \"2/1\") = \"false\" ]]\n    [[ $(candidate \"5/1\" \"3/1\") = \"true\" ]]\n    [[ $(candidate \"7/10\" \"10/2\") = \"false\" ]]\n    [[ $(candidate \"2/10\" \"50/10\") = \"true\" ]]\n    [[ $(candidate \"7/2\" \"4/2\") = \"true\" ]]\n    [[ $(candidate \"11/6\" \"6/1\") = \"true\" ]]\n    [[ $(candidate \"2/3\" \"5/2\") = \"false\" ]]\n    [[ $(candidate \"5/2\" \"3/5\") = \"false\" ]]\n    [[ $(candidate \"2/4\" \"8/4\") = \"true\" ]]\n    [[ $(candidate \"2/4\" \"4/2\") = \"true\" ]]\n    [[ $(candidate \"1/5\" \"5/1\") = \"true\" ]]\n    [[ $(candidate \"1/5\" \"1/5\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool simplify(string x, string n) \n{\n    auto a = x.split(\"/\");\n    auto b = n.split(\"/\");\n    auto numerator = to!int(a[0]) * to!int(b[0]);\n    auto denom = to!int(a[1]) * to!int(b[1]);\n    return numerator % denom == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    right_angle_triangle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"true\" ]]\n    [[ $(candidate \"1\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"10\" \"6\" \"8\") = \"true\" ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"false\" ]]\n    [[ $(candidate \"7\" \"24\" \"25\") = \"true\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"false\" ]]\n    [[ $(candidate \"5\" \"12\" \"13\") = \"true\" ]]\n    [[ $(candidate \"15\" \"8\" \"17\") = \"true\" ]]\n    [[ $(candidate \"48\" \"55\" \"73\") = \"true\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"false\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nbool right_angle_triangle(long a, long b, long c) \n{\n    return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ndouble_the_difference() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    double_the_difference \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"5.0 4.0\") = \"25\" ]]\n    [[ $(candidate \"0.1 0.2 0.3\") = \"0\" ]]\n    [[ $(candidate \"-10.0 -20.0 -30.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0 -2.0 8.0\") = \"0\" ]]\n    [[ $(candidate \"0.2 3.0 5.0\") = \"34\" ]]\n    [[ $(candidate \"-9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0\") = \"165\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    foreach (float i; lst) {\n        if (i > 0 && i % 2 != 0 && i == cast(int)i) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ndouble_the_difference() {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    below_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"1 2 -3 1 2 -3\") = \"false\" ]]\n    [[ $(candidate \"1 2 -4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4 -4\") = \"false\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4 -5\") = \"true\" ]]\n    [[ $(candidate \"1 -2 2 -2 5 -5 4 -4\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nbool below_zero(long[] operations) \n{\n    long balance = 0;\n    foreach (op; operations)\n    {\n        balance += op;\n        if (balance < 0)\n            return true;\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    greatest_common_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"7\") = \"1\" ]]\n    [[ $(candidate \"10\" \"15\") = \"5\" ]]\n    [[ $(candidate \"49\" \"14\") = \"7\" ]]\n    [[ $(candidate \"144\" \"60\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong greatest_common_divisor(long a, long b) \n{\n    while (b != 0) {\n        auto temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1 2 6 24 15\" ]]\n    [[ $(candidate \"7\") = \"1 2 6 24 15 720 28\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"3\") = \"1 2 6\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong[] f(long n) \n{\n    long[] ret;\n    foreach(i; 1..n+1)\n    {\n        if(i%2 == 0)\n        {\n            long x = 1;\n            foreach(j; 1..i+1) x *= j;\n            ret ~= x;\n        }\n        else\n        {\n            long x = 0;\n            foreach(j; 1..i+1) x += j;\n            ret ~= x;\n        }\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmonotonic() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool monotonic(long[] l)\n{\n    return l.isSorted || l.reverse.isSorted;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmonotonic() {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] by_length(long[] arr) \n{\n    auto dic = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    auto sorted_arr = arr.sort.reverse;\n    string[] new_arr;\n    foreach (var; sorted_arr)\n    {\n        if (var >= 1 && var <= 9)\n            new_arr ~= dic[var];\n    }\n    return new_arr;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    remove_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"abcdef\\nghijklm\") = \"bcdf\\nghjklm\" ]]\n    [[ $(candidate \"fedcba\") = \"fdcb\" ]]\n    [[ $(candidate \"eeeee\") = \"\" ]]\n    [[ $(candidate \"acBAA\") = \"cB\" ]]\n    [[ $(candidate \"EcBOO\") = \"cB\" ]]\n    [[ $(candidate \"ybcd\") = \"ybcd\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring remove_vowels(string text)\n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    foreach (char c; text) \n    {\n        if (!vowels.canFind(c.toLower())) \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nbool iscube(long a) \n{\n    a = abs(a);\n    return round(pow(a, 1.0/3.0)) ^^ 3 == a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool correct_bracketing(string brackets)\n{\n    int depth = 0;\n    foreach (b; brackets)\n    {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrescale_to_unit() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    rescale_to_unit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2.0 49.9\") = \"0.0 1.0\" ]]\n    [[ $(candidate \"100.0 49.9\") = \"1.0 0.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"0.0 0.25 0.5 0.75 1.0\" ]]\n    [[ $(candidate \"2.0 1.0 5.0 3.0 4.0\") = \"0.25 0.0 1.0 0.5 0.75\" ]]\n    [[ $(candidate \"12.0 11.0 15.0 13.0 14.0\") = \"0.25 0.0 1.0 0.5 0.75\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nfloat[] rescale_to_unit(float[] numbers) \n{\n    auto min_number = numbers.minElement;\n    auto max_number = numbers.maxElement;\n    return numbers.map!(x => (x - min_number) / (max_number - min_number)).array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrescale_to_unit() {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    intersection \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\" \"2 3\") = \"NO\" ]]\n    [[ $(candidate \"-1 1\" \"0 4\") = \"NO\" ]]\n    [[ $(candidate \"-3 -1\" \"-5 5\") = \"YES\" ]]\n    [[ $(candidate \"-2 2\" \"-4 0\") = \"YES\" ]]\n    [[ $(candidate \"-11 2\" \"-1 -1\") = \"NO\" ]]\n    [[ $(candidate \"1 2\" \"3 5\") = \"NO\" ]]\n    [[ $(candidate \"1 2\" \"1 2\") = \"NO\" ]]\n    [[ $(candidate \"-2 -2\" \"-3 -2\") = \"NO\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2) \n{\n    bool is_prime(long num)\n    {\n        if (num == 1 || num == 0)\n            return false;\n        if (num == 2)\n            return true;\n        foreach(i; 2..num)\n            if (num % i == 0)\n                return false;\n        return true;\n    }\n\n    long l = max(interval1[0], interval2[0]);\n    long r = min(interval1[1], interval2[1]);\n    long length = r - l;\n    if (length > 0 && is_prime(length))\n        return \"YES\";\n    return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong hex_key(string num) \n{\n    string primes = \"2357BD\";\n    long total = 0;\n    foreach (c; num)\n    {\n        if (primes.canFind(c))\n            total++;\n    }\n    return total;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_bored \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\") = \"0\" ]]\n    [[ $(candidate \"Is the sky blue?\") = \"0\" ]]\n    [[ $(candidate \"I love It \\!\") = \"1\" ]]\n    [[ $(candidate \"bIt\") = \"0\" ]]\n    [[ $(candidate \"I feel good today. I will be productive. will kill It\") = \"2\" ]]\n    [[ $(candidate \"You and I are going for a walk\") = \"0\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong is_bored(string S) \n{\n    import std.regex;\n    auto sentences = split(S, regex(r\"[.?!]\\s*\"));\n    return reduce!\"a + b\"(0, map!(a => startsWith(a, \"I \"))(sentences));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong how_many_times(string string, string substring) \n{\n    long times = 0;\n\n    foreach(i; 0 .. string.length - substring.length + 1)\n        if (string[i .. i + substring.length] == substring)\n            times += 1;\n\n    return times;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 8 7 1\") = \"12\" ]]\n    [[ $(candidate \"3 3 3 3 3\") = \"9\" ]]\n    [[ $(candidate \"30 13 24 321\") = \"0\" ]]\n    [[ $(candidate \"5 9\") = \"5\" ]]\n    [[ $(candidate \"2 4 8\") = \"0\" ]]\n    [[ $(candidate \"30 13 23 32\") = \"23\" ]]\n    [[ $(candidate \"3 13 2 9\") = \"3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(idx, x; lst)\n    {\n        if(idx%2==0 && x%2==1)\n        {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.range;\nimport std.typecons;\nimport std.algorithm;\nimport std.format;\nimport std.conv;\nimport std.math;\nimport std.array;\nimport std.string;\nbool is_sorted(long[] lst) \n{\n    long[long] count_digit;\n    foreach (i; lst)\n        count_digit[i] = 0;\n    foreach (i; lst)\n        count_digit[i]++;\n    if (any!(i => count_digit[i] > 2)(lst))\n        return false;\n    if (lst.isSorted)\n        return true;\n    else\n        return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong search(long[] lst) \n{\n    long[] frq = new long[](lst.maxElement + 1);\n    foreach (i; lst)\n        frq[i] += 1;\n\n    long ans = -1;\n    foreach (i; 1 .. frq.length)\n        if (frq[i] >= i)\n            ans = i;\n\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    pairs_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 -5 3 5 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"-3 9 -1 3 2 30\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 3 2 31\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 30\") = \"false\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 31\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool pairs_sum_to_zero(long[] l) \n{\n    foreach (i, l1; l)\n        foreach (j, l2; l[i+1 .. $])\n            if (l1 + l2 == 0)\n                return true;\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    starts_one_ends \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"2\") = \"18\" ]]\n    [[ $(candidate \"3\") = \"180\" ]]\n    [[ $(candidate \"4\") = \"1800\" ]]\n    [[ $(candidate \"5\") = \"18000\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nlong starts_one_ends(long n) \n{\n    if (n == 1) return 1;\n    return 18 * pow(10, n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a > 0).array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    concatenate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"x y z\") = \"xyz\" ]]\n    [[ $(candidate \"x y z w k\") = \"xyzwk\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.array;\nimport std.format;\nimport std.algorithm;\nimport std.conv;\nimport std.typecons;\nimport std.range;\nimport std.math;\nstring concatenate(string[] strings) \n{\n    return strings.join;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_nested() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_nested \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"[[]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]][[[[[]\") = \"false\" ]]\n    [[ $(candidate \"[][]\") = \"false\" ]]\n    [[ $(candidate \"[]\") = \"false\" ]]\n    [[ $(candidate \"[[[[]]]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]]]]]\") = \"false\" ]]\n    [[ $(candidate \"[][][[]]\") = \"true\" ]]\n    [[ $(candidate \"[[]\") = \"false\" ]]\n    [[ $(candidate \"[]]\") = \"false\" ]]\n    [[ $(candidate \"[[]][[\") = \"true\" ]]\n    [[ $(candidate \"[[][]]\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"[[[[[[[[\") = \"false\" ]]\n    [[ $(candidate \"]]]]]]]]\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_nested(string string)\n{\n    long[] opening_bracket_index;\n    long[] closing_bracket_index;\n    foreach (i, c; string)\n    {\n        if (c == '[')\n            opening_bracket_index ~= i;\n        else if (c == ']')\n            closing_bracket_index ~= i;\n    }\n    closing_bracket_index.reverse;\n    long cnt = 0;\n    long i = 0;\n    long l = closing_bracket_index.length;\n    foreach (idx; opening_bracket_index)\n    {\n        if (i < l && idx < closing_bracket_index[i])\n        {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_nested() {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"aba\") = \"true\" ]]\n    [[ $(candidate \"aaaaa\") = \"true\" ]]\n    [[ $(candidate \"zbcd\") = \"false\" ]]\n    [[ $(candidate \"xywyx\") = \"true\" ]]\n    [[ $(candidate \"xywyz\") = \"false\" ]]\n    [[ $(candidate \"xywzx\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_palindrome(string text)\n{\n    return text == text.dup.reverse;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncount_nums() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    count_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 0\") = \"0\" ]]\n    [[ $(candidate \"1 1 2 -2 3 4 5\") = \"6\" ]]\n    [[ $(candidate \"1 6 9 -6 0 1 5\") = \"5\" ]]\n    [[ $(candidate \"1 100 98 -7 1 -1\") = \"4\" ]]\n    [[ $(candidate \"12 23 34 -45 -56 0\") = \"5\" ]]\n    [[ $(candidate \"0 1\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_nums(long[] arr)\n{\n    long digits_sum(long n)\n    {\n        long neg = 1;\n        if (n < 0) {n = -1 * n; neg = -1;}\n        long[] n_arr = n.to!string.split(\"\").map!(a => a.to!long).array;\n        n_arr[0] = n_arr[0] * neg;\n        return n_arr.sum;\n    }\n    return arr.map!(a => digits_sum(a)).filter!(a => a > 0).count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncount_nums() {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.format;\nimport std.array;\nimport std.conv;\nimport std.range;\nimport std.algorithm;\nimport std.typecons;\nimport std.string;\nimport std.math;\nlong[] factorize(long n) \n{\n    long[] fact = [];\n    long i = 2;\n    while (i <= std.math.sqrt(n.to!double) + 1) \n    {\n        if (n % i == 0) \n        {\n            fact ~= i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n    if (n > 1) \n    {\n        fact ~= n;\n    }\n    return fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_prime_factor(long n) \n{\n    bool is_prime(long k)\n    {\n        if (k < 2) return false;\n        foreach (i; 2 .. k - 1)\n            if (k % i == 0) return false;\n        return true;\n    }\n    long largest = 1;\n    foreach (j; 2 .. n + 1)\n        if (n % j == 0 && is_prime(j))\n            largest = max(largest, j);\n    return largest;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nimport std.typecons;\nlong get_max_triples(long n) \n{\n    auto A = iota(1,n+1).map!(i => i*i - i + 1).array();\n    long ans = 0;\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if ((A[i]+A[j]+A[k])%3 == 0)\n                {\n                    ans++;\n                }\n            }\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1000\") = \"1\" ]]\n    [[ $(candidate \"150\") = \"110\" ]]\n    [[ $(candidate \"147\") = \"1100\" ]]\n    [[ $(candidate \"333\") = \"1001\" ]]\n    [[ $(candidate \"963\") = \"10010\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(long N) \n{\n    return format(\"%s\", to!string(N).map!(a => a - '0').sum.to!string(2));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    minPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\" \"3\") = \"1 2 1\" ]]\n    [[ $(candidate \"5 9 3\\n4 1 6\\n7 8 2\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\" \"4\") = \"1 2 1 2\" ]]\n    [[ $(candidate \"6 4 13 10\\n5 7 12 1\\n3 16 11 15\\n8 14 9 2\" \"7\") = \"1 10 1 10 1 10 1\" ]]\n    [[ $(candidate \"8 14 9 2\\n6 4 13 15\\n5 7 1 12\\n3 10 11 16\" \"5\") = \"1 7 1 7 1\" ]]\n    [[ $(candidate \"11 8 7 2\\n5 16 14 4\\n9 3 15 6\\n12 13 10 1\" \"9\") = \"1 6 1 6 1 6 1 6 1\" ]]\n    [[ $(candidate \"12 13 10 1\\n9 3 15 6\\n5 16 14 4\\n11 8 7 2\" \"12\") = \"1 6 1 6 1 6 1 6 1 6 1 6\" ]]\n    [[ $(candidate \"2 7 4\\n3 1 5\\n6 8 9\" \"8\") = \"1 3 1 3 1 3 1 3\" ]]\n    [[ $(candidate \"6 1 5\\n3 8 9\\n2 7 4\" \"8\") = \"1 5 1 5 1 5 1 5\" ]]\n    [[ $(candidate \"1 2\\n3 4\" \"10\") = \"1 2 1 2 1 2 1 2 1 2\" ]]\n    [[ $(candidate \"1 3\\n3 2\" \"10\") = \"1 3 1 3 1 3 1 3 1 3\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] minPath(long[][] grid, long k) \n{\n    long n = grid.length;\n    long val = n * n + 1;\n    foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. n)\n        {\n            if (grid[i][j] == 1)\n            {\n                long[] temp;\n                if (i != 0)\n                    temp ~= grid[i - 1][j];\n                if (j != 0)\n                    temp ~= grid[i][j - 1];\n                if (i != n - 1)\n                    temp ~= grid[i + 1][j];\n                if (j != n - 1)\n                    temp ~= grid[i][j + 1];\n                val = temp.minElement;\n            }\n        }\n    }\n    long[] ans;\n    foreach (i; 0 .. k)\n    {\n        if (i % 2 == 0)\n            ans ~= 1;\n        else\n            ans ~= val;\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.range;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.format;\nimport std.math;\nimport std.conv;\nlong[] make_a_pile(long n) \n{\n    return iota(0, n).map!(i => n + 2*i).array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "sh",
    "prompt": "#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "\ncandidate() {\n    is_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\nrun_test",
    "stop_tokens": [
      "\n#",
      "\nAnswer",
      "\necho\n```"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Bash.\n\n### D version\n\nimport std.typecons;\nimport std.math;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\nimport std.format;\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    for (long k = 2; k < n; k++)\n    {\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n"
  }
]