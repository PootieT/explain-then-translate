[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "go_test.go",
    "prompt": "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc correct_bracketing(brackets string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool correct_bracketing(std::string brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc correct_bracketing(brackets string) bool {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "go_test.go",
    "prompt": "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc triangle_area(a int, h int) float64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat triangle_area(long a, long h) {\n    return a * h / 2.0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc triangle_area(a int, h int) float64 {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "go_test.go",
    "prompt": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc special_factorial(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong special_factorial(long n) {\n    long fact_i = 1;\n    long special_fact = 1;\n    for(long i = 1; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc special_factorial(n int) int {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "go_test.go",
    "prompt": "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_smallest_integers(lst []int) []interface{} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{nil, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{nil, 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}), expected: []interface{}{nil, nil} },\n     { actual: candidate([]int{0}), expected: []interface{}{nil, nil} },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1, nil} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1, nil} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n    std::optional<long> smallest;\n    std::optional<long> largest;\n    for (auto i : lst) {\n        if (i < 0 && (!smallest || i > *smallest)) {\n            smallest = i;\n        }\n        if (i > 0 && (!largest || i < *largest)) {\n            largest = i;\n        }\n    }\n    return std::make_tuple(smallest, largest);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_smallest_integers(lst []int) []interface{} {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "go_test.go",
    "prompt": "package move_one_ball_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc move_one_ball(arr []int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMove_One_Ball(t *testing.T) {\n  candidate := move_one_ball\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 4, 5, 1, 2}), expected: true },\n     { actual: candidate([]int{3, 5, 10, 1, 2}), expected: true },\n     { actual: candidate([]int{4, 3, 1, 2}), expected: false },\n     { actual: candidate([]int{3, 5, 4, 1, 2}), expected: false },\n     { actual: candidate([]int{}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool move_one_ball(std::vector<long> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<long> sorted_array = arr;\n    std::sort(sorted_array.begin(), sorted_array.end());\n    std::vector<long> my_arr;\n    long min_value = *std::min_element(arr.begin(), arr.end());\n    long min_index = std::find(arr.begin(), arr.end(), min_value) - arr.begin();\n    my_arr.insert(my_arr.end(), arr.begin() + min_index, arr.end());\n    my_arr.insert(my_arr.end(), arr.begin(), arr.begin() + min_index);\n    return my_arr == sorted_array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage move_one_ball_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc move_one_ball(arr []int) bool {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "go_test.go",
    "prompt": "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc digits(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong digits(long n) {\n    long product = 1;\n    int odd_count = 0;\n    for (char digit : std::to_string(n)) {\n        int int_digit = digit - '0';\n        if (int_digit % 2 == 1) {\n            product *= int_digit;\n            odd_count++;\n        }\n    }\n    return odd_count == 0 ? 0 : product;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc digits(n int) int {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "go_test.go",
    "prompt": "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fib4(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFib4(t *testing.T) {\n  candidate := fib4\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 28 },\n     { actual: candidate(10), expected: 104 },\n     { actual: candidate(12), expected: 386 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong fib4(long n) {\n    std::vector<long> results = {0, 0, 2, 0};\n    if (n < 4) {\n        return results[n];\n    }\n    for (long i = 4; i <= n; i++) {\n        long next = results[0] + results[1] + results[2] + results[3];\n        results.erase(results.begin());\n        results.push_back(next);\n    }\n    return results[3];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fib4(n int) int {\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "go_test.go",
    "prompt": "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sort_even(l []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> sort_even(std::vector<long> l) {\n    std::vector<long> evens;\n    for(int i=0;i<l.size();i+=2) evens.push_back(l[i]);\n    std::vector<long> odds;\n    for(int i=1;i<l.size();i+=2) odds.push_back(l[i]);\n    std::sort(evens.begin(), evens.end());\n    std::vector<long> ans;\n    for(int i=0;i<odds.size();i++) {\n        ans.push_back(evens[i]);\n        ans.push_back(odds[i]);\n    }\n    if(evens.size() > odds.size()) ans.push_back(evens[evens.size()-1]);\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sort_even(l []int) []int {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "go_test.go",
    "prompt": "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc order_by_points(nums []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> order_by_points(std::vector<long> nums) {\n    auto digits_sum = [](long n) -> long {\n        long neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        std::stringstream ss;\n        ss << n;\n        std::string s = ss.str();\n        std::vector<long> v;\n        for (auto c : s) {\n            v.push_back(c - '0');\n        }\n        v[0] = v[0] * neg;\n        return std::accumulate(v.begin(), v.end(), 0);\n    };\n    std::sort(nums.begin(), nums.end(), [&](long a, long b) {\n        return digits_sum(a) < digits_sum(b);\n    });\n    return nums;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc order_by_points(nums []int) []int {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "go_test.go",
    "prompt": "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_happy(s string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_happy(std::string s) {\n    if (s.size() < 3) {\n      return false;\n    }\n\n    for (int i = 0; i < s.size() - 2; i++) {\n      if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]) {\n        return false;\n      }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_happy(s string) bool {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "go_test.go",
    "prompt": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc circular_shift(x int, shift int) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        return std::string(s.rbegin(), s.rend());\n    } else {\n        return s.substr(s.size() - shift) + s.substr(0, s.size() - shift);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc circular_shift(x int, shift int) string {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "go_test.go",
    "prompt": "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc max_fill(grid [][]int, capacity int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n    long sum = 0;\n    for (auto arr : grid) {\n        sum += ceil(std::accumulate(arr.begin(), arr.end(), 0.0) / capacity);\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc max_fill(grid [][]int, capacity int) int {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "go_test.go",
    "prompt": "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n    int n = numbers.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i != j) {\n                float distance = abs(numbers[i] - numbers[j]);\n                if (distance < threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "go_test.go",
    "prompt": "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc x_or_y(n int, x int, y int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong x_or_y(long n, long x, long y) {\n    if (n == 1) {\n        return y;\n    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return y;\n            break;\n        }\n    }\n    return x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc x_or_y(n int, x int, y int) int {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "go_test.go",
    "prompt": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc specialFilter(nums []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong specialFilter(std::vector<long> nums) {\n    long count = 0;\n    for (auto num: nums) {\n        if (num > 10) {\n            std::string number_as_string = std::to_string(num);\n            if (number_as_string.front() % 2 == 1 && number_as_string.back() % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc specialFilter(nums []int) int {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "go_test.go",
    "prompt": "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc parse_music(music_string string) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> parse_music(std::string music_string) {\n  std::map<std::string, long> note_map = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n  std::vector<long> res;\n  std::istringstream iss(music_string);\n  std::string note;\n  while (iss >> note) {\n    if (note_map.count(note)) {\n      res.push_back(note_map[note]);\n    }\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc parse_music(music_string string) []int {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "go_test.go",
    "prompt": "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_distinct_characters(myString string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_distinct_characters(std::string string) {\n    std::set<char> s;\n    for (auto c : string) {\n        s.insert(tolower(c));\n    }\n    return s.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage count_distinct_characters_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_distinct_characters(myString string) int {\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "go_test.go",
    "prompt": "package bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc bf(planet1 string, planet2 string) []interface{} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestBf(t *testing.T) {\n  candidate := bf\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jupiter\", \"Neptune\"), expected: []interface{}{\"Saturn\", \"Uranus\"} },\n     { actual: candidate(\"Earth\", \"Mercury\"), expected: []interface{}{\"Venus\"} },\n     { actual: candidate(\"Mercury\", \"Uranus\"), expected: []interface{}{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"} },\n     { actual: candidate(\"Neptune\", \"Venus\"), expected: []interface{}{\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"} },\n     { actual: candidate(\"Earth\", \"Earth\"), expected: []interface{}{} },\n     { actual: candidate(\"Mars\", \"Earth\"), expected: []interface{}{} },\n     { actual: candidate(\"Jupiter\", \"Makemake\"), expected: []interface{}{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::vector<std::string> planet_names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (std::find(planet_names.begin(), planet_names.end(), planet1) == planet_names.end() || std::find(planet_names.begin(), planet_names.end(), planet2) == planet_names.end() || planet1 == planet2) {\n        return {};\n    }\n    int planet1_index = std::find(planet_names.begin(), planet_names.end(), planet1) - planet_names.begin();\n    int planet2_index = std::find(planet_names.begin(), planet_names.end(), planet2) - planet_names.begin();\n    if (planet1_index < planet2_index) {\n        return {planet_names.begin() + planet1_index + 1, planet_names.begin() + planet2_index};\n    } else {\n        return {planet_names.begin() + planet2_index + 1, planet_names.begin() + planet1_index};\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc bf(planet1 string, planet2 string) []interface{} {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "go_test.go",
    "prompt": "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc digitSum(s string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestDigitsum(t *testing.T) {\n  candidate := digitSum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abAB\"), expected: 131 },\n     { actual: candidate(\"abcCd\"), expected: 67 },\n     { actual: candidate(\"helloE\"), expected: 69 },\n     { actual: candidate(\"woArBld\"), expected: 131 },\n     { actual: candidate(\"aAaaaXa\"), expected: 153 },\n     { actual: candidate(\" How are yOu?\"), expected: 151 },\n     { actual: candidate(\"You arE Very Smart\"), expected: 327 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong digitSum(std::string s) {\n    if (s == \"\") return 0;\n    long ans = 0;\n    for (char c : s) {\n        if (isupper(c)) ans += c;\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc digitSum(s string) int {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "go_test.go",
    "prompt": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_squares(lst []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong sum_squares(std::vector<long> lst) {\n    long result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_squares(lst []int) int {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "go_test.go",
    "prompt": "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_up_to(n int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCount_Up_To(t *testing.T) {\n  candidate := count_up_to\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{2, 3} },\n     { actual: candidate(6), expected: []int{2, 3, 5} },\n     { actual: candidate(7), expected: []int{2, 3, 5} },\n     { actual: candidate(10), expected: []int{2, 3, 5, 7} },\n     { actual: candidate(0), expected: []int{} },\n     { actual: candidate(22), expected: []int{2, 3, 5, 7, 11, 13, 17, 19} },\n     { actual: candidate(1), expected: []int{} },\n     { actual: candidate(18), expected: []int{2, 3, 5, 7, 11, 13, 17} },\n     { actual: candidate(47), expected: []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43} },\n     { actual: candidate(101), expected: []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    for (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_up_to(n int) []int {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "go_test.go",
    "prompt": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_squares(lst []float64) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong sum_squares(std::vector<float> lst) {\n    long squared = 0;\n    for (auto i : lst) {\n        squared += std::ceil(i) * std::ceil(i);\n    }\n    return squared;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_squares(lst []float64) int {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "go_test.go",
    "prompt": "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc unique(l []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end()); l.erase(std::unique(l.begin(), l.end()), l.end()); return l;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc unique(l []int) []int {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "go_test.go",
    "prompt": "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fib(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fib(n int) int {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "go_test.go",
    "prompt": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fizz_buzz(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fizz_buzz(long n) {\n    std::vector<long> ns;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            ns.push_back(i);\n        }\n    }\n    std::stringstream ss;\n    for (auto i : ns) {\n        ss << i;\n    }\n    std::string s = ss.str();\n    long ans = 0;\n    for (auto c : s) {\n        ans += (c == '7');\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fizz_buzz(n int) int {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "go_test.go",
    "prompt": "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc Strongest_Extension(class_name string, extensions []string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n    std::string strong = extensions[0];\n    int my_val = std::count_if(strong.begin(), strong.end(), [](char c){return std::isupper(c);}) - std::count_if(strong.begin(), strong.end(), [](char c){return std::islower(c);});\n    for (std::string s : extensions) {\n        int val = std::count_if(s.begin(), s.end(), [](char c){return std::isupper(c);}) - std::count_if(s.begin(), s.end(), [](char c){return std::islower(c);});\n        if (val > my_val) {\n            strong = s;\n            my_val = val;\n        }\n    }\n    std::string ans = class_name + \".\" + strong;\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc Strongest_Extension(class_name string, extensions []string) string {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "go_test.go",
    "prompt": "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc find_closest_elements(numbers []float64) []interface{} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::tuple<float, float> closest_pair;\n    float distance = -1;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i+1; j < numbers.size(); j++) {\n            float new_distance = std::abs(numbers[i] - numbers[j]);\n            if (distance == -1 || new_distance < distance) {\n                distance = new_distance;\n                closest_pair = std::make_tuple(std::min(numbers[i], numbers[j]), std::max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return closest_pair;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc find_closest_elements(numbers []float64) []interface{} {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "go_test.go",
    "prompt": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc valid_date(date string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool valid_date(std::string date) {\n    try {\n        date = date.substr(0, date.find(' '));\n        int month, day, year;\n        sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) {\n            return false;\n        }\n    } catch (...) {\n        return false;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc valid_date(date string) bool {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "go_test.go",
    "prompt": "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add(x int, y int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add(long x, long y) {\n    return x + y;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add(x int, y int) int {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "go_test.go",
    "prompt": "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc triples_sum_to_zero(l []int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool triples_sum_to_zero(std::vector<long> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc triples_sum_to_zero(l []int) bool {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "go_test.go",
    "prompt": "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_divisor(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong largest_divisor(long n) {\n    for(long i=n-1;i>=1;i--) {\n        if(n%i==0) {\n            return i;\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_divisor(n int) int {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "go_test.go",
    "prompt": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sort_numbers(numbers string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> value_map = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n    std::string num;\n    while (ss >> num) {\n        nums.push_back(num);\n    }\n    std::sort(nums.begin(), nums.end(), [&](std::string a, std::string b) {\n        return value_map[a] < value_map[b];\n    });\n    std::string res;\n    for (auto& num : nums) {\n        res += num + \" \";\n    }\n    res.pop_back();\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sort_numbers(numbers string) string {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "go_test.go",
    "prompt": "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc smallest_change(arr []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong smallest_change(std::vector<long> arr) {\n    long ans = 0;\n    for (long i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc smallest_change(arr []int) int {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "go_test.go",
    "prompt": "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc below_threshold(l []int, t int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool below_threshold(std::vector<long> l, long t) {\n    for (auto e: l) {\n        if (e >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc below_threshold(l []int, t int) bool {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "go_test.go",
    "prompt": "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc modp(n int, p int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong modp(long n, long p) {\n    long ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (2 * ret) % p;\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc modp(n int, p int) int {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "go_test.go",
    "prompt": "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_upper(s string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_upper(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i += 2) {\n        if (std::string(\"AEIOU\").find(s[i]) != std::string::npos) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_upper(s string) int {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "go_test.go",
    "prompt": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc multiply(a int, b int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong multiply(long a, long b) {\n    return abs(a % 10) * abs(b % 10);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc multiply(a int, b int) int {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "go_test.go",
    "prompt": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc unique_digits(x []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> odd_digit_elements;\n    for (auto i : x) {\n        bool is_odd = true;\n        for (auto c : std::to_string(i)) {\n            if (c % 2 == 0) {\n                is_odd = false;\n                break;\n            }\n        }\n        if (is_odd) {\n            odd_digit_elements.push_back(i);\n        }\n    }\n    std::sort(odd_digit_elements.begin(), odd_digit_elements.end());\n    return odd_digit_elements;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc unique_digits(x []int) []int {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "go_test.go",
    "prompt": "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc will_it_fly(q []int, w int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool will_it_fly(std::vector<long> q, long w) {\n    if (std::accumulate(q.begin(), q.end(), 0) > w) {\n        return false;\n    }\n    int i=0, j=q.size()-1;\n    while (i<j) {\n        if (q[i] != q[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc will_it_fly(q []int, w int) bool {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "go_test.go",
    "prompt": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_multiply_prime(a int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_multiply_prime(long a) {\n    auto is_prime = [&](long n) {\n        for (long j = 2; j < n; j++) {\n            if (n % j == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    for (long i = 2; i <= 100; i++) {\n        if (!is_prime(i)) continue;\n        for (long j = 2; j <= 100; j++) {\n            if (!is_prime(j)) continue;\n            for (long k = 2; k <= 100; k++) {\n                if (!is_prime(k)) continue;\n                if (i * j * k == a) return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_multiply_prime(a int) bool {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "go_test.go",
    "prompt": "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc maximum(arr []int, k int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n    if (k == 0) {\n        return {};\n    }\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> ans(arr.end() - k, arr.end());\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc maximum(arr []int, k int) []int {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "go_test.go",
    "prompt": "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc separate_paren_groups(paren_string string) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> result;\n    std::string current_string;\n    int current_depth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            current_depth++;\n            current_string.push_back(c);\n        } else if (c == ')') {\n            current_depth--;\n            current_string.push_back(c);\n            if (current_depth == 0) {\n                result.push_back(current_string);\n                current_string.clear();\n            }\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc separate_paren_groups(paren_string string) []string {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "go_test.go",
    "prompt": "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc filter_integers(values []interface{}) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> res;\n    for (auto x : values) {\n        if (x.type() == typeid(int)) {\n            res.push_back(std::any_cast<int>(x));\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc filter_integers(values []interface{}) []int {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "go_test.go",
    "prompt": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc skjkasdkd(lst []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong skjkasdkd(std::vector<long> lst) {\n    auto isPrime = [](long n) -> bool {\n        for(long i=2;i<=sqrt(n);i++) {\n            if(n%i==0) return false;\n        }\n        return true;\n    };\n    long maxx = 0;\n    for(auto i:lst) {\n        if(i>maxx && isPrime(i)) maxx = i;\n    }\n    long result = 0;\n    std::string s = std::to_string(maxx);\n    for(auto c:s) result += c-'0';\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc skjkasdkd(lst []int) int {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "go_test.go",
    "prompt": "package total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc total_match(lst1 []string, lst2 []string) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestTotal_Match(t *testing.T) {\n  candidate := total_match\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}, []string{}), expected: []string{} },\n     { actual: candidate([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\"}), expected: []string{\"hi\", \"hi\"} },\n     { actual: candidate([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"}), expected: []string{\"hi\", \"admin\"} },\n     { actual: candidate([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\", \"5\"}), expected: []string{\"4\"} },\n     { actual: candidate([]string{\"hi\", \"admin\"}, []string{\"hI\", \"Hi\"}), expected: []string{\"hI\", \"Hi\"} },\n     { actual: candidate([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hi\"}), expected: []string{\"hI\", \"hi\", \"hi\"} },\n     { actual: candidate([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hii\"}), expected: []string{\"hi\", \"admin\"} },\n     { actual: candidate([]string{}, []string{\"this\"}), expected: []string{} },\n     { actual: candidate([]string{\"this\"}, []string{}), expected: []string{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int l1 = 0;\n    for (auto st : lst1) {\n        l1 += st.size();\n    }\n    int l2 = 0;\n    for (auto st : lst2) {\n        l2 += st.size();\n    }\n    if (l1 <= l2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc total_match(lst1 []string, lst2 []string) []string {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "go_test.go",
    "prompt": "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc car_race_collision(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong car_race_collision(long n) {\n    return n*n;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc car_race_collision(n int) int {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "go_test.go",
    "prompt": "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_simple_power(x int, n int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_simple_power(long x, long n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    long power = 1;\n    while (power < x) {\n        power = power * n;\n    }\n    return power == x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_simple_power(x int, n int) bool {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "go_test.go",
    "prompt": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc encode(message string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string encode(std::string message) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::map<char, char> vowels_replace;\n    for (char i : vowels) {\n        vowels_replace[i] = i + 2;\n    }\n    std::transform(message.begin(), message.end(), message.begin(), [](char c) {\n        return std::isupper(c) ? std::tolower(c) : std::toupper(c);\n    });\n    std::string result = \"\";\n    for (char i : message) {\n        if (vowels_replace.count(i)) {\n            result += vowels_replace[i];\n        } else {\n            result += i;\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc encode(message string) string {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "go_test.go",
    "prompt": "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc incr_list(l []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto e : l) {\n    res.push_back(e + 1);\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc incr_list(l []int) []int {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "go_test.go",
    "prompt": "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc flip_case(myString string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string flip_case(std::string string) {\n    for (auto& c : string) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else {\n            c = toupper(c);\n        }\n    }\n    return string;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc flip_case(myString string) string {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "go_test.go",
    "prompt": "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc vowels_count(s string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong vowels_count(std::string s) {\n    std::string vowels = \"aeiouAEIOU\";\n    long n_vowels = std::count_if(s.begin(), s.end(), [&](char c){return vowels.find(c) != std::string::npos;});\n    if (s.back() == 'y' || s.back() == 'Y') {\n        n_vowels += 1;\n    }\n    return n_vowels;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc vowels_count(s string) int {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "go_test.go",
    "prompt": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sorted_list_sum(lst []string) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n    std::sort(lst.begin(), lst.end());\n    std::vector<std::string> new_lst;\n    for (auto i:lst) {\n        if (i.size()%2 == 0) {\n            new_lst.push_back(i);\n        }\n    }\n    std::sort(new_lst.begin(), new_lst.end(), [](std::string a, std::string b){return a.size() < b.size();});\n    return new_lst;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sorted_list_sum(lst []string) []string {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "go_test.go",
    "prompt": "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc words_string(s string) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::string> words_string(std::string s) {\n    std::vector<std::string> result;\n    std::replace(s.begin(), s.end(), ',', ' ');\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc words_string(s string) []string {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "go_test.go",
    "prompt": "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc even_odd_palindrome(n int) []interface{} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> even_odd_palindrome(long n) {\n    auto is_palindrome = [](long n) -> bool {\n        std::string s = std::to_string(n);\n        return std::equal(s.begin(), s.end(), s.rbegin());\n    };\n    long even_palindrome_count = 0;\n    long odd_palindrome_count = 0;\n    for(long i=1; i<=n; i++) {\n        if(i%2 == 1 && is_palindrome(i)) {\n            odd_palindrome_count++;\n        } else if(i%2 == 0 && is_palindrome(i)) {\n            even_palindrome_count++;\n        }\n    }\n    return std::make_tuple(even_palindrome_count, odd_palindrome_count);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc even_odd_palindrome(n int) []interface{} {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "go_test.go",
    "prompt": "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc triangle_area(a int, b int, c int) float64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    area = round(area * 100) / 100;\n    return area;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc triangle_area(a int, b int, c int) float64 {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "go_test.go",
    "prompt": "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc check_dict_case(dict map[string]string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    std::string state = \"start\";\n    for (auto const& [key, val] : dict) {\n        if (!std::all_of(key.begin(), key.end(), ::isalpha)) {\n            state = \"mixed\";\n            break;\n        }\n        if (state == \"start\") {\n            if (std::all_of(key.begin(), key.end(), ::isupper)) {\n                state = \"upper\";\n            } else if (std::all_of(key.begin(), key.end(), ::islower)) {\n                state = \"lower\";\n            } else {\n                break;\n            }\n        } else if ((state == \"upper\" && !std::all_of(key.begin(), key.end(), ::isupper)) || (state == \"lower\" && !std::all_of(key.begin(), key.end(), ::islower))) {\n            state = \"mixed\";\n            break;\n        }\n    }\n    return state == \"upper\" || state == \"lower\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc check_dict_case(dict map[string]string) bool {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "go_test.go",
    "prompt": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc tri(n int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> tri(long n) {\n    if (n == 0) {\n        return {1};\n    }\n    std::vector<long> my_tri = {1, 3};\n    for (long i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            my_tri.push_back(i / 2 + 1);\n        } else {\n            my_tri.push_back(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2);\n        }\n    }\n    return my_tri;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc tri(n int) []int {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "go_test.go",
    "prompt": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc median(l []int) float64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n    } else {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc median(l []int) float64 {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "go_test.go",
    "prompt": "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc change_base(x int, base int) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string change_base(long x, long base) {\n    std::string ret;\n    while (x > 0) {\n        ret = std::to_string(x % base) + ret;\n        x /= base;\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc change_base(x int, base int) string {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "go_test.go",
    "prompt": "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc common(l1 []int, l2 []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::set<long> ret;\n    for (auto e1 : l1) {\n        for (auto e2 : l2) {\n            if (e1 == e2) {\n                ret.insert(e1);\n            }\n        }\n    }\n    std::vector<long> v(ret.begin(), ret.end());\n    std::sort(v.begin(), v.end());\n    return v;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc common(l1 []int, l2 []int) []int {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "go_test.go",
    "prompt": "package cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc cycpattern_check(a string, b string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCycpattern_Check(t *testing.T) {\n  candidate := cycpattern_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xyzw\", \"xyw\"), expected: false },\n     { actual: candidate(\"yello\", \"ell\"), expected: true },\n     { actual: candidate(\"whattup\", \"ptut\"), expected: false },\n     { actual: candidate(\"efef\", \"fee\"), expected: true },\n     { actual: candidate(\"abab\", \"aabb\"), expected: false },\n     { actual: candidate(\"winemtt\", \"tinem\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool cycpattern_check(std::string a, std::string b) {\n    int l = b.length();\n    std::string pat = b + b;\n    for(int i = 0; i <= a.length() - l; i++) {\n        for(int j = 0; j <= l; j++) {\n            if(a.substr(i, l) == pat.substr(j, l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc cycpattern_check(a string, b string) bool {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "go_test.go",
    "prompt": "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sort_array(array []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> sort_array(std::vector<long> array) {\n    if (array.empty()) {\n        return std::vector<long>();\n    } else {\n        bool isReversed = (array[0] + array[array.size() - 1]) % 2 == 0;\n        std::sort(array.begin(), array.end(), [&](long a, long b) {\n            return isReversed ? a > b : a < b;\n        });\n        return array;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sort_array(array []int) []int {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "go_test.go",
    "prompt": "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc histogram(test string) map[string]int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> dict1;\n    std::stringstream ss(test);\n    std::string word;\n    long t = 0;\n    while (ss >> word) {\n        dict1[word]++;\n        if (dict1[word] > t) {\n            t = dict1[word];\n        }\n    }\n    std::map<std::string,long> result;\n    for (auto i : dict1) {\n        if (i.second == t) {\n            result[i.first] = t;\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc histogram(test string) map[string]int {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "go_test.go",
    "prompt": "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_odd_collatz(n int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> get_odd_collatz(long n) {\n    std::vector<long> odd_collatz;\n    if (n%2==0) {\n        odd_collatz = {}; \n    } else {\n        odd_collatz = {n};\n    }\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n = n/2;\n        } else {\n            n = n*3 + 1;\n        }\n        if (n%2 == 1) {\n            odd_collatz.push_back(n);\n        }\n    }\n    std::sort(odd_collatz.begin(), odd_collatz.end());\n    return odd_collatz;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_odd_collatz(n int) []int {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "go_test.go",
    "prompt": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc derivative(xs []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> derivative(std::vector<long> xs) {\n  std::vector<long> res;\n  for (int i = 1; i < xs.size(); ++i) {\n    res.push_back(i * xs[i]);\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc derivative(xs []int) []int {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "go_test.go",
    "prompt": "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fibfib(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fibfib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fibfib(n int) int {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "go_test.go",
    "prompt": "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc truncate_number(number float64) float64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat truncate_number(float number) {\n    return number - floor(number);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc truncate_number(number float64) float64 {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "go_test.go",
    "prompt": "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc max_element(l []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong max_element(std::vector<long> l) {\n    long m = l[0];\n    for (long e: l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc max_element(l []int) int {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "go_test.go",
    "prompt": "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc closest_integer(value string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestClosest_Integer(t *testing.T) {\n  candidate := closest_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"10\"), expected: 10 },\n     { actual: candidate(\"14.5\"), expected: 15 },\n     { actual: candidate(\"-15.5\"), expected: -16 },\n     { actual: candidate(\"15.3\"), expected: 15 },\n     { actual: candidate(\"0\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong closest_integer(std::string value) {\n    std::regex pattern(\"\\\\.0+$\");\n    value = std::regex_replace(value, pattern, \"\");\n    double num = std::stod(value);\n    if (value.back() == '5') {\n        if (num > 0) {\n            return std::ceil(num);\n        } else {\n            return std::floor(num);\n        }\n    } else {\n        return std::round(num);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc closest_integer(value string) int {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "go_test.go",
    "prompt": "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc prime_fib(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong prime_fib(long n) {\n    auto is_prime = [](long p) {\n        if (p < 2) {\n            return false;\n        }\n        for (long k = 2; k < std::min((long)std::sqrt(p) + 1, p - 1); ++k) {\n            if (p % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    std::vector<long> f = {0, 1};\n    while (true) {\n        f.push_back(f.back() + f[f.size() - 2]);\n        if (is_prime(f.back())) {\n            n -= 1;\n        }\n        if (n == 0) {\n            return f.back();\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc prime_fib(n int) int {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "go_test.go",
    "prompt": "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_product(numbers []int) []interface{} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum_value = 0;\n    long prod_value = 1;\n\n    for (auto n: numbers) {\n        sum_value += n;\n        prod_value *= n;\n    }\n    return std::make_tuple(sum_value, prod_value);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_product(numbers []int) []interface{} {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "go_test.go",
    "prompt": "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc select_words(s string, n int) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        long n_consonants = 0;\n        for (char c : word) {\n            if (std::string(\"aeiouAEIOU\").find(c) == std::string::npos) {\n                n_consonants++;\n            }\n        }\n        if (n_consonants == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc select_words(s string, n int) []string {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "go_test.go",
    "prompt": "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add_elements(arr []int, k int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add_elements(std::vector<long> arr, long k) {\n    long sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (std::to_string(arr[i]).size() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add_elements(arr []int, k int) int {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "go_test.go",
    "prompt": "package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc eat(number int, need int, remaining int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestEat(t *testing.T) {\n  candidate := eat\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 6, 10), expected: []int{11, 4} },\n     { actual: candidate(4, 8, 9), expected: []int{12, 1} },\n     { actual: candidate(1, 10, 10), expected: []int{11, 0} },\n     { actual: candidate(2, 11, 5), expected: []int{7, 0} },\n     { actual: candidate(4, 5, 7), expected: []int{9, 2} },\n     { actual: candidate(4, 5, 1), expected: []int{5, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> eat(long number, long need, long remaining) {\n    if(need <= remaining){\n        return { number + need , remaining-need };\n    } else{\n        return { number + remaining , 0};\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc eat(number int, need int, remaining int) []int {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "go_test.go",
    "prompt": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc odd_count(lst []string) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n    std::vector<std::string> res;\n    for (auto arr : lst) {\n        int n = std::count_if(arr.begin(), arr.end(), [](char c){return c%2==1;});\n        res.push_back(\"the number of odd elements \" + std::to_string(n) + \"n the str\"+ std::to_string(n) +\"ng \"+ std::to_string(n) +\" of the \"+ std::to_string(n) +\"nput.\");\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc odd_count(lst []string) []string {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "go_test.go",
    "prompt": "package get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_row(lst [][]int, x int) [][]interface{} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestGet_Row(t *testing.T) {\n  candidate := get_row\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1), expected: [][]int{[]interface{}{0, 0}, []interface{}{1, 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}}, 2), expected: [][]int{[]interface{}{0, 1}, []interface{}{1, 1}, []interface{}{2, 1}, []interface{}{3, 1}, []interface{}{4, 1}, []interface{}{5, 1}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 5, 6}, []int{1, 1, 3, 4, 5, 6}, []int{1, 2, 1, 4, 5, 6}, []int{1, 2, 3, 1, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1), expected: [][]int{[]interface{}{0, 0}, []interface{}{1, 0}, []interface{}{2, 1}, []interface{}{2, 0}, []interface{}{3, 2}, []interface{}{3, 0}, []interface{}{4, 3}, []interface{}{4, 0}, []interface{}{5, 4}, []interface{}{5, 0}, []interface{}{6, 5}, []interface{}{6, 0}} },\n     { actual: candidate([][]int{}, 1), expected: [][]interface{}{} },\n     { actual: candidate([][]int{[]int{1}}, 2), expected: [][]interface{}{} },\n     { actual: candidate([]interface{}{[]interface{}{}, []int{1}, []int{1, 2, 3}}, 3), expected: [][]int{[]interface{}{2, 2}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n    std::vector<std::tuple<long, long>> coords;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(coords.begin(), coords.end(), [](auto a, auto b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return coords;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_row(lst [][]int, x int) [][]interface{} {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "go_test.go",
    "prompt": "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc filter_by_prefix(strings []string, prefix string) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto x: strings) {\n        if (x.find(prefix) == 0) {\n            res.push_back(x);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc filter_by_prefix(strings []string, prefix string) []string {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "go_test.go",
    "prompt": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc choose_num(x int, y int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x == y) {\n        return -1;\n    }\n    return y - 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc choose_num(x int, y int) int {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "go_test.go",
    "prompt": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc prime_length(myString string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool prime_length(std::string string) {\n    int l = string.size();\n    if (l == 0 || l == 1) {\n        return false;\n    }\n    for (int i = 2; i < l; i++) {\n        if (l % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc prime_length(myString string) bool {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "go_test.go",
    "prompt": "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_to_n(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong sum_to_n(long n) {\n    return (n * (n + 1)) / 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_to_n(n int) int {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "go_test.go",
    "prompt": "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc rolling_max(numbers []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long> result;\n    long running_max = 0;\n    for (long n : numbers) {\n        running_max = std::max(running_max, n);\n        result.push_back(running_max);\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc rolling_max(numbers []int) []int {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "go_test.go",
    "prompt": "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc words_in_sentence(sentence string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no place available here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string words_in_sentence(std::string sentence) {\n    std::vector<std::string> new_lst;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        int flg = 0;\n        if(word.size() == 1) {\n            flg = 1;\n        }\n        for(int i = 2; i < word.size(); i++) {\n            if(word.size()%i == 0) {\n                flg = 1;\n            }\n        }\n        if(flg == 0 || word.size() == 2) {\n            new_lst.push_back(word);\n        }\n    }\n    std::string res = \"\";\n    for(int i = 0; i < new_lst.size(); i++) {\n        res += new_lst[i];\n        if(i != new_lst.size()-1) {\n            res += \" \";\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc words_in_sentence(sentence string) string {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "go_test.go",
    "prompt": "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_closest_vowel(word string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\" },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string get_closest_vowel(std::string word) {\n    if (word.size() < 3) {\n        return \"\";\n    }\n\n    std::set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'};\n    for (int i = word.size() - 2; i >= 1; i--) {\n        if (vowels.count(word[i])) {\n            if (!vowels.count(word[i+1]) && !vowels.count(word[i-1])) {\n                return std::string(1, word[i]);\n            }\n        }\n    }\n    return \"\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_closest_vowel(word string) string {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "go_test.go",
    "prompt": "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc compare(game []int, guess []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n    std::vector<long> res;\n    for(int i=0;i<game.size();i++){\n        res.push_back(abs(game[i]-guess[i]));\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc compare(game []int, guess []int) []int {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "go_test.go",
    "prompt": "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc remove_duplicates(numbers []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n    std::map<long, long> c;\n    for (auto n : numbers) {\n        c[n]++;\n    }\n    std::vector<long> result;\n    for (auto n : numbers) {\n        if (c[n] <= 1) {\n            result.push_back(n);\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc remove_duplicates(numbers []int) []int {\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "go_test.go",
    "prompt": "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc same_chars(s0 string, s1 string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool same_chars(std::string s0, std::string s1) {\n    return std::set<char>(s0.begin(), s0.end()) == std::set<char>(s1.begin(), s1.end());\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc same_chars(s0 string, s1 string) bool {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "go_test.go",
    "prompt": "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc parse_nested_parens(paren_string string) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n    std::string s;\n    while (ss >> s) {\n        long depth = 0, max_depth = 0;\n        for (char c : s) {\n            if (c == '(') {\n                depth++;\n                max_depth = std::max(depth, max_depth);\n            } else {\n                depth--;\n            }\n        }\n        res.push_back(max_depth);\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc parse_nested_parens(paren_string string) []int {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "go_test.go",
    "prompt": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc even_odd_count(num int) []interface{} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count = 0;\n    for (auto i: std::to_string(abs(num))) {\n        if (int(i)%2==0) {\n            even_count +=1;\n        } else {\n            odd_count +=1;\n        }\n    }\n    return std::make_tuple(even_count, odd_count);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc even_odd_count(num int) []interface{} {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "go_test.go",
    "prompt": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fruit_distribution(s string, n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fruit_distribution(std::string s, long n) {\n    std::vector<int> lis;\n    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word) {\n        if(std::regex_match(word, std::regex(\"\\\\d+\"))) {\n            lis.push_back(std::stoi(word));\n        }\n    }\n    return n - std::accumulate(lis.begin(), lis.end(), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fruit_distribution(s string, n int) int {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "go_test.go",
    "prompt": "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc string_xor(a string, b string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string string_xor(std::string a, std::string b) {\n    std::string ans;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) ans += '0';\n        else ans += '1';\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc string_xor(a string, b string) string {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "go_test.go",
    "prompt": "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc strlen(myString string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong string_length(std::string string) {\n    return string.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc strlen(myString string) int {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "go_test.go",
    "prompt": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc string_sequence(n int) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string string_sequence(long n) {\n    std::string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += std::to_string(i);\n        if (i != n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc string_sequence(n int) string {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "go_test.go",
    "prompt": "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc file_name_check(file_name string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string file_name_check(std::string file_name) {\n    std::vector<std::string> suf = {\"txt\", \"exe\", \"dll\"};\n    std::vector<std::string> lst;\n    std::stringstream ss(file_name);\n    std::string item;\n    while (std::getline(ss, item, '.')) {\n        lst.push_back(item);\n    }\n    if (lst.size() != 2) {\n        return \"No\";\n    }\n    if (std::find(suf.begin(), suf.end(), lst[1]) == suf.end()) {\n        return \"No\";\n    }\n    if (lst[0].length() == 0) {\n        return \"No\";\n    }\n    if (!isalpha(lst[0][0])) {\n        return \"No\";\n    }\n    int t = std::count_if(lst[0].begin(), lst[0].end(), ::isdigit);\n    if (t > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc file_name_check(file_name string) string {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "go_test.go",
    "prompt": "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc can_arrange(arr []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong can_arrange(std::vector<long> arr) {\n    long ind=-1;\n    long i=1;\n    while (i<arr.size()) {\n      if (arr[i]<arr[i-1]) {\n        ind=i;\n      }\n      i+=1;\n    }\n    return ind;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc can_arrange(arr []int) int {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "go_test.go",
    "prompt": "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add(lst []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add(lst []int) int {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "go_test.go",
    "prompt": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc intersperse(numbers []int, delimeter int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n    if (numbers.empty()) {\n        return {};\n    }\n\n    std::vector<long> result;\n\n    for (auto n = numbers.begin(); n != numbers.end() - 1; ++n) {\n        result.push_back(*n);\n        result.push_back(delimeter);\n    }\n\n    result.push_back(numbers.back());\n\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc intersperse(numbers []int, delimeter int) []int {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "go_test.go",
    "prompt": "package match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc match_parens(lst []string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMatch_Parens(t *testing.T) {\n  candidate := match_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"()(\", \")\"}), expected: \"Yes\" },\n     { actual: candidate([]string{\")\", \")\"}), expected: \"No\" },\n     { actual: candidate([]string{\"(()(())\", \"())())\"}), expected: \"No\" },\n     { actual: candidate([]string{\")())\", \"(()()(\"}), expected: \"Yes\" },\n     { actual: candidate([]string{\"(())))\", \"(()())((\"}), expected: \"Yes\" },\n     { actual: candidate([]string{\"()\", \"())\"}), expected: \"No\" },\n     { actual: candidate([]string{\"(()(\", \"()))()\"}), expected: \"Yes\" },\n     { actual: candidate([]string{\"((((\", \"((())\"}), expected: \"No\" },\n     { actual: candidate([]string{\")(()\", \"(()(\"}), expected: \"No\" },\n     { actual: candidate([]string{\")(\", \")(\"}), expected: \"No\" },\n     { actual: candidate([]string{\"(\", \")\"}), expected: \"Yes\" },\n     { actual: candidate([]string{\")\", \"(\"}), expected: \"Yes\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string match_parens(std::vector<std::string> lst) {\n    auto check = [](std::string s) {\n        int val = 0;\n        for (auto i : s) {\n            if (i == '(') {\n                val = val + 1;\n            } else {\n                val = val - 1;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val == 0;\n    };\n    auto S1 = lst[0] + lst[1];\n    auto S2 = lst[1] + lst[0];\n    return check(S1) || check(S2) ? \"Yes\" : \"No\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc match_parens(lst []string) string {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "go_test.go",
    "prompt": "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc filter_by_substring(strings []string, substring string) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n  std::vector<std::string> result;\n  for (auto x : strings) {\n    if (x.find(substring) != std::string::npos) {\n      result.push_back(x);\n    }\n  }\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc filter_by_substring(strings []string, substring string) []string {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "go_test.go",
    "prompt": "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc find_max(words []string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFind_Max(t *testing.T) {\n  candidate := find_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"name\", \"of\", \"string\"}), expected: \"string\" },\n     { actual: candidate([]string{\"name\", \"enam\", \"game\"}), expected: \"enam\" },\n     { actual: candidate([]string{\"aaaaaaa\", \"bb\", \"cc\"}), expected: \"aaaaaaa\" },\n     { actual: candidate([]string{\"abc\", \"cba\"}), expected: \"abc\" },\n     { actual: candidate([]string{\"play\", \"this\", \"game\", \"of\", \"footbott\"}), expected: \"footbott\" },\n     { actual: candidate([]string{\"we\", \"are\", \"gonna\", \"rock\"}), expected: \"gonna\" },\n     { actual: candidate([]string{\"we\", \"are\", \"a\", \"mad\", \"nation\"}), expected: \"nation\" },\n     { actual: candidate([]string{\"this\", \"is\", \"a\", \"prrk\"}), expected: \"this\" },\n     { actual: candidate([]string{\"b\"}), expected: \"b\" },\n     { actual: candidate([]string{\"play\", \"play\", \"play\"}), expected: \"play\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string find_max(std::vector<std::string> words) {\n    std::sort(words.begin(), words.end(), [](std::string a, std::string b) {\n        return std::make_pair(-std::set<char>(a.begin(), a.end()).size(), a) < std::make_pair(-std::set<char>(b.begin(), b.end()).size(), b);\n    });\n    return words[0];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc find_max(words []string) string {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "go_test.go",
    "prompt": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc generate_integers(a int, b int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> generate_integers(long a, long b) {\n    long lower = std::max(2l, std::min(a, b));\n    long upper = std::min(8l, std::max(a, b));\n    std::vector<long> res;\n    for (long i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc generate_integers(a int, b int) []int {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "go_test.go",
    "prompt": "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc exchange(lst1 []int, lst2 []int) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n    int odd = 0;\n    int even = 0;\n    for (auto i : lst1) {\n        if (i%2 == 1) {\n            odd++;\n        }\n    }\n    for (auto i : lst2) {\n        if (i%2 == 0) {\n            even++;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc exchange(lst1 []int, lst2 []int) string {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "go_test.go",
    "prompt": "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc int_to_mini_roman(number int) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestInt_To_Mini_Roman(t *testing.T) {\n  candidate := int_to_mini_roman\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(19), expected: \"xix\" },\n     { actual: candidate(152), expected: \"clii\" },\n     { actual: candidate(251), expected: \"ccli\" },\n     { actual: candidate(426), expected: \"cdxxvi\" },\n     { actual: candidate(500), expected: \"d\" },\n     { actual: candidate(1), expected: \"i\" },\n     { actual: candidate(4), expected: \"iv\" },\n     { actual: candidate(43), expected: \"xliii\" },\n     { actual: candidate(90), expected: \"xc\" },\n     { actual: candidate(94), expected: \"xciv\" },\n     { actual: candidate(532), expected: \"dxxxii\" },\n     { actual: candidate(900), expected: \"cm\" },\n     { actual: candidate(994), expected: \"cmxciv\" },\n     { actual: candidate(1000), expected: \"m\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string int_to_mini_roman(long number) {\n    std::vector<long> num = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::vector<std::string> sym = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n    int i = 12;\n    std::string res = \"\";\n    while (number) {\n        long div = number / num[i];\n        number %= num[i];\n        while (div) {\n            res += sym[i];\n            div -= 1;\n        }\n        i -= 1;\n    }\n    std::transform(res.begin(), res.end(), res.begin(), ::tolower);\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc int_to_mini_roman(number int) string {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "go_test.go",
    "prompt": "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_equal_to_sum_even(n int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_equal_to_sum_even(long n) {\n    return n%2 == 0 && n >= 8;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_equal_to_sum_even(n int) bool {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "go_test.go",
    "prompt": "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc simplify(x string, n string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool simplify(std::string x, std::string n) {\n    std::stringstream ss1(x), ss2(n);\n    int a, b, c, d;\n    char slash;\n    ss1 >> a >> slash >> b;\n    ss2 >> c >> slash >> d;\n    int numerator = a * c;\n    int denom = b * d;\n    return numerator % denom == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc simplify(x string, n string) bool {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "go_test.go",
    "prompt": "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solve(s string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\" },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual: candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"#6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"#$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::string solve(std::string s) {\n    bool flg = false;\n    std::string new_str = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            new_str[i] = isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n            flg = true;\n        }\n    }\n    if (!flg) {\n        std::reverse(new_str.begin(), new_str.end());\n    }\n    return new_str;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solve(s string) string {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "go_test.go",
    "prompt": "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc right_angle_triangle(a int, b int, c int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool right_angle_triangle(long a, long b, long c) {\n    return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc right_angle_triangle(a int, b int, c int) bool {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "go_test.go",
    "prompt": "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc double_the_difference(lst []float64) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong double_the_difference(std::vector<float> lst) {\n    long sum = 0;\n    for (auto i : lst) {\n        if (i > 0 && int(i)%2!=0 && i == int(i)) {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc double_the_difference(lst []float64) int {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "go_test.go",
    "prompt": "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc below_zero(operations []int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool below_zero(std::vector<long> operations) {\n    long balance = 0;\n    for (auto op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc below_zero(operations []int) bool {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "go_test.go",
    "prompt": "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc greatest_common_divisor(a int, b int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong greatest_common_divisor(long a, long b) {\n    while (b) {\n        long temp = a % b; a = b; b = temp;\n    }\n    return a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc greatest_common_divisor(a int, b int) int {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "go_test.go",
    "prompt": "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc f(n int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> f(long n) {\n    std::vector<long> ret;\n    for(long i=1;i<=n;i++) {\n        if(i%2==0) {\n            long x=1;\n            for(long j=1;j<=i;j++) x*=j;\n            ret.push_back(x);\n        } else {\n            long x=0;\n            for(long j=1;j<=i;j++) x+=j;\n            ret.push_back(x);\n        }\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc f(n int) []int {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "go_test.go",
    "prompt": "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc monotonic(l []int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool monotonic(std::vector<long> l) {\n    return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.rbegin(), l.rend());\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc monotonic(l []int) bool {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "go_test.go",
    "prompt": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc by_length(arr []int) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> by_length(std::vector<long> arr) {\n    std::map<long, std::string> dic = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    std::vector<std::string> new_arr;\n    for (auto var: arr) {\n        if (dic.count(var)) {\n            new_arr.push_back(dic[var]);\n        }\n    }\n    return new_arr;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc by_length(arr []int) []string {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "go_test.go",
    "prompt": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc remove_vowels(text string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string remove_vowels(std::string text) {\n    std::string res;\n    for (char c : text) {\n        if (std::string(\"aeiouAEIOU\").find(c) == std::string::npos) {\n            res += c;\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc remove_vowels(text string) string {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "go_test.go",
    "prompt": "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc check_if_last_char_is_a_letter(txt string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool check_if_last_char_is_a_letter(std::string txt) {\n    std::string check = txt.substr(txt.find_last_of(' ') + 1);\n    return (check.size() == 1 && std::isalpha(check[0]));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc check_if_last_char_is_a_letter(txt string) bool {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "go_test.go",
    "prompt": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc iscube(a int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool iscube(long a) {\n    a = abs(a);\n    return pow(round(pow(a, 1. / 3)), 3) == a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc iscube(a int) bool {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "go_test.go",
    "prompt": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc reverse_delete(s string, c string) []interface{} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n    s.erase(std::remove_if(s.begin(), s.end(), [&c](char x) { return c.find(x) != std::string::npos; }), s.end());\n    return {s, s == std::string(s.rbegin(), s.rend())};\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc reverse_delete(s string, c string) []interface{} {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "go_test.go",
    "prompt": "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc mean_absolute_deviation(numbers []float64) float64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    float sum = 0;\n    for (auto x: numbers) {\n        sum += abs(x - mean);\n    }\n    return sum / numbers.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc mean_absolute_deviation(numbers []float64) float64 {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "go_test.go",
    "prompt": "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc correct_bracketing(brackets string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool correct_bracketing(std::string brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc correct_bracketing(brackets string) bool {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "go_test.go",
    "prompt": "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc rescale_to_unit(numbers []float64) []float64 {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n    float max_number = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> result;\n    for (auto x : numbers) {\n        result.push_back((x - min_number) / (max_number - min_number));\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc rescale_to_unit(numbers []float64) []float64 {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "go_test.go",
    "prompt": "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIntersection(t *testing.T) {\n  candidate := intersection\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2}, []interface{}{2, 3}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-1, 1}, []interface{}{0, 4}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-3, -1}, []interface{}{-5, 5}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-2, 2}, []interface{}{-4, 0}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-11, 2}, []interface{}{-1, -1}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{3, 5}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{1, 2}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-2, -2}, []interface{}{-3, -2}), expected: \"NO\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n    auto is_prime = [](long num) {\n        if (num == 1 || num == 0) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        for (long i = 2; i < num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    long l = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long r = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    long length = r - l;\n    if (length > 0 && is_prime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "go_test.go",
    "prompt": "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc hex_key(num string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong hex_key(std::string num) {\n    std::string primes = \"2357BD\";\n    int total = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (primes.find(num[i]) != std::string::npos) {\n            total++;\n        }\n    }\n    return total;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc hex_key(num string) int {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "go_test.go",
    "prompt": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc strange_sort_list(lst []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n    bool switch_ = true;\n    while (lst.size()) {\n        res.push_back(switch_ ? *std::min_element(lst.begin(), lst.end()) : *std::max_element(lst.begin(), lst.end()));\n        lst.erase(std::find(lst.begin(), lst.end(), res.back()));\n        switch_ = !switch_;\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc strange_sort_list(lst []int) []int {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "go_test.go",
    "prompt": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_bored(S string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong is_bored(std::string S) {\n    std::regex r(\"[.?!]\\\\s*\");\n    std::vector<std::string> sentences(std::sregex_token_iterator(S.begin(), S.end(), r, -1), std::sregex_token_iterator());\n    long res = 0;\n    for (auto sentence : sentences) {\n        res += sentence.substr(0, 2) == \"I \";\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_bored(S string) int {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "go_test.go",
    "prompt": "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc all_prefixes(myString string) []string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string> result;\n    for(int i=0;i<string.length();i++) {\n        result.push_back(string.substr(0,i+1));\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc all_prefixes(myString string) []string {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "go_test.go",
    "prompt": "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc how_many_times(myString string, substring string) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong how_many_times(std::string string, std::string substring) {\n    long times = 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc how_many_times(myString string, substring string) int {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "go_test.go",
    "prompt": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solution(lst []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong solution(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0 && lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solution(lst []int) int {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "go_test.go",
    "prompt": "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_sorted(lst []int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_sorted(std::vector<long> lst) {\n    std::map<long, long> count_digit;\n    for (auto i: lst) {\n        count_digit[i]++;\n    }\n    for (auto i: lst) {\n        if (count_digit[i] > 2) {\n            return false;\n        }\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_sorted(lst []int) bool {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "go_test.go",
    "prompt": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc search(lst []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong search(std::vector<long> lst) {\n    std::vector<long> frq(*std::max_element(lst.begin(), lst.end()) + 1, 0);\n    for (auto i : lst) {\n        frq[i]++;\n    }\n    long ans = -1;\n    for (int i = 1; i < frq.size(); i++) {\n        if (frq[i] >= i) {\n            ans = i;\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc search(lst []int) int {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "go_test.go",
    "prompt": "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc pluck(arr []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> pluck(std::vector<long> arr) {\n    if(arr.size() == 0) return {};\n    std::vector<long> evens;\n    for(auto x: arr) if(x%2 == 0) evens.push_back(x);\n    if(evens.size() == 0) return {};\n    long min_val = *std::min_element(evens.begin(), evens.end());\n    return {min_val, std::find(arr.begin(), arr.end(), min_val) - arr.begin()};\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc pluck(arr []int) []int {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "go_test.go",
    "prompt": "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc pairs_sum_to_zero(l []int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool pairs_sum_to_zero(std::vector<long> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc pairs_sum_to_zero(l []int) bool {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "go_test.go",
    "prompt": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc starts_one_ends(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n    return 18 * pow(10, n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc starts_one_ends(n int) int {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "go_test.go",
    "prompt": "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_positive(l []int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto e : l) {\n        if(e > 0) {\n            res.push_back(e);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_positive(l []int) []int {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "go_test.go",
    "prompt": "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc concatenate(strings []string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string concatenate(std::vector<std::string> strings) {\n    return std::accumulate(strings.begin(), strings.end(), std::string(\"\"));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc concatenate(strings []string) string {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "go_test.go",
    "prompt": "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_nested(myString string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_nested(std::string string) {\n    std::vector<int> opening_bracket_index;\n    std::vector<int> closing_bracket_index;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '[') {\n            opening_bracket_index.push_back(i);\n        } else {\n            closing_bracket_index.push_back(i);\n        }\n    }\n    std::reverse(closing_bracket_index.begin(), closing_bracket_index.end());\n    int cnt = 0;\n    int i = 0;\n    int l = closing_bracket_index.size();\n    for (int idx : opening_bracket_index) {\n        if (i < l && idx < closing_bracket_index[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_nested(myString string) bool {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "go_test.go",
    "prompt": "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_palindrome(text string) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != text[text.size() - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_palindrome(text string) bool {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "go_test.go",
    "prompt": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_nums(arr []int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long n = arr[i];\n        long neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        std::vector<long> digits;\n        std::stringstream ss;\n        ss << n;\n        std::string str = ss.str();\n        for (int j = 0; j < str.size(); j++) {\n            digits.push_back(str[j] - '0');\n        }\n        digits[0] = digits[0] * neg;\n        long sum = 0;\n        for (int j = 0; j < digits.size(); j++) {\n            sum += digits[j];\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_nums(arr []int) int {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "go_test.go",
    "prompt": "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc factorize(n int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> factorize(long n) {\n    std::vector<long> fact;\n    long i = 2;\n    while (i <= sqrt(n) + 1) {\n        if (n % i == 0) {\n            fact.push_back(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        fact.push_back(n);\n    }\n    return fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc factorize(n int) []int {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "go_test.go",
    "prompt": "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_prime_factor(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong largest_prime_factor(long n) {\n    auto is_prime=[](long k){\n        if(k<2) return false;\n        for(long i=2;i<k;i++) if(k%i==0) return false;\n        return true;\n    };\n    long largest=1;\n    for(long j=2;j<=n;j++) if(n%j==0 && is_prime(j)) largest=std::max(largest,j);\n    return largest;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_prime_factor(n int) int {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "go_test.go",
    "prompt": "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_max_triples(n int) int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong get_max_triples(long n) {\n    std::vector<long> A;\n    for (long i = 1; i <= n; i++) {\n        A.push_back(i*i - i + 1);\n    }\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = i+1; j < n; j++) {\n            for (long k = j+1; k < n; k++) {\n                if ((A[i]+A[j]+A[k])%3 == 0) {\n                    ans++;\n                }\n            }\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_max_triples(n int) int {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "go_test.go",
    "prompt": "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc anti_shuffle(s string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string anti_shuffle(std::string s) {\n    std::stringstream ss(s);\n    std::string word, res;\n    while (ss >> word) {\n        std::sort(word.begin(), word.end());\n        res += word + \" \";\n    }\n    res.pop_back();\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc anti_shuffle(s string) string {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "go_test.go",
    "prompt": "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solve(N int) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string solve(long N) {\n    std::string s = std::to_string(N);\n    long sum = 0;\n    for (int i = 0; i < s.size(); i++) {\n        sum += s[i] - '0';\n    }\n    std::bitset<64> b(sum);\n    return b.to_string().substr(b.to_string().find('1'));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solve(N int) string {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "go_test.go",
    "prompt": "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc minPath(grid [][]int, k int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8, 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5), expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11, 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9), expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12, 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12), expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2, 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3, 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2, 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1, 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1, 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n    long n = grid.size();\n    long val = n * n + 1;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                std::vector<long> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n\n                val = *std::min_element(temp.begin(), temp.end());\n            }\n        }\n    }\n\n    std::vector<long> ans;\n    for (long i = 0; i < k; i++) {\n        if (i % 2 == 0) {\n            ans.push_back(1);\n        } else {\n            ans.push_back(val);\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc minPath(grid [][]int, k int) []int {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "go_test.go",
    "prompt": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc encrypt(s string) string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string encrypt(std::string s) {\n    std::string d = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string out = \"\";\n    for (char c : s) {\n        if (d.find(c) != std::string::npos) {\n            out += d[(d.find(c)+2*2) % 26];\n        } else {\n            out += c;\n        }\n    }\n    return out;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc encrypt(s string) string {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "go_test.go",
    "prompt": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc make_a_pile(n int) []int {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> ans;\n    for(long i=0;i<n;i++) {\n        ans.push_back(n+2*i);\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc make_a_pile(n int) []int {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "go_test.go",
    "prompt": "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_prime(n int) bool {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5), expected: true },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "stop_tokens": [
      "\nfunc",
      "struct",
      "\n// ",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Go.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n    }\n    for (long k = 2; k < n; k++) {\n        if (n % k == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Go version\n\npackage is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_prime(n int) bool {\n"
  }
]