[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "py",
    "prompt": "def correct_bracketing(brackets: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n\n### Python version\n\ndef correct_bracketing(brackets: str) -> bool:\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "py",
    "prompt": "def triangle_area(a: int, h: int) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float triangleArea(long a, long h) {\n        return a * h / 2.0f;\n    }\n}\n\n### Python version\n\ndef triangle_area(a: int, h: int) -> float:\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "py",
    "prompt": "def special_factorial(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long specialFactorial(long n) {\n        long factI = 1;\n        long specialFact = 1;\n        for (long i = 1; i <= n; i++) {\n            factI *= i;\n            specialFact *= factI;\n        }\n        return specialFact;\n    }\n}\n\n### Python version\n\ndef special_factorial(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "py",
    "prompt": "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([3, 4, 5, 1, 2]) == True\n    assert candidate([3, 5, 10, 1, 2]) == True\n    assert candidate([4, 3, 1, 2]) == False\n    assert candidate([3, 5, 4, 1, 2]) == False\n    assert candidate([]) == True\n\ndef test_check():\n    check(move_one_ball)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Long> sortedArray = new ArrayList<>(arr);\n        Collections.sort(sortedArray);\n        int minIndex = arr.indexOf(Collections.min(arr));\n        List<Long> myArr = new ArrayList<>(arr.subList(minIndex, arr.size()));\n        myArr.addAll(arr.subList(0, minIndex));\n        for (int i = 0; i < arr.size(); i++) {\n            if (!myArr.get(i).equals(sortedArray.get(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "py",
    "prompt": "def digits(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) == 1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n    assert candidate(2468) == 0\n\ndef test_check():\n    check(digits)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long digits(long n) {\n        long product = 1;\n        int oddCount = 0;\n        for (char c : Long.toString(n).toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            if (digit % 2 == 1) {\n                product *= digit;\n                oddCount++;\n            }\n        }\n        return oddCount == 0 ? 0 : product;\n    }\n}\n\n### Python version\n\ndef digits(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "py",
    "prompt": "def fib4(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fib4(long n) {\n        ArrayList<Long> results = new ArrayList<Long>(Arrays.asList(0L, 0L, 2L, 0L));\n        if (n < 4) {\n            return results.get((int)n);\n        }\n\n        for (long i = 4; i <= n; i++) {\n            results.add(results.get(3) + results.get(2) + results.get(1) + results.get(0));\n            results.remove(0);\n        }\n\n        return results.get(3);\n    }\n    \n}\n\n### Python version\n\ndef fib4(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "py",
    "prompt": "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]\n    assert candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]\n\ndef test_check():\n    check(sort_even)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n        ArrayList<Long> evens = new ArrayList<Long>();\n        ArrayList<Long> odds = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evens.add(l.get(i));\n            } else {\n                odds.add(l.get(i));\n            }\n        }\n        Collections.sort(evens);\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i = 0; i < evens.size(); i++) {\n            ans.add(evens.get(i));\n            if (i < odds.size()) {\n                ans.add(odds.get(i));\n            }\n        }\n        return ans;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "py",
    "prompt": "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n        return nums.stream().sorted((a, b) -> Long.compare(digitsSum(a), digitsSum(b))).collect(Collectors.toCollection(ArrayList::new));\n    }\n    private static long digitsSum(long n) {\n        long neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        String s = Long.toString(n);\n        long[] digits = new long[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            digits[i] = s.charAt(i) - '0';\n        }\n        digits[0] *= neg;\n        return Arrays.stream(digits).sum();\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "py",
    "prompt": "def is_happy(s: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('a') == False\n    assert candidate('aa') == False\n    assert candidate('abcd') == True\n    assert candidate('aabb') == False\n    assert candidate('adb') == True\n    assert candidate('xyy') == False\n    assert candidate('iopaxpoi') == True\n    assert candidate('iopaxioi') == False\n\ndef test_check():\n    check(is_happy)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) return false;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i+1) || s.charAt(i+1) == s.charAt(i+2) || s.charAt(i) == s.charAt(i+2)) return false;\n        }\n        return true;\n    }\n    \n}\n\n### Python version\n\ndef is_happy(s: str) -> bool:\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "py",
    "prompt": "def circular_shift(x: int, shift: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String circularShift(long x, long shift) {\n        String s = Long.toString(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        return s.substring((int) (s.length() - shift)) + s.substring(0, (int) (s.length() - shift));\n    }\n    \n}\n\n### Python version\n\ndef circular_shift(x: int, shift: int) -> str:\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "py",
    "prompt": "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n    assert candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n    assert candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n\ndef test_check():\n    check(max_fill)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        return grid.stream().mapToLong(arr -> (long)Math.ceil(arr.stream().mapToLong(x -> x).sum()/(double)capacity)).sum();\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "py",
    "prompt": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\ndef test_check():\n    check(has_close_elements)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                if (i != j) {\n                    float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                    if (distance < threshold) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "py",
    "prompt": "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n        ArrayList<String> letterGrade = new ArrayList<String>();\n        for (Float gpa : grades) {\n            if (gpa == 4.0f) {\n                letterGrade.add(\"A+\");\n            } else if (gpa > 3.7f) {\n                letterGrade.add(\"A\");\n            } else if (gpa > 3.3f) {\n                letterGrade.add(\"A-\");\n            } else if (gpa > 3.0f) {\n                letterGrade.add(\"B+\");\n            } else if (gpa > 2.7f) {\n                letterGrade.add(\"B\");\n            } else if (gpa > 2.3f) {\n                letterGrade.add(\"B-\");\n            } else if (gpa > 2.0f) {\n                letterGrade.add(\"C+\");\n            } else if (gpa > 1.7f) {\n                letterGrade.add(\"C\");\n            } else if (gpa > 1.3f) {\n                letterGrade.add(\"C-\");\n            } else if (gpa > 1.0f) {\n                letterGrade.add(\"D+\");\n            } else if (gpa > 0.7f) {\n                letterGrade.add(\"D\");\n            } else if (gpa > 0.0f) {\n                letterGrade.add(\"D-\");\n            } else {\n                letterGrade.add(\"E\");\n            }\n        }\n        return letterGrade;\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "py",
    "prompt": "def x_or_y(n: int, x: int, y: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\ndef test_check():\n    check(x_or_y)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long xOrY(long n, long x, long y) {\n        if (n == 1) {\n            return y;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n\n### Python version\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "py",
    "prompt": "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, -2, 1, -5]) == 0\n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n    assert candidate([1]) == 0\n    assert candidate([]) == 0\n\ndef test_check():\n    check(specialFilter)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long specialFilter(ArrayList<Long> nums) {\n        long count = 0;\n        for (long num : nums) {\n            if (num > 10) {\n                if (isOdd(num / (long) Math.pow(10, (long) Math.log10(num))) && isOdd(num % 10)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private static boolean isOdd(long n) {\n        return n % 2 == 1;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "py",
    "prompt": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> parseMusic(String music_string) {\n        HashMap<String, Long> note_map = new HashMap<String, Long>() {{\n            put(\"o\", 4L);\n            put(\"o|\", 2L);\n            put(\".|\", 1L);\n        }};\n        return Arrays.stream(music_string.split(\" \")).filter(x -> !x.isEmpty()).map(x -> note_map.get(x)).collect(Collectors.toCollection(ArrayList::new));\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "py",
    "prompt": "def count_distinct_characters(string: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countDistinctCharacters(String string) {\n        return string.toLowerCase().chars().distinct().count();\n    }\n}\n\n### Python version\n\ndef count_distinct_characters(string: str) -> int:\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetNames = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planetNames.contains(planet1) || !planetNames.contains(planet2) || planet1.equals(planet2)) {\n            return new ArrayList<>();\n        }\n        int planet1Index = planetNames.indexOf(planet1);\n        int planet2Index = planetNames.indexOf(planet2);\n        if (planet1Index < planet2Index) {\n            return new ArrayList<>(planetNames.subList(planet1Index + 1, planet2Index));\n        } else {\n            return new ArrayList<>(planetNames.subList(planet2Index + 1, planet1Index));\n        }\n    }\n}\n\n### Python version\n\nfrom typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "py",
    "prompt": "def digitSum(s: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld') == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n    check(digitSum)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long digitSum(String s) {\n        if (s.equals(\"\")) return 0;\n        return s.chars().filter(Character::isUpperCase).sum();\n    }\n    \n}\n\n### Python version\n\ndef digitSum(s: str) -> int:\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "py",
    "prompt": "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([1, 4, 9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9\n    assert candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1, -5, 2, -1, -5]) == -126\n    assert candidate([-56, -99, 1, 0, -2]) == 3030\n    assert candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumSquares(ArrayList<Long> lst) {\n        long result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "py",
    "prompt": "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == [2, 3]\n    assert candidate(6) == [2, 3, 5]\n    assert candidate(7) == [2, 3, 5]\n    assert candidate(10) == [2, 3, 5, 7]\n    assert candidate(0) == []\n    assert candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19]\n    assert candidate(1) == []\n    assert candidate(18) == [2, 3, 5, 7, 11, 13, 17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ndef test_check():\n    check(count_up_to)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> countUpTo(long n) {\n        ArrayList<Long> primes = new ArrayList<>();\n        for (long i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (long j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef count_up_to(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "py",
    "prompt": "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumSquares(ArrayList<Float> lst) {\n        long squared = 0;\n        for (float i : lst) {\n            squared += Math.ceil(i) * Math.ceil(i);\n        }\n        return squared;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "py",
    "prompt": "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n        return new ArrayList<Long>(new HashSet<Long>(l));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "py",
    "prompt": "def fib(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\ndef test_check():\n    check(fib)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fib(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\n### Python version\n\ndef fib(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "py",
    "prompt": "def fizz_buzz(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fizzBuzz(long n) {\n        List<Long> ns = new ArrayList<>();\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                ns.add(i);\n            }\n        }\n        long s = ns.stream().map(i -> String.valueOf(i)).flatMapToInt(String::chars).filter(c -> c == '7').count();\n        return s;\n    }\n    \n}\n\n### Python version\n\ndef fizz_buzz(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "py",
    "prompt": "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n        String strong = extensions.get(0);\n        int myVal = extensions.get(0).replaceAll(\"[^A-Z]\", \"\").length() - extensions.get(0).replaceAll(\"[^a-z]\", \"\").length();\n        for (String s : extensions) {\n            int val = s.replaceAll(\"[^A-Z]\", \"\").length() - s.replaceAll(\"[^a-z]\", \"\").length();\n            if (val > myVal) {\n                strong = s;\n                myVal = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "py",
    "prompt": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> closestPair = null;\n        Float distance = null;\n\n        for (int idx = 0; idx < numbers.size(); idx++) {\n            Float elem = numbers.get(idx);\n            for (int idx2 = 0; idx2 < numbers.size(); idx2++) {\n                Float elem2 = numbers.get(idx2);\n                if (idx != idx2) {\n                    Float newDistance = Math.abs(elem - elem2);\n                    if (distance == null || newDistance < distance) {\n                        distance = newDistance;\n                        closestPair = Pair.with(Math.min(elem, elem2), Math.max(elem, elem2));\n                    }\n                }\n            }\n        }\n\n        return closestPair;\n    }\n}\n\n### Python version\n\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "py",
    "prompt": "def valid_date(date: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011') == False\n    assert candidate('') == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003') == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean validDate(String date) {\n        try {\n            date = date.trim();\n            String[] parts = date.split(\"-\");\n            int month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n            int year = Integer.parseInt(parts[2]);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1,3,5,7,8,10,12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4,6,9,11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n}\n\n### Python version\n\ndef valid_date(date: str) -> bool:\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "py",
    "prompt": "def add(x: int, y: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long add(long x, long y) {\n        return x + y;\n    }\n}\n\n### Python version\n\ndef add(x: int, y: int) -> int:\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "py",
    "prompt": "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\ndef test_check():\n    check(triples_sum_to_zero)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n        for (int i=0; i<l.size(); i++) {\n            for (int j=i+1; j<l.size(); j++) {\n                for (int k=j+1; k<l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "py",
    "prompt": "def largest_divisor(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n\ndef test_check():\n    check(largest_divisor)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long largestDivisor(long n) {\n        for (long i = n-1; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n\n### Python version\n\ndef largest_divisor(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "py",
    "prompt": "def sort_numbers(numbers: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> valueMap = new HashMap<String, Integer>() {{\n            put(\"zero\", 0);\n            put(\"one\", 1);\n            put(\"two\", 2);\n            put(\"three\", 3);\n            put(\"four\", 4);\n            put(\"five\", 5);\n            put(\"six\", 6);\n            put(\"seven\", 7);\n            put(\"eight\", 8);\n            put(\"nine\", 9);\n        }};\n        return String.join(\" \", Arrays.stream(numbers.split(\" \")).filter(x -> !x.isEmpty()).sorted((x, y) -> valueMap.get(x) - valueMap.get(y)).toArray(String[]::new));\n    }\n}\n\n### Python version\n\ndef sort_numbers(numbers: str) -> str:\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "py",
    "prompt": "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\ndef test_check():\n    check(smallest_change)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long smallestChange(ArrayList<Long> arr) {\n        long ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i) != arr.get(arr.size() - i - 1)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "py",
    "prompt": "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100) == True\n    assert candidate([1, 20, 4, 10], 5) == False\n    assert candidate([1, 20, 4, 10], 21) == True\n    assert candidate([1, 20, 4, 10], 22) == True\n    assert candidate([1, 8, 4, 10], 11) == True\n    assert candidate([1, 8, 4, 10], 10) == False\n\ndef test_check():\n    check(below_threshold)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n        for (long e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "py",
    "prompt": "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        long prod = arr.contains(0L) ? 0L : (long) Math.pow(-1, arr.stream().filter(x -> x < 0).count());\n        return Optional.of(prod * arr.stream().map(Math::abs).reduce(0L, Long::sum));\n    }\n}\n\n### Python version\n\nfrom typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "py",
    "prompt": "def modp(n: int, p: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long modp(long n, long p) {\n        long ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (2 * ret) % p;\n        }\n        return ret;\n    }\n}\n\n### Python version\n\ndef modp(n: int, p: int) -> int:\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "py",
    "prompt": "def count_upper(s: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countUpper(String s) {\n        long count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n### Python version\n\ndef count_upper(s: str) -> int:\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "py",
    "prompt": "def multiply(a: int, b: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long multiply(long a, long b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n\n### Python version\n\ndef multiply(a: int, b: int) -> int:\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "py",
    "prompt": "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n        ArrayList<Long> oddDigitElements = new ArrayList<>();\n        for (long i : x) {\n            if (Long.toString(i).chars().allMatch(c -> c % 2 == 1)) {\n                oddDigitElements.add(i);\n            }\n        }\n        Collections.sort(oddDigitElements);\n        return oddDigitElements;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "py",
    "prompt": "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n        if(q.stream().mapToLong(Long::longValue).sum() > w) return false;\n        int i = 0, j = q.size()-1;\n        while(i < j) {\n            if(q.get(i) != q.get(j)) return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "py",
    "prompt": "def is_multiply_prime(a: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(105) == True\n    assert candidate(126) == False\n    assert candidate(729) == False\n    assert candidate(891) == False\n    assert candidate(1001) == True\n\ndef test_check():\n    check(is_multiply_prime)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isMultiplyPrime(long a) {\n        for (int i = 2; i < 101; i++) {\n            if (!isPrime(i)) continue;\n            for (int j = 2; j < 101; j++) {\n                if (!isPrime(j)) continue;\n                for (int k = 2; k < 101; k++) {\n                    if (!isPrime(k)) continue;\n                    if (i*j*k == a) return true;\n                }\n            }\n        }\n        return false;\n    }\n    public static boolean isPrime(int n) {\n        for (int j = 2; j < n; j++) {\n            if (n%j == 0) return false;\n        }\n        return true;\n    }\n}\n\n### Python version\n\ndef is_multiply_prime(a: int) -> bool:\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "py",
    "prompt": "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        if (k == 0) {\n            return new ArrayList<Long>();\n        }\n        Collections.sort(arr);\n        return new ArrayList<Long>(arr.subList(arr.size() - (int)k, arr.size()));\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "py",
    "prompt": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == ['(()())', '((()))', '()', '((())()())']\n    assert candidate('() (()) ((())) (((())))') == ['()', '(())', '((()))', '(((())))']\n    assert candidate('(()(())((())))') == ['(()(())((())))']\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n\ndef test_check():\n    check(separate_paren_groups)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<Character> current_string = new ArrayList<Character>();\n        int current_depth = 0;\n\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                current_depth += 1;\n                current_string.add(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.add(c);\n\n                if (current_depth == 0) {\n                    StringBuilder sb = new StringBuilder(current_string.size());\n                    for (Character ch : current_string) {\n                        sb.append(ch);\n                    }\n                    result.add(sb.toString());\n                    current_string.clear();\n                }\n            }\n        }\n\n        return result;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "py",
    "prompt": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n        return values.stream().filter(x -> x instanceof Long).map(x -> (Long) x).collect(Collectors.toCollection(ArrayList::new));\n    }\n}\n\n### Python version\n\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "py",
    "prompt": "from typing import List\n\ndef skjkasdkd(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n    assert candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n    assert candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n    assert candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n    assert candidate([0, 81, 12, 3, 1, 21]) == 3\n    assert candidate([0, 8, 1, 2, 1, 7]) == 7\n    assert candidate([8191]) == 19\n    assert candidate([8191, 123456, 127, 7]) == 19\n    assert candidate([127, 97, 8192]) == 10\n\ndef test_check():\n    check(skjkasdkd)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long skjkasdkd(ArrayList<Long> lst) {\n        long maxx = 0;\n        for (long i : lst) {\n            if (i > maxx && isPrime(i)) {\n                maxx = i;\n            }\n        }\n        return Long.toString(maxx).chars().map(c -> c - '0').sum();\n    }\n\n    private static boolean isPrime(long n) {\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef skjkasdkd(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "py",
    "prompt": "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\ndef test_check():\n    check(total_match)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n        int l1 = lst1.stream().mapToInt(String::length).sum();\n        int l2 = lst2.stream().mapToInt(String::length).sum();\n        return l1 <= l2 ? lst1 : lst2;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "py",
    "prompt": "from typing import Optional\n\ndef string_to_md5(text: str) -> Optional[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\ndef test_check():\n    check(string_to_md5)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(text.getBytes(\"ASCII\"));\n            BigInteger bigInt = new BigInteger(1, hash);\n            return Optional.of(String.format(\"%032x\", bigInt));\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return Optional.empty();\n        }\n    }\n}\n\n### Python version\n\nfrom typing import Optional\n\ndef string_to_md5(text: str) -> Optional[str]:\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "py",
    "prompt": "def car_race_collision(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long carRaceCollision(long n) {\n        return n*n;\n    }\n}\n\n### Python version\n\ndef car_race_collision(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "py",
    "prompt": "def is_simple_power(x: int, n: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) return (x == 1);\n        long power = 1;\n        while (power < x) power = power * n;\n        return (power == x);\n    }\n    \n}\n\n### Python version\n\ndef is_simple_power(x: int, n: int) -> bool:\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "py",
    "prompt": "def encode(message: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        Map<Character, Character> vowels_replace = new HashMap<>();\n        for (char i : vowels.toCharArray()) {\n            vowels_replace.put(i, (char)(i + 2));\n        }\n        message = swapCase(message);\n        StringBuilder sb = new StringBuilder();\n        for (char i : message.toCharArray()) {\n            sb.append(vowels_replace.containsKey(i) ? vowels_replace.get(i) : i);\n        }\n        return sb.toString();\n    }\n    public static String swapCase(String str) {\n        StringBuilder sb = new StringBuilder();\n        for (char i : str.toCharArray()) {\n            sb.append(Character.isUpperCase(i) ? Character.toLowerCase(i) : Character.toUpperCase(i));\n        }\n        return sb.toString();\n    }\n    \n}\n\n### Python version\n\ndef encode(message: str) -> str:\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "py",
    "prompt": "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n        return l.stream().map(e -> e + 1).collect(Collectors.toCollection(ArrayList::new));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "py",
    "prompt": "def flip_case(string: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n\ndef test_check():\n    check(flip_case)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String flipCase(String string) {\n        return Stream.of(string.split(\"\"))\n            .map(s -> s.equals(s.toUpperCase()) ? s.toLowerCase() : s.toUpperCase())\n            .collect(Collectors.joining(\"\"));\n    }\n}\n\n### Python version\n\ndef flip_case(string: str) -> str:\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "py",
    "prompt": "def vowels_count(s: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('abcde') == 2\n    assert candidate('Alone') == 3\n    assert candidate('key') == 2\n    assert candidate('bye') == 1\n    assert candidate('keY') == 2\n    assert candidate('bYe') == 1\n    assert candidate('ACEDY') == 3\n\ndef test_check():\n    check(vowels_count)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long vowelsCount(String s) {\n        String vowels = \"aeiouAEIOU\";\n        long nVowels = s.chars().filter(c -> vowels.indexOf(c) != -1).count();\n        if (s.charAt(s.length()-1) == 'y' || s.charAt(s.length()-1) == 'Y') {\n            nVowels++;\n        }\n        return nVowels;\n    }\n}\n\n### Python version\n\ndef vowels_count(s: str) -> int:\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "py",
    "prompt": "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(['aa', 'a', 'aaa']) == ['aa']\n    assert candidate(['school', 'AI', 'asdf', 'b']) == ['AI', 'asdf', 'school']\n    assert candidate(['d', 'b', 'c', 'a']) == []\n    assert candidate(['d', 'dcba', 'abcd', 'a']) == ['abcd', 'dcba']\n    assert candidate(['AI', 'ai', 'au']) == ['AI', 'ai', 'au']\n    assert candidate(['a', 'b', 'b', 'c', 'c', 'a']) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == ['cc', 'dd', 'aaaa', 'bbbb']\n\ndef test_check():\n    check(sorted_list_sum)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n        lst.sort(null);\n        ArrayList<String> new_lst = new ArrayList<String>();\n        for (String i : lst) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort((a, b) -> a.length() - b.length());\n        return new_lst;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "py",
    "prompt": "from typing import List\n\ndef words_string(s: str) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> wordsString(String s) {\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n        }\n\n        ArrayList<String> sList = new ArrayList<String>();\n\n        for (char c : s.toCharArray()) {\n            if (c == ',') {\n                sList.add(\" \");\n            } else {\n                sList.add(Character.toString(c));\n            }\n        }\n\n        String joinedString = String.join(\"\", sList);\n        return new ArrayList<String>(Arrays.asList(joinedString.split(\"\\\\s+\")));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef words_string(s: str) -> List[str]:\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5)\n    assert candidate(1) == (0, 1)\n\ndef test_check():\n    check(even_odd_palindrome)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n        long evenPalindromeCount = 0;\n        long oddPalindromeCount = 0;\n\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 1 & & isPalindrome(i)) {\n                oddPalindromeCount++;\n            } else if (i % 2 == 0 & & isPalindrome(i)) {\n                evenPalindromeCount++;\n            }\n        }\n        return Pair.with(evenPalindromeCount, oddPalindromeCount);\n    }\n\n    private static boolean isPalindrome(long n) {\n        return Long.toString(n).equals(new StringBuilder(Long.toString(n)).reverse().toString());\n    }\n}\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "py",
    "prompt": "def triangle_area(a: int, b: int, c: int) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float triangleArea(long a, long b, long c) {\n        float s = (a + b + c) / 2.0f;\n        float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return a + b <= c || a + c <= b || b + c <= a ? -1 : Math.round(area * 100.0f) / 100.0f;\n    }\n}\n\n### Python version\n\ndef triangle_area(a: int, b: int, c: int) -> float:\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "py",
    "prompt": "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n        if (dict.keySet().size() == 0) {\n            return false;\n        } else {\n            String state = \"start\";\n            for (String key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                if (state == \"start\") {\n                    if (key.matches(\"^[A-Z]+$\")) {\n                        state = \"upper\";\n                    } else if (key.matches(\"^[a-z]+$\")) {\n                        state = \"lower\";\n                    } else {\n                        break;\n                    }\n                } else if ((state == \"upper\" && !key.matches(\"^[A-Z]+$\")) || (state == \"lower\" && !key.matches(\"^[a-z]+$\"))) {\n                    state = \"mixed\";\n                    break;\n                } else {\n                    break;\n                }\n            }\n            return state == \"upper\" || state == \"lower\";\n        }\n    }\n    \n}\n\n### Python version\n\nfrom typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "py",
    "prompt": "from typing import List\n\ndef tri(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n            return new ArrayList<Long>(Arrays.asList(1L));\n        }\n        ArrayList<Long> my_tri = new ArrayList<Long>(Arrays.asList(1L, 3L));\n        for (int i = 2; i <= n; i++) {\n            long term = i % 2 == 0 ? i / 2 + 1 : my_tri.get(i - 1) + my_tri.get(i - 2) + (i + 3) / 2;\n            my_tri.add(term);\n        }\n        return my_tri;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef tri(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "py",
    "prompt": "from typing import List\n\ndef median(l: List[int]) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n / 2);\n        } else {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0f;\n        }\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef median(l: List[int]) -> float:\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "py",
    "prompt": "def change_base(x: int, base: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String changeBase(long x, long base) {\n        String ret = \"\";\n        while (x > 0) {\n            ret = x % base + ret;\n            x /= base;\n        }\n        return ret;\n    }\n    \n}\n\n### Python version\n\ndef change_base(x: int, base: int) -> str:\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "py",
    "prompt": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<String> longest(ArrayList<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n\n### Python version\n\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "py",
    "prompt": "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this Kata, you have to sort an array array list of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4])\n    // [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\n    // [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4])\n    // [0, 1, 2, 3, 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n        return arr.stream().sorted((a, b) -> {\n            int aCount = Long.bitCount(Math.abs(a));\n            int bCount = Long.bitCount(Math.abs(b));\n            if (aCount == bCount) {\n                return Long.compare(a, b);\n            }\n            return Integer.compare(aCount, bCount);\n        }).collect(Collectors.toCollection(ArrayList::new));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "py",
    "prompt": "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n        Set<Long> set = new HashSet<>(l1);\n        set.retainAll(l2);\n        ArrayList<Long> ret = new ArrayList<>(set);\n        Collections.sort(ret);\n        return ret;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "py",
    "prompt": "def cycpattern_check(a: str, b: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('xyzw', 'xyw') == False\n    assert candidate('yello', 'ell') == True\n    assert candidate('whattup', 'ptut') == False\n    assert candidate('efef', 'fee') == True\n    assert candidate('abab', 'aabb') == False\n    assert candidate('winemtt', 'tinem') == True\n\ndef test_check():\n    check(cycpattern_check)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i+l).equals(pat.substring(j, j+l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Python version\n\ndef cycpattern_check(a: str, b: str) -> bool:\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "py",
    "prompt": "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long minSubArraySum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for (long num : nums) {\n            s += -num;\n            if (s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if (max_sum == 0) {\n            max_sum = nums.stream().mapToLong(i -> -i).max().getAsLong();\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "py",
    "prompt": "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size() == 0) {\n            return new ArrayList<Long>();\n        } else {\n            boolean reverse = (array.get(0) + array.get(array.size() - 1)) % 2 == 0;\n            Collections.sort(array);\n            if (reverse) {\n                Collections.reverse(array);\n            }\n            return array;\n        }\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "py",
    "prompt": "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long> dict1=new HashMap<String,Long>();\n        List<String> list1=Arrays.asList(test.split(\" \"));\n        long t=0;\n        for(String i:list1) {\n            if(Collections.frequency(list1,i)>t && !i.equals(\"\")) {\n                t=Collections.frequency(list1,i);\n            }\n        }\n        if(t>0) {\n            for(String i:list1) {\n                if(Collections.frequency(list1,i)==t) {\n                    dict1.put(i,t);\n                }\n            }\n        }\n        return dict1;\n    }\n    \n}\n\n### Python version\n\nfrom typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "py",
    "prompt": "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5]\n    assert candidate(1) == [1]\n\ndef test_check():\n    check(get_odd_collatz)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> getOddCollatz(long n) {\n        ArrayList<Long> oddCollatz = new ArrayList<Long>();\n        if (n % 2 == 1) {\n            oddCollatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                oddCollatz.add(n);\n            }\n        }\n        oddCollatz.sort(null);\n        return oddCollatz;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "py",
    "prompt": "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\ndef test_check():\n    check(derivative)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n        return IntStream.range(1, xs.size()).mapToObj(i -> i * xs.get(i)).collect(Collectors.toCollection(ArrayList::new));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "py",
    "prompt": "def fibfib(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fibfib(long n) {\n        return n == 0 ? 0 : n == 1 ? 0 : n == 2 ? 1 : fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n\n### Python version\n\ndef fibfib(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "py",
    "prompt": "def truncate_number(number: float) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float truncateNumber(float number) {\n        return number % 1.0f;\n    }\n}\n\n### Python version\n\ndef truncate_number(number: float) -> float:\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "py",
    "prompt": "from typing import List\n\ndef max_element(l: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\ndef test_check():\n    check(max_element)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxElement(ArrayList<Long> l) {\n        long m = l.get(0);\n        for (long e : l) {\n            m = Math.max(m, e);\n        }\n        return m;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef max_element(l: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "py",
    "prompt": "def closest_integer(value: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long closestInteger(String value) {\n        if (value == null || value.length() == 0) return 0;\n        if (value.indexOf('.') == -1) return Long.parseLong(value);\n        value = value.replaceAll(\"0*$\", \"\");\n        double num = Double.parseDouble(value);\n        if (value.endsWith(\".5\")) {\n            return (long)(num > 0 ? Math.ceil(num) : Math.floor(num));\n        } else {\n            return Math.round(num);\n        }\n    }\n    \n}\n\n### Python version\n\ndef closest_integer(value: str) -> int:\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "py",
    "prompt": "def prime_fib(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\ndef test_check():\n    check(prime_fib)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long primeFib(long n) {\n        int[] f = {0, 1};\n        while (true) {\n            int next = f[0] + f[1];\n            f[0] = f[1];\n            f[1] = next;\n            if (isPrime(next)) {\n                n--;\n            }\n            if (n == 0) {\n                return next;\n            }\n        }\n    }\n    private static boolean isPrime(int p) {\n        if (p < 2) {\n            return false;\n        }\n        for (int k = 2; k <= Math.min((int)Math.sqrt(p) + 1, p - 1); k++) {\n            if (p % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n}\n\n### Python version\n\ndef prime_fib(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "py",
    "prompt": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> sumProduct(ArrayList<Long> numbers) {\n        long sum = 0;\n        long prod = 1;\n        for (long n : numbers) {\n            sum += n;\n            prod *= n;\n        }\n        return Pair.with(sum, prod);\n    }\n    \n}\n\n### Python version\n\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "py",
    "prompt": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String word : s.split(\" \")) {\n            long n_consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if (!\"aeiouAEIOU\".contains(String.valueOf(word.charAt(i)))) {\n                    n_consonants++;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "py",
    "prompt": "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long addElements(ArrayList<Long> arr, long k) {\n        return arr.stream().limit(k).filter(i -> i.toString().length() <= 2).mapToLong(i -> i).sum();\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "py",
    "prompt": "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5, 6, 10) == [11, 4]\n    assert candidate(4, 8, 9) == [12, 1]\n    assert candidate(1, 10, 10) == [11, 0]\n    assert candidate(2, 11, 5) == [7, 0]\n    assert candidate(4, 5, 7) == [9, 2]\n    assert candidate(4, 5, 1) == [5, 0]\n\ndef test_check():\n    check(eat)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n        return (need <= remaining) ? new ArrayList<Long>(Arrays.asList(number + need, remaining - need)) : new ArrayList<Long>(Arrays.asList(number + remaining, 0L));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "py",
    "prompt": "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(['1234567']) == ['the number of odd elements 4n the str4ng 4 of the 4nput.']\n    assert candidate(['3', '11111111']) == ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']\n    assert candidate(['271', '137', '314']) == ['the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.']\n\ndef test_check():\n    check(odd_count)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n        ArrayList<String> res = new ArrayList<String>();\n        for (String arr : lst) {\n            int n = (int) Arrays.stream(arr.split(\"\")).filter(d -> Integer.parseInt(d) % 2 == 1).count();\n            res.add(\"the number of odd elements \" + n + \"n the str\"+ n +\"ng \"+ n +\" of the \"+ n +\"nput.\");\n        }\n        return res;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "py",
    "prompt": "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1, 1, 1, 1, 0]) == 1\n    assert candidate([1, 1]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\ndef test_check():\n    check(next_smallest)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n        return lst.stream().sorted().distinct().skip(1).findFirst();\n    }\n    \n}\n\n### Python version\n\nfrom typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "py",
    "prompt": "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\ndef test_check():\n    check(get_row)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n        ArrayList<Pair<Long, Long>> coords = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(new Pair<Long, Long>((long)i, (long)j));\n                }\n            }\n        }\n        coords.sort((a, b) -> {\n            if (a.getValue0() == b.getValue0()) {\n                return b.getValue1().compareTo(a.getValue1());\n            }\n            return a.getValue0().compareTo(b.getValue0());\n        });\n        return coords;\n    }\n    \n}\n\n### Python version\n\nfrom typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "py",
    "prompt": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n        return (ArrayList<String>)strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "py",
    "prompt": "def choose_num(x: int, y: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long chooseNum(long x, long y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n\n### Python version\n\ndef choose_num(x: int, y: int) -> int:\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "py",
    "prompt": "def prime_length(string: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\ndef test_check():\n    check(prime_length)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean primeLength(String string) {\n        int l = string.length();\n        if (l <= 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Python version\n\ndef prime_length(string: str) -> bool:\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "py",
    "prompt": "def sum_to_n(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\ndef test_check():\n    check(sum_to_n)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumToN(long n) {\n        return n * (n + 1) / 2;\n    }\n}\n\n### Python version\n\ndef sum_to_n(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "py",
    "prompt": "def fix_spaces(text: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String fixSpaces(String text) {\n        String newText = \"\";\n        int i = 0;\n        int start = 0, end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                end++;\n            } else {\n                if (end - start > 2) {\n                    newText += \"-\"+text.charAt(i);\n                } else if (end - start > 0) {\n                    newText += \"_\".repeat(end - start)+text.charAt(i);\n                } else {\n                    newText += text.charAt(i);\n                }\n                start = i+1; end = i+1;\n            }\n            i++;\n        }\n        if (end - start > 2) {\n            newText += \"-\";\n        } else if (end - start > 0) {\n            newText += \"_\";\n        }\n        return newText;\n    }\n    \n}\n\n### Python version\n\ndef fix_spaces(text: str) -> str:\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "py",
    "prompt": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        long running_max = Long.MIN_VALUE;\n        ArrayList<Long> result = new ArrayList<Long>();\n\n        for (long n : numbers) {\n            running_max = Math.max(running_max, n);\n            result.add(running_max);\n        }\n\n        return result;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "py",
    "prompt": "def words_in_sentence(sentence: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('This is a test') == 'is'\n    assert candidate('lets go for swimming') == 'go for'\n    assert candidate('there is no place available here') == 'there is no place'\n    assert candidate('Hi I am Hussein') == 'Hi am Hussein'\n    assert candidate('go for it') == 'go for it'\n    assert candidate('here') == ''\n    assert candidate('here is') == 'is'\n\ndef test_check():\n    check(words_in_sentence)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String wordsInSentence(String sentence) {\n        List<String> newLst = new ArrayList<>();\n        for (String word : sentence.split(\" \")) {\n            int flg = 0;\n            if (word.length() == 1) {\n                flg = 1;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = 1;\n                }\n            }\n            if (flg == 0 || word.length() == 2) {\n                newLst.add(word);\n            }\n        }\n        return String.join(\" \", newLst);\n    }\n}\n\n### Python version\n\ndef words_in_sentence(sentence: str) -> str:\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "py",
    "prompt": "def get_closest_vowel(word: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('yogurt') == 'u'\n    assert candidate('full') == 'u'\n    assert candidate('easy') == ''\n    assert candidate('eAsy') == ''\n    assert candidate('ali') == ''\n    assert candidate('bad') == 'a'\n    assert candidate('most') == 'o'\n    assert candidate('ab') == ''\n    assert candidate('ba') == ''\n    assert candidate('quick') == ''\n    assert candidate('anime') == 'i'\n    assert candidate('Asia') == ''\n    assert candidate('Above') == 'o'\n\ndef test_check():\n    check(get_closest_vowel)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                    return word.charAt(i) + \"\";\n                }\n            }\n        }\n        return \"\";\n    }\n    \n}\n\n### Python version\n\ndef get_closest_vowel(word: str) -> str:\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "py",
    "prompt": "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n        return (ArrayList<Long>) IntStream.range(0, game.size()).mapToObj(i -> Math.abs(game.get(i) - guess.get(i))).collect(Collectors.toList());\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "py",
    "prompt": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n\ndef test_check():\n    check(remove_duplicates)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n        Map<Long, Long> counts = new HashMap<>();\n        for (Long n : numbers) {\n            counts.put(n, counts.getOrDefault(n, 0L) + 1L);\n        }\n        return numbers.stream().filter(n -> counts.get(n) <= 1L).collect(Collectors.toCollection(ArrayList::new));\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "py",
    "prompt": "def same_chars(s0: str, s1: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\ndef test_check():\n    check(same_chars)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<>(Arrays.asList(s0.split(\"\"))).equals(new HashSet<>(Arrays.asList(s1.split(\"\"))));\n    }\n}\n\n### Python version\n\ndef same_chars(s0: str, s1: str) -> bool:\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "py",
    "prompt": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\n        for (String s : paren_string.split(\" \")) {\n            long depth = 0;\n            long max_depth = 0;\n\n            for (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n                if (c == '(') {\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n                } else {\n                    depth -= 1;\n                }\n            }\n\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long evenCount = 0;\n        long oddCount = 0;\n        for (char i : Long.toString(Math.abs(num)).toCharArray()) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return Pair.with(evenCount, oddCount);\n    }\n}\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "py",
    "prompt": "def fruit_distribution(s: str, n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('5 apples and 6 oranges', 19) == 8\n    assert candidate('5 apples and 6 oranges', 21) == 10\n    assert candidate('0 apples and 1 oranges', 3) == 2\n    assert candidate('1 apples and 0 oranges', 3) == 2\n    assert candidate('2 apples and 3 oranges', 100) == 95\n    assert candidate('2 apples and 3 oranges', 5) == 0\n    assert candidate('1 apples and 100 oranges', 120) == 19\n\ndef test_check():\n    check(fruit_distribution)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fruitDistribution(String s, long n) {\n        long sum = 0;\n        for (String i : s.split(\" \")) {\n            if (i.matches(\"\\\\d+\")) {\n                sum += Long.parseLong(i);\n            }\n        }\n        return n - sum;\n    }\n}\n\n### Python version\n\ndef fruit_distribution(s: str, n: int) -> int:\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "py",
    "prompt": "def string_xor(a: str, b: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String stringXor(String a, String b) {\n        return IntStream.range(0, a.length()).mapToObj(i -> a.charAt(i) == b.charAt(i) ? \"0\" : \"1\").collect(Collectors.joining());\n    }\n    \n}\n\n### Python version\n\ndef string_xor(a: str, b: str) -> str:\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "py",
    "prompt": "def strlen(string: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n\ndef test_check():\n    check(strlen)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long strlen(String string) {\n        return string.length();\n    }\n}\n\n### Python version\n\ndef strlen(string: str) -> int:\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "py",
    "prompt": "def string_sequence(n: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\" \"));\n    }\n}\n\n### Python version\n\ndef string_sequence(n: int) -> str:\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "py",
    "prompt": "def file_name_check(file_name: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('example.txt') == 'Yes'\n    assert candidate('1example.dll') == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\ndef test_check():\n    check(file_name_check)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String fileNameCheck(String file_name) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = file_name.split(\"\\\\.\");\n        if (lst.length != 2) {\n            return \"No\";\n        }\n        if (!Arrays.asList(suf).contains(lst[1])) {\n            return \"No\";\n        }\n        if (lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = lst[0].replaceAll(\"\\\\D\", \"\").length();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\n### Python version\n\ndef file_name_check(file_name: str) -> str:\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "py",
    "prompt": "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 3, 5]) == 3\n    assert candidate([1, 2, 4, 5]) == -1\n    assert candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n    assert candidate([4, 8, 5, 7, 3]) == 4\n    assert candidate([]) == -1\n\ndef test_check():\n    check(can_arrange)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long canArrange(ArrayList<Long> arr) {\n        long ind = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i-1)) {\n                ind = i;\n            }\n        }\n        return ind;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "py",
    "prompt": "from typing import List\n\ndef add(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long add(ArrayList<Long> lst) {\n        return IntStream.range(1, lst.size()).filter(i -> i % 2 != 0 && lst.get(i) % 2 == 0).mapToLong(i -> lst.get(i)).sum();\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "py",
    "prompt": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n\ndef test_check():\n    check(intersperse)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\n        if (numbers.size() == 0) {\n            return result;\n        }\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "py",
    "prompt": "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes'\n\ndef test_check():\n    check(match_parens)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String matchParens(ArrayList<String> lst) {\n        return check(lst.get(0) + lst.get(1)) || check(lst.get(1) + lst.get(0)) ? \"Yes\" : \"No\";\n    }\n    public static boolean check(String s) {\n        int val = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                val++;\n            } else {\n                val--;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val == 0 ? true : false;\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef match_parens(lst: List[str]) -> str:\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "py",
    "prompt": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "py",
    "prompt": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String findMax(ArrayList<String> words) {\n        return words.stream()\n            .sorted(Comparator.comparing((String s) -> -s.chars().distinct().count())\n                    .thenComparing(Comparator.naturalOrder()))\n            .findFirst().get();\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef find_max(words: List[str]) -> str:\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "py",
    "prompt": "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2, 10) == [2, 4, 6, 8]\n    assert candidate(10, 2) == [2, 4, 6, 8]\n    assert candidate(132, 2) == [2, 4, 6, 8]\n    assert candidate(17, 89) == []\n\ndef test_check():\n    check(generate_integers)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n        long lower = Math.max(2, Math.min(a, b));\n        long upper = Math.min(8, Math.max(a, b));\n        ArrayList<Long> res = new ArrayList<>();\n        for (long i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "py",
    "prompt": "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == 'YES'\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == 'NO'\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == 'YES'\n    assert candidate([5, 7, 3], [2, 6, 4]) == 'YES'\n    assert candidate([5, 7, 3], [2, 6, 3]) == 'NO'\n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == 'NO'\n    assert candidate([100, 200], [200, 200]) == 'YES'\n\ndef test_check():\n    check(exchange)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n        long odd = lst1.stream().filter(i -> i % 2 == 1).count();\n        long even = lst2.stream().filter(i -> i % 2 == 0).count();\n        return even >= odd ? \"YES\" : \"NO\";\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "py",
    "prompt": "def int_to_mini_roman(number: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\ndef test_check():\n    check(int_to_mini_roman)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String intToMiniRoman(long number) {\n        long[] num = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            long div = number / num[i];\n            number %= num[i];\n            while (div > 0) {\n                res += sym[i];\n                div--;\n            }\n            i--;\n        }\n        return res.toLowerCase();\n    }\n}\n\n### Python version\n\ndef int_to_mini_roman(number: int) -> str:\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "py",
    "prompt": "def is_equal_to_sum_even(n: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n\ndef test_check():\n    check(is_equal_to_sum_even)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isEqualToSumEven(long n) {\n        return n%2 == 0 && n > 7;\n    }\n}\n\n### Python version\n\ndef is_equal_to_sum_even(n: int) -> bool:\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "py",
    "prompt": "def decimal_to_binary(decimal: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String decimalToBinary(long decimal) {\n        return \"db\" + Long.toBinaryString(decimal) + \"db\";\n    }\n}\n\n### Python version\n\ndef decimal_to_binary(decimal: int) -> str:\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "py",
    "prompt": "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]\n    assert candidate([5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5]\n    assert candidate([5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5]\n    assert candidate([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1]\n\ndef test_check():\n    check(sort_third)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n        for (int i=2; i<l.size(); i+=3) {\n            int j=i-2;\n            while (j>=0 && l.get(j+3)<l.get(j)) {\n                long tmp=l.get(j);\n                l.set(j,l.get(j+3));\n                l.set(j+3,tmp);\n                j-=3;\n            }\n        }\n        return l;\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "py",
    "prompt": "def simplify(x: str, n: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('1/5', '5/1') == True\n    assert candidate('1/6', '2/1') == False\n    assert candidate('5/1', '3/1') == True\n    assert candidate('7/10', '10/2') == False\n    assert candidate('2/10', '50/10') == True\n    assert candidate('7/2', '4/2') == True\n    assert candidate('11/6', '6/1') == True\n    assert candidate('2/3', '5/2') == False\n    assert candidate('5/2', '3/5') == False\n    assert candidate('2/4', '8/4') == True\n    assert candidate('2/4', '4/2') == True\n    assert candidate('1/5', '5/1') == True\n    assert candidate('1/5', '1/5') == False\n\ndef test_check():\n    check(simplify)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean simplify(String x, String n) {\n        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator % denom == 0;\n    }\n}\n\n### Python version\n\ndef simplify(x: str, n: str) -> bool:\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "py",
    "prompt": "def solve(s: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String solve(String s) {\n        int flg = 0;\n        int idx = 0;\n        char[] newStr = s.toCharArray();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                newStr[idx] = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                flg = 1;\n            }\n            idx++;\n        }\n        if (flg == 0) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        return new String(newStr);\n    }\n}\n\n### Python version\n\ndef solve(s: str) -> str:\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "py",
    "prompt": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n        return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n    }\n}\n\n### Python version\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "py",
    "prompt": "from typing import List\n\ndef double_the_difference(lst: List[float]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0, 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0, -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n        return lst.stream().filter(i -> i > 0 && i%2!=0 && i == Math.floor(i)).mapToLong(i -> (long) Math.pow(i, 2)).sum();\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef double_the_difference(lst: List[float]) -> int:\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "py",
    "prompt": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean belowZero(ArrayList<Long> operations) {\n        long balance = 0;\n        for (long op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "py",
    "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n\ndef test_check():\n    check(greatest_common_divisor)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long greatestCommonDivisor(long a, long b) {\n        while (b != 0) {\n            long t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n}\n\n### Python version\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "py",
    "prompt": "from typing import List\n\ndef f(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i=1; i<=n; i++) {\n            if (i%2 == 0) {\n                long x = 1;\n                for (long j=1; j<=i; j++) x *= j;\n                ret.add(x);\n            } else {\n                long x = 0;\n                for (long j=1; j<=i; j++) x += j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n    \n}\n\n### Python version\n\nfrom typing import List\n\ndef f(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "py",
    "prompt": "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean monotonic(ArrayList<Long> l) {\n        if (l.equals(l.stream().sorted().collect(Collectors.toList())) || l.equals(l.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList()))) {\n            return true;\n        }\n        return false;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "py",
    "prompt": "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n    assert candidate([]) == []\n    assert candidate([1, -1, 55]) == ['One']\n    assert candidate([1, -1, 3, 2]) == ['Three', 'Two', 'One']\n    assert candidate([9, 4, 8]) == ['Nine', 'Eight', 'Four']\n\ndef test_check():\n    check(by_length)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n        String[] dic = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        ArrayList<Long> sortedArr = (ArrayList<Long>) arr.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n        ArrayList<String> newArr = new ArrayList<String>();\n        for (Long var : sortedArr) {\n            if (var >= 1 && var <= 9) {\n                newArr.add(dic[var.intValue()-1]);\n            }\n        }\n        return newArr;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "py",
    "prompt": "def remove_vowels(text: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('abcdef\\nghijklm') == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\ndef test_check():\n    check(remove_vowels)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"(?i)[aeiou]\", \"\");\n    }\n}\n\n### Python version\n\ndef remove_vowels(text: str) -> str:\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "py",
    "prompt": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('apple') == False\n    assert candidate('apple pi e') == True\n    assert candidate('eeeee') == False\n    assert candidate('A') == True\n    assert candidate('Pumpkin pie ') == False\n    assert candidate('Pumpkin pie 1') == False\n    assert candidate('') == False\n    assert candidate('eeeee e ') == False\n    assert candidate('apple pie') == False\n    assert candidate('apple pi e ') == False\n\ndef test_check():\n    check(check_if_last_char_is_a_letter)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        String check = txt.substring(txt.lastIndexOf(' ')+1);\n        return (check.length() == 1 && (97 <= Character.toLowerCase(check.charAt(0)) && Character.toLowerCase(check.charAt(0)) <= 122));\n    }\n    \n}\n\n### Python version\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "py",
    "prompt": "def iscube(a: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean iscube(long a) {\n        a = Math.abs(a);\n        return Math.pow(Math.round(Math.cbrt(a)), 3) == a;\n    }\n    \n}\n\n### Python version\n\ndef iscube(a: int) -> bool:\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n        s = s.chars().filter(ch -> c.indexOf(ch) == -1).mapToObj(Character::toString).collect(Collectors.joining());\n        return Pair.with(s, new StringBuilder(s).reverse().toString().equals(s));\n    }\n}\n\n### Python version\n\nfrom typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "py",
    "prompt": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n        float mean = numbers.stream().reduce(0.0f, Float::sum) / numbers.size();\n        return numbers.stream().map(x -> Math.abs(x - mean)).reduce(0.0f, Float::sum) / numbers.size();\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "py",
    "prompt": "def correct_bracketing(brackets: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n\n### Python version\n\ndef correct_bracketing(brackets: str) -> bool:\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "py",
    "prompt": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n        float minNumber = Collections.min(numbers);\n        float maxNumber = Collections.max(numbers);\n        return numbers.stream().map(x -> (x - minNumber) / (maxNumber - minNumber)).collect(Collectors.toCollection(ArrayList::new));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate((1, 2), (2, 3)) == 'NO'\n    assert candidate((-1, 1), (0, 4)) == 'NO'\n    assert candidate((-3, -1), (-5, 5)) == 'YES'\n    assert candidate((-2, 2), (-4, 0)) == 'YES'\n    assert candidate((-11, 2), (-1, -1)) == 'NO'\n    assert candidate((1, 2), (3, 5)) == 'NO'\n    assert candidate((1, 2), (1, 2)) == 'NO'\n    assert candidate((-2, -2), (-3, -2)) == 'NO'\n\ndef test_check():\n    check(intersection)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n        long l = Math.max(interval1.getValue0(), interval2.getValue0());\n        long r = Math.min(interval1.getValue1(), interval2.getValue1());\n        long length = r - l;\n        if (length > 0 && isPrime(length)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    private static boolean isPrime(long n) {\n        if (n == 1 || n == 0) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Python version\n\nfrom typing import Tuple\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "py",
    "prompt": "def hex_key(num: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long hexKey(String num) {\n        String primes = \"2357BD\";\n        long total = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (primes.indexOf(num.charAt(i)) >= 0) {\n                total++;\n            }\n        }\n        return total;\n    }\n}\n\n### Python version\n\ndef hex_key(num: str) -> int:\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "py",
    "prompt": "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        boolean switch_ = true;\n        while (!lst.isEmpty()) {\n            res.add(switch_ ? Collections.min(lst) : Collections.max(lst));\n            lst.remove(res.get(res.size() - 1));\n            switch_ = !switch_;\n        }\n        return res;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "py",
    "prompt": "def is_bored(S: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I will be productive. will kill It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[.?!]\\\\s*\");\n        return Arrays.stream(sentences).filter(s -> s.startsWith(\"I \")).count();\n    }\n    \n}\n\n### Python version\n\ndef is_bored(S: str) -> int:\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "py",
    "prompt": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String> result = new ArrayList<>();\n\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i+1));\n        }\n        return result;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "py",
    "prompt": "def how_many_times(string: str, substring: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long howManyTimes(String string, String substring) {\n        long times = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n\n### Python version\n\ndef how_many_times(string: str, substring: str) -> int:\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "py",
    "prompt": "from typing import List\n\ndef solution(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, 8, 7, 1]) == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\ndef test_check():\n    check(solution)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long solution(ArrayList<Long> lst) {\n        return IntStream.range(0, lst.size()).filter(i -> i%2==0 && lst.get(i)%2==1).mapToLong(i -> lst.get(i)).sum();\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef solution(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "py",
    "prompt": "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False\n    assert candidate([]) == True\n    assert candidate([1]) == True\n    assert candidate([3, 2, 1]) == False\n    assert candidate([1, 2, 2, 2, 3, 4]) == False\n    assert candidate([1, 2, 3, 3, 3, 4]) == False\n    assert candidate([1, 2, 2, 3, 3, 4]) == True\n    assert candidate([1, 2, 3, 4]) == True\n\ndef test_check():\n    check(is_sorted)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSorted(ArrayList<Long> lst) {\n        HashMap<Long, Long> count_digit = new HashMap<Long, Long>();\n        for (long i : lst) {\n            if (count_digit.containsKey(i)) {\n                count_digit.put(i, count_digit.get(i) + 1);\n            } else {\n                count_digit.put(i, 1L);\n            }\n        }\n        for (long i : lst) {\n            if (count_digit.get(i) > 2) {\n                return false;\n            }\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "py",
    "prompt": "from typing import List\n\ndef search(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long search(ArrayList<Long> lst) {\n        long[] frq = new long[Collections.max(lst).intValue() + 1];\n        lst.stream().forEach(i -> frq[i.intValue()]++);\n\n        long ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n\n        return ans;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "py",
    "prompt": "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        if (arr.size() == 0) return new ArrayList<Long>();\n        List<Long> evens = arr.stream().filter(x -> x % 2 == 0).collect(Collectors.toList());\n        if (evens.size() == 0) return new ArrayList<Long>();\n        long min = Collections.min(evens);\n        return new ArrayList<Long>(Arrays.asList(min, (long) arr.indexOf(min)));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "py",
    "prompt": "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\ndef test_check():\n    check(pairs_sum_to_zero)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "py",
    "prompt": "def make_palindrome(string: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n\ndef test_check():\n    check(make_palindrome)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String makePalindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n        int beginningOfSuffix = 0;\n        while (!string.substring(beginningOfSuffix).equals(new StringBuilder(string.substring(beginningOfSuffix)).reverse().toString())) {\n            beginningOfSuffix++;\n        }\n        return string + new StringBuilder(string.substring(0, beginningOfSuffix)).reverse().toString();\n    }\n}\n\n### Python version\n\ndef make_palindrome(string: str) -> str:\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "py",
    "prompt": "def starts_one_ends(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\ndef test_check():\n    check(starts_one_ends)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long startsOneEnds(long n) {\n        if (n == 1) return 1;\n        return 18 * (long)Math.pow(10, n - 2);\n    }\n}\n\n### Python version\n\ndef starts_one_ends(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "py",
    "prompt": "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (ArrayList<Long>) l.stream().filter(e -> e > 0).collect(Collectors.toList());\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "py",
    "prompt": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n\ndef test_check():\n    check(concatenate)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String concatenate(ArrayList<String> strings) {\n        return String.join(\"\", strings);\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "py",
    "prompt": "def is_nested(string: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('[[]]') == True\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate('[]') == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n    assert candidate('') == False\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\ndef test_check():\n    check(is_nested)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isNested(String string) {\n        List<Integer> openingBracketIndex = new ArrayList<>();\n        List<Integer> closingBracketIndex = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                openingBracketIndex.add(i);\n            } else {\n                closingBracketIndex.add(i);\n            }\n        }\n        Collections.reverse(closingBracketIndex);\n        int cnt = 0;\n        int i = 0;\n        int l = closingBracketIndex.size();\n        for (int idx : openingBracketIndex) {\n            if (i < l && idx < closingBracketIndex.get(i)) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n\n### Python version\n\ndef is_nested(string: str) -> bool:\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "py",
    "prompt": "def is_palindrome(text: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isPalindrome(String text) {\n        StringBuilder sb = new StringBuilder(text);\n        return text.equals(sb.reverse().toString());\n    }\n}\n\n### Python version\n\ndef is_palindrome(text: str) -> bool:\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "py",
    "prompt": "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([0, 1]) == 1\n    assert candidate([1]) == 1\n\ndef test_check():\n    check(count_nums)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countNums(ArrayList<Long> arr) {\n        return arr.stream().map(i -> digitsSum(i)).filter(i -> i > 0).count();\n    }\n\n    private static long digitsSum(long n) {\n        long neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        String[] digits = Long.toString(n).split(\"\");\n        digits[0] = Long.toString(Long.parseLong(digits[0]) * neg);\n        return Arrays.stream(digits).mapToLong(Long::parseLong).sum();\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef count_nums(arr: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "py",
    "prompt": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> factorize(long n) {\n        ArrayList<Long> fact = new ArrayList<>();\n        long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "py",
    "prompt": "def largest_prime_factor(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long largestPrimeFactor(long n) {\n        long largest = 1;\n        for (long j = 2; j <= n; j++) {\n            if (n % j == 0 && isPrime(j)) {\n                largest = Math.max(largest, j);\n            }\n        }\n        return largest;\n    }\n    public static boolean isPrime(long k) {\n        if (k < 2) return false;\n        for (long i = 2; i < k; i++) {\n            if (k % i == 0) return false;\n        }\n        return true;\n    }\n}\n\n### Python version\n\ndef largest_prime_factor(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "py",
    "prompt": "def get_max_triples(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long getMaxTriples(long n) {\n        long ans = 0;\n        long[] A = new long[(int)n+1];\n        for (int i = 1; i <= n; i++) {\n            A[i] = i*i-i+1;\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = i+1; j <= n; j++) {\n                for (int k = j+1; k <= n; k++) {\n                    if ((A[i]+A[j]+A[k])%3 == 0) {\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n    \n}\n\n### Python version\n\ndef get_max_triples(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "py",
    "prompt": "def anti_shuffle(s: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String antiShuffle(String s) {\n        return Arrays.stream(s.split(\" \")).map(i -> new String(i.chars().sorted().toArray(), 0, i.length())).collect(Collectors.joining(\" \"));\n    }\n    \n}\n\n### Python version\n\ndef anti_shuffle(s: str) -> str:\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "py",
    "prompt": "def solve(N: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1000) == '1'\n    assert candidate(150) == '110'\n    assert candidate(147) == '1100'\n    assert candidate(333) == '1001'\n    assert candidate(963) == '10010'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String solve(long N) {\n        return Long.toBinaryString(Long.toString(N).chars().map(c -> c - '0').sum());\n    }\n}\n\n### Python version\n\ndef solve(N: int) -> str:\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "py",
    "prompt": "from typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\ndef test_check():\n    check(minPath)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n        long n = grid.size();\n        long val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    ArrayList<Long> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1L);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "py",
    "prompt": "def encrypt(s: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('hi') == 'lm'\n    assert candidate('asdfghjkl') == 'ewhjklnop'\n    assert candidate('gf') == 'kj'\n    assert candidate('et') == 'ix'\n    assert candidate('faewfawefaewg') == 'jeiajeaijeiak'\n    assert candidate('hellomyfriend') == 'lippsqcjvmirh'\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') == 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n    assert candidate('a') == 'e'\n\ndef test_check():\n    check(encrypt)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String encrypt(String s) {\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        String out = \"\";\n        for (char c : s.toCharArray()) {\n            if (d.indexOf(c) != -1) {\n                out += d.charAt((d.indexOf(c)+2*2) % 26);\n            } else {\n                out += c;\n            }\n        }\n        return out;\n    }\n}\n\n### Python version\n\ndef encrypt(s: str) -> str:\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "py",
    "prompt": "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3) == [3, 5, 7]\n    assert candidate(4) == [4, 6, 8, 10]\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\ndef test_check():\n    check(make_a_pile)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> makeAPile(long n) {\n        return IntStream.range(0, (int) n).mapToObj(i -> n + 2 * i).collect(Collectors.toCollection(ArrayList::new));\n    }\n}\n\n### Python version\n\nfrom typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "py",
    "prompt": "def is_prime(n: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "### Java version\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isPrime(long n) {\n        if (n < 2) {\n            return false;\n        }\n        for (long k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n### Python version\n\ndef is_prime(n: int) -> bool:\n"
  }
]