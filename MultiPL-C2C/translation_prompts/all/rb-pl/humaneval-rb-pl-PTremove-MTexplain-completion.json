[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "pl",
    "prompt": "sub correct_bracketing {\n    my($brackets) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"()\"),1) || $candidate->(\"()\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1) || $candidate->(\"(()())\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()\"),1) || $candidate->(\"()()(()())()\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1) || $candidate->(\"()()((()()())())(()()(()))\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((()())))\"),\"\") || $candidate->(\"((()())))\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")(()\"),\"\") || $candidate->(\")(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\") || $candidate->(\"(\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((((\"),\"\") || $candidate->(\"((((\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")\"),\"\") || $candidate->(\")\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\") || $candidate->(\"(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())())(()\"),\"\") || $candidate->(\"()()(()())())(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\") || $candidate->(\"()()(()())()))()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef correct_bracketing(brackets)\n  depth = 0\n  brackets.each_char do |b|\n    if b == '('\n      depth += 1\n    else\n      depth -= 1\n    end\n    return false if depth < 0\n  end\n  depth == 0\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "pl",
    "prompt": "sub triangle_area {\n    my($a, $h) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(5, 3),7.5) || $candidate->(5, 3)==7.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2),2.0) || $candidate->(2, 2)==2.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 8),40.0) || $candidate->(10, 8)==40.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef triangle_area(a, h)\n  a * h / 2.0\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub triangle_area {\n    my($a, $h) = @_;\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "pl",
    "prompt": "sub special_factorial {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288) || $candidate->(4)==288) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560) || $candidate->(5)==34560) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000) || $candidate->(7)==125411328000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef special_factorial(n)\n  fact_i = 1\n  special_fact = 1\n  (1..n).each do |i|\n    fact_i *= i\n    special_fact *= fact_i\n  end\n  special_fact\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub special_factorial {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "pl",
    "prompt": "sub largest_smallest_integers {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1]) || $candidate->([2, 4, 1, 3, 5, 7])==[undef, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1]) || $candidate->([2, 4, 1, 3, 5, 7, 0])==[undef, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1]) || $candidate->([1, 3, 2, 4, 5, 6, -2])==[-2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2]) || $candidate->([4, 5, 3, 6, 2, 7, -7])==[-7, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]) || $candidate->([7, 3, 8, 4, 9, 2, 5, -9])==[-9, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef, undef]) || $candidate->([])==[undef, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),[undef, undef]) || $candidate->([0])==[undef, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef]) || $candidate->([-1, -3, -5, -6])==[-1, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef]) || $candidate->([-1, -3, -5, -6, 0])==[-1, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1]) || $candidate->([-6, -4, -4, -3, 1])==[-3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1]) || $candidate->([-6, -4, -4, -3, -100, 1])==[-3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef largest_smallest_integers(lst)\n  smallest = lst.select { |x| x < 0 }\n  largest = lst.select { |x| x > 0 }\n  [smallest.max, largest.min]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub largest_smallest_integers {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "pl",
    "prompt": "sub move_one_ball {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1) || $candidate->([3, 4, 5, 1, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1) || $candidate->([3, 5, 10, 1, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 1, 2]),\"\") || $candidate->([4, 3, 1, 2])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\") || $candidate->([3, 5, 4, 1, 2])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1) || $candidate->([])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef move_one_ball(arr)\n  return true if arr.empty?\n  sorted_array = arr.sort\n  min_value = arr.min\n  min_index = arr.index(min_value)\n  my_arr = arr[min_index..-1] + arr[0...min_index]\n  my_arr == sorted_array\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub move_one_ball {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "pl",
    "prompt": "sub digits {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5) || $candidate->(5)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5) || $candidate->(54)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1) || $candidate->(120)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5) || $candidate->(5014)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315) || $candidate->(98765)==315) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625) || $candidate->(5576543)==2625) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0) || $candidate->(2468)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef digits(n)\n  product = 1\n  odd_count = 0\n  n.to_s.each_char do |digit|\n    int_digit = digit.to_i\n    if int_digit.odd?\n      product *= int_digit\n      odd_count += 1\n    end\n  end\n  odd_count == 0 ? 0 : product\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub digits {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "pl",
    "prompt": "sub fib4 {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4) || $candidate->(5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28) || $candidate->(8)==28) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104) || $candidate->(10)==104) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386) || $candidate->(12)==386) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef fib4(n)\n  results = [0, 0, 2, 0]\n  return results[n] if n < 4\n\n  (4..n).each do |_|\n    results << results[-1] + results[-2] + results[-3] + results[-4]\n    results.shift\n  end\n\n  results[-1]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fib4 {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "pl",
    "prompt": "sub is_happy {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\") || $candidate->(\"a\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\") || $candidate->(\"aa\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1) || $candidate->(\"abcd\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\") || $candidate->(\"aabb\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1) || $candidate->(\"adb\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\") || $candidate->(\"xyy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1) || $candidate->(\"iopaxpoi\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\") || $candidate->(\"iopaxioi\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_happy(s)\n  return false if s.length < 3\n\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]\n  end\n\n  true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_happy {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "pl",
    "prompt": "sub circular_shift {\n    my($x, $shift) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n        if(eq_deeply($candidate->(100, 2),\"001\") || $candidate->(100, 2)==\"001\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\") || $candidate->(12, 2)==\"12\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97, 8),\"79\") || $candidate->(97, 8)==\"79\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 1),\"21\") || $candidate->(12, 1)==\"21\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\") || $candidate->(11, 101)==\"11\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef circular_shift(x, shift)\n  s = x.to_s\n  return s.reverse if shift > s.length\n  s[-shift..-1] + s[0...-shift]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub circular_shift {\n    my($x, $shift) = @_;\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "pl",
    "prompt": "sub max_fill {\n    my($grid, $capacity) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_fill;\n        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6) || $candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5) || $candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0) || $candidate->([[0, 0, 0], [0, 0, 0]], 5)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4) || $candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2) || $candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef max_fill(grid, capacity)\n  grid.sum { |arr| (arr.sum.to_f/capacity).ceil }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub max_fill {\n    my($grid, $capacity) = @_;\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "pl",
    "prompt": "sub has_close_elements {\n    my($numbers, $threshold) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1) || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\") || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1) || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\") || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1) || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\"\") || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef has_close_elements(numbers, threshold)\n  numbers.combination(2).any? { |a, b| (a - b).abs < threshold }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "pl",
    "prompt": "sub numerical_letter_grade {\n    my($grades) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]) || $candidate->([4.0, 3, 1.7, 2, 3.5])==[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"]) || $candidate->([1.2])==[\"D+\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"D-\"]) || $candidate->([0.5])==[\"D-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"E\"]) || $candidate->([0.0])==[\"E\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]) || $candidate->([1.0, 0.3, 1.5, 2.8, 3.3])==[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0, 0.7]),[\"E\", \"D-\"]) || $candidate->([0.0, 0.7])==[\"E\", \"D-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef numerical_letter_grade(grades)\n  letter_grade = []\n  grades.each do |gpa|\n    if gpa == 4.0\n      letter_grade << \"A+\"\n    elsif gpa > 3.7\n      letter_grade << \"A\"\n    elsif gpa > 3.3\n      letter_grade << \"A-\"\n    elsif gpa > 3.0\n      letter_grade << \"B+\"\n    elsif gpa > 2.7\n      letter_grade << \"B\"\n    elsif gpa > 2.3\n      letter_grade << \"B-\"\n    elsif gpa > 2.0\n      letter_grade << \"C+\"\n    elsif gpa > 1.7\n      letter_grade << \"C\"\n    elsif gpa > 1.3\n      letter_grade << \"C-\"\n    elsif gpa > 1.0\n      letter_grade << \"D+\"\n    elsif gpa > 0.7\n      letter_grade << \"D\"\n    elsif gpa > 0.0\n      letter_grade << \"D-\"\n    else\n      letter_grade << \"E\"\n    end\n  end\n  letter_grade\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub numerical_letter_grade {\n    my($grades) = @_;\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "pl",
    "prompt": "sub x_or_y {\n    my($n, $x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&x_or_y;\n        if(eq_deeply($candidate->(7, 34, 12),34) || $candidate->(7, 34, 12)==34) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 5),5) || $candidate->(15, 8, 5)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 33, 5212),33) || $candidate->(3, 33, 5212)==33) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1259, 3, 52),3) || $candidate->(1259, 3, 52)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7919, -1, 12),-1) || $candidate->(7919, -1, 12)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3609, 1245, 583),583) || $candidate->(3609, 1245, 583)==583) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(91, 56, 129),129) || $candidate->(91, 56, 129)==129) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 34, 1234),1234) || $candidate->(6, 34, 1234)==1234) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 0),0) || $candidate->(1, 2, 0)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 0),2) || $candidate->(2, 2, 0)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef x_or_y(n, x, y)\n  return y if n == 1 || (2...n).any? { |i| n % i == 0 }\n  x\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub x_or_y {\n    my($n, $x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "pl",
    "prompt": "sub specialFilter {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&specialFilter;\n        if(eq_deeply($candidate->([5, -2, 1, -5]),0) || $candidate->([5, -2, 1, -5])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, -73, 14, -15]),1) || $candidate->([15, -73, 14, -15])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2) || $candidate->([33, -2, -3, 45, 21, 109])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4) || $candidate->([43, -12, 93, 125, 121, 109])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3) || $candidate->([71, -2, -33, 75, 21, 19])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0) || $candidate->([1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef specialFilter(nums)\n  nums.count { |num| num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub specialFilter {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "pl",
    "prompt": "sub parse_music {\n    my($music_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_music;\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o o o o\"),[4, 4, 4, 4]) || $candidate->(\"o o o o\")==[4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".| .| .| .|\"),[1, 1, 1, 1]) || $candidate->(\".| .| .| .|\")==[1, 1, 1, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]) || $candidate->(\"o| o| .| .| o o o o\")==[2, 2, 1, 1, 4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]) || $candidate->(\"o| .| o| .| o o| o o|\")==[2, 1, 2, 1, 4, 2, 4, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef parse_music(music_string)\n  note_map = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |x| note_map[x] }.compact\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub parse_music {\n    my($music_string) = @_;\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "pl",
    "prompt": "sub split_words {\n    my($txt) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_words;\n        if(eq_deeply($candidate->(\"Hello world!\"),[\"Hello\", \"world!\"]) || $candidate->(\"Hello world!\")==[\"Hello\", \"world!\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,world!\"),[\"Hello\", \"world!\"]) || $candidate->(\"Hello,world!\")==[\"Hello\", \"world!\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world,!\"),[\"Hello\", \"world,!\"]) || $candidate->(\"Hello world,!\")==[\"Hello\", \"world,!\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]) || $candidate->(\"Hello,Hello,world !\")==[\"Hello,Hello,world\", \"!\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\"),3) || $candidate->(\"abcdef\")==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaabb\"),2) || $candidate->(\"aaabb\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaBb\"),1) || $candidate->(\"aaaBb\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef split_words(txt)\n  if txt.include? \" \"\n    txt.split\n  elsif txt.include? \",\"\n    txt.gsub(\",\", \" \").split\n  else\n    txt.chars.count { |i| i.match?(/[a-z]/) && i.ord.even? }\n  end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub split_words {\n    my($txt) = @_;\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "pl",
    "prompt": "sub count_distinct_characters {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5) || $candidate->(\"abcde\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdecadeCADE\"),5) || $candidate->(\"abcdecadeCADE\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1) || $candidate->(\"aaaaAAAAaaaa\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry jERRY JeRRRY\"),5) || $candidate->(\"Jerry jERRY JeRRRY\")==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.size\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub count_distinct_characters {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "pl",
    "prompt": "sub bf {\n    my($planet1, $planet2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n        if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]) || $candidate->(\"Jupiter\", \"Neptune\")==[\"Saturn\", \"Uranus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Mercury\"),[\"Venus\"]) || $candidate->(\"Earth\", \"Mercury\")==[\"Venus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]) || $candidate->(\"Mercury\", \"Uranus\")==[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]) || $candidate->(\"Neptune\", \"Venus\")==[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Earth\"),[]) || $candidate->(\"Earth\", \"Earth\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[]) || $candidate->(\"Mars\", \"Earth\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jupiter\", \"Makemake\"),[]) || $candidate->(\"Jupiter\", \"Makemake\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef bf(planet1, planet2)\n  planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  return [] if !planet_names.include?(planet1) || !planet_names.include?(planet2) || planet1 == planet2\n\n  planet1_index, planet2_index = planet_names.index(planet1), planet_names.index(planet2)\n  planet1_index, planet2_index = planet2_index, planet1_index if planet1_index > planet2_index\n\n  planet_names[(planet1_index + 1)...planet2_index]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub bf {\n    my($planet1, $planet2) = @_;\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "pl",
    "prompt": "sub digitSum {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digitSum;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abAB\"),131) || $candidate->(\"abAB\")==131) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcCd\"),67) || $candidate->(\"abcCd\")==67) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"helloE\"),69) || $candidate->(\"helloE\")==69) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"woArBld\"),131) || $candidate->(\"woArBld\")==131) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aAaaaXa\"),153) || $candidate->(\"aAaaaXa\")==153) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" How are yOu?\"),151) || $candidate->(\" How are yOu?\")==151) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You arE Very Smart\"),327) || $candidate->(\"You arE Very Smart\")==327) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef digitSum(s)\n  s.empty? ? 0 : s.chars.select { |c| c =~ /[A-Z]/ }.map(&:ord).sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub digitSum {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "pl",
    "prompt": "sub sum_squares {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1, 2, 3]),6) || $candidate->([1, 2, 3])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 9]),14) || $candidate->([1, 4, 9])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9) || $candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1])==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3) || $candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1])==-3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),0) || $candidate->([0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126) || $candidate->([-1, -5, 2, -1, -5])==-126) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030) || $candidate->([-56, -99, 1, 0, -2])==3030) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0) || $candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196) || $candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])==-14196) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448) || $candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])==-1448) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef sum_squares(lst)\n  lst.each_with_index.map do |x, i|\n    if i % 3 == 0\n      x**2\n    elsif i % 4 == 0\n      x**3\n    else\n      x\n    end\n  end.sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "pl",
    "prompt": "sub count_up_to {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_up_to;\n        if(eq_deeply($candidate->(5),[2, 3]) || $candidate->(5)==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[2, 3, 5]) || $candidate->(6)==[2, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[2, 3, 5]) || $candidate->(7)==[2, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),[2, 3, 5, 7]) || $candidate->(10)==[2, 3, 5, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[]) || $candidate->(0)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19]) || $candidate->(22)==[2, 3, 5, 7, 11, 13, 17, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[]) || $candidate->(1)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17]) || $candidate->(18)==[2, 3, 5, 7, 11, 13, 17]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) || $candidate->(47)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) || $candidate->(101)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef count_up_to(n)\n  (2...n).select { |i| (2..Math.sqrt(i)).none? { |j| i % j == 0 } }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub count_up_to {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "pl",
    "prompt": "sub sum_squares {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14) || $candidate->([1.0, 2.0, 3.0])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14) || $candidate->([1.0, 2.0, 3.0])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84) || $candidate->([1.0, 3.0, 5.0, 7.0])==84) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29) || $candidate->([1.4, 4.2, 0.0])==29) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6) || $candidate->([-2.4, 1.0, 1.0])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230) || $candidate->([100.0, 1.0, 15.0, 2.0])==10230) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000) || $candidate->([10000.0, 10000.0])==200000000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75) || $candidate->([-1.4, 4.6, 6.3])==75) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086) || $candidate->([-1.4, 17.9, 18.9, 19.9])==1086) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0) || $candidate->([0.0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1) || $candidate->([-1.0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2) || $candidate->([-1.0, 1.0, 0.0])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef sum_squares(lst)\n  lst.map { |x| (x.ceil)**2 }.sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "pl",
    "prompt": "sub unique {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]) || $candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123])==[0, 2, 3, 5, 9, 123]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef unique(l)\n  l.uniq.sort\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub unique {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "pl",
    "prompt": "sub fib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55) || $candidate->(10)==55) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21) || $candidate->(8)==21) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89) || $candidate->(11)==89) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144) || $candidate->(12)==144) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "pl",
    "prompt": "sub fizz_buzz {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fizz_buzz;\n        if(eq_deeply($candidate->(50),0) || $candidate->(50)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(78),2) || $candidate->(78)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(79),3) || $candidate->(79)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),3) || $candidate->(100)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),6) || $candidate->(200)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4000),192) || $candidate->(4000)==192) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10000),639) || $candidate->(10000)==639) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100000),8026) || $candidate->(100000)==8026) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef fizz_buzz(n)\n  ns = (0...n).select { |i| i % 11 == 0 || i % 13 == 0 }\n  s = ns.join\n  s.count('7')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fizz_buzz {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "pl",
    "prompt": "sub find_closest_elements {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]) || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])==[3.9, 4.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]) || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0])==[5.0, 5.9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])==[2.0, 2.2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])==[2.0, 2.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]) || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1])==[2.2, 3.1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef find_closest_elements(numbers)\n  closest_pair = nil\n  distance = nil\n\n  numbers.each_with_index do |elem, idx|\n    numbers.each_with_index do |elem2, idx2|\n      next if idx == idx2\n\n      if distance.nil?\n        distance = (elem - elem2).abs\n        closest_pair = [elem, elem2].sort\n      else\n        new_distance = (elem - elem2).abs\n        if new_distance < distance\n          distance = new_distance\n          closest_pair = [elem, elem2].sort\n        end\n      end\n    end\n  end\n\n  closest_pair\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub find_closest_elements {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "pl",
    "prompt": "sub valid_date {\n    my($date) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n        if(eq_deeply($candidate->(\"03-11-2000\"),1) || $candidate->(\"03-11-2000\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"),\"\") || $candidate->(\"15-01-2012\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-0-2040\"),\"\") || $candidate->(\"04-0-2040\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-04-2020\"),1) || $candidate->(\"06-04-2020\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"),1) || $candidate->(\"01-01-2007\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"03-32-2011\"),\"\") || $candidate->(\"03-32-2011\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\") || $candidate->(\"04-31-3000\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-06-2005\"),1) || $candidate->(\"06-06-2005\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"21-31-2000\"),\"\") || $candidate->(\"21-31-2000\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"),1) || $candidate->(\"04-12-2003\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04122003\"),\"\") || $candidate->(\"04122003\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"20030412\"),\"\") || $candidate->(\"20030412\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"),\"\") || $candidate->(\"2003-04\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04-12\"),\"\") || $candidate->(\"2003-04-12\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-2003\"),\"\") || $candidate->(\"04-2003\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef valid_date(date)\n  begin\n    date = date.strip\n    month, day, year = date.split('-').map(&:to_i)\n    return false if month < 1 || month > 12\n    return false if [1,3,5,7,8,10,12].include?(month) && (day < 1 || day > 31)\n    return false if [4,6,9,11].include?(month) && (day < 1 || day > 30)\n    return false if month == 2 && (day < 1 || day > 29)\n  rescue\n    return false\n  end\n  true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub valid_date {\n    my($date) = @_;\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "pl",
    "prompt": "sub add {\n    my($x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->(0, 1),1) || $candidate->(0, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 0),1) || $candidate->(1, 0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),5) || $candidate->(2, 3)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 7),12) || $candidate->(5, 7)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),12) || $candidate->(7, 5)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef add(x, y)\n  x + y\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub add {\n    my($x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "pl",
    "prompt": "sub triples_sum_to_zero {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\") || $candidate->([1, 3, 5, 0])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -1]),\"\") || $candidate->([1, 3, 5, -1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),1) || $candidate->([1, 3, -2, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\") || $candidate->([1, 2, 3, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 7]),\"\") || $candidate->([1, 2, 5, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1) || $candidate->([2, 4, -5, 3, 9, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\") || $candidate->([1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -100]),\"\") || $candidate->([1, 3, 5, -100])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\") || $candidate->([100, 3, 5, -100])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef triples_sum_to_zero(l)\n  l.combination(3).any? { |a, b, c| a + b + c == 0 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub triples_sum_to_zero {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "pl",
    "prompt": "sub largest_divisor {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n        if(eq_deeply($candidate->(3),1) || $candidate->(3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1) || $candidate->(7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5) || $candidate->(10)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50) || $candidate->(100)==50) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7) || $candidate->(49)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef largest_divisor(n)\n  (n-1).downto(1) { |i| return i if n % i == 0 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub largest_divisor {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "pl",
    "prompt": "sub sort_numbers {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\") || $candidate->(\"three\")==\"three\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\") || $candidate->(\"three five nine\")==\"three five nine\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"),\"zero four five seven eight nine\") || $candidate->(\"five zero four seven nine eight\")==\"zero four five seven eight nine\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three two one zero\"),\"zero one two three four five six\") || $candidate->(\"six five four three two one zero\")==\"zero one two three four five six\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef sort_numbers(numbers)\n  value_map = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split.sort_by { |x| value_map[x] }.join(' ')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sort_numbers {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "pl",
    "prompt": "sub smallest_change {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&smallest_change;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4) || $candidate->([1, 2, 3, 5, 4, 7, 9, 6])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1) || $candidate->([1, 2, 3, 4, 3, 2, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2]),1) || $candidate->([1, 4, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 4, 2]),1) || $candidate->([1, 4, 4, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0) || $candidate->([1, 2, 3, 2, 1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 1, 1, 3]),0) || $candidate->([3, 1, 1, 3])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0) || $candidate->([1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1) || $candidate->([0, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef smallest_change(arr)\n  (0...arr.length/2).count { |i| arr[i] != arr[-i-1] }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub smallest_change {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "pl",
    "prompt": "sub below_threshold {\n    my($l, $t) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_threshold;\n        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1) || $candidate->([1, 2, 4, 10], 100)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 5),\"\") || $candidate->([1, 20, 4, 10], 5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1) || $candidate->([1, 20, 4, 10], 21)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1) || $candidate->([1, 20, 4, 10], 22)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1) || $candidate->([1, 8, 4, 10], 11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 10),\"\") || $candidate->([1, 8, 4, 10], 10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef below_threshold(l, t)\n  l.all? { |e| e < t }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub below_threshold {\n    my($l, $t) = @_;\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "pl",
    "prompt": "sub prod_signs {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9) || $candidate->([1, 2, 2, -4])==-9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0) || $candidate->([0, 1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10) || $candidate->([1, 1, 1, 2, 3, -1, 1])==-10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef) || $candidate->([])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20) || $candidate->([2, 4, 1, 2, -1, -1, 9])==20) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4) || $candidate->([-1, 1, -1, 1])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4) || $candidate->([-1, 1, 1, 1])==-4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 0]),0) || $candidate->([-1, 1, 1, 0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef prod_signs(arr)\n  return nil if arr.empty?\n  prod = arr.include?(0) ? 0 : (-1) ** arr.count { |x| x < 0 }\n  prod * arr.map(&:abs).sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub prod_signs {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "pl",
    "prompt": "sub modp {\n    my($n, $p) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3) || $candidate->(3, 5)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2) || $candidate->(1101, 101)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1) || $candidate->(0, 101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8) || $candidate->(3, 11)==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1) || $candidate->(100, 101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4) || $candidate->(30, 5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3) || $candidate->(31, 5)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef modp(n, p)\n  ret = 1\n  n.times { ret = (2 * ret) % p }\n  ret\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub modp {\n    my($n, $p) = @_;\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "pl",
    "prompt": "sub count_upper {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n        if(eq_deeply($candidate->(\"aBCdEf\"),1) || $candidate->(\"aBCdEf\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0) || $candidate->(\"abcdefg\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dBBE\"),0) || $candidate->(\"dBBE\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"B\"),0) || $candidate->(\"B\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1) || $candidate->(\"U\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EEEE\"),2) || $candidate->(\"EEEE\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef count_upper(s)\n  s.chars.each_slice(2).count { |c| c[0] =~ /[AEIOU]/ }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub count_upper {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "pl",
    "prompt": "sub multiply {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n        if(eq_deeply($candidate->(148, 412),16) || $candidate->(148, 412)==16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72) || $candidate->(19, 28)==72) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020, 1851),0) || $candidate->(2020, 1851)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14, -15),20) || $candidate->(14, -15)==20) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42) || $candidate->(76, 67)==42) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 27),49) || $candidate->(17, 27)==49) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 1),0) || $candidate->(0, 1)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0) || $candidate->(0, 0)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef multiply(a, b)\n  (a.abs % 10) * (b.abs % 10)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub multiply {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "pl",
    "prompt": "sub unique_digits {\n    my($x) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33]) || $candidate->([15, 33, 1422, 1])==[1, 15, 33]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[]) || $candidate->([152, 323, 1422, 10])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]) || $candidate->([12345, 2033, 111, 151])==[111, 151]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]) || $candidate->([135, 103, 31])==[31, 135]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub unique_digits {\n    my($x) = @_;\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "pl",
    "prompt": "sub will_it_fly {\n    my($q, $w) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n        if(eq_deeply($candidate->([3, 2, 3], 9),1) || $candidate->([3, 2, 3], 9)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\") || $candidate->([1, 2], 5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3], 5),1) || $candidate->([3], 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3], 1),\"\") || $candidate->([3, 2, 3], 1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], 6),\"\") || $candidate->([1, 2, 3], 6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1) || $candidate->([5], 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef will_it_fly(q, w)\n  return false if q.sum > w\n  return true if q == q.reverse\n  false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub will_it_fly {\n    my($q, $w) = @_;\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "pl",
    "prompt": "sub is_multiply_prime {\n    my($a) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_multiply_prime;\n        if(eq_deeply($candidate->(5),\"\") || $candidate->(5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),1) || $candidate->(30)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1) || $candidate->(8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\") || $candidate->(10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1) || $candidate->(125)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(105),1) || $candidate->(105)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(126),\"\") || $candidate->(126)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(729),\"\") || $candidate->(729)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(891),\"\") || $candidate->(891)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1001),1) || $candidate->(1001)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_multiply_prime(a)\n  primes = (2..100).select { |n| (2..n-1).all? { |i| n % i != 0 } }\n  primes.product(primes, primes).any? { |x| x.reduce(:*) == a }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_multiply_prime {\n    my($a) = @_;\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "pl",
    "prompt": "sub maximum {\n    my($arr, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]) || $candidate->([-3, -4, 5], 3)==[-4, -3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4]) || $candidate->([4, -4, 4], 2)==[4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2]) || $candidate->([-3, 2, 1, 2, -1, -2, 1], 1)==[2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]) || $candidate->([123, -123, 20, 0, 1, 2, -3], 3)==[2, 20, 123]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]) || $candidate->([-123, 20, 0, 1, 2, -3], 4)==[0, 1, 2, 20]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]) || $candidate->([5, 15, 0, 3, -13, -8, 0], 7)==[-13, -8, 0, 0, 3, 5, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]) || $candidate->([-1, 0, 2, 5, 3, -10], 2)==[3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5]) || $candidate->([1, 0, 5, -7], 1)==[5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4]) || $candidate->([4, -4], 2)==[-4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10]) || $candidate->([-10, 10], 2)==[-10, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]) || $candidate->([1, 2, 3, -23, 243, -400, 0], 0)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef maximum(arr, k)\n  return [] if k == 0\n  arr.sort.last(k)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub maximum {\n    my($arr, $k) = @_;\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "pl",
    "prompt": "sub separate_paren_groups {\n    my($paren_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&separate_paren_groups;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]) || $candidate->(\"(()()) ((())) () ((())()())\")==[\"(()())\", \"((()))\", \"()\", \"((())()())\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]) || $candidate->(\"() (()) ((())) (((())))\")==[\"()\", \"(())\", \"((()))\", \"(((())))\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[\"(()(())((())))\"]) || $candidate->(\"(()(())((())))\")==[\"(()(())((())))\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]) || $candidate->(\"( ) (( )) (( )( ))\")==[\"()\", \"(())\", \"(()())\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef separate_paren_groups(paren_string)\n  result = []\n  current_string = []\n  current_depth = 0\n\n  paren_string.each_char do |c|\n    if c == '('\n      current_depth += 1\n      current_string << c\n    elsif c == ')'\n      current_depth -= 1\n      current_string << c\n\n      if current_depth == 0\n        result << current_string.join\n        current_string.clear\n      end\n    end\n  end\n\n  result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub separate_paren_groups {\n    my($paren_string) = @_;\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "pl",
    "prompt": "sub filter_integers {\n    my($values) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]) || $candidate->([4, {}, [], 23.2, 9, \"adasd\"])==[4, 9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]) || $candidate->([3, \"c\", 3, 3, \"a\", \"b\"])==[3, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub filter_integers {\n    my($values) = @_;\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "pl",
    "prompt": "sub skjkasdkd {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10) || $candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25) || $candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])==25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13) || $candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])==13) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11) || $candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])==11) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3) || $candidate->([0, 81, 12, 3, 1, 21])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7) || $candidate->([0, 8, 1, 2, 1, 7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191]),19) || $candidate->([8191])==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19) || $candidate->([8191, 123456, 127, 7])==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([127, 97, 8192]),10) || $candidate->([127, 97, 8192])==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef skjkasdkd(lst)\n  def is_prime(n)\n    (2..Math.sqrt(n)).none? { |i| n % i == 0 }\n  end\n\n  maxx = 0\n  lst.each { |i| maxx = i if i > maxx && is_prime(i) }\n  maxx.digits.sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub skjkasdkd {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "pl",
    "prompt": "sub total_match {\n    my($lst1, $lst2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&total_match;\n        if(eq_deeply($candidate->([], []),[]) || $candidate->([], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"])==[\"hi\", \"hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]) || $candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])==[\"hi\", \"admin\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]) || $candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])==[\"4\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"])==[\"hI\", \"Hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])==[\"hI\", \"hi\", \"hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"])==[\"hi\", \"admin\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], [\"this\"]),[]) || $candidate->([], [\"this\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\"], []),[]) || $candidate->([\"this\"], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef total_match(lst1, lst2)\n  l1 = lst1.join.length\n  l2 = lst2.join.length\n\n  l1 <= l2 ? lst1 : lst2\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub total_match {\n    my($lst1, $lst2) = @_;\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "pl",
    "prompt": "sub string_to_md5 {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_md5;\n        if(eq_deeply($candidate->(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\") || $candidate->(\"Hello world\")==\"3e25960a79dbc69b674cd4ec67a72c62\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),undef) || $candidate->(\"\")==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\") || $candidate->(\"A B C\")==\"0ef78513b0cb8cef12743f5aeb35f888\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\") || $candidate->(\"password\")==\"5f4dcc3b5aa765d61d8327deb882cf99\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef string_to_md5(text)\n  require 'digest'\n  return Digest::MD5.hexdigest(text) unless text.nil? || text.empty?\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub string_to_md5 {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "pl",
    "prompt": "sub car_race_collision {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n        if(eq_deeply($candidate->(2),4) || $candidate->(2)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),9) || $candidate->(3)==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16) || $candidate->(4)==16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64) || $candidate->(8)==64) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100) || $candidate->(10)==100) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef car_race_collision(n)\n  n**2\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub car_race_collision {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "pl",
    "prompt": "sub is_simple_power {\n    my($x, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n        if(eq_deeply($candidate->(16, 2),1) || $candidate->(16, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\") || $candidate->(143214, 16)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),1) || $candidate->(4, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),1) || $candidate->(9, 3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 4),1) || $candidate->(16, 4)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24, 2),\"\") || $candidate->(24, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(128, 4),\"\") || $candidate->(128, 4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\") || $candidate->(12, 6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1),1) || $candidate->(1, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 12),1) || $candidate->(1, 12)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_simple_power(x, n)\n  return x == 1 if n == 1\n  power = 1\n  power *= n while power < x\n  power == x\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_simple_power {\n    my($x, $n) = @_;\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "pl",
    "prompt": "sub encode {\n    my($message) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\") || $candidate->(\"TEST\")==\"tgst\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\") || $candidate->(\"Mudasir\")==\"mWDCSKR\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\") || $candidate->(\"YES\")==\"ygs\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\") || $candidate->(\"This is a message\")==\"tHKS KS C MGSSCGG\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\") || $candidate->(\"I DoNt KnOw WhAt tO WrItE\")==\"k dQnT kNqW wHcT Tq wRkTg\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef encode(message)\n  vowels = \"aeiouAEIOU\"\n  vowels_replace = Hash[vowels.chars.map { |i| [i, (i.ord + 2).chr] }]\n  message.swapcase.gsub(/[aeiou]/i, vowels_replace)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub encode {\n    my($message) = @_;\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "pl",
    "prompt": "sub incr_list {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]) || $candidate->([3, 2, 1])==[4, 3, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]) || $candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123])==[6, 3, 6, 3, 4, 4, 10, 1, 124]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef incr_list(l)\n  l.map { |e| e + 1 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub incr_list {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "pl",
    "prompt": "sub flip_case {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\") || $candidate->(\"Hello!\")==\"hELLO!\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") || $candidate->(\"These violent delights have violent ends\")==\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef flip_case(string)\n  string.swapcase\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub flip_case {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "pl",
    "prompt": "sub vowels_count {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n        if(eq_deeply($candidate->(\"abcde\"),2) || $candidate->(\"abcde\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3) || $candidate->(\"Alone\")==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"key\"),2) || $candidate->(\"key\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bye\"),1) || $candidate->(\"bye\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2) || $candidate->(\"keY\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bYe\"),1) || $candidate->(\"bYe\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ACEDY\"),3) || $candidate->(\"ACEDY\")==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef vowels_count(s)\n  vowels = \"aeiouAEIOU\"\n  n_vowels = s.count(vowels)\n  n_vowels += 1 if s[-1] == 'y' || s[-1] == 'Y'\n  n_vowels\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub vowels_count {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "pl",
    "prompt": "sub sorted_list_sum {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"]) || $candidate->([\"aa\", \"a\", \"aaa\"])==[\"aa\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]) || $candidate->([\"school\", \"AI\", \"asdf\", \"b\"])==[\"AI\", \"asdf\", \"school\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"b\", \"c\", \"a\"]),[]) || $candidate->([\"d\", \"b\", \"c\", \"a\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]) || $candidate->([\"d\", \"dcba\", \"abcd\", \"a\"])==[\"abcd\", \"dcba\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]) || $candidate->([\"AI\", \"ai\", \"au\"])==[\"AI\", \"ai\", \"au\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]) || $candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]) || $candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"])==[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef sorted_list_sum(lst)\n  new_lst = lst.select { |i| i.length.even? }.sort\n  new_lst.sort_by(&:length)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sorted_list_sum {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "pl",
    "prompt": "sub words_string {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]) || $candidate->(\"Hi, my name is John\")==[\"Hi\", \"my\", \"name\", \"is\", \"John\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) || $candidate->(\"One, two, three, four, five, six\")==[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]) || $candidate->(\"Hi, my name\")==[\"Hi\", \"my\", \"name\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) || $candidate->(\"One,, two, three, four, five, six,\")==[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]) || $candidate->(\"ahmed     , gamal\")==[\"ahmed\", \"gamal\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef words_string(s)\n  s.split(',').join(' ').split\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub words_string {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "pl",
    "prompt": "sub even_odd_palindrome {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n        if(eq_deeply($candidate->(123),[8, 13]) || $candidate->(123)==[8, 13]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6]) || $candidate->(12)==[4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2]) || $candidate->(3)==[1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6, 8]) || $candidate->(63)==[6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5, 6]) || $candidate->(25)==[5, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4, 6]) || $candidate->(19)==[4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4, 5]) || $candidate->(9)==[4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0, 1]) || $candidate->(1)==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef even_odd_palindrome(n)\n  def is_palindrome(n)\n    n.to_s == n.to_s.reverse\n  end\n\n  even_palindrome_count = 0\n  odd_palindrome_count = 0\n\n  (1..n).each do |i|\n    if i.odd? && is_palindrome(i)\n      odd_palindrome_count += 1\n    elsif i.even? && is_palindrome(i)\n      even_palindrome_count += 1\n    end\n  end\n\n  [even_palindrome_count, odd_palindrome_count]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub even_odd_palindrome {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "pl",
    "prompt": "sub triangle_area {\n    my($a, $b, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(3, 4, 5),6.0) || $candidate->(3, 4, 5)==6.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 10),-1) || $candidate->(1, 2, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 5),8.18) || $candidate->(4, 8, 5)==8.18) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),1.73) || $candidate->(2, 2, 2)==1.73) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),-1) || $candidate->(1, 2, 3)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),16.25) || $candidate->(10, 5, 7)==16.25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 3),-1) || $candidate->(2, 6, 3)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),0.43) || $candidate->(1, 1, 1)==0.43) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),-1) || $candidate->(2, 2, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef triangle_area(a, b, c)\n  return -1 if a + b <= c || a + c <= b || b + c <= a\n  s = (a + b + c) / 2.0\n  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n  area.round(2)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub triangle_area {\n    my($a, $b, $c) = @_;\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "pl",
    "prompt": "sub tri {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n        if(eq_deeply($candidate->(3),[1, 3, 2, 8]) || $candidate->(3)==[1, 3, 2, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3]) || $candidate->(4)==[1, 3, 2, 8, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15]) || $candidate->(5)==[1, 3, 2, 8, 3, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4]) || $candidate->(6)==[1, 3, 2, 8, 3, 15, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24]) || $candidate->(7)==[1, 3, 2, 8, 3, 15, 4, 24]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]) || $candidate->(8)==[1, 3, 2, 8, 3, 15, 4, 24, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]) || $candidate->(9)==[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]) || $candidate->(20)==[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1]) || $candidate->(0)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1, 3]) || $candidate->(1)==[1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef tri(n)\n  return [1] if n == 0\n  my_tri = [1, 3]\n  (2..n).each do |i|\n    if i.even?\n      my_tri << i / 2 + 1\n    else\n      my_tri << my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2\n    end\n  end\n  my_tri\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub tri {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "pl",
    "prompt": "sub median {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3) || $candidate->([3, 1, 2, 4, 5])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0) || $candidate->([-10, 4, 6, 1000, 10, 20])==8.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),5) || $candidate->([5])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5) || $candidate->([6, 5])==5.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7) || $candidate->([8, 1, 3, 9, 9, 2, 7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef median(l)\n  l = l.sort\n  if l.size.odd?\n    l[l.size / 2]\n  else\n    (l[l.size / 2 - 1] + l[l.size / 2]) / 2.0\n  end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub median {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "pl",
    "prompt": "sub change_base {\n    my($x, $base) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n        if(eq_deeply($candidate->(8, 3),\"22\") || $candidate->(8, 3)==\"22\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\") || $candidate->(9, 3)==\"100\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234, 2),\"11101010\") || $candidate->(234, 2)==\"11101010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 2),\"10000\") || $candidate->(16, 2)==\"10000\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\") || $candidate->(8, 2)==\"1000\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 2),\"111\") || $candidate->(7, 2)==\"111\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),\"2\") || $candidate->(2, 3)==\"2\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\") || $candidate->(3, 4)==\"3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),\"4\") || $candidate->(4, 5)==\"4\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),\"5\") || $candidate->(5, 6)==\"5\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\") || $candidate->(6, 7)==\"6\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 8),\"7\") || $candidate->(7, 8)==\"7\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef change_base(x, base)\n  ret = \"\"\n  while x > 0\n    ret = \"#{x % base}#{ret}\"\n    x /= base\n  end\n  ret\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub change_base {\n    my($x, $base) = @_;\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "pl",
    "prompt": "sub longest {\n    my($strings) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n        if(eq_deeply($candidate->([]),undef) || $candidate->([])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"x\") || $candidate->([\"x\", \"y\", \"z\"])==\"x\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\") || $candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"])==\"zzzz\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef longest(strings)\n  strings.max_by(&:length)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub longest {\n    my($strings) = @_;\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "pl",
    "prompt": "sub sort_array {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]) || $candidate->([1, 5, 2, 3, 4])==[1, 2, 4, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]) || $candidate->([-2, -3, -4, -5, -6])==[-4, -2, -6, -5, -3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]) || $candidate->([1, 0, 2, 3, 4])==[0, 1, 2, 4, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]) || $candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])==[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]) || $candidate->([3, 6, 44, 12, 32, 5])==[32, 3, 5, 6, 12, 44]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]) || $candidate->([2, 4, 8, 16, 32])==[2, 4, 8, 16, 32]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]) || $candidate->([2, 4, 8, 16, 32])==[2, 4, 8, 16, 32]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sort_array {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "pl",
    "prompt": "sub common {\n    my($l1, $l2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]) || $candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])==[1, 5, 653]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3]) || $candidate->([5, 3, 2, 8], [3, 2])==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]) || $candidate->([4, 3, 2, 8], [3, 2, 4])==[2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[]) || $candidate->([4, 3, 2, 8], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef common(l1, l2)\n  ret = []\n  l1.each do |e1|\n    l2.each do |e2|\n      if e1 == e2\n        ret << e1\n      end\n    end\n  end\n  ret.uniq.sort\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub common {\n    my($l1, $l2) = @_;\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "pl",
    "prompt": "sub cycpattern_check {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cycpattern_check;\n        if(eq_deeply($candidate->(\"xyzw\", \"xyw\"),\"\") || $candidate->(\"xyzw\", \"xyw\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"yello\", \"ell\"),1) || $candidate->(\"yello\", \"ell\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"whattup\", \"ptut\"),\"\") || $candidate->(\"whattup\", \"ptut\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"efef\", \"fee\"),1) || $candidate->(\"efef\", \"fee\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abab\", \"aabb\"),\"\") || $candidate->(\"abab\", \"aabb\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"winemtt\", \"tinem\"),1) || $candidate->(\"winemtt\", \"tinem\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef cycpattern_check(a, b)\n  l = b.length\n  pat = b + b\n  (0..a.length-l).each do |i|\n    (0..l).each do |j|\n      return true if a[i, l] == pat[j, l]\n    end\n  end\n  false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub cycpattern_check {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "pl",
    "prompt": "sub minSubArraySum {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minSubArraySum;\n        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1) || $candidate->([2, 3, 4, 1, 2, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3]),-6) || $candidate->([-1, -2, -3])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14) || $candidate->([-1, -2, -3, 2, -10])==-14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999) || $candidate->([-9999999999999999])==-9999999999999999) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0) || $candidate->([0, 10, 20, 1000000])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6) || $candidate->([-1, -2, -3, 10, -5])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6) || $candidate->([100, -1, -2, -3, 10, -5])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3) || $candidate->([10, 11, 13, 8, 3, 4])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33) || $candidate->([100, -33, 32, -1, 0, -2])==-33) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10]),-10) || $candidate->([-10])==-10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7]),7) || $candidate->([7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1]),-1) || $candidate->([1, -1])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef minSubArraySum(nums)\n  max_sum = 0\n  s = 0\n  nums.each do |num|\n    s += -num\n    s = 0 if s < 0\n    max_sum = [s, max_sum].max\n  end\n  max_sum = nums.map { |i| -i }.max if max_sum == 0\n  min_sum = -max_sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub minSubArraySum {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "pl",
    "prompt": "sub sort_array {\n    my($array) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]) || $candidate->([5])==[5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]) || $candidate->([2, 4, 3, 0, 1, 5])==[0, 1, 2, 3, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]) || $candidate->([2, 4, 3, 0, 1, 5, 6])==[6, 5, 4, 3, 2, 1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1]),[1, 2]) || $candidate->([2, 1])==[1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]) || $candidate->([15, 42, 87, 32, 11, 0])==[0, 11, 15, 32, 42, 87]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11]) || $candidate->([21, 14, 23, 11])==[23, 21, 14, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef sort_array(array)\n  array.empty? ? [] : array.sort_by { |x| (array[0] + array[-1]) % 2 == 0 ? -x : x }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sort_array {\n    my($array) = @_;\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "pl",
    "prompt": "sub histogram {\n    my($test) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2}) || $candidate->(\"a b b a\")=={\"a\" => 2, \"b\" => 2}) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2}) || $candidate->(\"a b c a b\")=={\"a\" => 2, \"b\" => 2}) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1}) || $candidate->(\"a b c d g\")=={\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1}) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}) || $candidate->(\"r t g\")=={\"r\" => 1, \"t\" => 1, \"g\" => 1}) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}) || $candidate->(\"b b b b a\")=={\"b\" => 4}) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}) || $candidate->(\"r t g\")=={\"r\" => 1, \"t\" => 1, \"g\" => 1}) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{}) || $candidate->(\"\")=={}) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),{\"a\" => 1}) || $candidate->(\"a\")=={\"a\" => 1}) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef histogram(test)\n  dict1 = {}\n  list1 = test.split(' ')\n  t = 0\n\n  list1.each do |i|\n    t = list1.count(i) if list1.count(i) > t && i != ''\n  end\n\n  if t > 0\n    list1.each do |i|\n      dict1[i] = t if list1.count(i) == t\n    end\n  end\n\n  dict1\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub histogram {\n    my($test) = @_;\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "pl",
    "prompt": "sub get_odd_collatz {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_odd_collatz;\n        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17]) || $candidate->(14)==[1, 5, 7, 11, 13, 17]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 5]) || $candidate->(5)==[1, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[1, 3, 5]) || $candidate->(12)==[1, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1]) || $candidate->(1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef get_odd_collatz(n)\n  odd_collatz = n.odd? ? [n] : []\n  while n > 1\n    n = n.even? ? n/2 : n*3 + 1\n    odd_collatz << n if n.odd?\n  end\n  odd_collatz.sort\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub get_odd_collatz {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "pl",
    "prompt": "sub derivative {\n    my($xs) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20]) || $candidate->([3, 1, 2, 4, 5])==[1, 4, 12, 20]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 6]) || $candidate->([1, 2, 3])==[2, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[2, 2]) || $candidate->([3, 2, 1])==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16]) || $candidate->([3, 2, 1, 0, 4])==[2, 2, 0, 16]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),[]) || $candidate->([1])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef derivative(xs)\n  (1..xs.length-1).map { |i| i * xs[i] }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub derivative {\n    my($xs) = @_;\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "pl",
    "prompt": "sub fibfib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n        if(eq_deeply($candidate->(2),1) || $candidate->(2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),0) || $candidate->(1)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4) || $candidate->(5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24) || $candidate->(8)==24) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81) || $candidate->(10)==81) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274) || $candidate->(12)==274) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927) || $candidate->(14)==927) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef fibfib(n)\n  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fibfib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "pl",
    "prompt": "sub truncate_number {\n    my($number) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5) || $candidate->(3.5)==0.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25) || $candidate->(1.25)==0.25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0) || $candidate->(123.0)==0.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef truncate_number(number)\n  number % 1.0\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub truncate_number {\n    my($number) = @_;\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "pl",
    "prompt": "sub max_element {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n        if(eq_deeply($candidate->([1, 2, 3]),3) || $candidate->([1, 2, 3])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124) || $candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])==124) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef max_element(l)\n  l.max\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub max_element {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "pl",
    "prompt": "sub closest_integer {\n    my($value) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10) || $candidate->(\"10\")==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15) || $candidate->(\"14.5\")==15) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16) || $candidate->(\"-15.5\")==-16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15) || $candidate->(\"15.3\")==15) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0) || $candidate->(\"0\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef closest_integer(value)\n  num = value.to_f\n  if value[-2..-1] == '.5'\n    num > 0 ? num.ceil : num.floor\n  elsif value.length > 0\n    num.round\n  else\n    0\n  end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub closest_integer {\n    my($value) = @_;\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "pl",
    "prompt": "sub prime_fib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n        if(eq_deeply($candidate->(1),2) || $candidate->(1)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),3) || $candidate->(2)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5) || $candidate->(3)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13) || $candidate->(4)==13) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89) || $candidate->(5)==89) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233) || $candidate->(6)==233) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597) || $candidate->(7)==1597) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657) || $candidate->(8)==28657) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229) || $candidate->(9)==514229) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437) || $candidate->(10)==433494437) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef prime_fib(n)\n    require 'prime'\n    f = [0, 1]\n    while true\n        f << f[-1] + f[-2]\n        if f[-1].prime?\n            n -= 1\n        end\n        if n == 0\n            return f[-1]\n        end\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub prime_fib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "pl",
    "prompt": "sub sum_product {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n        if(eq_deeply($candidate->([]),[0, 1]) || $candidate->([])==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1]) || $candidate->([1, 1, 1])==[3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 0]),[100, 0]) || $candidate->([100, 0])==[100, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 7]),[15, 105]) || $candidate->([3, 5, 7])==[15, 105]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10, 10]) || $candidate->([10])==[10, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef sum_product(numbers)\n  sum_value = 0\n  prod_value = 1\n\n  numbers.each do |n|\n    sum_value += n\n    prod_value *= n\n  end\n\n  [sum_value, prod_value]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sum_product {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "pl",
    "prompt": "sub select_words {\n    my($s, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"]) || $candidate->(\"Mary had a little lamb\", 4)==[\"little\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]) || $candidate->(\"Mary had a little lamb\", 3)==[\"Mary\", \"lamb\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]) || $candidate->(\"simple white space\", 2)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"]) || $candidate->(\"Hello world\", 4)==[\"world\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"]) || $candidate->(\"Uncle sam\", 3)==[\"Uncle\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\", 4),[]) || $candidate->(\"\", 4)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]) || $candidate->(\"a b c d e f\", 1)==[\"b\", \"c\", \"d\", \"f\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef select_words(s, n)\n  s.split.select { |word| word.downcase.count(\"^aeiou\") == n }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub select_words {\n    my($s, $n) = @_;\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "pl",
    "prompt": "sub add_elements {\n    my($arr, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_elements;\n        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4) || $candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)==-4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0) || $candidate->([111, 121, 3, 4000, 5, 6], 2)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125) || $candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)==125) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24) || $candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)==24) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1], 1),1) || $candidate->([1], 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef add_elements(arr, k)\n  arr.take(k).select { |x| x.to_s.length <= 2 }.sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub add_elements {\n    my($arr, $k) = @_;\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "pl",
    "prompt": "sub eat {\n    my($number, $need, $remaining) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n        if(eq_deeply($candidate->(5, 6, 10),[11, 4]) || $candidate->(5, 6, 10)==[11, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1]) || $candidate->(4, 8, 9)==[12, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 10, 10),[11, 0]) || $candidate->(1, 10, 10)==[11, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 11, 5),[7, 0]) || $candidate->(2, 11, 5)==[7, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2]) || $candidate->(4, 5, 7)==[9, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 1),[5, 0]) || $candidate->(4, 5, 1)==[5, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef eat(number, need, remaining)\n  if need <= remaining\n    [number + need, remaining - need]\n  else\n    [number + remaining, 0]\n  end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub eat {\n    my($number, $need, $remaining) = @_;\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "pl",
    "prompt": "sub odd_count {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_count;\n        if(eq_deeply($candidate->([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]) || $candidate->([\"1234567\"])==[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]) || $candidate->([\"3\", \"11111111\"])==[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]) || $candidate->([\"271\", \"137\", \"314\"])==[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef odd_count(lst)\n  res = []\n  lst.each do |arr|\n    n = arr.chars.count { |d| d.to_i.odd? }\n    res << \"the number of odd elements #{n}n the str#{n}ng #{n} of the #{n}nput.\"\n  end\n  res\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub odd_count {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "pl",
    "prompt": "sub next_smallest {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2) || $candidate->([1, 2, 3, 4, 5])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2) || $candidate->([5, 1, 4, 3, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef) || $candidate->([])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef) || $candidate->([1, 1])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1) || $candidate->([1, 1, 1, 1, 0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef) || $candidate->([1, 1])==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35) || $candidate->([-35, 34, 12, -45])==-35) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef next_smallest(lst)\n  lst = lst.uniq.sort\n  lst[1]\nrescue\n  nil\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub next_smallest {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "pl",
    "prompt": "sub filter_by_prefix {\n    my($strings, $prefix) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[]) || $candidate->([], \"john\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]) || $candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")==[\"xxx\", \"xxxAAA\", \"xxx\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef filter_by_prefix(strings, prefix)\n  strings.select { |x| x.start_with?(prefix) }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "pl",
    "prompt": "sub choose_num {\n    my($x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n        if(eq_deeply($candidate->(12, 15),14) || $candidate->(12, 15)==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1) || $candidate->(13, 12)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33, 12354),12354) || $candidate->(33, 12354)==12354) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5234, 5233),-1) || $candidate->(5234, 5233)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28) || $candidate->(6, 29)==28) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27, 10),-1) || $candidate->(27, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 7),-1) || $candidate->(7, 7)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546) || $candidate->(546, 546)==546) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef choose_num(x, y)\n  return -1 if x > y\n  return y if y.even?\n  return -1 if x == y\n  y - 1\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub choose_num {\n    my($x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "pl",
    "prompt": "sub prime_length {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n        if(eq_deeply($candidate->(\"Hello\"),1) || $candidate->(\"Hello\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1) || $candidate->(\"abcdcba\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"kittens\"),1) || $candidate->(\"kittens\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"orange\"),\"\") || $candidate->(\"orange\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1) || $candidate->(\"wow\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"world\"),1) || $candidate->(\"world\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MadaM\"),1) || $candidate->(\"MadaM\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1) || $candidate->(\"Wow\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"HI\"),1) || $candidate->(\"HI\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1) || $candidate->(\"go\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gogo\"),\"\") || $candidate->(\"gogo\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\") || $candidate->(\"aaaaaaaaaaaaaaa\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"),1) || $candidate->(\"Madam\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"M\"),\"\") || $candidate->(\"M\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),\"\") || $candidate->(\"0\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef prime_length(string)\n  l = string.length\n  return false if l == 0 || l == 1\n  (2...l).none? { |i| l % i == 0 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub prime_length {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "pl",
    "prompt": "sub sum_to_n {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),21) || $candidate->(6)==21) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66) || $candidate->(11)==66) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465) || $candidate->(30)==465) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050) || $candidate->(100)==5050) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef sum_to_n(n)\n  (0..n).sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sum_to_n {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "pl",
    "prompt": "sub fix_spaces {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fix_spaces;\n        if(eq_deeply($candidate->(\"Example\"),\"Example\") || $candidate->(\"Example\")==\"Example\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir Hanif \"),\"Mudasir_Hanif_\") || $candidate->(\"Mudasir Hanif \")==\"Mudasir_Hanif_\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\") || $candidate->(\"Yellow Yellow  Dirty  Fellow\")==\"Yellow_Yellow__Dirty__Fellow\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Exa   mple\"),\"Exa-mple\") || $candidate->(\"Exa   mple\")==\"Exa-mple\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\") || $candidate->(\"   Exa 1 2 2 mple\")==\"-Exa_1_2_2_mple\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef fix_spaces(text)\n  new_text = \"\"\n  i = 0\n  start, ending = 0, 0\n\n  while i < text.length\n    if text[i] == \" \"\n      ending += 1\n    else\n      if ending - start > 2\n        new_text += \"-#{text[i]}\"\n      elsif ending - start > 0\n        new_text += \"_\"*(ending - start)+text[i]\n      else\n        new_text += text[i]\n      end\n      start, ending = i+1, i+1\n    end\n    i += 1\n  end\n\n  if ending - start > 2\n    new_text += \"-\"\n  elsif ending - start > 0\n    new_text += \"_\"\n  end\n\n  new_text\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fix_spaces {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "pl",
    "prompt": "sub rolling_max {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4]) || $candidate->([1, 2, 3, 4])==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4]) || $candidate->([4, 3, 2, 1])==[4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]) || $candidate->([3, 2, 3, 100, 3])==[3, 3, 3, 100, 100]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef rolling_max(numbers)\n  running_max = nil\n  result = []\n\n  numbers.each do |n|\n    running_max = n if running_max.nil?\n    running_max = [running_max, n].max\n    result << running_max\n  end\n\n  result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub rolling_max {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "pl",
    "prompt": "sub words_in_sentence {\n    my($sentence) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_in_sentence;\n        if(eq_deeply($candidate->(\"This is a test\"),\"is\") || $candidate->(\"This is a test\")==\"is\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lets go for swimming\"),\"go for\") || $candidate->(\"lets go for swimming\")==\"go for\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"there is no place available here\"),\"there is no place\") || $candidate->(\"there is no place available here\")==\"there is no place\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi I am Hussein\"),\"Hi am Hussein\") || $candidate->(\"Hi I am Hussein\")==\"Hi am Hussein\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go for it\"),\"go for it\") || $candidate->(\"go for it\")==\"go for it\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here\"),\"\") || $candidate->(\"here\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here is\"),\"is\") || $candidate->(\"here is\")==\"is\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef words_in_sentence(sentence)\n  new_lst = []\n  sentence.split.each do |word|\n    flg = 0\n    flg = 1 if word.length == 1\n    (2...word.length).each do |i|\n      flg = 1 if word.length % i == 0\n    end\n    new_lst << word if flg == 0 || word.length == 2\n  end\n  new_lst.join(' ')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub words_in_sentence {\n    my($sentence) = @_;\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "pl",
    "prompt": "sub get_closest_vowel {\n    my($word) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\") || $candidate->(\"yogurt\")==\"u\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"),\"u\") || $candidate->(\"full\")==\"u\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"),\"\") || $candidate->(\"easy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\") || $candidate->(\"eAsy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\") || $candidate->(\"ali\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bad\"),\"a\") || $candidate->(\"bad\")==\"a\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\") || $candidate->(\"most\")==\"o\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\") || $candidate->(\"ab\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ba\"),\"\") || $candidate->(\"ba\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\") || $candidate->(\"quick\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\") || $candidate->(\"anime\")==\"i\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Asia\"),\"\") || $candidate->(\"Asia\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\") || $candidate->(\"Above\")==\"o\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef get_closest_vowel(word)\n  return \"\" if word.length < 3\n\n  vowels = %w[a e i o u A E O U I]\n  (word.length-2).downto(1) do |i|\n    if vowels.include?(word[i])\n      return word[i] if !vowels.include?(word[i-1]) && !vowels.include?(word[i+1])\n    end\n  end\n\n  \"\"\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub get_closest_vowel {\n    my($word) = @_;\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "pl",
    "prompt": "sub compare {\n    my($game, $guess) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]) || $candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])==[0, 0, 0, 0, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]) || $candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])==[0, 0, 0, 0, 0, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6]) || $candidate->([1, 2, 3], [-1, -2, -3])==[2, 4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]) || $candidate->([1, 2, 3, 5], [-1, 2, 3, 4])==[2, 0, 0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef compare(game, guess)\n  game.zip(guess).map { |x,y| (x-y).abs }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub compare {\n    my($game, $guess) = @_;\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "pl",
    "prompt": "sub remove_duplicates {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4]) || $candidate->([1, 2, 3, 4])==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]) || $candidate->([1, 2, 3, 2, 4, 3, 5])==[1, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef remove_duplicates(numbers)\n  numbers.select { |n| numbers.count(n) <= 1 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub remove_duplicates {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "pl",
    "prompt": "sub parse_nested_parens {\n    my($paren_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]) || $candidate->(\"(()()) ((())) () ((())()())\")==[2, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]) || $candidate->(\"() (()) ((())) (((())))\")==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4]) || $candidate->(\"(()(())((())))\")==[4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef parse_nested_parens(paren_string)\n  paren_string.split.map do |s|\n    depth = 0\n    max_depth = 0\n    s.each_char do |c|\n      if c == '('\n        depth += 1\n        max_depth = [depth, max_depth].max\n      else\n        depth -= 1\n      end\n    end\n    max_depth\n  end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub parse_nested_parens {\n    my($paren_string) = @_;\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "pl",
    "prompt": "sub even_odd_count {\n    my($num) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n        if(eq_deeply($candidate->(7),[0, 1]) || $candidate->(7)==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1]) || $candidate->(-78)==[1, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2, 2]) || $candidate->(3452)==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3, 3]) || $candidate->(346211)==[3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3, 3]) || $candidate->(-345821)==[3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1, 0]) || $candidate->(-2)==[1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2, 3]) || $candidate->(-45347)==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1, 0]) || $candidate->(0)==[1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef even_odd_count(num)\n  even_count = 0\n  odd_count = 0\n  num.abs.to_s.each_char do |i|\n    if i.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub even_odd_count {\n    my($num) = @_;\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "pl",
    "prompt": "sub fruit_distribution {\n    my($s, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8) || $candidate->(\"5 apples and 6 oranges\", 19)==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 21),10) || $candidate->(\"5 apples and 6 oranges\", 21)==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2) || $candidate->(\"0 apples and 1 oranges\", 3)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 0 oranges\", 3),2) || $candidate->(\"1 apples and 0 oranges\", 3)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95) || $candidate->(\"2 apples and 3 oranges\", 100)==95) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 5),0) || $candidate->(\"2 apples and 3 oranges\", 5)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19) || $candidate->(\"1 apples and 100 oranges\", 120)==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef fruit_distribution(s, n)\n  lis = s.split.map(&:to_i)\n  n - lis.sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fruit_distribution {\n    my($s, $n) = @_;\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "pl",
    "prompt": "sub string_xor {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\") || $candidate->(\"111000\", \"101010\")==\"010010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"1\"),\"0\") || $candidate->(\"1\", \"1\")==\"0\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\") || $candidate->(\"0101\", \"0000\")==\"0101\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef string_xor(a, b)\n  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub string_xor {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "pl",
    "prompt": "sub strlen {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1) || $candidate->(\"x\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdasnakj\"),9) || $candidate->(\"asdasnakj\")==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef strlen(string)\n  string.length\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub strlen {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "pl",
    "prompt": "sub string_sequence {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n        if(eq_deeply($candidate->(0),\"0\") || $candidate->(0)==\"0\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\") || $candidate->(3)==\"0 1 2 3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"0 1 2 3 4 5 6 7 8 9 10\") || $candidate->(10)==\"0 1 2 3 4 5 6 7 8 9 10\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef string_sequence(n)\n  (0..n).to_a.join(' ')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub string_sequence {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "pl",
    "prompt": "sub file_name_check {\n    my($file_name) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&file_name_check;\n        if(eq_deeply($candidate->(\"example.txt\"),\"Yes\") || $candidate->(\"example.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1example.dll\"),\"No\") || $candidate->(\"1example.dll\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s1sdf3.asd\"),\"No\") || $candidate->(\"s1sdf3.asd\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K.dll\"),\"Yes\") || $candidate->(\"K.dll\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MY16FILE3.exe\"),\"Yes\") || $candidate->(\"MY16FILE3.exe\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"His12FILE94.exe\"),\"No\") || $candidate->(\"His12FILE94.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_Y.txt\"),\"No\") || $candidate->(\"_Y.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"?aREYA.exe\"),\"No\") || $candidate->(\"?aREYA.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"/this_is_valid.dll\"),\"No\") || $candidate->(\"/this_is_valid.dll\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.wow\"),\"No\") || $candidate->(\"this_is_valid.wow\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txt\"),\"Yes\") || $candidate->(\"this_is_valid.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txtexe\"),\"No\") || $candidate->(\"this_is_valid.txtexe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#this2_i4s_5valid.ten\"),\"No\") || $candidate->(\"#this2_i4s_5valid.ten\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"@this1_is6_valid.exe\"),\"No\") || $candidate->(\"@this1_is6_valid.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_12valid.6exe4.txt\"),\"No\") || $candidate->(\"this_is_12valid.6exe4.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"all.exe.txt\"),\"No\") || $candidate->(\"all.exe.txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_No.exe\"),\"Yes\") || $candidate->(\"I563_No.exe\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is3youfault.txt\"),\"Yes\") || $candidate->(\"Is3youfault.txt\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"no_one#knows.dll\"),\"Yes\") || $candidate->(\"no_one#knows.dll\")==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1I563_Yes3.exe\"),\"No\") || $candidate->(\"1I563_Yes3.exe\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_Yes3.txtt\"),\"No\") || $candidate->(\"I563_Yes3.txtt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final..txt\"),\"No\") || $candidate->(\"final..txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final132\"),\"No\") || $candidate->(\"final132\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_f4indsartal132.\"),\"No\") || $candidate->(\"_f4indsartal132.\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".txt\"),\"No\") || $candidate->(\".txt\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s.\"),\"No\") || $candidate->(\"s.\")==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef file_name_check(file_name)\n  suf = ['txt', 'exe', 'dll']\n  lst = file_name.split('.')\n  return 'No' if lst.length != 2\n  return 'No' if !suf.include?(lst[1])\n  return 'No' if lst[0].length == 0 || !lst[0][0].match?(/[A-Za-z]/)\n  return 'No' if lst[0].count('0-9') > 3\n  'Yes'\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub file_name_check {\n    my($file_name) = @_;\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "pl",
    "prompt": "sub can_arrange {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3) || $candidate->([1, 2, 4, 3, 5])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5]),-1) || $candidate->([1, 2, 4, 5])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2) || $candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4) || $candidate->([4, 8, 5, 7, 3])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),-1) || $candidate->([])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef can_arrange(arr)\n  ind = -1\n  (1...arr.length).each do |i|\n    ind = i if arr[i] < arr[i-1]\n  end\n  ind\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub can_arrange {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "pl",
    "prompt": "sub add {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88) || $candidate->([4, 88])==88) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122) || $candidate->([4, 5, 6, 7, 2, 122])==122) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0) || $candidate->([4, 0, 6, 7])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12) || $candidate->([4, 4, 6, 8])==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef add(lst)\n  lst.each_slice(2).map(&:last).select(&:even?).sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub add {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "pl",
    "prompt": "sub intersperse {\n    my($numbers, $delimeter) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersperse;\n        if(eq_deeply($candidate->([], 7),[]) || $candidate->([], 7)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]) || $candidate->([5, 6, 3, 2], 8)==[5, 8, 6, 8, 3, 8, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2]) || $candidate->([2, 2, 2], 2)==[2, 2, 2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef intersperse(numbers, delimeter)\n  return [] if numbers.empty?\n  numbers[0..-2].flat_map { |n| [n, delimeter] } + [numbers[-1]]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "pl",
    "prompt": "sub match_parens {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\") || $candidate->([\"()(\", \")\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \")\"]),\"No\") || $candidate->([\")\", \")\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\") || $candidate->([\"(()(())\", \"())())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")())\", \"(()()(\"]),\"Yes\") || $candidate->([\")())\", \"(()()(\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\") || $candidate->([\"(())))\", \"(()())((\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"()\", \"())\"]),\"No\") || $candidate->([\"()\", \"())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\") || $candidate->([\"(()(\", \"()))()\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"((((\", \"((())\"]),\"No\") || $candidate->([\"((((\", \"((())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\") || $candidate->([\")(()\", \"(()(\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(\", \")(\"]),\"No\") || $candidate->([\")(\", \")(\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\") || $candidate->([\"(\", \")\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \"(\"]),\"Yes\") || $candidate->([\")\", \"(\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef match_parens(lst)\n  def check(s)\n    val = 0\n    s.each_char do |i|\n      if i == '('\n        val += 1\n      else\n        val -= 1\n      end\n      return false if val < 0\n    end\n    val == 0\n  end\n\n  s1 = lst[0] + lst[1]\n  s2 = lst[1] + lst[0]\n  check(s1) || check(s2) ? 'Yes' : 'No'\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub match_parens {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "pl",
    "prompt": "sub any_int {\n    my($x, $y, $z) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&any_int;\n        if(eq_deeply($candidate->(2, 3, 1),1) || $candidate->(2, 3, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.5, 2, 3),\"\") || $candidate->(2.5, 2, 3)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.5, 5, 3.5),\"\") || $candidate->(1.5, 5, 3.5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 2),\"\") || $candidate->(2, 6, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 2),1) || $candidate->(4, 2, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.2, 2.2, 2.2),\"\") || $candidate->(2.2, 2.2, 2.2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-4, 6, 2),1) || $candidate->(-4, 6, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 1, 1),1) || $candidate->(2, 1, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4, 7),1) || $candidate->(3, 4, 7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3.0, 4, 7),\"\") || $candidate->(3.0, 4, 7)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef any_int(x, y, z)\n  return false unless [x, y, z].all? { |n| n.is_a?(Integer) }\n  (x + y == z) || (x + z == y) || (y + z == x)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub any_int {\n    my($x, $y, $z) = @_;\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "pl",
    "prompt": "sub filter_by_substring {\n    my($strings, $substring) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_substring;\n        if(eq_deeply($candidate->([], \"john\"),[]) || $candidate->([], \"john\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]) || $candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")==[\"xxx\", \"xxxAAA\", \"xxx\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]) || $candidate->([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\")==[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]) || $candidate->([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\")==[\"grunt\", \"prune\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef filter_by_substring(strings, substring)\n  strings.select { |x| x.include? substring }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub filter_by_substring {\n    my($strings, $substring) = @_;\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "pl",
    "prompt": "sub find_max {\n    my($words) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\") || $candidate->([\"name\", \"of\", \"string\"])==\"string\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\") || $candidate->([\"name\", \"enam\", \"game\"])==\"enam\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\") || $candidate->([\"aaaaaaa\", \"bb\", \"cc\"])==\"aaaaaaa\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\") || $candidate->([\"abc\", \"cba\"])==\"abc\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\") || $candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"])==\"footbott\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\") || $candidate->([\"we\", \"are\", \"gonna\", \"rock\"])==\"gonna\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\") || $candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"])==\"nation\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\") || $candidate->([\"this\", \"is\", \"a\", \"prrk\"])==\"this\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\") || $candidate->([\"b\"])==\"b\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\") || $candidate->([\"play\", \"play\", \"play\"])==\"play\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef find_max(words)\n  words.sort_by { |x| [-x.chars.uniq.size, x] }[0]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub find_max {\n    my($words) = @_;\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "pl",
    "prompt": "sub generate_integers {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&generate_integers;\n        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8]) || $candidate->(2, 10)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8]) || $candidate->(10, 2)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8]) || $candidate->(132, 2)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 89),[]) || $candidate->(17, 89)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef generate_integers(a, b)\n  lower = [2, [a, b].min].max\n  upper = [8, [a, b].max].min\n  (lower..upper).select(&:even?)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub generate_integers {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "pl",
    "prompt": "sub exchange {\n    my($lst1, $lst2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\") || $candidate->([1, 2, 3, 4], [1, 2, 3, 4])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\") || $candidate->([1, 2, 3, 4], [1, 5, 3, 4])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\") || $candidate->([1, 2, 3, 4], [2, 1, 4, 3])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),\"YES\") || $candidate->([5, 7, 3], [2, 6, 4])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\") || $candidate->([5, 7, 3], [2, 6, 3])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\") || $candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200, 200]),\"YES\") || $candidate->([100, 200], [200, 200])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef exchange(lst1, lst2)\n  odd = lst1.count(&:odd?)\n  even = lst2.count(&:even?)\n  even >= odd ? \"YES\" : \"NO\"\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub exchange {\n    my($lst1, $lst2) = @_;\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "pl",
    "prompt": "sub int_to_mini_roman {\n    my($number) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n        if(eq_deeply($candidate->(19),\"xix\") || $candidate->(19)==\"xix\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\") || $candidate->(152)==\"clii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"ccli\") || $candidate->(251)==\"ccli\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"cdxxvi\") || $candidate->(426)==\"cdxxvi\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(500),\"d\") || $candidate->(500)==\"d\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\") || $candidate->(1)==\"i\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"iv\") || $candidate->(4)==\"iv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"xliii\") || $candidate->(43)==\"xliii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"xc\") || $candidate->(90)==\"xc\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"xciv\") || $candidate->(94)==\"xciv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"dxxxii\") || $candidate->(532)==\"dxxxii\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(900),\"cm\") || $candidate->(900)==\"cm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\") || $candidate->(994)==\"cmxciv\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"m\") || $candidate->(1000)==\"m\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef int_to_mini_roman(number)\n  num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n  i = 12\n  res = ''\n  while number > 0\n    div = number / num[i]\n    number %= num[i]\n    res += sym[i] * div\n    i -= 1\n  end\n  res.downcase\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub int_to_mini_roman {\n    my($number) = @_;\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "pl",
    "prompt": "sub is_equal_to_sum_even {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_equal_to_sum_even;\n        if(eq_deeply($candidate->(4),\"\") || $candidate->(4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),\"\") || $candidate->(6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1) || $candidate->(8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),1) || $candidate->(10)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),\"\") || $candidate->(11)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),1) || $candidate->(12)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),\"\") || $candidate->(13)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16),1) || $candidate->(16)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_equal_to_sum_even(n)\n  n%2 == 0 && n >= 8\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_equal_to_sum_even {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "pl",
    "prompt": "sub decimal_to_binary {\n    my($decimal) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(0),\"db0db\") || $candidate->(0)==\"db0db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),\"db100000db\") || $candidate->(32)==\"db100000db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(103),\"db1100111db\") || $candidate->(103)==\"db1100111db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),\"db1111db\") || $candidate->(15)==\"db1111db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef decimal_to_binary(decimal)\n  \"db#{decimal.to_s(2)}db\"\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub decimal_to_binary {\n    my($decimal) = @_;\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "pl",
    "prompt": "sub simplify {\n    my($x, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1) || $candidate->(\"1/5\", \"5/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\", \"2/1\"),\"\") || $candidate->(\"1/6\", \"2/1\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1) || $candidate->(\"5/1\", \"3/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\", \"10/2\"),\"\") || $candidate->(\"7/10\", \"10/2\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1) || $candidate->(\"2/10\", \"50/10\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\", \"4/2\"),1) || $candidate->(\"7/2\", \"4/2\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1) || $candidate->(\"11/6\", \"6/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\", \"5/2\"),\"\") || $candidate->(\"2/3\", \"5/2\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\") || $candidate->(\"5/2\", \"3/5\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"8/4\"),1) || $candidate->(\"2/4\", \"8/4\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1) || $candidate->(\"2/4\", \"4/2\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1) || $candidate->(\"1/5\", \"5/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"1/5\"),\"\") || $candidate->(\"1/5\", \"1/5\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef simplify(x, n)\n  a, b = x.split(\"/\")\n  c, d = n.split(\"/\")\n  numerator = a.to_i * c.to_i\n  denom = b.to_i * d.to_i\n  numerator / denom == numerator / denom.to_f\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub simplify {\n    my($x, $n) = @_;\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "pl",
    "prompt": "sub solve {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\") || $candidate->(\"AsDf\")==\"aSdF\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"),\"4321\") || $candidate->(\"1234\")==\"4321\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"AB\") || $candidate->(\"ab\")==\"AB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\") || $candidate->(\"#a@C\")==\"#A@c\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#AsdfW^45\"),\"#aSDFw^45\") || $candidate->(\"#AsdfW^45\")==\"#aSDFw^45\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\") || $candidate->(\"#6@2\")==\"2@6#\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#$a^D\"),\"#$A^d\") || $candidate->(\"#$a^D\")==\"#$A^d\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\") || $candidate->(\"#ccc\")==\"#CCC\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef solve(s)\n  flg = 0\n  idx = 0\n  new_str = s.chars\n  new_str.each do |i|\n    if i =~ /[a-zA-Z]/\n      new_str[idx] = i.swapcase\n      flg = 1\n    end\n    idx += 1\n  end\n  s = new_str.join\n  flg == 0 ? s.reverse : s\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub solve {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "pl",
    "prompt": "sub right_angle_triangle {\n    my($a, $b, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1) || $candidate->(3, 4, 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\") || $candidate->(1, 2, 3)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1) || $candidate->(10, 6, 8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\") || $candidate->(2, 2, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1) || $candidate->(7, 24, 25)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\") || $candidate->(10, 5, 7)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1) || $candidate->(5, 12, 13)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1) || $candidate->(15, 8, 17)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1) || $candidate->(48, 55, 73)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\") || $candidate->(1, 1, 1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\") || $candidate->(2, 2, 10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef right_angle_triangle(a, b, c)\n  a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "pl",
    "prompt": "sub compare_one {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare_one;\n        if(eq_deeply($candidate->(1, 2),2) || $candidate->(1, 2)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2.5),2.5) || $candidate->(1, 2.5)==2.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),3) || $candidate->(2, 3)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),6) || $candidate->(5, 6)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, \"2,3\"),\"2,3\") || $candidate->(1, \"2,3\")==\"2,3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5,1\", \"6\"),\"6\") || $candidate->(\"5,1\", \"6\")==\"6\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"2\"),\"2\") || $candidate->(\"1\", \"2\")==\"2\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", 1),undef) || $candidate->(\"1\", 1)==undef) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef compare_one(a, b)\n  temp_a, temp_b = a, b\n  temp_a = temp_a.tr(',', '.') if temp_a.is_a?(String)\n  temp_b = temp_b.tr(',', '.') if temp_b.is_a?(String)\n  return nil if temp_a.to_f == temp_b.to_f\n  temp_a.to_f > temp_b.to_f ? a : b\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub compare_one {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "pl",
    "prompt": "sub below_zero {\n    my($operations) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n        if(eq_deeply($candidate->([]),\"\") || $candidate->([])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),\"\") || $candidate->([1, 2, -3, 1, 2, -3])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1) || $candidate->([1, 2, -4, 5, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),\"\") || $candidate->([1, -1, 2, -2, 5, -5, 4, -4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1) || $candidate->([1, -1, 2, -2, 5, -5, 4, -5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1) || $candidate->([1, -2, 2, -2, 5, -5, 4, -4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef below_zero(operations)\n  balance = 0\n\n  operations.each do |op|\n    balance += op\n    return true if balance < 0\n  end\n\n  false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub below_zero {\n    my($operations) = @_;\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "pl",
    "prompt": "sub greatest_common_divisor {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&greatest_common_divisor;\n        if(eq_deeply($candidate->(3, 7),1) || $candidate->(3, 7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 15),5) || $candidate->(10, 15)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49, 14),7) || $candidate->(49, 14)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(144, 60),12) || $candidate->(144, 60)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef greatest_common_divisor(a, b)\n  a, b = b, a % b while b > 0\n  a\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "pl",
    "prompt": "sub f {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15]) || $candidate->(5)==[1, 2, 6, 24, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28]) || $candidate->(7)==[1, 2, 6, 24, 15, 720, 28]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1]) || $candidate->(1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2, 6]) || $candidate->(3)==[1, 2, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef f(n)\n  (1..n).map { |i| i.even? ? (1..i).reduce(:*) : (1..i).reduce(:+) }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub f {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "pl",
    "prompt": "sub monotonic {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1) || $candidate->([1, 2, 4, 10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1) || $candidate->([1, 2, 4, 20])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\") || $candidate->([1, 20, 4, 10])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 0, -10]),1) || $candidate->([4, 1, 0, -10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1, 0]),1) || $candidate->([4, 1, 1, 0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\") || $candidate->([1, 2, 3, 2, 5, 60])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1) || $candidate->([1, 2, 3, 4, 5, 60])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1) || $candidate->([9, 9, 9, 9])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef monotonic(l)\n  l == l.sort || l == l.sort.reverse\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub monotonic {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "pl",
    "prompt": "sub by_length {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]) || $candidate->([2, 1, 1, 4, 5, 8, 2, 3])==[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 55]),[\"One\"]) || $candidate->([1, -1, 55])==[\"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]) || $candidate->([1, -1, 3, 2])==[\"Three\", \"Two\", \"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]) || $candidate->([9, 4, 8])==[\"Nine\", \"Eight\", \"Four\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef by_length(arr)\n  dic = {\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\",\n  }\n  arr.sort.reverse.map { |x| dic[x] }.compact\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub by_length {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "pl",
    "prompt": "sub remove_vowels {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"),\"bcdf\nghjklm\") || $candidate->(\"abcdef\nghijklm\")==\"bcdf\nghjklm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\") || $candidate->(\"fedcba\")==\"fdcb\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\") || $candidate->(\"eeeee\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"acBAA\"),\"cB\") || $candidate->(\"acBAA\")==\"cB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\") || $candidate->(\"EcBOO\")==\"cB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"),\"ybcd\") || $candidate->(\"ybcd\")==\"ybcd\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef remove_vowels(text)\n  text.delete('aeiouAEIOU')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub remove_vowels {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "pl",
    "prompt": "sub iscube {\n    my($a) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\") || $candidate->(2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1) || $candidate->(-1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1) || $candidate->(64)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\") || $candidate->(180)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1) || $candidate->(1000)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1) || $candidate->(0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\") || $candidate->(1729)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef iscube(a)\n  (a.abs ** (1.0 / 3)).round ** 3 == a.abs\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub iscube {\n    my($a) = @_;\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "pl",
    "prompt": "sub reverse_delete {\n    my($s, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"]) || $candidate->(\"abcde\", \"ae\")==[\"bcd\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\", \"b\"),[\"acdef\", \"\"]) || $candidate->(\"abcdef\", \"b\")==[\"acdef\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\", 1]) || $candidate->(\"abcdedcba\", \"ab\")==[\"cdedc\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dwik\", \"w\"),[\"dik\", \"\"]) || $candidate->(\"dwik\", \"w\")==[\"dik\", \"\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1]) || $candidate->(\"a\", \"a\")==[\"\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"\"),[\"abcdedcba\", 1]) || $candidate->(\"abcdedcba\", \"\")==[\"abcdedcba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"abcdedcba\", 1]) || $candidate->(\"abcdedcba\", \"v\")==[\"abcdedcba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1]) || $candidate->(\"vabba\", \"v\")==[\"abba\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"mamma\", \"mia\"),[\"\", 1]) || $candidate->(\"mamma\", \"mia\")==[\"\", 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef reverse_delete(s, c)\n  s = s.delete(c)\n  [s, s.reverse == s]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub reverse_delete {\n    my($s, $c) = @_;\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "pl",
    "prompt": "sub mean_absolute_deviation {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5) || $candidate->([1.0, 2.0])==0.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0) || $candidate->([1.0, 2.0, 3.0, 4.0])==1.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0])==1.2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef mean_absolute_deviation(numbers)\n  mean = numbers.sum / numbers.length\n  numbers.map { |x| (x - mean).abs }.sum / numbers.length\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "pl",
    "prompt": "sub correct_bracketing {\n    my($brackets) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1) || $candidate->(\"<>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1) || $candidate->(\"<<><>>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1) || $candidate->(\"<><><<><>><>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1) || $candidate->(\"<><><<<><><>><>><<><><<>>>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\") || $candidate->(\"<<<><>>>>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\") || $candidate->(\"><<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\") || $candidate->(\"<\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\") || $candidate->(\"<<<<\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\") || $candidate->(\">\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\") || $candidate->(\"<<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\") || $candidate->(\"<><><<><>><>><<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\") || $candidate->(\"<><><<><>><>>><>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef correct_bracketing(brackets)\n  depth = 0\n  brackets.each_char do |b|\n    if b == \"<\"\n      depth += 1\n    else\n      depth -= 1\n    end\n    return false if depth < 0\n  end\n  depth == 0\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "pl",
    "prompt": "sub rescale_to_unit {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rescale_to_unit;\n        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0]) || $candidate->([2.0, 49.9])==[0.0, 1.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0]) || $candidate->([100.0, 49.9])==[1.0, 0.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0])==[0.0, 0.25, 0.5, 0.75, 1.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]) || $candidate->([2.0, 1.0, 5.0, 3.0, 4.0])==[0.25, 0.0, 1.0, 0.5, 0.75]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]) || $candidate->([12.0, 11.0, 15.0, 13.0, 14.0])==[0.25, 0.0, 1.0, 0.5, 0.75]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef rescale_to_unit(numbers)\n  min_number = numbers.min\n  max_number = numbers.max\n  numbers.map { |x| (x - min_number) / (max_number - min_number) }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub rescale_to_unit {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "pl",
    "prompt": "sub intersection {\n    my($interval1, $interval2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\") || $candidate->([1, 2], [2, 3])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1], [0, 4]),\"NO\") || $candidate->([-1, 1], [0, 4])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\") || $candidate->([-3, -1], [-5, 5])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, 2], [-4, 0]),\"YES\") || $candidate->([-2, 2], [-4, 0])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\") || $candidate->([-11, 2], [-1, -1])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 5]),\"NO\") || $candidate->([1, 2], [3, 5])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\") || $candidate->([1, 2], [1, 2])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -2], [-3, -2]),\"NO\") || $candidate->([-2, -2], [-3, -2])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef intersection(interval1, interval2)\n  def is_prime(num)\n    return false if num == 1 || num == 0\n    return true if num == 2\n    (2...num).none? { |i| num % i == 0 }\n  end\n\n  l = [interval1[0], interval2[0]].max\n  r = [interval1[1], interval2[1]].min\n  length = r - l\n  length > 0 && is_prime(length) ? \"YES\" : \"NO\"\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub intersection {\n    my($interval1, $interval2) = @_;\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "pl",
    "prompt": "sub hex_key {\n    my($num) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1) || $candidate->(\"AB\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2) || $candidate->(\"1077E\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4) || $candidate->(\"ABED1A33\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2) || $candidate->(\"2020\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6) || $candidate->(\"123456789ABCDEF0\")==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"),12) || $candidate->(\"112233445566778899AABBCCDDEEFF00\")==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef hex_key(num)\n  primes = %w[2 3 5 7 B D]\n  num.chars.count { |c| primes.include?(c) }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub hex_key {\n    my($num) = @_;\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "pl",
    "prompt": "sub strange_sort_list {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3]) || $candidate->([1, 2, 3, 4])==[1, 4, 2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]) || $candidate->([5, 6, 7, 8, 9])==[5, 9, 6, 8, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]) || $candidate->([1, 2, 3, 4, 5])==[1, 5, 2, 4, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]) || $candidate->([5, 6, 7, 8, 9, 1])==[1, 9, 5, 8, 6, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5]) || $candidate->([5, 5, 5, 5])==[5, 5, 5, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]) || $candidate->([1, 2, 3, 4, 5, 6, 7, 8])==[1, 8, 2, 7, 3, 6, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]) || $candidate->([0, 2, 2, 2, 5, 5, -5, -5])==[-5, 5, -5, 5, 0, 2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111]) || $candidate->([111111])==[111111]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef strange_sort_list(lst)\n  res, switch = [], true\n  while lst.any?\n    res << (switch ? lst.min : lst.max)\n    lst.delete_at(lst.index(res[-1]))\n    switch = !switch\n  end\n  res\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub strange_sort_list {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "pl",
    "prompt": "sub is_bored {\n    my($S) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_bored;\n        if(eq_deeply($candidate->(\"Hello world\"),0) || $candidate->(\"Hello world\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is the sky blue?\"),0) || $candidate->(\"Is the sky blue?\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I love It !\"),1) || $candidate->(\"I love It !\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bIt\"),0) || $candidate->(\"bIt\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I feel good today. I will be productive. will kill It\"),2) || $candidate->(\"I feel good today. I will be productive. will kill It\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You and I are going for a walk\"),0) || $candidate->(\"You and I are going for a walk\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_bored(s)\n  s.split(/[.?!]\\s*/).count { |sentence| sentence.start_with?('I ') }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_bored {\n    my($S) = @_;\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "pl",
    "prompt": "sub all_prefixes {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]) || $candidate->(\"asdfgh\")==[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\", \"WW\", \"WWW\"]) || $candidate->(\"WWW\")==[\"W\", \"WW\", \"WWW\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef all_prefixes(string)\n  (0...string.length).map { |i| string[0..i] }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub all_prefixes {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "pl",
    "prompt": "sub how_many_times {\n    my($string, $substring) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&how_many_times;\n        if(eq_deeply($candidate->(\"\", \"x\"),0) || $candidate->(\"\", \"x\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyxyxyx\", \"x\"),4) || $candidate->(\"xyxyxyx\", \"x\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"cacacacac\", \"cac\"),4) || $candidate->(\"cacacacac\", \"cac\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"john doe\", \"john\"),1) || $candidate->(\"john doe\", \"john\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef how_many_times(string, substring)\n  times = 0\n\n  (0..string.length-substring.length).each do |i|\n    times += 1 if string[i, substring.length] == substring\n  end\n\n  times\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub how_many_times {\n    my($string, $substring) = @_;\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "pl",
    "prompt": "sub solution {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n        if(eq_deeply($candidate->([5, 8, 7, 1]),12) || $candidate->([5, 8, 7, 1])==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9) || $candidate->([3, 3, 3, 3, 3])==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 24, 321]),0) || $candidate->([30, 13, 24, 321])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 9]),5) || $candidate->([5, 9])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0) || $candidate->([2, 4, 8])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 23, 32]),23) || $candidate->([30, 13, 23, 32])==23) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 13, 2, 9]),3) || $candidate->([3, 13, 2, 9])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef solution(lst)\n  lst.select.with_index { |x, i| i.even? && x.odd? }.sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub solution {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "pl",
    "prompt": "sub is_sorted {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n        if(eq_deeply($candidate->([5]),1) || $candidate->([5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1) || $candidate->([1, 2, 3, 4, 5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),\"\") || $candidate->([1, 3, 2, 4, 5])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1) || $candidate->([1, 2, 3, 4, 5, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1) || $candidate->([1, 2, 3, 4, 5, 6, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\") || $candidate->([1, 3, 2, 4, 5, 6, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1) || $candidate->([])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),\"\") || $candidate->([3, 2, 1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\") || $candidate->([1, 2, 2, 2, 3, 4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),\"\") || $candidate->([1, 2, 3, 3, 3, 4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1) || $candidate->([1, 2, 2, 3, 3, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),1) || $candidate->([1, 2, 3, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_sorted(lst)\n  count_digit = Hash.new(0)\n  lst.each { |i| count_digit[i] += 1 }\n  return false if count_digit.values.any? { |v| v > 2 }\n  lst.each_cons(2).all? { |a, b| a <= b }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_sorted {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "pl",
    "prompt": "sub search {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1) || $candidate->([5, 5, 5, 5, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4) || $candidate->([4, 1, 4, 1, 4, 4])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3]),-1) || $candidate->([3, 3])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8) || $candidate->([8, 8, 8, 8, 8, 8, 8, 8])==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2) || $candidate->([2, 3, 3, 2, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1) || $candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8, 2]),2) || $candidate->([3, 2, 8, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1) || $candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1) || $candidate->([8, 8, 3, 6, 5, 6, 4])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1) || $candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1) || $candidate->([1, 9, 10, 1, 3])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5) || $candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4) || $candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2) || $candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1) || $candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4) || $candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4) || $candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2) || $candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1) || $candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1) || $candidate->([10])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2) || $candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1) || $candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1) || $candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1) || $candidate->([3, 10, 10, 9, 2])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef search(lst)\n  frq = [0] * (lst.max + 1)\n  lst.each { |i| frq[i] += 1 }\n\n  ans = -1\n  (1...frq.length).each { |i| ans = i if frq[i] >= i }\n  ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub search {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "pl",
    "prompt": "sub pluck {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n        if(eq_deeply($candidate->([4, 2, 3]),[2, 1]) || $candidate->([4, 2, 3])==[2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 1]) || $candidate->([1, 2, 3])==[2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1]) || $candidate->([5, 0, 3, 0, 4, 2])==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3]) || $candidate->([1, 2, 3, 0, 5, 3])==[0, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1]) || $candidate->([5, 4, 8, 4, 8])==[4, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1]) || $candidate->([7, 6, 7, 1])==[6, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 7, 1]),[]) || $candidate->([7, 9, 7, 1])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef pluck(arr)\n  evens = arr.select(&:even?)\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub pluck {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "pl",
    "prompt": "sub pairs_sum_to_zero {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\") || $candidate->([1, 3, 5, 0])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),\"\") || $candidate->([1, 3, -2, 1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\") || $candidate->([1, 2, 3, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1) || $candidate->([2, 4, -5, 3, 5, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\") || $candidate->([1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1) || $candidate->([-3, 9, -1, 3, 2, 30])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1) || $candidate->([-3, 9, -1, 3, 2, 31])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),\"\") || $candidate->([-3, 9, -1, 4, 2, 30])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\") || $candidate->([-3, 9, -1, 4, 2, 31])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef pairs_sum_to_zero(l)\n  l.combination(2).any? { |a, b| a + b == 0 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub pairs_sum_to_zero {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "pl",
    "prompt": "sub make_palindrome {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\") || $candidate->(\"x\")==\"x\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyz\"),\"xyzyx\") || $candidate->(\"xyz\")==\"xyzyx\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyx\"),\"xyx\") || $candidate->(\"xyx\")==\"xyx\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\") || $candidate->(\"jerry\")==\"jerryrrej\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef make_palindrome(string)\n  return '' if string.empty?\n\n  beginning_of_suffix = 0\n\n  beginning_of_suffix += 1 until string[beginning_of_suffix..-1] == string[beginning_of_suffix..-1].reverse\n\n  string + string[0...beginning_of_suffix].reverse\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub make_palindrome {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "pl",
    "prompt": "sub starts_one_ends {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),18) || $candidate->(2)==18) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180) || $candidate->(3)==180) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800) || $candidate->(4)==1800) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000) || $candidate->(5)==18000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef starts_one_ends(n)\n  n == 1 ? 1 : 18 * 10**(n-2)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub starts_one_ends {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "pl",
    "prompt": "sub get_positive {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6]) || $candidate->([-1, -2, 4, 5, 6])==[4, 5, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]) || $candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])==[5, 3, 2, 3, 3, 9, 123, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2]),[]) || $candidate->([-1, -2])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef get_positive(l)\n  l.select { |e| e > 0 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub get_positive {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "pl",
    "prompt": "sub concatenate {\n    my($strings) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate;\n        if(eq_deeply($candidate->([]),\"\") || $candidate->([])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"xyz\") || $candidate->([\"x\", \"y\", \"z\"])==\"xyz\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\") || $candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"])==\"xyzwk\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef concatenate(strings)\n  strings.join\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub concatenate {\n    my($strings) = @_;\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "pl",
    "prompt": "sub is_nested {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n        if(eq_deeply($candidate->(\"[[]]\"),1) || $candidate->(\"[[]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"),\"\") || $candidate->(\"[]]]]]]][[[[[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][]\"),\"\") || $candidate->(\"[][]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]\"),\"\") || $candidate->(\"[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1) || $candidate->(\"[[[[]]]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]]]]]\"),\"\") || $candidate->(\"[]]]]]]]]]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1) || $candidate->(\"[][][[]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"),\"\") || $candidate->(\"[[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]\"),\"\") || $candidate->(\"[]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]][[\"),1) || $candidate->(\"[[]][[\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1) || $candidate->(\"[[][]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\") || $candidate->(\"[[[[[[[[\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\") || $candidate->(\"]]]]]]]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_nested(string)\n  opening_bracket_index = []\n  closing_bracket_index = []\n  string.each_char.with_index do |c, i|\n    opening_bracket_index << i if c == '['\n    closing_bracket_index << i if c == ']'\n  end\n  closing_bracket_index.reverse!\n  cnt = 0\n  i = 0\n  l = closing_bracket_index.length\n  opening_bracket_index.each do |idx|\n    if i < l && idx < closing_bracket_index[i]\n      cnt += 1\n      i += 1\n    end\n  end\n  cnt >= 2\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_nested {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "pl",
    "prompt": "sub is_palindrome {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n        if(eq_deeply($candidate->(\"\"),1) || $candidate->(\"\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1) || $candidate->(\"aba\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaa\"),1) || $candidate->(\"aaaaa\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zbcd\"),\"\") || $candidate->(\"zbcd\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1) || $candidate->(\"xywyx\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyz\"),\"\") || $candidate->(\"xywyz\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywzx\"),\"\") || $candidate->(\"xywzx\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_palindrome(text)\n  text == text.reverse\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_palindrome {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "pl",
    "prompt": "sub count_nums {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_nums;\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 0]),0) || $candidate->([-1, -2, 0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 2, -2, 3, 4, 5]),6) || $candidate->([1, 1, 2, -2, 3, 4, 5])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5) || $candidate->([1, 6, 9, -6, 0, 1, 5])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 100, 98, -7, 1, -1]),4) || $candidate->([1, 100, 98, -7, 1, -1])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5) || $candidate->([12, 23, 34, -45, -56, 0])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1) || $candidate->([0, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef count_nums(arr)\n  def digits_sum(n)\n    neg = 1\n    if n < 0\n      n, neg = -1 * n, -1\n    end\n    n = n.to_s.chars.map(&:to_i)\n    n[0] = n[0] * neg\n    n.sum\n  end\n\n  arr.count { |i| digits_sum(i) > 0 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub count_nums {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "pl",
    "prompt": "sub factorize {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n        if(eq_deeply($candidate->(2),[2]) || $candidate->(2)==[2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2]) || $candidate->(4)==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2, 2, 2]) || $candidate->(8)==[2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3, 19]) || $candidate->(57)==[3, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3, 3, 19, 19]) || $candidate->(3249)==[3, 3, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19]) || $candidate->(185193)==[3, 3, 3, 19, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3, 19, 19, 19]) || $candidate->(20577)==[3, 19, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 3]) || $candidate->(18)==[2, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef factorize(n)\n    require 'prime'\n    n.prime_division.flat_map { |factor, power| [factor] * power }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub factorize {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "pl",
    "prompt": "sub largest_prime_factor {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5) || $candidate->(15)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3) || $candidate->(27)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7) || $candidate->(63)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11) || $candidate->(330)==11) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29) || $candidate->(13195)==29) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef largest_prime_factor(n)\n  def is_prime(k)\n    return false if k < 2\n    (2...k).none? { |i| k % i == 0 }\n  end\n\n  largest = 1\n  (2..n).each do |j|\n    if n % j == 0 && is_prime(j)\n      largest = [largest, j].max\n    end\n  end\n\n  largest\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub largest_prime_factor {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "pl",
    "prompt": "sub get_max_triples {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n        if(eq_deeply($candidate->(5),1) || $candidate->(5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),4) || $candidate->(6)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36) || $candidate->(10)==36) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361) || $candidate->(100)==53361) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef get_max_triples(n)\n  a = (1..n).map { |i| i*i - i + 1 }\n  ans = []\n  (0...n).each do |i|\n    (i+1...n).each do |j|\n      (j+1...n).each do |k|\n        ans << [a[i], a[j], a[k]] if (a[i]+a[j]+a[k])%3 == 0\n      end\n    end\n  end\n  ans.size\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub get_max_triples {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "pl",
    "prompt": "sub anti_shuffle {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&anti_shuffle;\n        if(eq_deeply($candidate->(\"Hi\"),\"Hi\") || $candidate->(\"Hi\")==\"Hi\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hello\"),\"ehllo\") || $candidate->(\"hello\")==\"ehllo\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"number\"),\"bemnru\") || $candidate->(\"number\")==\"bemnru\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),\"abcd\") || $candidate->(\"abcd\")==\"abcd\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello World!!!\"),\"Hello !!!Wdlor\") || $candidate->(\"Hello World!!!\")==\"Hello !!!Wdlor\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\") || $candidate->(\"Hi. My name is Mister Robot. How are you?\")==\".Hi My aemn is Meirst .Rboot How aer ?ouy\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef anti_shuffle(s)\n  s.split.map { |i| i.chars.sort.join }.join(' ')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub anti_shuffle {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "pl",
    "prompt": "sub solve {\n    my($N) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(1000),\"1\") || $candidate->(1000)==\"1\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(150),\"110\") || $candidate->(150)==\"110\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(147),\"1100\") || $candidate->(147)==\"1100\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(333),\"1001\") || $candidate->(333)==\"1001\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(963),\"10010\") || $candidate->(963)==\"10010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef solve(n)\n  n.digits.sum.to_s(2)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub solve {\n    my($N) = @_;\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "pl",
    "prompt": "sub minPath {\n    my($grid, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]) || $candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)==[1, 2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]) || $candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]) || $candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)==[1, 2, 1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]) || $candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)==[1, 10, 1, 10, 1, 10, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]) || $candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)==[1, 7, 1, 7, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]) || $candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)==[1, 6, 1, 6, 1, 6, 1, 6, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]) || $candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)==[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]) || $candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)==[1, 3, 1, 3, 1, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]) || $candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)==[1, 5, 1, 5, 1, 5, 1, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) || $candidate->([[1, 2], [3, 4]], 10)==[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) || $candidate->([[1, 3], [3, 2]], 10)==[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef minPath(grid, k)\n  n = grid.length\n  val = n * n + 1\n  for i in 0...n\n    for j in 0...n\n      if grid[i][j] == 1\n        temp = []\n        temp << grid[i - 1][j] if i != 0\n        temp << grid[i][j - 1] if j != 0\n        temp << grid[i + 1][j] if i != n - 1\n        temp << grid[i][j + 1] if j != n - 1\n        val = temp.min\n      end\n    end\n  end\n\n  ans = []\n  k.times do |i|\n    ans << (i % 2 == 0 ? 1 : val)\n  end\n  ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub minPath {\n    my($grid, $k) = @_;\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "pl",
    "prompt": "sub encrypt {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n        if(eq_deeply($candidate->(\"hi\"),\"lm\") || $candidate->(\"hi\")==\"lm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"ewhjklnop\") || $candidate->(\"asdfghjkl\")==\"ewhjklnop\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gf\"),\"kj\") || $candidate->(\"gf\")==\"kj\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\") || $candidate->(\"et\")==\"ix\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"faewfawefaewg\"),\"jeiajeaijeiak\") || $candidate->(\"faewfawefaewg\")==\"jeiajeaijeiak\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\") || $candidate->(\"hellomyfriend\")==\"lippsqcjvmirh\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") || $candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),\"e\") || $candidate->(\"a\")==\"e\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef encrypt(s)\n  d = 'abcdefghijklmnopqrstuvwxyz'\n  out = ''\n  s.each_char do |c|\n    if d.include?(c)\n      out += d[(d.index(c)+2*2) % 26]\n    else\n      out += c\n    end\n  end\n  out\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub encrypt {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "pl",
    "prompt": "sub make_a_pile {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n        if(eq_deeply($candidate->(3),[3, 5, 7]) || $candidate->(3)==[3, 5, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10]) || $candidate->(4)==[4, 6, 8, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13]) || $candidate->(5)==[5, 7, 9, 11, 13]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16]) || $candidate->(6)==[6, 8, 10, 12, 14, 16]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22]) || $candidate->(8)==[8, 10, 12, 14, 16, 18, 20, 22]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef make_a_pile(n)\n  (0...n).map { |i| n + 2*i }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub make_a_pile {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "pl",
    "prompt": "sub is_prime {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n        if(eq_deeply($candidate->(6),\"\") || $candidate->(6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),1) || $candidate->(101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1) || $candidate->(11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1) || $candidate->(13441)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1) || $candidate->(61)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\") || $candidate->(4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\") || $candidate->(1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1) || $candidate->(5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1) || $candidate->(11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1) || $candidate->(17)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\") || $candidate->(85)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\") || $candidate->(77)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\") || $candidate->(255379)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Ruby program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Ruby version\n\ndef is_prime(n)\n  return false if n < 2\n  (2...n).none? { |k| n % k == 0 }\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_prime {\n    my($n) = @_;\n"
  }
]