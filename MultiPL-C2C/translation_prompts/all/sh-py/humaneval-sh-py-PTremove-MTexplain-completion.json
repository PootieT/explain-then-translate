[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "py",
    "prompt": "def correct_bracketing(brackets: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n    depth=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ ${1:$i:1} == \"(\" ]]; then\n            (( depth++ ))\n        else\n            (( depth-- ))\n        fi\n        if (( depth < 0 )); then\n            echo \"false\"\n            return\n        fi\n    done\n    if (( depth == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef correct_bracketing(brackets: str) -> bool:\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "py",
    "prompt": "def triangle_area(a: int, h: int) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n    echo \"scale=1; $1 * $2 / 2\" | bc\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef triangle_area(a: int, h: int) -> float:\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "py",
    "prompt": "def special_factorial(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nspecial_factorial() {\n    n=$1\n    fact_i=1\n    special_fact=1\n    for (( i=1; i<=$n; i++ )); do\n        ((fact_i*=i))\n        ((special_fact*=fact_i))\n    done\n    echo $special_fact\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef special_factorial(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "py",
    "prompt": "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\ndef test_check():\n    check(largest_smallest_integers)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local lst=($1)\n    local smallest=($(echo \"${lst[@]}\" | tr ' ' '\\n' | awk '$1 < 0' | sort -n | tail -n 1))\n    local largest=($(echo \"${lst[@]}\" | tr ' ' '\\n' | awk '$1 > 0' | sort -n | head -n 1))\n    echo \"$smallest $largest\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "py",
    "prompt": "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([3, 4, 5, 1, 2]) == True\n    assert candidate([3, 5, 10, 1, 2]) == True\n    assert candidate([4, 3, 1, 2]) == False\n    assert candidate([3, 5, 4, 1, 2]) == False\n    assert candidate([]) == True\n\ndef test_check():\n    check(move_one_ball)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local min_value=${sorted_arr[0]}\n    local min_index=$(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -n $min_value | cut -d: -f1)\n    local my_arr=(\"${arr[@]:$min_index}\" \"${arr[@]:0:$min_index}\")\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        if [[ ${my_arr[i]} -ne ${sorted_arr[i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "py",
    "prompt": "def digits(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) == 1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n    assert candidate(2468) == 0\n\ndef test_check():\n    check(digits)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndigits() {\n    n=$1\n    product=1\n    odd_count=0\n    for digit in $(echo $n | grep -o .); do\n        if [[ $((digit%2)) -eq 1 ]]; then\n            ((product*=digit))\n            ((odd_count++))\n        fi\n    done\n    if [[ $odd_count -eq 0 ]]; then\n        echo 0\n    else\n        echo $product\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef digits(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "py",
    "prompt": "def fib4(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib4() {\n    results=(0 0 2 0)\n    if [ $1 -lt 4 ]; then\n        echo ${results[$1]}\n        return\n    fi\n\n    for ((i=4; i<=$1; i++)); do\n        results+=($((results[3] + results[2] + results[1] + results[0])))\n        unset results[0]\n        results=(\"${results[@]}\")\n    done\n\n    echo ${results[3]}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef fib4(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "py",
    "prompt": "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]\n    assert candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]\n\ndef test_check():\n    check(sort_even)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_even() {\n    evens=($(echo $1 | tr ' ' '\\n' | awk 'NR%2==1' | sort -n))\n    odds=($(echo $1 | tr ' ' '\\n' | awk 'NR%2==0'))\n    ans=()\n    for ((i=0; i<${#evens[@]}; i++)); do\n        ans+=(${evens[i]})\n        ans+=(${odds[i]})\n    done\n    if [ ${#evens[@]} -gt ${#odds[@]} ]; then\n        ans+=(${evens[-1]})\n    fi\n    echo ${ans[@]}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "py",
    "prompt": "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\norder_by_points() {\n    nums=($1)\n    digits_sum() {\n        n=$1\n        neg=1\n        if [[ $n -lt 0 ]]; then\n            n=$((-1 * n))\n            neg=-1\n        fi\n        n=($(echo $n | grep -o .))\n        n[0]=$((n[0] * neg))\n        sum=0\n        for i in ${n[@]}; do\n            ((sum+=i))\n        done\n        echo $sum\n    }\n    for (( i=0; i<${#nums[@]}; i++ )); do\n        for (( j=i+1; j<${#nums[@]}; j++ )); do\n            if [[ $(digits_sum ${nums[$i]}) -gt $(digits_sum ${nums[$j]}) ]]; then\n                temp=${nums[$i]}\n                nums[$i]=${nums[$j]}\n                nums[$j]=$temp\n            fi\n        done\n    done\n    echo \"${nums[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "py",
    "prompt": "def is_happy(s: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('a') == False\n    assert candidate('aa') == False\n    assert candidate('abcd') == True\n    assert candidate('aabb') == False\n    assert candidate('adb') == True\n    assert candidate('xyy') == False\n    assert candidate('iopaxpoi') == True\n    assert candidate('iopaxioi') == False\n\ndef test_check():\n    check(is_happy)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_happy() {\n  if [ ${#1} -lt 3 ]; then\n    echo \"false\"\n    return\n  fi\n\n  for (( i=0; i<${#1}-2; i++ )); do\n    if [[ ${1:i:1} == ${1:i+1:1} || ${1:i+1:1} == ${1:i+2:1} || ${1:i:1} == ${1:i+2:1} ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef is_happy(s: str) -> bool:\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "py",
    "prompt": "def circular_shift(x: int, shift: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n    s=$1\n    shift=$2\n    if [ $shift -gt ${#s} ]; then\n        echo $s | rev\n    else\n        echo ${s:$shift}${s:0:$shift}\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef circular_shift(x: int, shift: int) -> str:\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "py",
    "prompt": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\ndef test_check():\n    check(has_close_elements)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    arr=($1)\n    threshold=$2\n\n    for (( i=0; i<${#arr[@]}-1; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            if (( $(bc <<< \"${arr[$i]} - ${arr[$j]}\") < $threshold )); then\n                echo \"true\"\n                return\n            fi\n        done\n    done\n\n    echo \"false\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "py",
    "prompt": "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    for gpa in $1; do\n        if [ $gpa == 4.0 ]; then\n            letter_grade+=\"A+ \"\n        elif [ $(echo \"$gpa > 3.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"A \"\n        elif [ $(echo \"$gpa > 3.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"A- \"\n        elif [ $(echo \"$gpa > 3.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B+ \"\n        elif [ $(echo \"$gpa > 2.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B \"\n        elif [ $(echo \"$gpa > 2.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"B- \"\n        elif [ $(echo \"$gpa > 2.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C+ \"\n        elif [ $(echo \"$gpa > 1.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C \"\n        elif [ $(echo \"$gpa > 1.3\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"C- \"\n        elif [ $(echo \"$gpa > 1.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D+ \"\n        elif [ $(echo \"$gpa > 0.7\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D \"\n        elif [ $(echo \"$gpa > 0.0\" | bc -l) -eq 1 ]; then\n            letter_grade+=\"D- \"\n        else\n            letter_grade+=\"E \"\n        fi\n    done\n    echo $letter_grade\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "py",
    "prompt": "def x_or_y(n: int, x: int, y: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\ndef test_check():\n    check(x_or_y)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    if [ $1 -eq 1 ]; then\n        echo $3\n    else\n        for ((i=2;i<$1;i++)); do\n            if [ $(($1 % $i)) -eq 0 ]; then\n                echo $3\n                break\n            fi\n        done\n        echo $2\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "py",
    "prompt": "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, -2, 1, -5]) == 0\n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n    assert candidate([1]) == 0\n    assert candidate([]) == 0\n\ndef test_check():\n    check(specialFilter)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nspecialFilter() {\n    local count=0\n    for num in $1; do\n        if [[ $num -gt 10 && $(echo $num | awk '{print substr($0,1,1) \" \" substr($0,length,1)}') =~ ^[13579]\\ [13579]$ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "py",
    "prompt": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_music() {\n    local music_string=\"$1\"\n    local note_map=(\"o\" \"4\" \"o|\" \"2\" \".|\" \"1\")\n    local notes=()\n    for x in $music_string; do\n        if [[ -n \"$x\" ]]; then\n            for i in \"${!note_map[@]}\"; do\n                if [[ \"${note_map[i]}\" == \"$x\" ]]; then\n                    notes+=(\"${note_map[i+1]}\")\n                fi\n            done\n        fi\n    done\n    echo \"${notes[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "py",
    "prompt": "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 == *\" \"* ]]; then\n        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 == *,* ]]; then\n        echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o '[a-z]' | grep -c '[02468]$'\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "py",
    "prompt": "def count_distinct_characters(string: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_distinct_characters() {\n    lowerCaseString=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    uniqueCharacters=$(echo $lowerCaseString | grep -o . | sort -u | tr -d '\\n')\n    echo ${#uniqueCharacters}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef count_distinct_characters(string: str) -> int:\n"
  },
  {
    "name": "HumanEval_148_bf",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_148_bf.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planet_names=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    if [[ ! \" ${planet_names[@]} \" =~ \" $1 \" ]] || [[ ! \" ${planet_names[@]} \" =~ \" $2 \" ]] || [ \"$1\" == \"$2\" ]; then\n        return\n    fi\n    planet1_index=$(echo \"${planet_names[@]}\" | grep -o \"$1\" | wc -l)\n    planet2_index=$(echo \"${planet_names[@]}\" | grep -o \"$2\" | wc -l)\n    if (( planet1_index < planet2_index )); then\n        echo \"${planet_names[@]:planet1_index + 1:planet2_index}\"\n    else\n        echo \"${planet_names[@]:planet2_index + 1:planet1_index}\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "py",
    "prompt": "def digitSum(s: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld') == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n    check(digitSum)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ndigitSum() {\n    s=$1\n    sum=0\n    for (( i=0; i<${#s}; i++ )); do\n        char=${s:i:1}\n        if [[ $char =~ [A-Z] ]]; then\n            ((sum+=`printf \"%d\" \"'$char\"`))\n        fi\n    done\n    echo \"$sum\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef digitSum(s: str) -> int:\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "py",
    "prompt": "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([1, 4, 9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9\n    assert candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1, -5, 2, -1, -5]) == -126\n    assert candidate([-56, -99, 1, 0, -2]) == 3030\n    assert candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=($1)\n    local result=0\n    for (( i=0; i<${#lst[@]}; i++ )); do\n        if [[ $((i%3)) -eq 0 ]]; then\n            ((result+=lst[i]**2))\n        elif [[ $((i%4)) -eq 0 && $((i%3)) -ne 0 ]]; then\n            ((result+=lst[i]**3))\n        else\n            ((result+=lst[i]))\n        fi\n    done\n    echo \"$result\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "py",
    "prompt": "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == [2, 3]\n    assert candidate(6) == [2, 3, 5]\n    assert candidate(7) == [2, 3, 5]\n    assert candidate(10) == [2, 3, 5, 7]\n    assert candidate(0) == []\n    assert candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19]\n    assert candidate(1) == []\n    assert candidate(18) == [2, 3, 5, 7, 11, 13, 17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ndef test_check():\n    check(count_up_to)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncount_up_to() {\n    n=$1\n    primes=()\n    for ((i=2;i<n;i++)); do\n        is_prime=true\n        for ((j=2;j<i;j++)); do\n            if ((i%j==0)); then\n                is_prime=false\n                break\n            fi\n        done\n        if $is_prime; then\n            primes+=($i)\n        fi\n    done\n    echo ${primes[@]}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef count_up_to(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "py",
    "prompt": "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_squares() {\n    for i in $1; do\n        squared=$((squared + $(echo \"scale=0; $(echo \"scale=0; $i\" | bc) / 1\" | bc) ** 2))\n    done\n    echo $squared\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "py",
    "prompt": "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique() {\n    local arr=($1)\n    local unique_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | uniq))\n    echo \"${unique_arr[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "py",
    "prompt": "def fib(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\ndef test_check():\n    check(fib)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfib() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef fib(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "py",
    "prompt": "def fizz_buzz(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfizz_buzz() {\n    n=$1\n    ns=()\n    for (( i=0; i<$n; i++ )); do\n        if [[ $((i%11)) -eq 0 || $((i%13)) -eq 0 ]]; then\n            ns+=($i)\n        fi\n    done\n    s=$(echo ${ns[@]} | tr ' ' '\\n' | grep -o '7' | wc -l)\n    echo $s\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef fizz_buzz(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "py",
    "prompt": "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    class_name=$1\n    extensions=($2)\n    strong=${extensions[0]}\n    my_val=$(echo \"${extensions[0]}\" | awk '{print gsub(/[A-Z]/,\"&\") - gsub(/[a-z]/,\"&\")}')\n    for s in \"${extensions[@]}\"; do\n        val=$(echo \"$s\" | awk '{print gsub(/[A-Z]/,\"&\") - gsub(/[a-z]/,\"&\")}')\n        if [[ $val -gt $my_val ]]; then\n            strong=$s\n            my_val=$val\n        fi\n    done\n    echo \"$class_name.$strong\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "py",
    "prompt": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    arr=($1)\n    closest_pair=()\n    distance=\"\"\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            new_distance=$(echo \"${arr[i]} - ${arr[j]}\" | bc -l | tr -d '-')\n            if [[ -z $distance ]]; then\n                distance=$new_distance\n                closest_pair=(\"${arr[i]}\" \"${arr[j]}\")\n            elif (( $(echo \"$new_distance < $distance\" | bc -l) )); then\n                distance=$new_distance\n                closest_pair=(\"${arr[i]}\" \"${arr[j]}\")\n            fi\n        done\n    done\n    echo \"${closest_pair[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "py",
    "prompt": "def valid_date(date: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011') == False\n    assert candidate('') == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003') == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvalid_date() {\n    date=$1\n    month=$(echo $date | awk -F'-' '{print $1}')\n    day=$(echo $date | awk -F'-' '{print $2}')\n    year=$(echo $date | awk -F'-' '{print $3}')\n    if [[ $month -lt 1 || $month -gt 12 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]] && [[ $day -lt 1 || $day -gt 31 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]] && [[ $day -lt 1 || $day -gt 30 ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $month -eq 2 ]] && [[ $day -lt 1 || $day -gt 29 ]]; then\n        echo \"false\"\n        return\n    fi\n    echo \"true\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef valid_date(date: str) -> bool:\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "py",
    "prompt": "def add(x: int, y: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n    expr $1 + $2\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef add(x: int, y: int) -> int:\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "py",
    "prompt": "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\ndef test_check():\n    check(triples_sum_to_zero)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n    l=($1)\n    for (( i=0; i<${#l[@]}; i++ )); do\n        for (( j=i+1; j<${#l[@]}; j++ )); do\n            for (( k=j+1; k<${#l[@]}; k++ )); do\n                if (( l[i] + l[j] + l[k] == 0 )); then\n                    echo true\n                    return\n                fi\n            done\n        done\n    done\n    echo false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "py",
    "prompt": "def largest_divisor(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n\ndef test_check():\n    check(largest_divisor)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_divisor() {\n  for (( i=$1-1; i>0; i-- )); do\n    if (( $1 % $i == 0 )); then\n      echo $i\n      return\n    fi\n  done\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef largest_divisor(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "py",
    "prompt": "def sort_numbers(numbers: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsort_numbers() {\n    value_map=(zero one two three four five six seven eight nine)\n    for word in $1; do\n        for i in ${!value_map[@]}; do\n            if [[ $word == ${value_map[$i]} ]]; then\n                echo $i\n            fi\n        done\n    done | sort | while read i; do\n        echo ${value_map[$i]}\n    done | tr '\\n' ' ' | sed 's/ $//'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef sort_numbers(numbers: str) -> str:\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "py",
    "prompt": "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\ndef test_check():\n    check(smallest_change)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsmallest_change() {\n    arr=($1)\n    ans=0\n    for ((i=0; i<${#arr[@]}/2; i++)); do\n        if [[ ${arr[i]} -ne ${arr[${#arr[@]}-i-1]} ]]; then\n            ((ans++))\n        fi\n    done\n    echo $ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "py",
    "prompt": "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100) == True\n    assert candidate([1, 20, 4, 10], 5) == False\n    assert candidate([1, 20, 4, 10], 21) == True\n    assert candidate([1, 20, 4, 10], 22) == True\n    assert candidate([1, 8, 4, 10], 11) == True\n    assert candidate([1, 8, 4, 10], 10) == False\n\ndef test_check():\n    check(below_threshold)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n    for e in $1; do\n        if [ $e -ge $2 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "py",
    "prompt": "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nprod_signs() {\n    arr=($1)\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        return\n    fi\n    if [[ ${arr[*]} =~ 0 ]]; then\n        echo 0\n        return\n    fi\n    negs=($(echo ${arr[*]} | sed 's/[^-]/0/g'))\n    prod=$(( ${#negs[@]} % 2 == 0 ? 1 : -1 ))\n    echo $(( prod * $(echo ${arr[*]} | sed 's/-//g' | tr ' ' '+' ) ))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "py",
    "prompt": "def modp(n: int, p: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n    ret=1\n    for ((i=0;i<$1;i++)); do\n        ret=$((2 * ret % $2))\n    done\n    echo $ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef modp(n: int, p: int) -> int:\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "py",
    "prompt": "def count_upper(s: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncount_upper() {\n    count=0\n    for ((i=0;i<${#1};i+=2)); do\n        if [[ \"${1:i:1}\" == [AEIOU] ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef count_upper(s: str) -> int:\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "py",
    "prompt": "def multiply(a: int, b: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    echo $(( ${1: -1} * ${2: -1} ))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef multiply(a: int, b: int) -> int:\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "py",
    "prompt": "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nunique_digits() {\n    local arr=($1)\n    local odd_digit_elements=()\n    for i in \"${arr[@]}\"; do\n        if [[ $(echo $i | grep -E \"^[13579]+$\") ]]; then\n            odd_digit_elements+=($i)\n        fi\n    done\n    echo $(echo \"${odd_digit_elements[@]}\" | tr ' ' '\\n' | sort -n)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "py",
    "prompt": "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n    q=($1)\n    w=$2\n    if (( $(echo \"${q[@]}\" | tr ' ' '+' | bc) > $w )); then\n        echo \"false\"\n        return\n    fi\n\n    i=0\n    j=${#q[@]}-1\n    while (( $i<$j )); do\n        if (( ${q[$i]} != ${q[$j]} )); then\n            echo \"false\"\n            return\n        fi\n        (( i++ ))\n        (( j-- ))\n    done\n    echo \"true\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "py",
    "prompt": "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    if [[ $2 -eq 0 ]]; then\n        return 0\n    fi\n    sorted=$(echo $1 | tr ' ' '\\n' | sort -n)\n    echo $sorted | tr ' ' '\\n' | tail -$2\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "py",
    "prompt": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == ['(()())', '((()))', '()', '((())()())']\n    assert candidate('() (()) ((())) (((())))') == ['()', '(())', '((()))', '(((())))']\n    assert candidate('(()(())((())))') == ['(()(())((())))']\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n\ndef test_check():\n    check(separate_paren_groups)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nseparate_paren_groups() {\n    result=()\n    current_string=\"\"\n    current_depth=0\n\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $c == '(' ]]; then\n            (( current_depth++ ))\n            current_string+=$c\n        elif [[ $c == ')' ]]; then\n            (( current_depth-- ))\n            current_string+=$c\n\n            if [[ $current_depth == 0 ]]; then\n                result+=(\"$current_string\")\n                current_string=\"\"\n            fi\n        fi\n    done\n\n    echo \"${result[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "py",
    "prompt": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfilter_integers() {\n    result=()\n    for x in $1; do\n        if [[ $x =~ ^-?[0-9]+$ ]]; then\n            result+=($x)\n        fi\n    done\n    echo ${result[@]}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "py",
    "prompt": "from typing import List\n\ndef skjkasdkd(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n    assert candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n    assert candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n    assert candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n    assert candidate([0, 81, 12, 3, 1, 21]) == 3\n    assert candidate([0, 8, 1, 2, 1, 7]) == 7\n    assert candidate([8191]) == 19\n    assert candidate([8191, 123456, 127, 7]) == 19\n    assert candidate([127, 97, 8192]) == 10\n\ndef test_check():\n    check(skjkasdkd)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nskjkasdkd() {\n    arr=($1)\n    maxx=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $maxx ]]; then\n            is_prime=true\n            for (( j=2; j<$i; j++ )); do\n                if [[ $((i%j)) -eq 0 ]]; then\n                    is_prime=false\n                    break\n                fi\n            done\n            if $is_prime; then\n                maxx=$i\n            fi\n        fi\n    done\n    result=0\n    for (( i=0; i<${#maxx}; i++ )); do\n        result=$((result+${maxx:i:1}))\n    done\n    echo \"$result\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef skjkasdkd(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "py",
    "prompt": "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\ndef test_check():\n    check(total_match)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    l1=0\n    for st in $1; do\n        l1=$((l1+${#st}))\n    done\n\n    l2=0\n    for st in $2; do\n        l2=$((l2+${#st}))\n    done\n\n    if [ $l1 -le $l2 ]; then\n        echo $1\n    else\n        echo $2\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_162_string_to_md5",
    "language": "py",
    "prompt": "from typing import Optional\n\ndef string_to_md5(text: str) -> Optional[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\ndef test_check():\n    check(string_to_md5)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstring_to_md5() {\n    echo -n \"$1\" | md5sum | awk '{print $1}'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Optional\n\ndef string_to_md5(text: str) -> Optional[str]:\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "py",
    "prompt": "def car_race_collision(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ncar_race_collision() {\n    echo $(($1*$1))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef car_race_collision(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "py",
    "prompt": "def is_simple_power(x: int, n: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n    x=$1\n    n=$2\n    if [[ $n -eq 1 ]]; then\n        if [[ $x -eq 1 ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\n        fi\n        return\n    fi\n    power=1\n    while [[ $power -lt $x ]]; do\n        ((power*=n))\n    done\n    if [[ $power -eq $x ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef is_simple_power(x: int, n: int) -> bool:\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "py",
    "prompt": "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nincr_list() {\n    echo $(echo $1 | tr ' ' '\\n' | awk '{print $1+1}' | tr '\\n' ' ')\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "py",
    "prompt": "def flip_case(string: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n\ndef test_check():\n    check(flip_case)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nflip_case() {\n    echo $1 | tr '[:upper:][:lower:]' '[:lower:][:upper:]'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef flip_case(string: str) -> str:\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "py",
    "prompt": "def vowels_count(s: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('abcde') == 2\n    assert candidate('Alone') == 3\n    assert candidate('key') == 2\n    assert candidate('bye') == 1\n    assert candidate('keY') == 2\n    assert candidate('bYe') == 1\n    assert candidate('ACEDY') == 3\n\ndef test_check():\n    check(vowels_count)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nvowels_count() {\n    s=$1\n    vowels=\"aeiouAEIOU\"\n    n_vowels=$(echo $s | grep -io \"[aeiou]\" | wc -l)\n    if [[ ${s: -1} == [yY] ]]; then\n        ((n_vowels++))\n    fi\n    echo $n_vowels\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef vowels_count(s: str) -> int:\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "py",
    "prompt": "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(['aa', 'a', 'aaa']) == ['aa']\n    assert candidate(['school', 'AI', 'asdf', 'b']) == ['AI', 'asdf', 'school']\n    assert candidate(['d', 'b', 'c', 'a']) == []\n    assert candidate(['d', 'dcba', 'abcd', 'a']) == ['abcd', 'dcba']\n    assert candidate(['AI', 'ai', 'au']) == ['AI', 'ai', 'au']\n    assert candidate(['a', 'b', 'b', 'c', 'c', 'a']) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == ['cc', 'dd', 'aaaa', 'bbbb']\n\ndef test_check():\n    check(sorted_list_sum)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsorted_list_sum() {\n    lst=($1)\n    sorted_lst=($(echo \"${lst[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    new_lst=()\n    for i in \"${sorted_lst[@]}\"; do\n        if (( ${#i} % 2 == 0 )); then\n            new_lst+=($i)\n        fi\n    done\n    sorted_new_lst=($(echo \"${new_lst[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    sorted_by_length=($(echo \"${sorted_new_lst[@]}\" | tr ' ' '\\n' | awk '{print length, $0}' | sort -n -s | cut -d\" \" -f2-))\n    echo \"${sorted_by_length[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "py",
    "prompt": "from typing import List\n\ndef words_string(s: str) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_string() {\n    echo \"$1\" | tr ',' ' ' | awk '{$1=$1};1'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef words_string(s: str) -> List[str]:\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5)\n    assert candidate(1) == (0, 1)\n\ndef test_check():\n    check(even_odd_palindrome)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_palindrome() {\n    is_palindrome() {\n        [[ $1 == $(echo $1 | rev) ]]\n    }\n\n    even_palindrome_count=0\n    odd_palindrome_count=0\n\n    for i in $(seq 1 $1); do\n        if (( i%2 == 1 )) && is_palindrome $i; then\n            (( odd_palindrome_count++ ))\n        elif (( i%2 == 0 )) && is_palindrome $i; then\n            (( even_palindrome_count++ ))\n        fi\n    done\n    echo \"$even_palindrome_count $odd_palindrome_count\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "py",
    "prompt": "def triangle_area(a: int, b: int, c: int) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n    if (( $1 + $2 <= $3 || $1 + $3 <= $2 || $2 + $3 <= $1 )); then\n        echo \"-1\"\n        return\n    fi\n    s=$(( ($1 + $2 + $3) / 2 ))\n    area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\" | bc)\n    echo $area\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef triangle_area(a: int, b: int, c: int) -> float:\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "py",
    "prompt": "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    while IFS=, read -r key value; do\n        if [[ $key == \"\" ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $key != *[[:lower:]]* ]] && [[ $value != *[[:lower:]]* ]]; then\n            echo \"true\"\n            return\n        elif [[ $key != *[[:upper:]]* ]] && [[ $value != *[[:upper:]]* ]]; then\n            echo \"true\"\n            return\n        else\n            echo \"false\"\n            return\n        fi\n    done <<< \"$1\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "py",
    "prompt": "from typing import List\n\ndef tri(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ntri() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"1\"\n        return\n    fi\n\n    my_tri=(1 3)\n    for (( i=2; i<=$1; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            my_tri+=(\"$((i/2+1))\")\n        else\n            my_tri+=(\"$((my_tri[i-1]+my_tri[i-2]+(i+3)/2))\")\n        fi\n    done\n\n    echo \"${my_tri[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef tri(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "py",
    "prompt": "from typing import List\n\ndef median(l: List[int]) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmedian() {\n    l=($(echo $1 | tr ' ' '\\n' | sort -n))\n    len=${#l[@]}\n    if (( len % 2 == 1 )); then\n        echo ${l[len/2]}\n    else\n        echo $(( (${l[len/2-1]} + ${l[len/2]}) / 2 ))\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef median(l: List[int]) -> float:\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "py",
    "prompt": "def change_base(x: int, base: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    x=$1\n    base=$2\n    ret=\"\"\n    while [[ $x -gt 0 ]]; do\n        ret=\"${x%$base}$ret\"\n        x=$((x/base))\n    done\n    echo $ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef change_base(x: int, base: int) -> str:\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "py",
    "prompt": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nlongest() {\n  if [ -z \"$1\" ]; then\n    echo \"None\"\n    return\n  fi\n\n  maxlen=0\n  for s in $1; do\n    len=${#s}\n    if [ $len -gt $maxlen ]; then\n      maxlen=$len\n      longest=$s\n    fi\n  done\n\n  echo $longest\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n"
  },
  {
    "name": "HumanEval_116_sort_array",
    "language": "py",
    "prompt": "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_116_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_array() {\n    arr=($1)\n    sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    sorted_by_ones=($(echo \"${sorted_arr[@]}\" | tr ' ' '\\n' | awk '{print $1 \" \" $0}' | sort -n -k2 | awk '{print $1}'))\n    echo \"${sorted_by_ones[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "py",
    "prompt": "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n    ret=()\n    for e1 in $1; do\n        for e2 in $2; do\n            if [ $e1 -eq $e2 ]; then\n                ret+=($e1)\n            fi\n        done\n    done\n    echo \"${ret[@]}\" | tr ' ' '\\n' | sort -n\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "py",
    "prompt": "def cycpattern_check(a: str, b: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('xyzw', 'xyw') == False\n    assert candidate('yello', 'ell') == True\n    assert candidate('whattup', 'ptut') == False\n    assert candidate('efef', 'fee') == True\n    assert candidate('abab', 'aabb') == False\n    assert candidate('winemtt', 'tinem') == True\n\ndef test_check():\n    check(cycpattern_check)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n    l=${#2}\n    pat=\"$2$2\"\n    for (( i=0; i<${#1}-l+1; i++ )); do\n        for (( j=0; j<l+1; j++ )); do\n            if [[ \"${1:$i:$l}\" == \"${pat:$j:$l}\" ]]; then\n                echo true\n                return\n            fi\n        done\n    done\n    echo false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef cycpattern_check(a: str, b: str) -> bool:\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "py",
    "prompt": "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nminSubArraySum() {\n    max_sum=0\n    s=0\n    for num in $1; do\n        s+=-$num\n        if ((s < 0)); then\n            s=0\n        fi\n        max_sum=$((s > max_sum ? s : max_sum))\n    done\n    if ((max_sum == 0)); then\n        max_sum=$(echo $1 | tr ' ' '\\n' | awk '{print -$1}' | sort -n | head -n 1)\n    fi\n    min_sum=-$max_sum\n    echo $min_sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "py",
    "prompt": "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n#\n#\n# $1 is a space-separated list\nsort_array() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\n' | sort -n))\n    local sorted_by_ones=($(echo \"${sorted_arr[@]}\" | tr ' ' '\n' | awk '{print $1 \" \" $0}' | sort -n -k2 | awk '{print $1}'))\n    echo \"${sorted_by_ones[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "py",
    "prompt": "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5]\n    assert candidate(1) == [1]\n\ndef test_check():\n    check(get_odd_collatz)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_odd_collatz() {\n    n=$1\n    if ((n%2==0)); then\n        odd_collatz=()\n    else\n        odd_collatz=($n)\n    fi\n    while ((n > 1)); do\n        if ((n%2==0)); then\n            n=$((n/2))\n        else\n            n=$((n*3+1))\n        fi\n        if ((n%2==1)); then\n            odd_collatz+=($n)\n        fi\n    done\n    printf '%s\\n' \"${odd_collatz[@]}\" | sort -n\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "py",
    "prompt": "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\ndef test_check():\n    check(derivative)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nderivative() {\n  xs=($1)\n  for ((i=1; i<${#xs[@]}; i++)); do\n    echo $((i * ${xs[i]}))\n  done\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "py",
    "prompt": "def fibfib(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfibfib() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1 ]]; then\n    echo 0\n  elif [[ $1 -eq 2 ]]; then\n    echo 1\n  else\n    echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n  fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef fibfib(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "py",
    "prompt": "from typing import List\n\ndef max_element(l: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\ndef test_check():\n    check(max_element)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmax_element() {\n    l=($1)\n    m=${l[0]}\n    for e in ${l[@]}; do\n        if ((e > m)); then\n            m=$e\n        fi\n    done\n    echo $m\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef max_element(l: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "py",
    "prompt": "def closest_integer(value: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nclosest_integer() {\n    # TODO: implement me\n    echo 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef closest_integer(value: str) -> int:\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "py",
    "prompt": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsum_product() {\n    local sum=0\n    local prod=1\n    for n in $1; do\n        ((sum += n))\n        ((prod *= n))\n    done\n    echo \"$sum $prod\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "py",
    "prompt": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    s=$1\n    n=$2\n    result=()\n    for word in $s; do\n        n_consonants=$(echo $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [[ $n_consonants -eq $n ]]; then\n            result+=(\"$word\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "py",
    "prompt": "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n  arr=($1)\n  k=$2\n  sum=0\n  for ((i=0; i<k; i++)); do\n    elem=${arr[$i]}\n    if (( ${#elem} <= 2 )); then\n      ((sum+=elem))\n    fi\n  done\n  echo $sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "py",
    "prompt": "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5, 6, 10) == [11, 4]\n    assert candidate(4, 8, 9) == [12, 1]\n    assert candidate(1, 10, 10) == [11, 0]\n    assert candidate(2, 11, 5) == [7, 0]\n    assert candidate(4, 5, 7) == [9, 2]\n    assert candidate(4, 5, 1) == [5, 0]\n\ndef test_check():\n    check(eat)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [[ $2 -le $3 ]]\n  then\n    echo $(( $1 + $2 )) $(( $3 - $2 ))\n  else\n    echo $(( $1 + $3 )) 0\n  fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "py",
    "prompt": "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1, 1, 1, 1, 0]) == 1\n    assert candidate([1, 1]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\ndef test_check():\n    check(next_smallest)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nnext_smallest() {\n    echo \"$1\" | tr ' ' '\\n' | sort -n | uniq | sed -n 2p\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "py",
    "prompt": "def choose_num(x: int, y: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $(($2 % 2)) -eq 0 ]; then\n        echo $2\n    elif [ $1 -eq $2 ]; then\n        echo -1\n    else\n        echo $(($2 - 1))\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef choose_num(x: int, y: int) -> int:\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "py",
    "prompt": "def prime_length(string: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\ndef test_check():\n    check(prime_length)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nprime_length() {\n  l=${#1}\n  if [ $l -eq 0 ] || [ $l -eq 1 ]\n  then\n    echo \"false\"\n    return 1\n  fi\n  for (( i=2; i<$l; i++ ))\n  do\n    if [ $(( $l % $i )) -eq 0 ]\n    then\n      echo \"false\"\n      return 1\n    fi\n  done\n  echo \"true\"\n  return 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef prime_length(string: str) -> bool:\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "py",
    "prompt": "def sum_to_n(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\ndef test_check():\n    check(sum_to_n)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsum_to_n() {\n  echo $(( $1 * ($1 + 1) / 2 ))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef sum_to_n(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "py",
    "prompt": "def fix_spaces(text: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfix_spaces() {\n    new_text=\"\"\n    i=0\n    start=0\n    end=0\n    while [ $i -lt ${#1} ]; do\n        if [ \"${1:$i:1}\" == \" \" ]; then\n            end=$((end+1))\n        else\n            if [ $((end-start)) -gt 2 ]; then\n                new_text+=\"-${1:$i:1}\"\n            elif [ $((end-start)) -gt 0 ]; then\n                new_text+=$(printf '_%.0s' $(seq 1 $((end-start))))${1:$i:1}\n            else\n                new_text+=\"${1:$i:1}\"\n            fi\n            start=$((i+1))\n            end=$((i+1))\n        fi\n        i=$((i+1))\n    done\n    if [ $((end-start)) -gt 2 ]; then\n        new_text+=\"-\"\n    elif [ $((end-start)) -gt 0 ]; then\n        new_text+=\"_\"\n    fi\n    echo $new_text\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef fix_spaces(text: str) -> str:\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "py",
    "prompt": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nrolling_max() {\n    numbers=($1)\n    running_max=${numbers[0]}\n    result=()\n\n    for n in \"${numbers[@]}\"; do\n        if [[ $running_max -lt $n ]]; then\n            running_max=$n\n        fi\n        result+=($running_max)\n    done\n    echo \"${result[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "py",
    "prompt": "def words_in_sentence(sentence: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('This is a test') == 'is'\n    assert candidate('lets go for swimming') == 'go for'\n    assert candidate('there is no place available here') == 'there is no place'\n    assert candidate('Hi I am Hussein') == 'Hi am Hussein'\n    assert candidate('go for it') == 'go for it'\n    assert candidate('here') == ''\n    assert candidate('here is') == 'is'\n\ndef test_check():\n    check(words_in_sentence)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nwords_in_sentence() {\n    new_lst=()\n    for word in $1; do\n        flg=0\n        if [[ ${#word} -eq 1 ]]; then\n            flg=1\n        fi\n        for (( i=2; i<${#word}; i++ )); do\n            if [[ ${#word}%i -eq 0 ]]; then\n                flg=1\n            fi\n        done\n        if [[ $flg -eq 0 || ${#word} -eq 2 ]]; then\n            new_lst+=($word)\n        fi\n    done\n    echo \"${new_lst[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef words_in_sentence(sentence: str) -> str:\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "py",
    "prompt": "def get_closest_vowel(word: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('yogurt') == 'u'\n    assert candidate('full') == 'u'\n    assert candidate('easy') == ''\n    assert candidate('eAsy') == ''\n    assert candidate('ali') == ''\n    assert candidate('bad') == 'a'\n    assert candidate('most') == 'o'\n    assert candidate('ab') == ''\n    assert candidate('ba') == ''\n    assert candidate('quick') == ''\n    assert candidate('anime') == 'i'\n    assert candidate('Asia') == ''\n    assert candidate('Above') == 'o'\n\ndef test_check():\n    check(get_closest_vowel)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nget_closest_vowel() {\n    word=$1\n    vowels=\"aeiouAEIOU\"\n    for (( i=${#word}-2; i>0; i-- )); do\n        if [[ $vowels == *\"${word:$i:1}\"* ]]; then\n            if [[ $vowels != *\"${word:$((i+1)):1}\"* ]] && [[ $vowels != *\"${word:$((i-1)):1}\"* ]]; then\n                echo \"${word:$i:1}\"\n                return\n            fi\n        fi\n    done\n    echo \"\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef get_closest_vowel(word: str) -> str:\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "py",
    "prompt": "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local game=($1)\n    local guess=($2)\n    local result=()\n    for ((i=0;i<${#game[@]};++i)); do\n        result+=($((${game[$i]}-${guess[$i]})))\n    done\n    echo ${result[@]}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "py",
    "prompt": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n\ndef test_check():\n    check(remove_duplicates)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local arr=($1)\n    local c=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort | uniq -c | awk '{if ($1 == 1) print $2}'))\n    echo \"${c[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "py",
    "prompt": "def same_chars(s0: str, s1: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\ndef test_check():\n    check(same_chars)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n    if [[ $(echo $1 | grep -o . | sort | tr -d '\\n') == $(echo $2 | grep -o . | sort | tr -d '\\n') ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef same_chars(s0: str, s1: str) -> bool:\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "py",
    "prompt": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nparse_nested_parens() {\n  local IFS=' '\n  local -a arr=($1)\n  for x in \"${arr[@]}\"; do\n    if [[ -n \"$x\" ]]; then\n      depth=0\n      max_depth=0\n      for (( i=0; i<${#x}; i++ )); do\n        c=\"${x:i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n          depth=$((depth+1))\n          max_depth=$((depth>max_depth?depth:max_depth))\n        else\n          depth=$((depth-1))\n        fi\n      done\n      echo \"$max_depth\"\n    fi\n  done\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\neven_odd_count() {\n    even_count=0\n    odd_count=0\n    for i in $(echo ${1#-} | grep -o .); do\n        if (( $i % 2 == 0 )); then\n            (( even_count++ ))\n        else\n            (( odd_count++ ))\n        fi\n    done\n    echo \"$even_count $odd_count\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "py",
    "prompt": "def fruit_distribution(s: str, n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('5 apples and 6 oranges', 19) == 8\n    assert candidate('5 apples and 6 oranges', 21) == 10\n    assert candidate('0 apples and 1 oranges', 3) == 2\n    assert candidate('1 apples and 0 oranges', 3) == 2\n    assert candidate('2 apples and 3 oranges', 100) == 95\n    assert candidate('2 apples and 3 oranges', 5) == 0\n    assert candidate('1 apples and 100 oranges', 120) == 19\n\ndef test_check():\n    check(fruit_distribution)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n    echo $1 | tr ' ' '\\n' | grep -Eo '[0-9]+' | awk -v n=\"$2\" '{sum+=$1} END {print n-sum}'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef fruit_distribution(s: str, n: int) -> int:\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "py",
    "prompt": "def string_xor(a: str, b: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    a=$1\n    b=$2\n    result=\"\"\n    for ((i=0; i<${#a}; i++)); do\n        if [[ \"${a:$i:1}\" == \"${b:$i:1}\" ]]; then\n            result+=\"0\"\n        else\n            result+=\"1\"\n        fi\n    done\n    echo $result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef string_xor(a: str, b: str) -> str:\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "py",
    "prompt": "def strlen(string: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n\ndef test_check():\n    check(strlen)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nstrlen() {\n    echo ${#1}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef strlen(string: str) -> int:\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "py",
    "prompt": "def string_sequence(n: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstring_sequence() {\n    echo $(seq 0 $1)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef string_sequence(n: int) -> str:\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "py",
    "prompt": "def file_name_check(file_name: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('example.txt') == 'Yes'\n    assert candidate('1example.dll') == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\ndef test_check():\n    check(file_name_check)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nfile_name_check() {\n    suf=(txt exe dll)\n    lst=(${1//./ })\n    if [ ${#lst[@]} -ne 2 ]; then\n        echo \"No\"\n        return\n    fi\n    if [[ ! \" ${suf[@]} \" =~ \" ${lst[1]} \" ]]; then\n        echo \"No\"\n        return\n    fi\n    if [ ${#lst[0]} -eq 0 ] || [[ ! ${lst[0]:0:1} =~ [a-zA-Z] ]]; then\n        echo \"No\"\n        return\n    fi\n    t=$(echo ${lst[0]} | grep -o '[0-9]' | wc -l)\n    if [ $t -gt 3 ]; then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef file_name_check(file_name: str) -> str:\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "py",
    "prompt": "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 3, 5]) == 3\n    assert candidate([1, 2, 4, 5]) == -1\n    assert candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n    assert candidate([4, 8, 5, 7, 3]) == 4\n    assert candidate([]) == -1\n\ndef test_check():\n    check(can_arrange)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncan_arrange() {\n  arr=($1)\n  ind=-1\n  i=1\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] < arr[i-1] )); then\n      ind=$i\n    fi\n    (( i++ ))\n  done\n  echo $ind\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "py",
    "prompt": "from typing import List\n\ndef add(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nadd() {\n    echo $1 | awk '{for(i=2;i<=NF;i+=2) if($i%2==0) sum+=$i} END {print sum}'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "py",
    "prompt": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n\ndef test_check():\n    check(intersperse)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n    if [ -z \"$1\" ]; then\n        return\n    fi\n\n    result=()\n\n    for n in ${1% *} ; do\n        result+=($n)\n        result+=($2)\n    done\n\n    result+=(${1##* })\n\n    echo \"${result[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "py",
    "prompt": "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes'\n\ndef test_check():\n    check(match_parens)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmatch_parens() {\n    lst=($1)\n    S1=${lst[0]}${lst[1]}\n    S2=${lst[1]}${lst[0]}\n    if [[ $(echo $S1 | grep -o '(' | wc -l) -eq $(echo $S1 | grep -o ')' | wc -l) ]] || [[ $(echo $S2 | grep -o '(' | wc -l) -eq $(echo $S2 | grep -o ')' | wc -l) ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef match_parens(lst: List[str]) -> str:\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "py",
    "prompt": "def any_int(x: float, y: float, z: float) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  if [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n    if (( $1 + $2 == $3 )) || (( $1 + $3 == $2 )) || (( $2 + $3 == $1 )); then\n      echo true\n    else\n      echo false\n    fi\n  else\n    echo false\n  fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef any_int(x: float, y: float, z: float) -> bool:\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "py",
    "prompt": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nfind_max() {\n    echo $1 | tr ' ' '\\n' | sort -u | sort -rn | head -1\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef find_max(words: List[str]) -> str:\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "py",
    "prompt": "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2, 10) == [2, 4, 6, 8]\n    assert candidate(10, 2) == [2, 4, 6, 8]\n    assert candidate(132, 2) == [2, 4, 6, 8]\n    assert candidate(17, 89) == []\n\ndef test_check():\n    check(generate_integers)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n    lower=$(( $1 < $2 ? $1 : $2 ))\n    upper=$(( $1 > $2 ? $1 : $2 ))\n    lower=$(( $lower > 2 ? $lower : 2 ))\n    upper=$(( $upper < 8 ? $upper : 8 ))\n    for ((i=$lower; i<=$upper; i+=2)); do\n        echo $i\n    done\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "py",
    "prompt": "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == 'YES'\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == 'NO'\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == 'YES'\n    assert candidate([5, 7, 3], [2, 6, 4]) == 'YES'\n    assert candidate([5, 7, 3], [2, 6, 3]) == 'NO'\n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == 'NO'\n    assert candidate([100, 200], [200, 200]) == 'YES'\n\ndef test_check():\n    check(exchange)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    lst1=($1)\n    lst2=($2)\n    odd=0\n    even=0\n    for i in \"${lst1[@]}\"; do\n        if ((i%2 == 1)); then\n            odd=$((odd+1))\n        fi\n    done\n    for i in \"${lst2[@]}\"; do\n        if ((i%2 == 0)); then\n            even=$((even+1))\n        fi\n    done\n    if ((even >= odd)); then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "py",
    "prompt": "def int_to_mini_roman(number: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\ndef test_check():\n    check(int_to_mini_roman)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nint_to_mini_roman() {\n    num=(1 4 5 9 10 40 50 90 100 400 500 900 1000)\n    sym=(\"I\" \"IV\" \"V\" \"IX\" \"X\" \"XL\" \"L\" \"XC\" \"C\" \"CD\" \"D\" \"CM\" \"M\")\n    i=12\n    res=\"\"\n    number=$1\n    while [ $number -ne 0 ]; do\n        div=$((number / num[i]))\n        number=$((number % num[i]))\n        while [ $div -ne 0 ]; do\n            res+=\"${sym[i]}\"\n            div=$((div - 1))\n        done\n        i=$((i - 1))\n    done\n    echo $res | tr '[:upper:]' '[:lower:]'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef int_to_mini_roman(number: int) -> str:\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "py",
    "prompt": "def is_equal_to_sum_even(n: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n\ndef test_check():\n    check(is_equal_to_sum_even)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_equal_to_sum_even() {\n    if (( $1 % 2 == 0 && $1 >= 8 )); then\n        echo true\n    else\n        echo false\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef is_equal_to_sum_even(n: int) -> bool:\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "py",
    "prompt": "def decimal_to_binary(decimal: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef decimal_to_binary(decimal: int) -> str:\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "py",
    "prompt": "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]\n    assert candidate([5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5]\n    assert candidate([5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5]\n    assert candidate([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1]\n\ndef test_check():\n    check(sort_third)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsort_third() {\n    l=($1)\n    for (( i=2; i<${#l[@]}; i+=3 )); do\n        j=$((i-2))\n        while (( j>=0 && l[j+3]<l[j] )); do\n            tmp=${l[j]}\n            l[j]=${l[j+3]}\n            l[j+3]=$tmp\n            j=$((j-3))\n        done\n    done\n    echo \"${l[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "py",
    "prompt": "def simplify(x: str, n: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('1/5', '5/1') == True\n    assert candidate('1/6', '2/1') == False\n    assert candidate('5/1', '3/1') == True\n    assert candidate('7/10', '10/2') == False\n    assert candidate('2/10', '50/10') == True\n    assert candidate('7/2', '4/2') == True\n    assert candidate('11/6', '6/1') == True\n    assert candidate('2/3', '5/2') == False\n    assert candidate('5/2', '3/5') == False\n    assert candidate('2/4', '8/4') == True\n    assert candidate('2/4', '4/2') == True\n    assert candidate('1/5', '5/1') == True\n    assert candidate('1/5', '1/5') == False\n\ndef test_check():\n    check(simplify)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n    IFS=\"/\" read -ra x <<< \"$1\"\n    IFS=\"/\" read -ra n <<< \"$2\"\n    numerator=$(( ${x[0]} * ${n[0]} ))\n    denom=$(( ${x[1]} * ${n[1]} ))\n    if (( $numerator % $denom == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef simplify(x: str, n: str) -> bool:\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "py",
    "prompt": "def solve(s: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nsolve() {\n    flg=0\n    idx=0\n    new_str=($1)\n    for i in $1; do\n        if [[ $i =~ [a-zA-Z] ]]; then\n            new_str[$idx]=$(echo $i | tr '[:upper:][:lower:]' '[:lower:][:upper:]')\n            flg=1\n        fi\n        ((idx++))\n    done\n    s=\"\"\n    for i in ${new_str[@]}; do\n        s+=$i\n    done\n    if [[ $flg -eq 0 ]]; then\n        echo $s | rev\n    else\n        echo $s\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef solve(s: str) -> str:\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "py",
    "prompt": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n    if [[ $(($1*$1)) -eq $(($2*$2+$3*$3)) || $(($2*$2)) -eq $(($1*$1+$3*$3)) || $(($3*$3)) -eq $(($1*$1+$2*$2)) ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n"
  },
  {
    "name": "HumanEval_137_compare_one",
    "language": "py",
    "prompt": "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_137_compare_one.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, '2,3') == '2,3'\n    assert candidate('5,1', '6') == '6'\n    assert candidate('1', '2') == '2'\n    assert candidate('1', 1) == None\n\ndef test_check():\n    check(compare_one)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    local a=$1\n    local b=$2\n    if [[ $a == *,* ]]; then\n        a=${a/,/.}\n    fi\n    if [[ $b == *,* ]]; then\n        b=${b/,/.}\n    fi\n    if (( $(echo \"$a > $b\" | bc -l) )); then\n        echo $a\n    elif (( $(echo \"$a < $b\" | bc -l) )); then\n        echo $b\n    else\n        echo \"None\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "py",
    "prompt": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nbelow_zero() {\n    balance=0\n    for op in $1; do\n        ((balance+=op))\n        if [[ $balance -lt 0 ]]; then\n            echo true\n            return 0\n        fi\n    done\n    echo false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "py",
    "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n\ndef test_check():\n    check(greatest_common_divisor)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n    a=$1\n    b=$2\n    while [[ $b -ne 0 ]]; do\n        tmp=$b\n        b=$((a%b))\n        a=$tmp\n    done\n    echo $a\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "py",
    "prompt": "from typing import List\n\ndef f(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nf() {\n    ret=()\n    for ((i=1;i<=$1;i++)); do\n        if ((i%2==0)); then\n            x=1\n            for ((j=1;j<=i;j++)); do ((x*=j)); done\n            ret+=($x)\n        else\n            x=0\n            for ((j=1;j<=i;j++)); do ((x+=j)); done\n            ret+=($x)\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef f(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "py",
    "prompt": "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nmonotonic() {\n    local arr=($1)\n    local sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local sorted_arr_reverse=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -nr))\n    if [[ \"${arr[*]}\" == \"${sorted_arr[*]}\" ]] || [[ \"${arr[*]}\" == \"${sorted_arr_reverse[*]}\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "py",
    "prompt": "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n    assert candidate([]) == []\n    assert candidate([1, -1, 55]) == ['One']\n    assert candidate([1, -1, 3, 2]) == ['Three', 'Two', 'One']\n    assert candidate([9, 4, 8]) == ['Nine', 'Eight', 'Four']\n\ndef test_check():\n    check(by_length)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nby_length() {\n    dic=( One Two Three Four Five Six Seven Eight Nine )\n    sorted_arr=($(echo \"$1\" | tr ' ' '\\n' | sort -nr))\n    new_arr=()\n    for var in \"${sorted_arr[@]}\"; do\n        if [[ $var -ge 1 && $var -le 9 ]]; then\n            new_arr+=(\"${dic[var-1]}\")\n        fi\n    done\n    echo \"${new_arr[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "py",
    "prompt": "def remove_vowels(text: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('abcdef\\nghijklm') == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\ndef test_check():\n    check(remove_vowels)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nremove_vowels() {\n  echo $1 | tr -d 'aeiouAEIOU'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef remove_vowels(text: str) -> str:\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "py",
    "prompt": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('apple') == False\n    assert candidate('apple pi e') == True\n    assert candidate('eeeee') == False\n    assert candidate('A') == True\n    assert candidate('Pumpkin pie ') == False\n    assert candidate('Pumpkin pie 1') == False\n    assert candidate('') == False\n    assert candidate('eeeee e ') == False\n    assert candidate('apple pie') == False\n    assert candidate('apple pi e ') == False\n\ndef test_check():\n    check(check_if_last_char_is_a_letter)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  check=$(echo $1 | awk '{print $NF}')\n  if [[ ${#check} -eq 1 && $(printf '%d' \"'${check,,}\") -ge 97 && $(printf '%d' \"'${check,,}\") -le 122 ]]; then\n    echo true\n  else\n    echo false\n  fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "py",
    "prompt": "def iscube(a: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\niscube() {\n    a=$(echo $1 | tr -d '-')\n    if [ $(echo \"scale=0; $a^(1/3)\" | bc) -eq $a ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef iscube(a: int) -> bool:\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    s=$(echo $1 | tr -d $2)\n    if [ $s = $(echo $s | rev) ]; then\n        echo \"$s true\"\n    else\n        echo \"$s false\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "py",
    "prompt": "def correct_bracketing(brackets: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\ncorrect_bracketing() {\n    depth=0\n    for (( i=0; i<${#1}; i++ )); do\n        b=${1:$i:1}\n        if [[ $b == \"<\" ]]; then\n            (( depth++ ))\n        else\n            (( depth-- ))\n        fi\n        if (( depth < 0 )); then\n            echo \"false\"\n            return\n        fi\n    done\n    if (( depth == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef correct_bracketing(brackets: str) -> bool:\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "py",
    "prompt": "from typing import Tuple\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate((1, 2), (2, 3)) == 'NO'\n    assert candidate((-1, 1), (0, 4)) == 'NO'\n    assert candidate((-3, -1), (-5, 5)) == 'YES'\n    assert candidate((-2, 2), (-4, 0)) == 'YES'\n    assert candidate((-11, 2), (-1, -1)) == 'NO'\n    assert candidate((1, 2), (3, 5)) == 'NO'\n    assert candidate((1, 2), (1, 2)) == 'NO'\n    assert candidate((-2, -2), (-3, -2)) == 'NO'\n\ndef test_check():\n    check(intersection)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    is_prime() {\n        if [ $1 -eq 1 ] || [ $1 -eq 0 ]; then\n            return 1\n        fi\n        if [ $1 -eq 2 ]; then\n            return 0\n        fi\n        for (( i=2; i<$1; i++ )); do\n            if [ $(( $1 % $i )) -eq 0 ]; then\n                return 1\n            fi\n        done\n        return 0\n    }\n\n    l=$(echo $1 | cut -d' ' -f1)\n    r=$(echo $2 | cut -d' ' -f2)\n    length=$(( $r - $l ))\n    if [ $length -gt 0 ] && is_prime $length; then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import Tuple\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "py",
    "prompt": "def hex_key(num: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nhex_key() {\n    primes=\"2357BD\"\n    total=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ $primes == *\"${1:i:1}\"* ]]; then\n            (( total++ ))\n        fi\n    done\n    echo $total\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef hex_key(num: str) -> int:\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "py",
    "prompt": "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local lst=$1\n    local res=()\n    local switch=true\n    while [ -n \"$lst\" ]; do\n        if $switch; then\n            res+=($(echo $lst | tr ' ' '\\n' | sort -n | head -n 1))\n        else\n            res+=($(echo $lst | tr ' ' '\\n' | sort -n | tail -n 1))\n        fi\n        lst=$(echo $lst | sed \"s/${res[-1]}//\")\n        switch=!$switch\n    done\n    echo \"${res[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "py",
    "prompt": "def is_bored(S: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I will be productive. will kill It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_bored() {\n    # TODO: Implement this function.\n    echo 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef is_bored(S: str) -> int:\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "py",
    "prompt": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nall_prefixes() {\n    result=()\n    for (( i=0; i<${#1}; i++ )); do\n        result+=(${1:0:i+1})\n    done\n    echo ${result[@]}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "py",
    "prompt": "def how_many_times(string: str, substring: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    times=0\n    for ((i=0; i<${#1}-${#2}+1; i++)); do\n        if [[ ${1:i:${#2}} == $2 ]]; then\n            ((times++))\n        fi\n    done\n    echo $times\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef how_many_times(string: str, substring: str) -> int:\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "py",
    "prompt": "from typing import List\n\ndef solution(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, 8, 7, 1]) == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\ndef test_check():\n    check(solution)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsolution() {\n    echo $1 | tr ' ' '\\n' | awk '{if(NR%2==1&&$1%2==1)sum+=$1}END{print sum}'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef solution(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "py",
    "prompt": "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False\n    assert candidate([]) == True\n    assert candidate([1]) == True\n    assert candidate([3, 2, 1]) == False\n    assert candidate([1, 2, 2, 2, 3, 4]) == False\n    assert candidate([1, 2, 3, 3, 3, 4]) == False\n    assert candidate([1, 2, 2, 3, 3, 4]) == True\n    assert candidate([1, 2, 3, 4]) == True\n\ndef test_check():\n    check(is_sorted)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nis_sorted() {\n    lst=($1)\n    declare -A count_digit\n    for i in \"${lst[@]}\"; do\n        ((count_digit[$i]++))\n    done\n    for i in \"${lst[@]}\"; do\n        if [[ ${count_digit[$i]} -gt 2 ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    for (( i=1; i<${#lst[@]}; i++ )); do\n        if [[ ${lst[i-1]} -gt ${lst[i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "py",
    "prompt": "from typing import List\n\ndef search(lst: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nsearch() {\n    lst=($1)\n    frq=()\n    for i in ${lst[@]}; do\n        frq[$i]=$((frq[$i]+1))\n    done\n\n    ans=-1\n    for ((i=1; i<${#frq[@]}; i++)); do\n        if [[ ${frq[$i]} -ge $i ]]; then\n            ans=$i\n        fi\n    done\n\n    echo $ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "py",
    "prompt": "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npluck() {\n    local arr=($1)\n    local evens=($(echo \"${arr[@]}\" | tr ' ' '\\n' | awk '{if($1%2==0) print $1}' | sort -n))\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"\"\n    else\n        echo \"${evens[0]} $(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -n \"${evens[0]}\" | cut -d':' -f1 | head -n1)\"\n    fi\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "py",
    "prompt": "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\ndef test_check():\n    check(pairs_sum_to_zero)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n    l=($1)\n    for ((i=0; i<${#l[@]}; i++)); do\n        for ((j=i+1; j<${#l[@]}; j++)); do\n            if ((l[i] + l[j] == 0)); then\n                echo true\n                return\n            fi\n        done\n    done\n    echo false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "py",
    "prompt": "def make_palindrome(string: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n\ndef test_check():\n    check(make_palindrome)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nmake_palindrome() {\n    local string=$1\n    local beginning_of_suffix=0\n\n    while [[ ${string:$beginning_of_suffix} != $(echo ${string:$beginning_of_suffix} | rev) ]]; do\n        ((beginning_of_suffix++))\n    done\n\n    echo \"$string$(echo ${string:0:$beginning_of_suffix} | rev)\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef make_palindrome(string: str) -> str:\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "py",
    "prompt": "def starts_one_ends(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\ndef test_check():\n    check(starts_one_ends)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nstarts_one_ends() {\n    if [[ $1 -eq 1 ]]; then echo 1; return; fi\n    echo $(( 18 * (10 ** ($1 - 2)) ))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef starts_one_ends(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "py",
    "prompt": "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nget_positive() {\n  echo $1 | tr ' ' '\\n' | awk '$1 > 0 {print $1}'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "py",
    "prompt": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n\ndef test_check():\n    check(concatenate)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\nconcatenate() {\n    echo \"$1\" | tr -d ' '\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "py",
    "prompt": "def is_nested(string: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('[[]]') == True\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate('[]') == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n    assert candidate('') == False\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\ndef test_check():\n    check(is_nested)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_nested() {\n    string=$1\n    opening_bracket_index=()\n    closing_bracket_index=()\n    for (( i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} == \"[\" ]]; then\n            opening_bracket_index+=($i)\n        else\n            closing_bracket_index+=($i)\n        fi\n    done\n    closing_bracket_index=($(echo \"${closing_bracket_index[@]}\" | tr ' ' '\\n' | tac | tr '\\n' ' '))\n    cnt=0\n    i=0\n    l=${#closing_bracket_index[@]}\n    for idx in ${opening_bracket_index[@]}; do\n        if [[ $i -lt $l && $idx -lt ${closing_bracket_index[$i]} ]]; then\n            cnt=$((cnt+1))\n            i=$((i+1))\n        fi\n    done\n    [[ $cnt -ge 2 ]] && echo true || echo false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef is_nested(string: str) -> bool:\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "py",
    "prompt": "def is_palindrome(text: str) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nis_palindrome() {\n    text=$1\n    for (( i=0; i<${#text}; i++ )); do\n        if [[ ${text:i:1} != ${text: -1 -i:1} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef is_palindrome(text: str) -> bool:\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "py",
    "prompt": "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([0, 1]) == 1\n    assert candidate([1]) == 1\n\ndef test_check():\n    check(count_nums)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a space-separated list\ncount_nums() {\n    local arr=($1)\n    local count=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n            local digits_sum=$(echo $i | sed 's/./&+/g' | sed 's/.$//' | bc)\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef count_nums(arr: List[int]) -> int:\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "py",
    "prompt": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nfactorize() {\n    n=$1\n    fact=()\n    i=2\n    while [[ $i -le $((n/2+1)) ]]; do\n        if [[ $((n%i)) -eq 0 ]]; then\n            fact+=($i)\n            n=$((n/i))\n        else\n            ((i++))\n        fi\n    done\n    if [[ $n -gt 1 ]]; then\n        fact+=($n)\n    fi\n    echo \"${fact[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "py",
    "prompt": "def largest_prime_factor(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nlargest_prime_factor() {\n    largest=1\n    for ((j=2; j<=$1; j++)); do\n        if (( $1 % $j == 0 )) && is_prime $j; then\n            largest=$(( $largest > $j ? $largest : $j ))\n        fi\n    done\n    echo $largest\n}\n\nis_prime() {\n    if (( $1 < 2 )); then\n        return 1\n    fi\n    for ((i=2; i<$1; i++)); do\n        if (( $1 % $i == 0 )); then\n            return 1\n        fi\n    done\n    return 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef largest_prime_factor(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "py",
    "prompt": "def get_max_triples(n: int) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nget_max_triples() {\n    n=$1\n    ans=0\n    for (( i=1; i<n; i++ )); do\n        for (( j=i+1; j<n; j++ )); do\n            for (( k=j+1; k<=n; k++ )); do\n                if (( (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 )); then\n                    (( ans++ ))\n                fi\n            done\n        done\n    done\n    echo \"$ans\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef get_max_triples(n: int) -> int:\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "py",
    "prompt": "def anti_shuffle(s: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nanti_shuffle() {\n  echo \"$1\" | tr ' ' '\\n' | while read word; do\n    echo \"$word\" | grep -o . | sort | tr -d '\\n'\n    echo -n ' '\n  done | sed 's/ $//'\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef anti_shuffle(s: str) -> str:\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "py",
    "prompt": "def solve(N: int) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(1000) == '1'\n    assert candidate(150) == '110'\n    assert candidate(147) == '1100'\n    assert candidate(333) == '1001'\n    assert candidate(963) == '10010'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nsolve() {\n    echo \"obase=2; $(echo $1 | sed 's/./&+/g; s/.$//')\" | bc\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef solve(N: int) -> str:\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "py",
    "prompt": "from typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\ndef test_check():\n    check(minPath)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=($(echo \"$1\" | tr ' ' '\\n'))\n    local k=$2\n    local n=${#grid[@]}\n    local val=$((n * n + 1))\n    for (( i=0; i<$n; i++ )); do\n        for (( j=0; j<$n; j++ )); do\n            if [[ ${grid[$i]:$j:1} -eq 1 ]]; then\n                temp=()\n                if [[ $i -ne 0 ]]; then\n                    temp+=(${grid[$((i-1))]:$j:1})\n                fi\n                if [[ $j -ne 0 ]]; then\n                    temp+=(${grid[$i]:$((j-1)):1})\n                fi\n                if [[ $i -ne $((n-1)) ]]; then\n                    temp+=(${grid[$((i+1))]:$j:1})\n                fi\n                if [[ $j -ne $((n-1)) ]]; then\n                    temp+=(${grid[$i]:$((j+1)):1})\n                fi\n                val=$(echo \"${temp[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n            fi\n        done\n    done\n    ans=()\n    for (( i=0; i<$k; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            ans+=(\"1\")\n        else\n            ans+=(\"$val\")\n        fi\n    done\n    echo \"${ans[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "py",
    "prompt": "def encrypt(s: str) -> str:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('hi') == 'lm'\n    assert candidate('asdfghjkl') == 'ewhjklnop'\n    assert candidate('gf') == 'kj'\n    assert candidate('et') == 'ix'\n    assert candidate('faewfawefaewg') == 'jeiajeaijeiak'\n    assert candidate('hellomyfriend') == 'lippsqcjvmirh'\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') == 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n    assert candidate('a') == 'e'\n\ndef test_check():\n    check(encrypt)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is a string\nencrypt() {\n    d='abcdefghijklmnopqrstuvwxyz'\n    out=''\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $d == *\"$c\"* ]]; then\n            out+=\"${d:(( ${d%%$c*} + 4 ) % 26 ):1}\"\n        else\n            out+=\"$c\"\n        fi\n    done\n    echo \"$out\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef encrypt(s: str) -> str:\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "py",
    "prompt": "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(3) == [3, 5, 7]\n    assert candidate(4) == [4, 6, 8, 10]\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\ndef test_check():\n    check(make_a_pile)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nmake_a_pile() {\n    n=$1\n    for (( i=0; i<$n; i++ )); do\n        (( pile[i]=n+2*i ))\n    done\n    echo \"${pile[@]}\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\nfrom typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "py",
    "prompt": "def is_prime(n: int) -> bool:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n",
    "stop_tokens": [
      "\ndef",
      "\n#",
      "\nif",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Bash program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python.\n\n### Bash version\n\n#!/bin/bash\n# \n#\n# $1 is an integer\nis_prime() {\n    if [ $1 -lt 2 ]; then\n        echo \"false\"\n        return\n    fi\n    for (( k=2; k<$1; k++ )); do\n        if [ $(( $1 % $k )) -eq 0 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Python version\n\ndef is_prime(n: int) -> bool:\n"
  }
]