[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n  (let loop ((depth 0)\n             (bs (string->list brackets)))\n    (cond\n      [(null? bs) (= depth 0)]\n      [(char=? (car bs) #\\() (loop (add1 depth) (cdr bs))]\n      [(char=? (car bs) #\\)) (and (> depth 0) (loop (sub1 depth) (cdr bs)))]\n      [else (loop depth (cdr bs))])))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(a : Long, h : Long) : Float = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (triangle_area a h)\n  (/ (* a h) 2.0))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(a : Long, h : Long) : Float = {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFactorial(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (special_factorial n)\n  (define (fact i)\n    (if (zero? i) 1 (* i (fact (- i 1)))))\n  (define (special_fact i)\n    (if (zero? i) 1 (* (fact i) (special_fact (- i 1)))))\n  (special_fact n))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFactorial(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong, 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l, 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_smallest_integers lst)\n  (define smallest (filter (lambda (x) (< x 0)) lst))\n  (define largest (filter (lambda (x) (> x 0)) lst))\n  (list (if (null? smallest) #f (apply max smallest))\n        (if (null? largest) #f (apply min largest))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def moveOneBall(arr : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 10l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](4l.toLong, 3l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long]())) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (move_one_ball arr)\n  (if (null? arr)\n      #t\n      (let ((sorted-array (sort arr <))\n            (my-arr '()))\n        (let ((min-value (apply min arr))\n              (min-index (index-of arr (apply min arr))))\n          (set! my-arr (append (drop arr min-index) (take arr min-index))))\n        (for/and ((i (in-range (length arr))))\n          (= (list-ref my-arr i) (list-ref sorted-array i))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def moveOneBall(arr : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digits(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (digits n)\n  (define (odd? x) (= (modulo x 2) 1))\n  (define (product lst) (apply * lst))\n  (define digits (map (lambda (x) (string->number (string x))) (string->list (number->string n))))\n  (define odd-digits (filter odd? digits))\n  (if (null? odd-digits)\n      0\n      (product odd-digits)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digits(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib4(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fib4 n)\n  (define results (list 0 0 2 0))\n  (if (< n 4)\n      (list-ref results n)\n      (begin\n        (for ([i (in-range 4 (add1 n))])\n          (set! results (append results (list (+ (last results) (list-ref (reverse results) 1) (list-ref (reverse results) 2) (list-ref (reverse results) 3))))))\n        (car (reverse results)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib4(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortEven(l : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (sort_even l)\n  (define evens (for/list ([i (in-range 0 (length l) 2)]) (list-ref l i)))\n  (define odds (for/list ([i (in-range 1 (length l) 2)]) (list-ref l i)))\n  (set! evens (sort evens <))\n  (define ans '())\n  (for ([e evens] [o odds])\n    (set! ans (append ans (list e o))))\n  (when (> (length evens) (length odds))\n    (set! ans (append ans (list (last evens)))))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortEven(l : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isHappy(s : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_happy s)\n  (if (< (string-length s) 3)\n      #f\n      (for/and ([i (in-range (- (string-length s) 2))])\n        (not (or (char=? (string-ref s i) (string-ref s (+ i 1)))\n                 (char=? (string-ref s (+ i 1)) (string-ref s (+ i 2)))\n                 (char=? (string-ref s i) (string-ref s (+ i 2))))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isHappy(s : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def circularShift(x : Long, shift : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (circular_shift x shift)\n  (define s (number->string x))\n  (if (> shift (string-length s))\n      (list->string (reverse (string->list s)))\n      (string-append (substring s (- (string-length s) shift)) (substring s 0 (- (string-length s) shift)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def circularShift(x : Long, shift : Long) : String = {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l)) == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (max_fill grid capacity)\n  (apply + (map (lambda (arr) (ceiling (/ (apply + arr) capacity))) grid)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (has_close_elements numbers threshold)\n  (define (helper i j)\n    (cond [(= i (length numbers)) #f]\n          [(= j (length numbers)) (helper (+ i 1) (+ i 2))]\n          [(< (abs (- (list-ref numbers i) (list-ref numbers j))) threshold) #t]\n          [else (helper i (+ j 1))]))\n  (helper 0 1))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (numerical_letter_grade grades)\n  (define (grade gpa)\n    (cond [(= gpa 4.0) \"A+\"]\n          [(> gpa 3.7) \"A\"]\n          [(> gpa 3.3) \"A-\"]\n          [(> gpa 3.0) \"B+\"]\n          [(> gpa 2.7) \"B\"]\n          [(> gpa 2.3) \"B-\"]\n          [(> gpa 2.0) \"C+\"]\n          [(> gpa 1.7) \"C\"]\n          [(> gpa 1.3) \"C-\"]\n          [(> gpa 1.0) \"D+\"]\n          [(> gpa 0.7) \"D\"]\n          [(> gpa 0.0) \"D-\"]\n          [else \"E\"]))\n  (map grade grades))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (x_or_y n x y)\n  (cond\n    [(= n 1) y]\n    [(for/or ([i (in-range 2 n)]) (= (modulo n i) 0)) y]\n    [else x]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFilter(nums : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (specialFilter nums)\n  (define count 0)\n  (for ([num nums])\n    (when (> num 10)\n      (let ([number_as_string (number->string num)])\n        (when (and (odd? (string->number (substring number_as_string 0 1)))\n                   (odd? (string->number (substring number_as_string (- (string-length number_as_string) 1)))))\n          (set! count (add1 count))))))\n  count)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def specialFilter(nums : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseMusic(music_string : String) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (parse_music music_string)\n  (define note-map (hash \"o\" 4 \"o|\" 2 \".|\" 1))\n  (define (note->int note)\n    (hash-ref note-map note))\n  (filter-map note->int (string-split music_string \" \")))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseMusic(music_string : String) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def splitWords(txt : String) : Either[List[String], Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (split_words txt)\n  (cond\n    [(regexp-match? #rx\" \" txt) (string-split txt)]\n    [(regexp-match? #rx\",\" txt) (string-split (string-replace txt \",\" \" \"))]\n    [else (length (filter (lambda (i) (and (char-lower-case? i) (even? (char->integer i)))) (string->list txt)))]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def splitWords(txt : String) : Either[List[String], Long] = {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countDistinctCharacters(string : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (count_distinct_characters string)\n  (length (remove-duplicates (string->list (string-downcase string)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countDistinctCharacters(string : String) : Long = {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digitSum(s : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (digitSum s)\n  (if (string=? s \"\") 0\n      (for/sum ((char (in-string s)))\n        (if (char-upper-case? char) (char->integer char) 0))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digitSum(s : String) : Long = {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n  (define (f i)\n    (cond [(= (modulo i 3) 0) (expt (list-ref lst i) 2)]\n          [(and (= (modulo i 4) 0) (not (= (modulo i 3) 0))) (expt (list-ref lst i) 3)]\n          [else (list-ref lst i)]))\n  (apply + (map f (range (length lst)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpTo(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_up_to n)\n  (define (is_prime x)\n    (and (> x 1) (not (ormap (lambda (i) (= (modulo x i) 0)) (range 2 x)))) )\n  (filter is_prime (range 2 n)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpTo(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Float]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat, 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat, 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat))) == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n    assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) == (2l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_squares lst)\n  (define (square x) (* x x))\n  (apply + (map square (map (lambda (x) (ceiling x)) lst))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSquares(lst : List[Float]) : Long = {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def unique(l : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (unique l)\n  (sort (remove-duplicates l) <))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def unique(l : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fib n)\n  (if (or (= n 0) (= n 1))\n      n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fib(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fizzBuzz(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (fizz_buzz n)\n  (define ns (filter (lambda (x) (or (= (modulo x 11) 0) (= (modulo x 13) 0))) (range n)))\n  (define s (string-join (map number->string ns) \"\"))\n  (define ans (count (lambda (c) (char=? c #\\7)) (string->list s)))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fizzBuzz(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (Strongest_Extension class_name extensions)\n  (define strong (first extensions))\n  (define my-val (- (length (regexp-match* #rx\"[A-Z]\" strong)) (length (regexp-match* #rx\"[a-z]\" strong))))\n  (for-each (lambda (s)\n              (let ([val (- (length (regexp-match* #rx\"[A-Z]\" s)) (length (regexp-match* #rx\"[a-z]\" s)))])\n                (when (> val my-val)\n                  (set! strong s)\n                  (set! my-val val))))\n            (cdr extensions))\n  (string-append class_name \".\" strong))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (find_closest_elements numbers)\n  (define closest-pair #f)\n  (define distance #f)\n\n  (for ([i (in-range (length numbers))])\n    (for ([j (in-range (length numbers))])\n      (unless (= i j)\n        (let ([new-distance (abs (- (list-ref numbers i) (list-ref numbers j)))])\n          (when (or (not distance) (< new-distance distance))\n            (set! distance new-distance)\n            (set! closest-pair (sort (list (list-ref numbers i) (list-ref numbers j)) <)))))))\n\n  closest-pair)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def validDate(date : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (valid_date date)\n  (define (is-valid-date month day year)\n    (cond [(or (< month 1) (> month 12)) #f]\n          [(and (member month '(1 3 5 7 8 10 12)) (or (< day 1) (> day 31))) #f]\n          [(and (member month '(4 6 9 11)) (or (< day 1) (> day 30))) #f]\n          [(and (= month 2) (or (< day 1) (> day 29))) #f]\n          [else #t]))\n  (with-handlers ([exn:fail? (lambda (e) #f)])\n    (let ([date-list (map string->number (string-split date \"-\"))])\n      (apply is-valid-date date-list))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def validDate(date : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(x : Long, y : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (add x y)\n  (+ x y))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(x : Long, y : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (triples_sum_to_zero l)\n  (for*/first ([i (in-range (length l))]\n               [j (in-range (add1 i) (length l))]\n               [k (in-range (add1 j) (length l))]\n               #:when (= 0 (+ (list-ref l i) (list-ref l j) (list-ref l k))))\n    #t))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestDivisor(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (largest_divisor n)\n  (for/first ([i (reverse (range 1 n))] #:when (= (modulo n i) 0))\n    i))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestDivisor(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortNumbers(numbers : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sort_numbers numbers)\n  (define value-map (hash \"zero\" 0 \"one\" 1 \"two\" 2 \"three\" 3 \"four\" 4 \"five\" 5 \"six\" 6 \"seven\" 7 \"eight\" 8 \"nine\" 9))\n  (string-join (sort (filter (lambda (x) (not (string=? x \"\"))) (string-split numbers \" \")) (lambda (a b) (< (hash-ref value-map a) (hash-ref value-map b)))) \" \"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortNumbers(numbers : String) : String = {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def smallestChange(arr : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong))) == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong, 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (smallest_change arr)\n  (define ans 0)\n  (for ([i (in-range (quotient (length arr) 2))])\n    (when (not (= (list-ref arr i) (list-ref arr (- (length arr) i 1))))\n      (set! ans (+ ans 1))))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def smallestChange(arr : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (below_threshold l t)\n  (for/and ([e l])\n    (< e t)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong))).equals(-9l));\n    assert(prodSigns((List[Long](0l.toLong, 1l.toLong))).equals(0l));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(-10l));\n    assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(20l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(4l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(-4l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (prod_signs arr)\n  (if (null? arr) #f\n      (let ((prod (if (member 0 arr) 0 (expt -1 (length (filter (lambda (x) (< x 0)) arr))))))\n        (* prod (apply + (map abs arr))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def modp(n : Long, p : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (modp n p)\n  (define ret 1)\n  (for ([i (in-range n)])\n    (set! ret (modulo (* 2 ret) p)))\n  ret)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def modp(n : Long, p : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpper(s : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (count_upper s)\n  (define count 0)\n  (for ([i (in-range 0 (string-length s) 2)])\n    (when (member (string-ref s i) (string->list \"AEIOU\"))\n      (set! count (+ count 1))))\n  count)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countUpper(s : String) : Long = {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def multiply(a : Long, b : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (multiply a b)\n  (abs (* (modulo a 10) (modulo b 10))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def multiply(a : Long, b : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (unique_digits x)\n  (define (all-odd-digits? n)\n    (andmap odd? (map (lambda (c) (string->number (string c))) (string->list (number->string n)))))\n  (sort (filter all-odd-digits? x) <))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (will_it_fly q w)\n  (cond [(> (apply + q) w) #f]\n        [(not (equal? q (reverse q))) #f]\n        [else #t]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isMultiplyPrime(a : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_multiply_prime a)\n  (define (is-prime n)\n    (for/and ([j (in-range 2 n)])\n      (not (= (modulo n j) 0))))\n  (for/or ([i (in-range 2 101)])\n    (for/or ([j (in-range 2 101)])\n      (for/or ([k (in-range 2 101)])\n        (and (is-prime i) (is-prime j) (is-prime k) (= (* i j k) a))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong, -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (maximum arr k)\n  (if (= k 0)\n      '()\n      (list-tail (sort arr <) (- (length arr) k))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def separateParenGroups(paren_string : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (separate_paren_groups paren_string)\n  (define result '())\n  (define current_string '())\n  (define current_depth 0)\n\n  (for ([c (string->list paren_string)])\n    (cond [(char=? c #\\() (set! current_depth (add1 current_depth))\n           (set! current_string (append current_string (list c)))]\n          [(char=? c #\\)) (set! current_depth (sub1 current_depth))\n           (set! current_string (append current_string (list c)))\n           (cond [(= current_depth 0) (set! result (append result (list (list->string current_string))))\n                  (set! current_string '())])]))\n  result)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def separateParenGroups(paren_string : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterIntegers(values : List[Any]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (filter_integers values)\n  (filter integer? values))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterIntegers(values : List[Any]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def skjkasdkd(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (skjkasdkd lst)\n  (define (isPrime n)\n    (define (iter i)\n      (cond [(> i (sqrt n)) #t]\n            [(= (modulo n i) 0) #f]\n            [else (iter (+ i 1))]))\n    (if (< n 2) #f (iter 2)))\n\n  (define maxx 0)\n  (for ([i lst])\n    (when (and (> i maxx) (isPrime i))\n      (set! maxx i)))\n  (define result (apply + (map (lambda (d) (string->number (string d))) (string->list (number->string maxx)))))\n  result)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def skjkasdkd(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\", \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (total_match lst1 lst2)\n  (define l1 (apply + (map string-length lst1)))\n  (define l2 (apply + (map string-length lst2)))\n  (if (<= l1 l2) lst1 lst2))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def carRaceCollision(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (car_race_collision n)\n  (* n n))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def carRaceCollision(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (is_simple_power x n)\n  (if (= n 1)\n      (= x 1)\n      (let loop ((power 1))\n        (if (< power x)\n            (loop (* power n))\n            (= power x)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def encode(message : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (encode message)\n  (define vowels \"aeiouAEIOU\")\n  (define vowels-replace (make-hash '((#\\a . #\\c) (#\\e . #\\g) (#\\i . #\\k) (#\\o . #\\q) (#\\u . #\\w) (#\\A . #\\C) (#\\E . #\\G) (#\\I . #\\K) (#\\O . #\\Q) (#\\U . #\\W))))\n\n  (define (swap-case c)\n    (if (char-upper-case? c)\n        (char-downcase c)\n        (char-upcase c)))\n\n  (define (replace-vowels c)\n    (hash-ref vowels-replace c c))\n\n  (list->string (map replace-vowels (map swap-case (string->list message)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def encode(message : String) : String = {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def incrList(l : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong, 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (incr_list l)\n  (map add1 l))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def incrList(l : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def vowelsCount(s : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (vowels_count s)\n  (define vowels \"aeiouAEIOU\")\n  (define n_vowels (count (lambda (c) (member c (string->list vowels))) (string->list s)))\n  (if (or (char=? (last (string->list s)) #\\y) (char=? (last (string->list s)) #\\Y))\n      (+ n_vowels 1)\n      n_vowels))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def vowelsCount(s : String) : Long = {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortedListSum(lst : List[String]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\", \"bbbb\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (sorted_list_sum lst)\n  (define (even-length? str) (= (modulo (string-length str) 2) 0))\n  (define new-lst (filter even-length? (sort lst string<?)))\n  (sort new-lst (lambda (a b) (< (string-length a) (string-length b)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortedListSum(lst : List[String]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsString(s : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (words_string s)\n  (if (not s)\n      '()\n      (string-split (string-replace s \",\" \" \"))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsString(s : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (even_odd_palindrome n)\n  (define (is_palindrome n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n\n  (define even_palindrome_count 0)\n  (define odd_palindrome_count 0)\n  (for ([i (in-range 1 (add1 n))])\n    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]\n          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))\n  (list even_palindrome_count odd_palindrome_count))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]())) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (check_dict_case dict)\n  (define (is-upper s) (string=? s (string-upcase s)))\n  (define (is-lower s) (string=? s (string-downcase s)))\n\n  (cond [(zero? (hash-count dict)) #f]\n        [else\n         (let loop ([state \"start\"] [keys (hash-keys dict)])\n           (cond [(null? keys) (or (string=? state \"upper\") (string=? state \"lower\"))]\n                 [(not (string? (car keys))) #f]\n                 [(string=? state \"start\")\n                  (if (is-upper (car keys))\n                      (loop \"upper\" (cdr keys))\n                      (if (is-lower (car keys))\n                          (loop \"lower\" (cdr keys))\n                          #f))]\n\n                 [(or (and (string=? state \"upper\") (not (is-upper (car keys))))\n                      (and (string=? state \"lower\") (not (is-lower (car keys)))))\n                  #f]\n\n                 [else (loop state (cdr keys))]))]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tri(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (tri n)\n  (if (= n 0)\n      '(1)\n      (let ((my-tri '(1 3)))\n        (for ([i (in-range 2 (add1 n))])\n          (if (even? i)\n              (set! my-tri (append my-tri (list (/ (+ i 2) 2))))\n              (set! my-tri (append my-tri (list (+ (list-ref my-tri (- i 1)) (list-ref my-tri (- i 2)) (/ (+ i 3) 2)))))))\n        my-tri)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tri(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def median(l : List[Long]) : Float = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (median l)\n  (set! l (sort l <))\n  (if (odd? (length l))\n      (list-ref l (quotient (length l) 2))\n      (/ (+ (list-ref l (quotient (length l) 2))\n            (list-ref l (- (quotient (length l) 2) 1)))\n         2.0)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def median(l : List[Long]) : Float = {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def changeBase(x : Long, base : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (change_base x base)\n  (let loop ((x x) (ret \"\"))\n    (if (> x 0)\n        (loop (quotient x base) (string-append (number->string (modulo x base)) ret))\n        ret)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def changeBase(x : Long, base : Long) : String = {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def longest(strings : List[String]) : Option[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (longest strings)\n  (if (null? strings)\n      #f\n      (let ((maxlen (apply max (map string-length strings))))\n        (findf (lambda (s) (= (string-length s) maxlen)) strings))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def longest(strings : List[String]) : Option[String] = {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (common l1 l2)\n  (define ret (make-hash))\n  (for ([e1 l1])\n    (for ([e2 l2])\n      (when (= e1 e2)\n        (hash-set! ret e1 #t))))\n  (sort (hash-keys ret) <))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minSubArraySum(nums : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong))) == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong, -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong, -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong))) == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (minSubArraySum nums)\n  (define max-sum 0)\n  (define s 0)\n  (for ([num nums])\n    (set! s (+ s (- num)))\n    (when (< s 0)\n      (set! s 0))\n    (set! max-sum (max s max-sum)))\n  (when (= max-sum 0)\n    (set! max-sum (apply max (map - nums))))\n  (define min-sum (- max-sum))\n  min-sum)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minSubArraySum(nums : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortArray(array : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong, 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong, 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong, 14l.toLong, 11l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (sort_array array)\n  (if (null? array)\n      '()\n      (sort array (if (even? (+ (first array) (last array))) > <))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortArray(array : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getOddCollatz(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong, 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_odd_collatz n)\n  (define (collatz-seq n)\n    (cond [(= n 1) (list 1)]\n          [(even? n) (cons n (collatz-seq (/ n 2)))]\n          [else (cons n (collatz-seq (+ (* n 3) 1)))]))\n  (let ([seq (collatz-seq n)])\n    (sort (filter odd? seq) <)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getOddCollatz(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def derivative(xs : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (derivative xs)\n  (cdr (map (lambda (x i) (* i x)) xs (range 0 (length xs)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def derivative(xs : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fibfib(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fibfib(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxElement(l : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (max_element l)\n  (apply max l))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxElement(l : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeFib(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prime_fib n)\n  (define (is-prime? p)\n    (cond [(< p 2) #f]\n          [else (for/and ([k (in-range 2 (min (add1 (floor (sqrt p))) (sub1 p)))])\n                  (not (= 0 (modulo p k))))]))\n  (define f (list 0 1))\n  (let loop ([n n])\n    (cond [(= n 0) (car (reverse f))]\n          [else (begin\n                  (set! f (append f (list (+ (car (reverse f)) (cadr (reverse f))))))\n                  (if (is-prime? (car (reverse f)))\n                      (loop (sub1 n))\n                      (loop n)))])))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeFib(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (sum_product numbers)\n  (define sum-value (apply + numbers))\n  (define prod-value (apply * numbers))\n  (list sum-value prod-value))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def selectWords(s : String, n : Long) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (select_words s n)\n  (define (consonant? c)\n    (not (member (char-downcase c) '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (count consonant? (string->list word)))\n  (filter (lambda (word) (= (count-consonants word) n))\n          (string-split s)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def selectWords(s : String, n : Long) : List[String] = {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addElements(arr : List[Long], k : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (add_elements arr k)\n  (apply + (filter (lambda (x) (<= (string-length (number->string x)) 2)) (take arr k))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addElements(arr : List[Long], k : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong, 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong, 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong, 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong, 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong, 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong, 0l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (eat number need remaining)\n  (if (<= need remaining)\n      (list (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddCount(lst : List[String]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (odd_count lst)\n  (map (lambda (arr)\n         (let ([n (count (lambda (d) (odd? (string->number (string d)))) (string->list arr))])\n           (string-append \"the number of odd elements \" (number->string n) \"n the str\" (number->string n) \"ng \" (number->string n) \" of the \" (number->string n) \"nput.\")))\n       lst))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddCount(lst : List[String]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (next_smallest lst)\n  (set! lst (sort (remove-duplicates lst) <))\n  (if (< (length lst) 2)\n      #f\n      (list-ref lst 1)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l, 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()), (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long, Long]]((2l, 2l)))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_row lst x)\n  (define coords\n    (for*/list ([i (in-range (length lst))]\n                [j (in-range (length (list-ref lst i)))]\n                #:when (= (list-ref (list-ref lst i) j) x))\n      (list i j)))\n  (sort coords (lambda (a b) (or (< (first a) (first b))\n                                 (and (= (first a) (first b))\n                                      (> (second a) (second b)))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-prefix? x prefix)) strings))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def chooseNum(x : Long, y : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (choose_num x y)\n  (cond\n    [(> x y) -1]\n    [(even? y) y]\n    [(= x y) -1]\n    [else (- y 1)]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def chooseNum(x : Long, y : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeLength(string : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (prime_length string)\n  (define l (string-length string))\n  (and (> l 1)\n       (not (ormap (lambda (i) (= (modulo l i) 0)) (range 2 l)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeLength(string : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumToN(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (sum_to_n n)\n  (apply + (range 0 (add1 n))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumToN(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fixSpaces(text : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fix_spaces text)\n  (define new_text \"\")\n  (define i 0)\n  (define start 0)\n  (define end 0)\n\n  (define (append_text! text)\n    (if (> (- end start) 2)\n        (set! new_text (string-append new_text \"-\" text))\n        (if (> (- end start) 0)\n            (set! new_text (string-append new_text (make-string (- end start) #\\_ ) text))\n            (set! new_text (string-append new_text text))))\n    (set! start (+ i 1))\n    (set! end (+ i 1)))\n\n  (for ([c (string->list text)])\n    (cond [(char=? c #\\space)\n           (set! end (+ end 1))]\n          [else\n           (append_text! (string c))]))\n\n  (if (> (- end start) 2)\n      (set! new_text (string-append new_text \"-\"))\n      (if (> (- end start) 0)\n          (set! new_text (string-append new_text (make-string (- end start) #\\_)))\n          (void)))\n  new_text)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fixSpaces(text : String) : String = {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (rolling_max numbers)\n  (define running-max #f)\n  (define result '())\n\n  (for ([n (in-list numbers)])\n    (set! running-max (if (not running-max) n (max running-max n)))\n    (set! result (append result (list running-max))))\n\n  result)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsInSentence(sentence : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (words_in_sentence sentence)\n  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))  \n    (if (< n 2) #f (iter 2)))\n  (define (prime-word? word)\n    (or (= (string-length word) 2) (is-prime (string-length word))))\n  (string-join (filter prime-word? (string-split sentence)) \" \"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordsInSentence(sentence : String) : String = {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getClosestVowel(word : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_closest_vowel word)\n  (define vowels (list \"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"O\" \"U\" \"I\"))\n  (let loop ([i (- (string-length word) 2)])\n    (if (< i 1)\n        \"\"\n        (if (member (substring word i (+ i 1)) vowels)\n            (if (and (not (member (substring word (- i 1) i) vowels))\n                     (not (member (substring word (+ i 1) (+ i 2)) vowels)))\n                (substring word i (+ i 1))\n                (loop (- i 1)))\n            (loop (- i 1))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getClosestVowel(word : String) : String = {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (compare game guess)\n  (map abs (map - game guess)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (remove_duplicates numbers)\n  (define c (make-hash))\n  (for ([n numbers])\n    (hash-update! c n add1 0))\n  (filter (lambda (n) (<= (hash-ref c n 0) 1)) numbers))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseNestedParens(paren_string : String) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (parse_nested_parens paren_string)\n  (define (parse_paren_group s)\n    (define depth 0)\n    (define max_depth 0)\n    (for ([c (string->list s)])\n      (if (equal? c #\\()\n          (set! depth (+ depth 1))\n          (set! depth (- depth 1)))\n      (set! max_depth (max depth max_depth)))\n    max_depth)\n  (filter (lambda (x) (not (equal? x \"\"))) (map parse_paren_group (string-split paren_string \" \"))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parseNestedParens(paren_string : String) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (even_odd_count num)\n  (define even_count 0)\n  (define odd_count 0)\n  (for-each (lambda (i) (if (even? (string->number (string i))) (set! even_count (add1 even_count)) (set! odd_count (add1 odd_count)))) (string->list (number->string (abs num))))\n  (list even_count odd_count))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fruitDistribution(s : String, n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (fruit_distribution s n)\n  (define (string->intlist s)\n    (map string->number (string-split s)))\n  (- n (apply + (filter integer? (string->intlist s)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fruitDistribution(s : String, n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringXor(a : String, b : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (string_xor a b)\n  (define (xor i j)\n    (if (char=? i j) #\\0 #\\1))\n  (list->string (map xor (string->list a) (string->list b))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringXor(a : String, b : String) : String = {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strlen(string : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (strlen string)\n  (string-length string))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strlen(string : String) : Long = {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringSequence(n : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (string_sequence n)\n  (string-join (map number->string (range (add1 n)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringSequence(n : Long) : String = {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fileNameCheck(file_name : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (file_name_check file_name)\n  (define suf '(\"txt\" \"exe\" \"dll\"))\n  (define lst (string-split file_name \".\"))\n  (cond\n    [(not (= (length lst) 2)) \"No\"]\n    [(not (member (list-ref lst 1) suf)) \"No\"]\n    [(= (string-length (list-ref lst 0)) 0) \"No\"]\n    [(not (char-alphabetic? (string-ref (list-ref lst 0) 0))) \"No\"]\n    [(> (length (regexp-match* #rx\"[0-9]\" (list-ref lst 0))) 3) \"No\"]\n    [else \"Yes\"]))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def fileNameCheck(file_name : String) : String = {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def canArrange(arr : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) == (-1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (can_arrange arr)\n  (define ind -1)\n  (for ([i (in-range 1 (length arr))])\n    (when (< (list-ref arr i) (list-ref arr (- i 1)))\n      (set! ind i)))\n  ind)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def canArrange(arr : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (add lst)\n  (apply + (filter even? (map (lambda (i) (list-ref lst i)) (range 1 (length lst) 2)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def add(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (intersperse numbers delimeter)\n  (if (null? numbers)\n      '()\n      (let loop ((n (cdr numbers)) (result (list (car numbers))))\n        (if (null? n)\n            result\n            (loop (cdr n) (append result (list delimeter) (list (car n))))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def matchParens(lst : List[String]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\", \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\", \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\", \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\", \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\", \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\", \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\", \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \")(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (match_parens lst)\n  (define (check s)\n    (define (iter val s)\n      (cond\n        [(null? s) (if (= val 0) #t #f)]\n        [(eq? (car s) #\\() (iter (+ val 1) (cdr s))]\n        [(eq? (car s) #\\)) (if (< val 1) #f (iter (- val 1) (cdr s)))]\n        [else (iter val (cdr s))]))\n    (iter 0 (string->list s)))\n\n  (define S1 (string-append (list-ref lst 0) (list-ref lst 1)))\n  (define S2 (string-append (list-ref lst 1) (list-ref lst 0)))\n  (if (or (check S1) (check S2)) \"Yes\" \"No\"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def matchParens(lst : List[String]) : String = {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"grunt\", \"prune\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (filter_by_substring strings substring)\n  (filter (lambda (x) (string-contains? x substring)) strings))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findMax(words : List[String]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (find_max words)\n  (car (sort words (lambda (a b)\n                      (or (> (length (remove-duplicates (string->list a))) (length (remove-duplicates (string->list b))))\n                          (and (= (length (remove-duplicates (string->list a))) (length (remove-duplicates (string->list b))))\n                               (string<? a b)))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findMax(words : List[String]) : String = {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (generate_integers a b)\n  (define lower (max 2 (min a b)))\n  (define upper (min 8 (max a b)))\n  (filter even? (range lower (+ upper 1))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong, 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](100l.toLong, 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((\"YES\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (exchange lst1 lst2)\n  (define odd (count odd? lst1))\n  (define even (count even? lst2))\n  (if (>= even odd)\n      \"YES\"\n      \"NO\"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isEqualToSumEven(n : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (is_equal_to_sum_even n)\n  (and (even? n) (>= n 8)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isEqualToSumEven(n : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def decimalToBinary(decimal : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (decimal_to_binary decimal)\n  (string-append \"db\" (number->string decimal 2) \"db\"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def decimalToBinary(decimal : Long) : String = {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def simplify(x : String, n : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\")) == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (simplify x n)\n  (define a-b (string-split x \"/\"))\n  (define c-d (string-split n \"/\"))\n  (define numerator (* (string->number (first a-b)) (string->number (first c-d))))\n  (define denom (* (string->number (second a-b)) (string->number (second c-d))))\n  (= (/ numerator denom) (floor (/ numerator denom))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def simplify(x : String, n : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (right_angle_triangle a b c)\n  (or (= (* a a) (+ (* b b) (* c c)))\n      (= (* b b) (+ (* a a) (* c c)))\n      (= (* c c) (+ (* a a) (* b b)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def doubleTheDifference(lst : List[Float]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat, -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat, -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat, 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat, -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (double_the_difference lst)\n  (apply + (filter odd? (map (lambda (x) (* x x)) (filter (lambda (x) (and (> x 0) (integer? x))) lst)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def doubleTheDifference(lst : List[Float]) : Long = {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowZero(operations : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (below_zero operations)\n  (let loop ([balance 0] [ops operations])\n    (cond [(null? ops) #f]\n          [(< (+ balance (car ops)) 0) #t]\n          [else (loop (+ balance (car ops)) (cdr ops))])))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def belowZero(operations : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n      (greatest_common_divisor b (modulo a b))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (f n)\n  (define (factorial x)\n    (foldl * 1 (range 1 (+ x 1))))\n  (define (sum x)\n    (foldl + 0 (range 1 (+ x 1))))\n  (for/list ([i (range 1 (+ n 1))])\n    (if (even? i)\n        (factorial i)\n        (sum i))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def monotonic(l : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (monotonic l)\n  (or (equal? l (sort l <))\n      (equal? l (sort l >))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def monotonic(l : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def byLength(arr : List[Long]) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (by_length arr)\n  (define dic (hash 1 \"One\" 2 \"Two\" 3 \"Three\" 4 \"Four\" 5 \"Five\" 6 \"Six\" 7 \"Seven\" 8 \"Eight\" 9 \"Nine\"))\n  (define sorted-arr (sort arr >))\n  (define new-arr '())\n  (for ([var sorted-arr])\n    (when (hash-ref dic var #f)\n      (set! new-arr (append new-arr (list (hash-ref dic var))))))\n\n  new-arr)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def byLength(arr : List[Long]) : List[String] = {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeVowels(text : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (remove_vowels text)\n  (list->string (filter (lambda (s) (not (member s '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))) (string->list text))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeVowels(text : String) : String = {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def iscube(a : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (iscube a)\n  (= (expt (round (expt (abs a) (/ 1 3))) 3) (abs a)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def iscube(a : Long) : Boolean = {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (reverse_delete s c)\n  (define new-string (list->string (filter (lambda (char) (not (member char (string->list c)) )) (string->list s))))\n  (list new-string (equal? new-string (list->string (reverse (string->list new-string))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (mean_absolute_deviation numbers)\n  (define mean (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) (length numbers)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (correct_bracketing brackets)\n  (let loop ([depth 0] [brackets (string->list brackets)])\n    (if (null? brackets)\n        (zero? depth)\n        (if (char=? (car brackets) #\\<)\n            (loop (+ depth 1) (cdr brackets))\n            (and (positive? depth) (loop (- depth 1) (cdr brackets)))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def correctBracketing(brackets : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat, 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat, 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (rescale_to_unit numbers)\n  (let ([min-number (apply min numbers)]\n        [max-number (apply max numbers)])\n    (map (\u03bb (x) (/ (- x min-number) (- max-number min-number))) numbers)))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (intersection interval1 interval2)\n  (define (is-prime num)\n    (cond [(or (= num 1) (= num 0)) #f]\n          [(= num 2) #t]\n          [else (for/and ([i (in-range 2 num)]) (not (= 0 (modulo num i))))]))\n\n  (define l (max (first interval1) (first interval2)))\n  (define r (min (second interval1) (second interval2)))\n  (define length (- r l))\n  (if (and (> length 0) (is-prime length))\n      \"YES\"\n      \"NO\"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hexKey(num : String) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (hex_key num)\n  (define primes '(#\\2 #\\3 #\\5 #\\7 #\\B #\\D))\n  (define total 0)\n  (for ((i (in-string num)))\n    (when (member i primes)\n      (set! total (+ total 1))))\n  total)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hexKey(num : String) : Long = {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong, 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (strange_sort_list lst)\n  (let loop ((lst lst) (res '()) (switch #t))\n    (if (null? lst)\n        res\n        (let ((x (if switch (apply min lst) (apply max lst))))\n          (loop (remove x lst) (append res (list x)) (not switch))))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def allPrefixes(string : String) : List[String] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (all_prefixes string)\n  (define result '())\n  (for ([i (in-range (string-length string))])\n    (set! result (append result (list (substring string 0 (+ i 1))))))\n  result)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def allPrefixes(string : String) : List[String] = {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solution(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong, 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong, 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong, 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solution lst)\n  (apply + (filter odd? (map (lambda (x) (list-ref lst x)) (range 0 (length lst) 2)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solution(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSorted(lst : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;;\n(define (is_sorted lst)\n  (define count-digit (make-hash))\n  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)\n  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)\n      #f\n      (let loop ([i 1])\n        (if (< i (length lst))\n            (if (<= (list-ref lst (- i 1)) (list-ref lst i))\n                (loop (+ i 1))\n                #f)\n            #t))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSorted(lst : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def search(lst : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong, 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong, 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong, 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong, 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong, 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong, 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong, 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong))) == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong, 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong))) == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong, 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong))) == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (search lst)\n  (define frq (make-vector (+ (apply max lst) 1) 0))\n  (for-each (lambda (i) (vector-set! frq i (+ (vector-ref frq i) 1))) lst)\n  (define ans -1)\n  (for ([i (in-range 1 (vector-length frq))])\n    (when (>= (vector-ref frq i) i)\n      (set! ans i)))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def search(lst : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (pairs_sum_to_zero l)\n  (define (helper l1)\n    (cond [(null? l1) #f]\n          [(member (- (car l1)) (cdr l1)) #t]\n          [else (helper (cdr l1))]))\n  (helper l))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def startsOneEnds(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (starts_one_ends n)\n  (if (= n 1) 1\n      (* 18 (expt 10 (- n 2)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def startsOneEnds(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getPositive(l : List[Long]) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (get_positive l)\n  (filter (lambda (e) (> e 0)) l))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getPositive(l : List[Long]) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def concatenate(strings : List[String]) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (concatenate strings)\n  (string-append* strings))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def concatenate(strings : List[String]) : String = {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isNested(string : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (is_nested string)\n  (define opening-bracket-index '())\n  (define closing-bracket-index '())\n  (for ([i (in-range (string-length string))])\n    (cond [(char=? (string-ref string i) #\\[) (set! opening-bracket-index (append opening-bracket-index (list i)))]\n          [(char=? (string-ref string i) #\\]) (set! closing-bracket-index (cons i closing-bracket-index))]))\n  (define cnt 0)\n  (define i 0)\n  (define l (length closing-bracket-index))\n  (for ([idx opening-bracket-index])\n    (cond [(and (< i l) (< idx (list-ref closing-bracket-index i)))\n           (set! cnt (add1 cnt))\n           (set! i (add1 i))]))\n  (>= cnt 2))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isNested(string : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPalindrome(text : String) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (is_palindrome text)\n  (for/and ([i (in-range (string-length text))])\n    (equal? (string-ref text i)\n            (string-ref text (- (string-length text) 1 i)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPalindrome(text : String) : Boolean = {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countNums(arr : List[Long]) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (count_nums arr)\n  (define (digits_sum n)\n    (let ([neg (if (< n 0) -1 1)])\n      (let ([n (map (lambda (x) (string->number (string x))) (string->list (number->string (* n neg))))])\n        (apply + (cons (* (first n) neg) (rest n))))))\n\n  (length (filter (lambda (x) (> x 0)) (map digits_sum arr))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countNums(arr : List[Long]) : Long = {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def factorize(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (factorize n)\n  (define (isqrt x) (floor (sqrt x)))\n  (define (iter i n)\n    (cond ((> i (isqrt n)) (if (> n 1) (list n) '()))\n          ((zero? (modulo n i)) (cons i (iter i (quotient n i))))\n          (else (iter (+ i 1) n))))\n  (iter 2 n))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def factorize(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestPrimeFactor(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (largest_prime_factor n)\n  (define (is_prime k)\n    (and (> k 1) (not (ormap (lambda (i) (= (modulo k i) 0)) (range 2 k)))) )\n  (define largest 1)\n  (for ([j (in-range 2 (add1 n))])\n    (when (and (= (modulo n j) 0) (is_prime j))\n      (set! largest (max largest j))))\n  largest)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestPrimeFactor(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getMaxTriples(n : Long) : Long = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (get_max_triples n)\n  (define A (for/list ([i (in-range 1 (add1 n))]) (- (* i i) i 1)))\n  (define ans '())\n  (for ([i (in-range n)])\n    (for ([j (in-range (add1 i) n)])\n      (for ([k (in-range (add1 j) n)])\n        (when (= (modulo (+ (list-ref A i) (list-ref A j) (list-ref A k)) 3) 0)\n          (set! ans (cons (list (list-ref A i) (list-ref A j) (list-ref A k)) ans))))))\n  (length ans))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getMaxTriples(n : Long) : Long = {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def antiShuffle(s : String) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (anti_shuffle s)\n  (string-join (map (lambda (i) (list->string (sort (string->list i) char<=?))) (string-split s \" \")) \" \"))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def antiShuffle(s : String) : String = {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solve(N : Long) : String = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (solve N)\n  (number->string (apply + (map (lambda (c) (string->number (string c))) (string->list (number->string N)))) 2))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def solve(N : Long) : String = {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong, 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong, 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong, 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong, 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n;; \n(define (minPath grid k)\n  (define n (length grid))\n  (define val (+ (* n n) 1))\n  (for ([i (in-range n)])\n    (for ([j (in-range n)])\n      (when (= (list-ref (list-ref grid i) j) 1)\n        (define temp '())\n        (when (> i 0) (set! temp (cons (list-ref (list-ref grid (- i 1)) j) temp)))\n        (when (> j 0) (set! temp (cons (list-ref (list-ref grid i) (- j 1)) temp)))\n        (when (< i (- n 1)) (set! temp (cons (list-ref (list-ref grid (+ i 1)) j) temp)))\n        (when (< j (- n 1)) (set! temp (cons (list-ref (list-ref grid i) (+ j 1)) temp)))\n        (set! val (apply min temp)))))\n  (define ans '())\n  (for ([i (in-range k)])\n    (if (even? i)\n        (set! ans (append ans (list 1)))\n        (set! ans (append ans (list val)))))\n  ans)\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def makeAPile(n : Long) : List[Long] = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (make_a_pile n)\n  (for/list ([i n])\n    (+ n (* 2 i))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def makeAPile(n : Long) : List[Long] = {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "scala",
    "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPrime(n : Long) : Boolean = {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n",
    "stop_tokens": [
      "\n    }\n"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Racket program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Scala.\n\n### Racket version\n\n#lang racket\n\n(define (is_prime n)\n  (if (< n 2)\n      #f\n      (for/and ([k (in-range 2 (- n 1))])\n        (not (= (modulo n k) 0)))))\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Scala version\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPrime(n : Long) : Boolean = {\n"
  }
]