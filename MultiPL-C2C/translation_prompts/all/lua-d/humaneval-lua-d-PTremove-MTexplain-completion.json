[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool correct_bracketing(string brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function correct_bracketing(brackets)\n    local depth = 0\n    for i=1, #brackets do\n        if brackets:sub(i,i) == \"(\" then\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0 then\n            return false\n        end\n    end\n    return depth == 0\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool correct_bracketing(string brackets)\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nfloat triangle_area(long a, long h)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(5L, 3L) == 7.5);\n    assert(candidate(2L, 2L) == 2.0);\n    assert(candidate(10L, 8L) == 40.0);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function triangle_area(a, h)\n    return a * h / 2\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nfloat triangle_area(long a, long h)\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong special_factorial(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function special_factorial(n)\n  local fact_i = 1\n  local special_fact = 1\n  for i=1, n do\n    fact_i = fact_i * i\n    special_fact = special_fact * fact_i\n  end\n  return special_fact\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong special_factorial(long n)\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool move_one_ball(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = move_one_ball;\n\n    assert(candidate([3L, 4L, 5L, 1L, 2L]) == true);\n    assert(candidate([3L, 5L, 10L, 1L, 2L]) == true);\n    assert(candidate([4L, 3L, 1L, 2L]) == false);\n    assert(candidate([3L, 5L, 4L, 1L, 2L]) == false);\n    assert(candidate([]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function move_one_ball(arr)\n  if #arr==0 then\n    return true\n  end\n  local sorted_array = {}\n  for i=1,#arr do\n    sorted_array[i]=arr[i]\n  end\n  table.sort(sorted_array)\n  local my_arr = {}\n  local min_value = math.min(table.unpack(arr))\n  local min_index = 1\n  for i=1,#arr do\n    if arr[i]==min_value then\n      min_index = i\n      break\n    end\n  end\n  for i=min_index,#arr do\n    my_arr[#my_arr+1]=arr[i]\n  end\n  for i=1,min_index-1 do\n    my_arr[#my_arr+1]=arr[i]\n  end\n  for i=1,#arr do\n    if my_arr[i]~=sorted_array[i] then\n      return false\n    end\n  end\n  return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool move_one_ball(long[] arr)\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong digits(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) == 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n    assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function digits(n)\n    local product = 1\n    local odd_count = 0\n    for digit in tostring(n):gmatch(\"%d\") do\n        local int_digit = tonumber(digit)\n        if int_digit%2 == 1 then\n            product= product*int_digit\n            odd_count=odd_count+1\n        end\n    end\n    if odd_count ==0 then\n        return 0\n    else\n        return product\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong digits(long n)\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong fib4(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function fib4(n)\n  local results = {0, 0, 2, 0}\n  if n < 4 then\n    return results[n]\n  end\n\n  for i = 4, n do\n    table.insert(results, results[#results] + results[#results - 1] + results[#results - 2] + results[#results - 3])\n    table.remove(results, 1)\n  end\n\n  return results[#results]\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong fib4(long n)\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong[] sort_even(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_even;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [-10L, 3L, -5L, 2L, -3L, 3L, 5L, 0L, 9L, 1L, 123L]);\n    assert(candidate([5L, 8L, -12L, 4L, 23L, 2L, 3L, 11L, 12L, -10L]) == [-12L, 8L, 3L, 4L, 5L, 2L, 12L, 11L, 23L, -10L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function sort_even(l)\n    local evens = {}\n    local odds = {}\n    for i = 1, #l, 2 do\n        table.insert(evens, l[i])\n    end\n    for i = 2, #l, 2 do\n        table.insert(odds, l[i])\n    end\n    table.sort(evens)\n    local ans = {}\n    for i = 1, math.min(#evens, #odds) do\n        table.insert(ans, evens[i])\n        table.insert(ans, odds[i])\n    end\n    if #evens > #odds then\n        table.insert(ans, evens[#evens])\n    end\n    return ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong[] sort_even(long[] l)\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool is_happy(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\n  for i = 1, #s - 2 do\n    if s:sub(i,i) == s:sub(i+1,i+1) or s:sub(i+1,i+1) == s:sub(i+2,i+2) or s:sub(i,i) == s:sub(i+2,i+2) then\n      return false\n    end\n  end\n  return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool is_happy(string s)\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nstring circular_shift(long x, long shift)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function circular_shift(x, shift)\n    local s = tostring(x)\n    if shift > #s then\n        return s:reverse()\n    else\n        return s:sub(#s-shift+1) .. s:sub(1, #s-shift)\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nstring circular_shift(long x, long shift)\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong max_fill(long[][] grid, long capacity)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = max_fill;\n\n    assert(candidate([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L) == 6L);\n    assert(candidate([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L) == 5L);\n    assert(candidate([[0L, 0L, 0L], [0L, 0L, 0L]], 5L) == 0L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 2L) == 4L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 9L) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function max_fill(grid, capacity)\n  local sum = 0\n  for i=1, #grid do\n    local row_sum = 0\n    for j=1, #grid[i] do\n      row_sum = row_sum + grid[i][j]\n    end\n    sum = sum + math.ceil(row_sum/capacity)\n  end\n  return sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong max_fill(long[][] grid, long capacity)\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool has_close_elements(float[] numbers, float threshold)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = has_close_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true);\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == true);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function has_close_elements(numbers, threshold)\n  for idx, elem in ipairs(numbers) do\n    for idx2, elem2 in ipairs(numbers) do\n      if idx ~= idx2 then\n        local distance = math.abs(elem - elem2)\n        if distance < threshold then\n          return true\n        end\n      end\n    end\n  end\n  return false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nbool has_close_elements(float[] numbers, float threshold)\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nstring[] numerical_letter_grade(float[] grades)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function numerical_letter_grade(grades)\n    letter_grade = {}\n    for i, gpa in ipairs(grades) do\n        if gpa == 4.0 then\n            table.insert(letter_grade, \"A+\")\n        elseif gpa > 3.7 then\n            table.insert(letter_grade, \"A\")\n        elseif gpa > 3.3 then\n            table.insert(letter_grade, \"A-\")\n        elseif gpa > 3.0 then\n            table.insert(letter_grade, \"B+\")\n        elseif gpa > 2.7 then\n            table.insert(letter_grade, \"B\")\n        elseif gpa > 2.3 then\n            table.insert(letter_grade, \"B-\")\n        elseif gpa > 2.0 then\n            table.insert(letter_grade, \"C+\")\n        elseif gpa > 1.7 then\n            table.insert(letter_grade, \"C\")\n        elseif gpa > 1.3 then\n            table.insert(letter_grade, \"C-\")\n        elseif gpa > 1.0 then\n            table.insert(letter_grade, \"D+\")\n        elseif gpa > 0.7 then\n            table.insert(letter_grade, \"D\")\n        elseif gpa > 0.0 then\n            table.insert(letter_grade, \"D-\")\n        else\n            table.insert(letter_grade, \"E\")\n        end\n    end\n    return letter_grade\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nstring[] numerical_letter_grade(float[] grades)\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong x_or_y(long n, long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function x_or_y(n, x, y)\n    if n == 1 then\n        return y\n    end\n    for i=2, n-1 do\n        if n%i == 0 then\n            return y\n        end\n    end\n    return x\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong x_or_y(long n, long x, long y)\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong specialFilter(long[] nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function specialFilter(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 10 then\n            local odd_digits = {1, 3, 5, 7, 9}\n            local number_as_string = tostring(num)\n            if math.floor(num / 10^(#number_as_string - 1)) % 2 == 1 and num % 10 % 2 == 1 then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong specialFilter(long[] nums)\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong[] parse_music(string music_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function parse_music(music_string)\n    local note_map = {o=4, ['o|']=2, ['.|']=1}\n    local notes = {}\n    for x in music_string:gmatch(\"%S+\") do\n        table.insert(notes, note_map[x])\n    end\n    return notes\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong[] parse_music(string music_string)\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong count_distinct_characters(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function count_distinct_characters(string)\n    local set = {}\n    for i=1, #string do\n        set[string:sub(i, i):lower()] = true\n    end\n    local count = 0\n    for k, v in pairs(set) do\n        count = count + 1\n    end\n    return count\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong count_distinct_characters(string string)\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong digitSum(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\") == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\") == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\" How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function digitSum(s)\n    if s == \"\" then return 0 end\n    local sum = 0\n    for char in s:gmatch(\".\") do\n        sum = sum + (char:match(\"%u\") and string.byte(char) or 0)\n    end\n    return sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong digitSum(string s)\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong sum_squares(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function sum_squares(lst)\n    local result = {}\n    for i=1, #lst do\n        if i % 3 == 1 then\n            result[#result+1] = lst[i]^2\n        elseif i % 4 == 1 and i % 3 ~= 1 then\n            result[#result+1] = lst[i]^3\n        else\n            result[#result+1] = lst[i]\n        end\n    end\n    local sum = 0\n    for i=1, #result do\n        sum = sum + result[i]\n    end\n    return sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong sum_squares(long[] lst)\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong[] count_up_to(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function count_up_to(n)\n  local primes = {}\n  for i = 2, n - 1 do\n    local is_prime = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n      end\n    end\n    if is_prime then\n      table.insert(primes, i)\n    end\n  end\n  return primes\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong[] count_up_to(long n)\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong sum_squares(float[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function sum_squares(lst)\n  local squared = 0\n  for _, i in ipairs(lst) do\n    squared = squared + math.ceil(i)^2\n  end\n  return squared\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong sum_squares(float[] lst)\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong[] unique(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function unique(l)\n  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong[] unique(long[] l)\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong fib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    end\n    return fib(n - 1) + fib(n - 2)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong fib(long n)\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong fizz_buzz(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function fizz_buzz(n)\n  local ns = {}\n  for i = 0, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      table.insert(ns, i)\n    end\n  end\n  local s = table.concat(ns)\n  local ans = 0\n  for i = 1, #s do\n    if s:sub(i, i) == '7' then\n      ans = ans + 1\n    end\n  end\n  return ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nlong fizz_buzz(long n)\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nstring Strongest_Extension(string class_name, string[] extensions)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = Strongest_Extension;\n\n    assert(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\");\n    assert(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\");\n    assert(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\");\n    assert(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\");\n    assert(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\");\n    assert(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\");\n    assert(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\");\n    assert(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\");\n    assert(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function Strongest_Extension(class_name, extensions)\n    local strong = extensions[1]\n    local my_val = #extensions[1]:gsub('[^%a]', ''):gsub('[^%u]', '') - #extensions[1]:gsub('[^%a]', ''):gsub('[^%l]', '')\n    for i = 2, #extensions do\n        local s = extensions[i]\n        local val = #s:gsub('[^%a]', ''):gsub('[^%u]', '') - #s:gsub('[^%a]', ''):gsub('[^%l]', '')\n        if val > my_val then\n            strong = s\n            my_val = val\n        end\n    end\n    return class_name .. '.' .. strong\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nstring Strongest_Extension(string class_name, string[] extensions)\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(float, float) find_closest_elements(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function find_closest_elements(numbers)\n    local closest_pair = nil\n    local distance = nil\n\n    for idx, elem in ipairs(numbers) do\n        for idx2, elem2 in ipairs(numbers) do\n            if idx ~= idx2 then\n                if distance == nil then\n                    distance = math.abs(elem - elem2)\n                    closest_pair = {elem, elem2}\n                else\n                    new_distance = math.abs(elem - elem2)\n                    if new_distance < distance then\n                        distance = new_distance\n                        closest_pair = {elem, elem2}\n                    end\n                end\n            end\n        end\n    end\n\n    table.sort(closest_pair)\n    return closest_pair\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(float, float) find_closest_elements(float[] numbers)\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool valid_date(string date)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function valid_date(date)\n    local month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if not month or not day or not year then\n        return false\n    end\n    month, day, year = tonumber(month), tonumber(day), tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and (day < 1 or day > 29) then\n        return false\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    else\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool valid_date(string date)\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function add(x, y)\n  return x + y\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long x, long y)\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool triples_sum_to_zero(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function triples_sum_to_zero(l)\n  for i = 1, #l do\n    for j = i + 1, #l do\n      for k = j + 1, #l do\n        if l[i] + l[j] + l[k] == 0 then\n          return true\n        end\n      end\n    end\n  end\n  return false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool triples_sum_to_zero(long[] l)\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_divisor(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function largest_divisor(n)\n    for i=n-1, 1, -1 do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_divisor(long n)\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring sort_numbers(string numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function sort_numbers(numbers)\n    local value_map = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n        nine = 9\n    }\n    local words = {}\n    for word in numbers:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n    table.sort(words, function(a, b) return value_map[a] < value_map[b] end)\n    return table.concat(words, ' ')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring sort_numbers(string numbers)\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong smallest_change(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = smallest_change;\n\n    assert(candidate([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 3L, 2L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 2L, 3L, 2L, 1L]) == 0L);\n    assert(candidate([3L, 1L, 1L, 3L]) == 0L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([0L, 1L]) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function smallest_change(arr)\n  local ans = 0\n  for i = 1, math.floor(#arr / 2) do\n    if arr[i] ~= arr[#arr - i + 1] then\n      ans = ans + 1\n    end\n  end\n  return ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong smallest_change(long[] arr)\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_threshold(long[] l, long t)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function below_threshold(l, t)\n  for _, e in ipairs(l) do\n    if e >= t then\n      return false\n    end\n  end\n  return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_threshold(long[] l, long t)\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) prod_signs(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result = candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get == -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L, 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L, 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function prod_signs(arr)\n    if #arr == 0 then\n        return nil\n    end\n    local prod = 0\n    local neg_count = 0\n    for i = 1, #arr do\n        if arr[i] == 0 then\n            return 0\n        end\n        if arr[i] < 0 then\n            neg_count = neg_count + 1\n        end\n    end\n    prod = math.pow(-1, neg_count)\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + math.abs(arr[i])\n    end\n    return prod * sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) prod_signs(long[] arr)\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong modp(long n, long p)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function modp(n, p)\n    local ret = 1\n    for i=1, n do\n        ret = (2 * ret) % p\n    end\n    return ret\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong modp(long n, long p)\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_upper(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function count_upper(s)\n    local count = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match(\"[AEIOU]\") then\n            count = count + 1\n        end\n    end\n    return count\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong count_upper(string s)\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong multiply(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function multiply(a, b)\n  return math.abs(a % 10) * math.abs(b % 10)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong multiply(long a, long b)\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique_digits(long[] x)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function unique_digits(x)\n    local odd_digit_elements = {}\n    for i=1, #x do\n        if string.match(tostring(x[i]), '^[13579]+$') then\n            table.insert(odd_digit_elements, x[i])\n        end\n    end\n    table.sort(odd_digit_elements)\n    return odd_digit_elements\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] unique_digits(long[] x)\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_multiply_prime(long a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function is_multiply_prime(a)\n  local function is_prime(n)\n    for j = 2, n-1 do\n      if n%j == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\n  for i = 2, 100 do\n    if not is_prime(i) then goto continue1 end\n    for j = 2, 100 do\n      if not is_prime(j) then goto continue2 end\n      for k = 2, 100 do\n        if not is_prime(k) then goto continue3 end\n        if i*j*k == a then return true end\n        ::continue3::\n      end\n      ::continue2::\n    end\n    ::continue1::\n  end\n  return false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_multiply_prime(long a)\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] maximum(long[] arr, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function maximum(arr, k)\n    if k == 0 then\n        return {}\n    end\n    table.sort(arr)\n    local ans = {}\n    for i=#arr-k+1, #arr do\n        table.insert(ans, arr[i])\n    end\n    return ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] maximum(long[] arr, long k)\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] separate_paren_groups(string paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = separate_paren_groups;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n    assert(candidate(\"(()(())((())))\") == [\"(()(())((())))\"]);\n    assert(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function separate_paren_groups(paren_string)\n    local result = {}\n    local current_string = {}\n    local current_depth = 0\n\n    for i=1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n            current_depth = current_depth + 1\n            table.insert(current_string, c)\n        elseif c == ')' then\n            current_depth = current_depth - 1\n            table.insert(current_string, c)\n\n            if current_depth == 0 then\n                table.insert(result, table.concat(current_string))\n                current_string = {}\n            end\n        end\n    end\n\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] separate_paren_groups(string paren_string)\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong skjkasdkd(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = skjkasdkd;\n\n    assert(candidate([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L]) == 10L);\n    assert(candidate([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\n    assert(candidate([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L]) == 13L);\n    assert(candidate([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L]) == 11L);\n    assert(candidate([0L, 81L, 12L, 3L, 1L, 21L]) == 3L);\n    assert(candidate([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);\n    assert(candidate([8191L]) == 19L);\n    assert(candidate([8191L, 123456L, 127L, 7L]) == 19L);\n    assert(candidate([127L, 97L, 8192L]) == 10L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function skjkasdkd(lst)\n  local function isPrime(n)\n    for i = 2, math.floor(n^0.5) do\n      if n % i == 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local maxx = 0\n  local i = 1\n  while i <= #lst do\n    if lst[i] > maxx and isPrime(lst[i]) then\n      maxx = lst[i]\n    end\n    i = i + 1\n  end\n  local result = 0\n  for digit in tostring(maxx):gmatch('%d') do\n    result = result + tonumber(digit)\n  end\n  return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong skjkasdkd(long[] lst)\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] total_match(string[] lst1, string[] lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function total_match(lst1, lst2)\n    local l1 = 0\n    for i = 1, #lst1 do\n        l1 = l1 + #lst1[i]\n    end\n\n    local l2 = 0\n    for i = 1, #lst2 do\n        l2 = l2 + #lst2[i]\n    end\n\n    if l1 <= l2 then\n        return lst1\n    else\n        return lst2\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] total_match(string[] lst1, string[] lst2)\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong car_race_collision(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function car_race_collision(n)\n    return n^2\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong car_race_collision(long n)\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_simple_power(long x, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function is_simple_power(x, n)\n    if n == 1 then\n        return x == 1\n    end\n    local power = 1\n    while power < x do\n        power = power * n\n    end\n    return power == x\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_simple_power(long x, long n)\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encode(string message)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function encode(message)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_replace = {}\n  for i = 1, #vowels do\n    vowels_replace[vowels:sub(i, i)] = string.char(string.byte(vowels:sub(i, i)) + 2)\n  end\n  message = message:gsub(\"%a\", function(c)\n    return c == c:upper() and c:lower() or c:upper()\n  end)\n  return message:gsub(\".\", function(c)\n    return vowels_replace[c] or c\n  end)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encode(string message)\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] incr_list(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function incr_list(l)\n  local res = {}\n  for i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] incr_list(long[] l)\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring flip_case(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function flip_case(string)\n    return string:gsub(\"%a\", function(c) return c:match(\"%l\") and c:upper() or c:lower() end)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring flip_case(string string)\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong vowels_count(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function vowels_count(s)\n  local vowels = \"aeiouAEIOU\"\n  local n_vowels = 0\n  for i = 1, #s do\n    if string.find(vowels, s:sub(i, i), 1, true) then\n      n_vowels = n_vowels + 1\n    end\n  end\n  if s:sub(-1) == 'y' or s:sub(-1) == 'Y' then\n    n_vowels = n_vowels + 1\n  end\n  return n_vowels\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong vowels_count(string s)\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] words_string(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\") == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function words_string(s)\n    if not s then\n        return {}\n    end\n\n    local s_list = {}\n\n    for i=1, #s do\n        local letter = s:sub(i, i)\n        if letter == ',' then\n            table.insert(s_list, ' ')\n        else\n            table.insert(s_list, letter)\n        end\n    end\n\n    s_list = table.concat(s_list)\n    local words = {}\n    for word in s_list:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] words_string(string s)\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_palindrome(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function even_odd_palindrome(n)\n    local function is_palindrome(n)\n        return tostring(n) == string.reverse(tostring(n))\n    end\n\n    local even_palindrome_count = 0\n    local odd_palindrome_count = 0\n\n    for i=1, n do\n        if i%2 == 1 and is_palindrome(i) then\n            odd_palindrome_count = odd_palindrome_count + 1\n        elseif i%2 == 0 and is_palindrome(i) then\n            even_palindrome_count = even_palindrome_count + 1\n        end\n    end\n    return {even_palindrome_count, odd_palindrome_count}\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_palindrome(long n)\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat triangle_area(long a, long b, long c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function triangle_area(a, b, c)\n    if a + b <= c or a + c <= b or b + c <= a then\n        return -1 \n    end\n    s = (a + b + c)/2    \n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    area = math.floor(area * 100 + 0.5) / 100\n    return area\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat triangle_area(long a, long b, long c)\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_dict_case(Nullable!(string[string]) dict)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function check_dict_case(dict)\n    if next(dict) == nil then\n        return false\n    else\n        local state = \"start\"\n        for key, value in pairs(dict) do\n            if type(key) ~= \"string\" then\n                state = \"mixed\"\n                break\n            end\n            if state == \"start\" then\n                if key:upper() == key then\n                    state = \"upper\"\n                elseif key:lower() == key then\n                    state = \"lower\"\n                else\n                    break\n                end\n            elseif (state == \"upper\" and key:upper() ~= key) or (state == \"lower\" and key:lower() ~= key) then\n                state = \"mixed\"\n                break\n            end\n        end\n        return state == \"upper\" or state == \"lower\"\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_dict_case(Nullable!(string[string]) dict)\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat median(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function median(l)\n  table.sort(l)\n  if #l % 2 == 1 then\n    return l[math.floor(#l / 2) + 1]\n  else\n    return (l[#l / 2] + l[#l / 2 + 1]) / 2\n  end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat median(long[] l)\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring change_base(long x, long base)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function change_base(x, base)\n  local ret = \"\"\n  while x > 0 do\n    ret = tostring(x % base) .. ret\n    x = math.floor(x / base)\n  end\n  return ret\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring change_base(long x, long base)\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(string) longest(string[] strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function longest(strings)\n    if not strings then\n        return nil\n    end\n\n    local maxlen = 0\n    for _, s in ipairs(strings) do\n        maxlen = math.max(maxlen, #s)\n    end\n\n    for _, s in ipairs(strings) do\n        if #s == maxlen then\n            return s\n        end\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(string) longest(string[] strings)\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] common(long[] l1, long[] l2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function common(l1, l2)\n    local ret = {}\n    local set_l2 = {}\n    for i=1, #l2 do\n        set_l2[l2[i]] = true\n    end\n    for i=1, #l1 do\n        if set_l2[l1[i]] then\n            table.insert(ret, l1[i])\n        end\n    end\n    table.sort(ret)\n    return ret\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] common(long[] l1, long[] l2)\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool cycpattern_check(string a, string b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = cycpattern_check;\n\n    assert(candidate(\"xyzw\", \"xyw\") == false);\n    assert(candidate(\"yello\", \"ell\") == true);\n    assert(candidate(\"whattup\", \"ptut\") == false);\n    assert(candidate(\"efef\", \"fee\") == true);\n    assert(candidate(\"abab\", \"aabb\") == false);\n    assert(candidate(\"winemtt\", \"tinem\") == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function cycpattern_check(a, b)\n  local l = #b\n  local pat = b .. b\n  for i = 1, #a - l + 1 do\n    for j = 1, l + 1 do\n      if a:sub(i, i + l - 1) == pat:sub(j, j + l - 1) then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool cycpattern_check(string a, string b)\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong minSubArraySum(long[] nums)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function minSubArraySum(nums)\n    local max_sum = 0\n    local s = 0\n    for i=1, #nums do\n        s = s - nums[i]\n        if s < 0 then\n            s = 0\n        end\n        max_sum = math.max(s, max_sum)\n    end\n    if max_sum == 0 then\n        max_sum = -math.huge\n        for i=1, #nums do\n            max_sum = math.max(max_sum, -nums[i])\n        end\n    end\n    local min_sum = -max_sum\n    return min_sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong minSubArraySum(long[] nums)\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_array(long[] array)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function sort_array(array)\n    if #array == 0 then\n        return {}\n    else\n        if (array[1] + array[#array]) % 2 == 0 then\n            table.sort(array, function(a, b) return a > b end)\n        else\n            table.sort(array)\n        end\n        return array\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_array(long[] array)\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long[string]) histogram(string test)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function histogram(test)\n    local dict1 = {}\n    local list1 = {}\n    for word in test:gmatch(\"%w+\") do\n        table.insert(list1, word)\n    end\n    local t = 0\n    for i=1, #list1 do\n        if list1[i] ~= '' and list1[i] ~= nil then\n            if list1.count == nil then\n                list1.count = function(list, value)\n                    local count = 0\n                    for i=1, #list do\n                        if list[i] == value then\n                            count = count + 1\n                        end\n                    end\n                    return count\n                end\n            end\n            if list1:count(list1[i]) > t then\n                t = list1:count(list1[i])\n            end\n        end\n    end\n    if t > 0 then\n        for i=1, #list1 do\n            if list1[i] ~= '' and list1[i] ~= nil then\n                if list1:count(list1[i]) == t then\n                    dict1[list1[i]] = t\n                end\n            end\n        end\n    end\n    return dict1\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long[string]) histogram(string test)\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_odd_collatz(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_odd_collatz;\n\n    assert(candidate(14L) == [1L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(5L) == [1L, 5L]);\n    assert(candidate(12L) == [1L, 3L, 5L]);\n    assert(candidate(1L) == [1L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function get_odd_collatz(n)\n    local odd_collatz = (n%2==0) and {} or {n}\n    while n > 1 do\n        if n % 2 == 0 then\n            n = n/2\n        else\n            n = n*3 + 1\n        end\n        if n%2 == 1 then\n            table.insert(odd_collatz, math.floor(n))\n        end\n    end\n    table.sort(odd_collatz)\n    return odd_collatz\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_odd_collatz(long n)\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] derivative(long[] xs)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function derivative(xs)\n    local result = {}\n    for i=1, #xs-1 do\n        result[i] = i * xs[i+1]\n    end\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] derivative(long[] xs)\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fibfib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n    end\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fibfib(long n)\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat truncate_number(float number)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function truncate_number(number)\n    return number % 1\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat truncate_number(float number)\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_element(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function max_element(l)\n    local m = l[1]\n    for i=2, #l do\n        if l[i] > m then\n            m = l[i]\n        end\n    end\n    return m\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong max_element(long[] l)\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong closest_integer(string value)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function closest_integer(value)\n    local num = tonumber(value)\n    if value:find('%.5$') then\n        if num > 0 then\n            return math.ceil(num)\n        else\n            return math.floor(num)\n        end\n    elseif #value > 0 then\n        return math.floor(num + 0.5)\n    else\n        return 0\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong closest_integer(string value)\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong prime_fib(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prime_fib;\n\n    assert(candidate(1L) == 2L);\n    assert(candidate(2L) == 3L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 13L);\n    assert(candidate(5L) == 89L);\n    assert(candidate(6L) == 233L);\n    assert(candidate(7L) == 1597L);\n    assert(candidate(8L) == 28657L);\n    assert(candidate(9L) == 514229L);\n    assert(candidate(10L) == 433494437L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function prime_fib(n)\n  local function is_prime(p)\n    if p < 2 then\n      return false\n    end\n    for k = 2, math.min(math.sqrt(p) + 1, p - 1) do\n      if p % k == 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local f = {0, 1}\n  while true do\n    table.insert(f, f[#f] + f[#f - 1])\n    if is_prime(f[#f]) then\n      n = n - 1\n    end\n    if n == 0 then\n      return f[#f]\n    end\n  end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong prime_fib(long n)\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) sum_product(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function sum_product(numbers)\n    local sum_value = 0\n    local prod_value = 1\n\n    for _, n in ipairs(numbers) do\n        sum_value = sum_value + n\n        prod_value = prod_value * n\n    end\n    return {sum_value, prod_value}\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) sum_product(long[] numbers)\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] select_words(string s, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function select_words(s, n)\n  local result = {}\n  for word in s:gmatch(\"%S+\") do\n    local n_consonants = 0\n    for i = 1, #word do\n      if not word:sub(i,i):lower():find(\"[aeiou]\") then\n        n_consonants = n_consonants + 1\n      end\n    end\n    if n_consonants == n then\n      table.insert(result, word)\n    end\n  end\n  return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] select_words(string s, long n)\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add_elements(long[] arr, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    if #tostring(arr[i]) <= 2 then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add_elements(long[] arr, long k)\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] eat(long number, long need, long remaining)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function eat(number, need, remaining)\n    if need <= remaining then\n        return {number + need, remaining - need}\n    else\n        return {number + remaining, 0}\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] eat(long number, long need, long remaining)\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] odd_count(string[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = odd_count;\n\n    assert(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n    assert(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n    assert(candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function odd_count(lst)\n  local res = {}\n  for _, arr in ipairs(lst) do\n    local n = 0\n    for d in arr:gmatch('%d') do\n      if math.fmod(tonumber(d), 2) == 1 then\n        n = n + 1\n      end\n    end\n    table.insert(res, \"the number of odd elements \" .. n .. \"n the str\" .. n .. \"ng \" .. n .. \" of the \" .. n .. \"nput.\")\n  end\n  return res\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] odd_count(string[] lst)\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) next_smallest(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function next_smallest(lst)\n    table.sort(lst)\n    for i = 2, #lst do\n        if lst[i] > lst[1] then\n            return lst[i]\n        end\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nNullable!(long) next_smallest(long[] lst)\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_prefix(string[] strings, string prefix)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function filter_by_prefix(strings, prefix)\n    local res = {}\n    for _, x in ipairs(strings) do\n        if string.sub(x, 1, #prefix) == prefix then\n            table.insert(res, x)\n        end\n    end\n    return res\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_prefix(string[] strings, string prefix)\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong choose_num(long x, long y)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function choose_num(x, y)\n    if x > y then\n        return -1\n    end\n    if y % 2 == 0 then\n        return y\n    end\n    if x == y then\n        return -1\n    end\n    return y - 1\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong choose_num(long x, long y)\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool prime_length(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = prime_length;\n\n    assert(candidate(\"Hello\") == true);\n    assert(candidate(\"abcdcba\") == true);\n    assert(candidate(\"kittens\") == true);\n    assert(candidate(\"orange\") == false);\n    assert(candidate(\"wow\") == true);\n    assert(candidate(\"world\") == true);\n    assert(candidate(\"MadaM\") == true);\n    assert(candidate(\"Wow\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"HI\") == true);\n    assert(candidate(\"go\") == true);\n    assert(candidate(\"gogo\") == false);\n    assert(candidate(\"aaaaaaaaaaaaaaa\") == false);\n    assert(candidate(\"Madam\") == true);\n    assert(candidate(\"M\") == false);\n    assert(candidate(\"0\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function prime_length(string)\n  local l = #string\n  if l == 0 or l == 1 then\n    return false\n  end\n  for i = 2, l - 1 do\n    if l % i == 0 then\n      return false\n    end\n  end\n  return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool prime_length(string string)\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_to_n(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function sum_to_n(n)\n  return (n * (n + 1)) / 2\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong sum_to_n(long n)\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring fix_spaces(string text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function fix_spaces(text)\n    local new_text = \"\"\n    local i = 1\n    local start, _end = 1, 1\n    while i <= #text do\n        local c = text:sub(i, i)\n        if c == \" \" then\n            _end = _end + 1\n        else\n            if _end - start > 2 then\n                new_text = new_text .. \"-\" .. c\n            elseif _end - start > 0 then\n                new_text = new_text .. (\"_\"):rep(_end - start) .. c\n            else\n                new_text = new_text .. c\n            end\n            start, _end = i+1, i+1\n        end\n        i = i + 1\n    end\n    if _end - start > 2 then\n        new_text = new_text .. \"-\"\n    elseif _end - start > 0 then\n        new_text = new_text .. \"_\"\n    end\n    return new_text\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring fix_spaces(string text)\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] rolling_max(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = rolling_max;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 1L]) == [4L, 4L, 4L, 4L]);\n    assert(candidate([3L, 2L, 3L, 100L, 3L]) == [3L, 3L, 3L, 100L, 100L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function rolling_max(numbers)\n    local running_max = nil\n    local result = {}\n\n    for _, n in ipairs(numbers) do\n        if running_max == nil then\n            running_max = n\n        else\n            running_max = math.max(running_max, n)\n        end\n\n        table.insert(result, running_max)\n    end\n\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] rolling_max(long[] numbers)\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring words_in_sentence(string sentence)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function words_in_sentence(sentence)\n    local new_lst = {}\n    for word in sentence:gmatch(\"%S+\") do\n        local flg = 0\n        if #word == 1 then\n            flg = 1\n        end\n        for i=2, #word-1 do\n            if #word%i == 0 then\n                flg = 1\n            end\n        end\n        if flg == 0 or #word == 2 then\n            table.insert(new_lst, word)\n        end\n    end\n    return table.concat(new_lst, \" \")\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring words_in_sentence(string sentence)\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring get_closest_vowel(string word)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function get_closest_vowel(word)\n    if #word < 3 then\n        return \"\"\n    end\n\n    local vowels = {a=true, e=true, i=true, o=true, u=true, A=true, E=true, I=true, O=true, U=true}\n    for i=#word-1, 2, -1 do\n        if vowels[word:sub(i, i)] then\n            if not (vowels[word:sub(i-1, i-1)] or vowels[word:sub(i+1, i+1)]) then\n                return word:sub(i, i)\n            end\n        end\n    end\n    return \"\"\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring get_closest_vowel(string word)\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] compare(long[] game, long[] guess)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function compare(game, guess)\n  local result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n  end\n  return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] compare(long[] game, long[] guess)\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] remove_duplicates(long[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function remove_duplicates(numbers)\n  local c = {}\n  for _, n in ipairs(numbers) do\n    c[n] = (c[n] or 0) + 1\n  end\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if c[n] <= 1 then\n      table.insert(result, n)\n    end\n  end\n  return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] remove_duplicates(long[] numbers)\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool same_chars(string s0, string s1)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function same_chars(s0, s1)\n    local set0, set1 = {}, {}\n    for i=1, #s0 do set0[s0:sub(i,i)] = true end\n    for i=1, #s1 do set1[s1:sub(i,i)] = true end\n    for k in pairs(set0) do if not set1[k] then return false end end\n    for k in pairs(set1) do if not set0[k] then return false end end\n    return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool same_chars(string s0, string s1)\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_nested_parens(string paren_string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function parse_nested_parens(paren_string)\n    local function parse_paren_group(s)\n        local depth = 0\n        local max_depth = 0\n        for c in s:gmatch('.') do\n            if c == '(' then\n                depth = depth + 1\n                max_depth = math.max(depth, max_depth)\n            else\n                depth = depth - 1\n            end\n        end\n        return max_depth\n    end\n    local res = {}\n    for x in paren_string:gmatch('%S+') do\n        table.insert(res, parse_paren_group(x))\n    end\n    return res\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] parse_nested_parens(string paren_string)\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_count(long num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function even_odd_count(num)\n    local even_count = 0\n    local odd_count = 0\n    for i in tostring(math.abs(num)):gmatch(\".\") do\n        if tonumber(i)%2==0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n    return {even_count, odd_count}\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nTuple!(long, long) even_odd_count(long num)\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fruit_distribution(string s, long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function fruit_distribution(s, n)\n    local sum = 0\n    for i in string.gmatch(s, \"%d+\") do\n        sum = sum + tonumber(i)\n    end\n    return n - sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong fruit_distribution(string s, long n)\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_xor(string a, string b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_xor(string a, string b)\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong strlen(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function strlen(string)\n    return #string\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong strlen(string string)\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_sequence(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function string_sequence(n)\n    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, ' ')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring string_sequence(long n)\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong can_arrange(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function can_arrange(arr)\n    local ind=-1\n    local i=1\n    while i<#arr do\n      if arr[i]>arr[i+1] then\n        ind=i\n      end\n      i=i+1\n    end\n    return ind\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong can_arrange(long[] arr)\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function add(lst)\n  local sum = 0\n  for i = 2, #lst, 2 do\n    if lst[i]%2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong add(long[] lst)\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] intersperse(long[] numbers, long delimeter)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function intersperse(numbers, delimeter)\n    if not numbers then\n        return {}\n    end\n\n    local result = {}\n\n    for i=1, #numbers-1 do\n        table.insert(result, numbers[i])\n        table.insert(result, delimeter)\n    end\n\n    table.insert(result, numbers[#numbers])\n\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] intersperse(long[] numbers, long delimeter)\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring match_parens(string[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = match_parens;\n\n    assert(candidate([\"()(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \")\"]) == \"No\");\n    assert(candidate([\"(()(())\", \"())())\"]) == \"No\");\n    assert(candidate([\")())\", \"(()()(\"]) == \"Yes\");\n    assert(candidate([\"(())))\", \"(()())((\"]) == \"Yes\");\n    assert(candidate([\"()\", \"())\"]) == \"No\");\n    assert(candidate([\"(()(\", \"()))()\"]) == \"Yes\");\n    assert(candidate([\"((((\", \"((())\"]) == \"No\");\n    assert(candidate([\")(()\", \"(()(\"]) == \"No\");\n    assert(candidate([\")(\", \")(\"]) == \"No\");\n    assert(candidate([\"(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \"(\"]) == \"Yes\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function match_parens(lst)\n    local function check(s)\n        local val = 0\n        for i=1, #s do\n            if s:sub(i, i) == '(' then\n                val = val + 1\n            else\n                val = val - 1\n            end\n            if val < 0 then\n                return false\n            end\n        end\n        return val == 0\n    end\n\n    local S1 = lst[1]..lst[2]\n    local S2 = lst[2]..lst[1]\n    if check(S1) or check(S2) then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring match_parens(string[] lst)\n"
  },
  {
    "name": "HumanEval_92_any_int",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool any_int(float x, float y, float z)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_92_any_int.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function any_int(x, y, z)\n    if math.type(x) == \"integer\" and math.type(y) == \"integer\" and math.type(z) == \"integer\" then\n        if (x+y==z) or (x+z==y) or (y+z==x) then\n            return true\n        end\n        return false\n    end\n    return false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool any_int(float x, float y, float z)\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_substring(string[] strings, string substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, v in pairs(strings) do\n        if string.find(v, substring) then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] filter_by_substring(string[] strings, string substring)\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring find_max(string[] words)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function find_max(words)\n    table.sort(words, function(a, b)\n        if #a ~= #b then\n            return #a > #b\n        else\n            return a < b\n        end\n    end)\n\n    local max_word = words[1]\n    local max_count = 0\n\n    for i=1, #words do\n        local count = 0\n        local char_set = {}\n\n        for j=1, #words[i] do\n            if not char_set[words[i]:sub(j, j)] then\n                count = count + 1\n                char_set[words[i]:sub(j, j)] = true\n            end\n        end\n\n        if count > max_count then\n            max_count = count\n            max_word = words[i]\n        end\n    end\n\n    return max_word\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring find_max(string[] words)\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] generate_integers(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function generate_integers(a, b)\n    local lower = math.max(2, math.min(a, b))\n    local upper = math.min(8, math.max(a, b))\n\n    local result = {}\n    for i=lower, upper do\n        if i%2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] generate_integers(long a, long b)\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring exchange(long[] lst1, long[] lst2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = exchange;\n\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L]) == \"YES\");\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L]) == \"NO\");\n    assert(candidate([1L, 2L, 3L, 4L], [2L, 1L, 4L, 3L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 4L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 3L]) == \"NO\");\n    assert(candidate([3L, 2L, 6L, 1L, 8L, 9L], [3L, 5L, 5L, 1L, 1L, 1L]) == \"NO\");\n    assert(candidate([100L, 200L], [200L, 200L]) == \"YES\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function exchange(lst1, lst2)\n    local odd = 0\n    local even = 0\n    for i=1, #lst1 do\n        if lst1[i]%2 == 1 then\n            odd = odd + 1\n        end\n    end\n    for i=1, #lst2 do\n        if lst2[i]%2 == 0 then\n            even = even + 1\n        end\n    end\n    if even >= odd then\n        return \"YES\"\n    end\n    return \"NO\"\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring exchange(long[] lst1, long[] lst2)\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring int_to_mini_roman(long number)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = int_to_mini_roman;\n\n    assert(candidate(19L) == \"xix\");\n    assert(candidate(152L) == \"clii\");\n    assert(candidate(251L) == \"ccli\");\n    assert(candidate(426L) == \"cdxxvi\");\n    assert(candidate(500L) == \"d\");\n    assert(candidate(1L) == \"i\");\n    assert(candidate(4L) == \"iv\");\n    assert(candidate(43L) == \"xliii\");\n    assert(candidate(90L) == \"xc\");\n    assert(candidate(94L) == \"xciv\");\n    assert(candidate(532L) == \"dxxxii\");\n    assert(candidate(900L) == \"cm\");\n    assert(candidate(994L) == \"cmxciv\");\n    assert(candidate(1000L) == \"m\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function int_to_mini_roman(number)\n    local num = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}\n    local sym = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"}\n    local i = 13\n    local res = \"\"\n    while number > 0 do\n        local div = math.floor(number / num[i])\n        number = number % num[i]\n        while div > 0 do\n            res = res .. sym[i]\n            div = div - 1\n        end\n        i = i - 1\n    end\n    return string.lower(res)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring int_to_mini_roman(long number)\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_equal_to_sum_even(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function is_equal_to_sum_even(n)\n  return n%2 == 0 and n >= 8\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_equal_to_sum_even(long n)\n"
  },
  {
    "name": "HumanEval_33_sort_third",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_third(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_33_sort_third.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function sort_third(l)\n    l = {table.unpack(l)}\n    for i = 3, #l, 3 do\n        local j = i\n        while j > 1 and l[j - 3 + 1] > l[j + 1] do\n            l[j - 3 + 1], l[j + 1] = l[j + 1], l[j - 3 + 1]\n            j = j - 3\n        end\n    end\n    return l\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] sort_third(long[] l)\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool simplify(string x, string n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\", \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\", \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/5\", \"1/5\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function simplify(x, n)\n  local a, b = x:match(\"([^/]+)/([^/]+)\")\n  local c, d = n:match(\"([^/]+)/([^/]+)\")\n  local numerator = tonumber(a) * tonumber(c)\n  local denom = tonumber(b) * tonumber(d)\n  if (numerator/denom == math.floor(numerator/denom)) then\n    return true\n  end\n  return false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool simplify(string x, string n)\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(\"AsDf\") == \"aSdF\");\n    assert(candidate(\"1234\") == \"4321\");\n    assert(candidate(\"ab\") == \"AB\");\n    assert(candidate(\"#a@C\") == \"#A@c\");\n    assert(candidate(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert(candidate(\"#6@2\") == \"2@6#\");\n    assert(candidate(\"#$a^D\") == \"#$A^d\");\n    assert(candidate(\"#ccc\") == \"#CCC\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function solve(s)\n    local flg = 0\n    local idx = 1\n    local new_str = {}\n    for i=1, #s do\n        if string.match(s:sub(i,i), '%a') then\n            new_str[idx] = string.match(s:sub(i,i), '%a'):upper() == s:sub(i,i) and string.match(s:sub(i,i), '%a'):lower() or string.match(s:sub(i,i), '%a'):upper()\n            flg = 1\n        else\n            new_str[idx] = s:sub(i,i)\n        end\n        idx = idx + 1\n    end\n    s = table.concat(new_str)\n    if flg == 0 then\n        return s:reverse()\n    end\n    return s\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring solve(string s)\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool right_angle_triangle(long a, long b, long c)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function right_angle_triangle(a, b, c)\n  return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool right_angle_triangle(long a, long b, long c)\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong double_the_difference(float[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function double_the_difference(lst)\n    local sum = 0\n    for _, i in ipairs(lst) do\n        if i > 0 and i%2~=0 and math.floor(i) == i then\n            sum = sum + i^2\n        end\n    end\n    return sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong double_the_difference(float[] lst)\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_zero(long[] operations)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function below_zero(operations)\n    local balance = 0\n\n    for _, op in ipairs(operations) do\n        balance = balance + op\n        if balance < 0 then\n            return true\n        end\n    end\n\n    return false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool below_zero(long[] operations)\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong greatest_common_divisor(long a, long b)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function greatest_common_divisor(a, b)\n    while b ~= 0 do\n        a, b = b, a % b\n    end\n    return a\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong greatest_common_divisor(long a, long b)\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] f(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L) == [1L, 2L, 6L, 24L, 15L]);\n    assert(candidate(7L) == [1L, 2L, 6L, 24L, 15L, 720L, 28L]);\n    assert(candidate(1L) == [1L]);\n    assert(candidate(3L) == [1L, 2L, 6L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function f(n)\n    local ret = {}\n    for i=1,n do\n        if i%2 == 0 then\n            local x = 1\n            for j=1,i do x = x*j end\n            table.insert(ret, x)\n        else\n            local x = 0\n            for j=1,i do x = x+j end\n            table.insert(ret, x)\n        end\n    end\n    return ret\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] f(long n)\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool monotonic(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function monotonic(l)\n    local is_increasing = true\n    local is_decreasing = true\n\n    for i=2, #l do\n        if l[i] > l[i-1] then\n            is_decreasing = false\n        elseif l[i] < l[i-1] then\n            is_increasing = false\n        end\n    end\n\n    return is_increasing or is_decreasing\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool monotonic(long[] l)\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] by_length(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function by_length(arr)\n    local dic = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\",\n    }\n    table.sort(arr, function(a, b) return a > b end)\n    local new_arr = {}\n    for i, var in ipairs(arr) do\n        if dic[var] then\n            table.insert(new_arr, dic[var])\n        end\n    end\n    return new_arr\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] by_length(long[] arr)\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring remove_vowels(string text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = remove_vowels;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\");\n    assert(candidate(\"fedcba\") == \"fdcb\");\n    assert(candidate(\"eeeee\") == \"\");\n    assert(candidate(\"acBAA\") == \"cB\");\n    assert(candidate(\"EcBOO\") == \"cB\");\n    assert(candidate(\"ybcd\") == \"ybcd\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function remove_vowels(text)\n    return text:gsub(\"[aeiouAEIOU]\", \"\")\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring remove_vowels(string text)\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_if_last_char_is_a_letter(string txt)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = check_if_last_char_is_a_letter;\n\n    assert(candidate(\"apple\") == false);\n    assert(candidate(\"apple pi e\") == true);\n    assert(candidate(\"eeeee\") == false);\n    assert(candidate(\"A\") == true);\n    assert(candidate(\"Pumpkin pie \") == false);\n    assert(candidate(\"Pumpkin pie 1\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"eeeee e \") == false);\n    assert(candidate(\"apple pie\") == false);\n    assert(candidate(\"apple pi e \") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function check_if_last_char_is_a_letter(txt)\n    local check = txt:match(\"%a%a*$\")\n    return check ~= nil and #check == 1\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool check_if_last_char_is_a_letter(string txt)\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool iscube(long a)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function iscube(a)\n    a = math.abs(a)\n    return math.floor(a^(1/3) + 0.5)^3 == a\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool iscube(long a)\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat mean_absolute_deviation(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function mean_absolute_deviation(numbers)\n    local mean = 0\n    for _, v in ipairs(numbers) do\n        mean = mean + v\n    end\n    mean = mean / #numbers\n    local sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat mean_absolute_deviation(float[] numbers)\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool correct_bracketing(string brackets)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function correct_bracketing(brackets)\n    local depth = 0\n    for b in brackets:gmatch(\".\") do\n        if b == \"<\" then\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0 then\n            return false\n        end\n    end\n    return depth == 0\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool correct_bracketing(string brackets)\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat[] rescale_to_unit(float[] numbers)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function rescale_to_unit(numbers)\n    local min_number = math.min(table.unpack(numbers))\n    local max_number = math.max(table.unpack(numbers))\n    local result = {}\n    for i, x in ipairs(numbers) do\n        result[i] = (x - min_number) / (max_number - min_number)\n    end\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nfloat[] rescale_to_unit(float[] numbers)\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function intersection(interval1, interval2)\n    local function is_prime(num)\n        if num == 1 or num == 0 then\n            return false\n        end\n        if num == 2 then\n            return true\n        end\n        for i=2,num-1 do\n            if num%i == 0 then\n                return false\n            end\n        end\n        return true\n    end\n\n    local l = math.max(interval1[1], interval2[1])\n    local r = math.min(interval1[2], interval2[2])\n    local length = r - l\n    if length > 0 and is_prime(length) then\n        return \"YES\"\n    end\n    return \"NO\"\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong hex_key(string num)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function hex_key(num)\n    local primes = {'2', '3', '5', '7', 'B', 'D'}\n    local total = 0\n    for i = 1, #num do\n        if table.concat(primes):find(num:sub(i, i)) then\n            total = total + 1\n        end\n    end\n    return total\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong hex_key(string num)\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] strange_sort_list(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function strange_sort_list(lst)\n    local res, switch = {}, true\n    while #lst > 0 do\n        if switch then\n            table.insert(res, math.min(table.unpack(lst)))\n        else\n            table.insert(res, math.max(table.unpack(lst)))\n        end\n        local index = 0\n        for i, v in ipairs(lst) do\n            if v == res[#res] then\n                index = i\n                break\n            end\n        end\n        table.remove(lst, index)\n        switch = not switch\n    end\n    return res\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] strange_sort_list(long[] lst)\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] all_prefixes(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function all_prefixes(string)\n    local result = {}\n\n    for i=1, #string do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring[] all_prefixes(string string)\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong how_many_times(string string, string substring)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function how_many_times(string, substring)\n  local times = 0\n  for i = 1, #string - #substring + 1 do\n    if string:sub(i, i + #substring - 1) == substring then\n      times = times + 1\n    end\n  end\n  return times\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong how_many_times(string string, string substring)\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong solution(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function solution(lst)\n  local sum = 0\n  for idx, x in ipairs(lst) do\n    if idx%2==1 and x%2==1 then\n      sum = sum + x\n    end\n  end\n  return sum\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong solution(long[] lst)\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_sorted(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function is_sorted(lst)\n    local count_digit = {}\n    for i=1, #lst do\n        count_digit[lst[i]] = (count_digit[lst[i]] or 0) + 1\n    end\n    for i=1, #lst do\n        if count_digit[lst[i]] > 2 then\n            return false\n        end\n    end\n    for i=2, #lst do\n        if lst[i-1] > lst[i] then\n            return false\n        end\n    end\n    return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_sorted(long[] lst)\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong search(long[] lst)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L, 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L, 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L, 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L, 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function search(lst)\n    local frq = {}\n    for i=1, math.max(table.unpack(lst)) do\n        frq[i] = 0\n    end\n    for i=1, #lst do\n        frq[lst[i]] = frq[lst[i]] + 1\n    end\n\n    local ans = -1\n    for i=1, #frq do\n        if frq[i] >= i then\n            ans = i\n        end\n    end\n    return ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong search(long[] lst)\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] pluck(long[] arr)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function pluck(arr)\n    if(#arr == 0) then return {} end\n    local evens = {}\n    for _, v in ipairs(arr) do\n        if(v%2 == 0) then table.insert(evens, v) end\n    end\n    if(#evens == 0) then return {} end\n    local min_val = math.min(table.unpack(evens))\n    for i, v in ipairs(arr) do\n        if(v == min_val) then return {min_val, i-1} end\n    end\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] pluck(long[] arr)\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool pairs_sum_to_zero(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function pairs_sum_to_zero(l)\n  for i, l1 in ipairs(l) do\n    for j = i + 1, #l do\n      if l1 + l[j] == 0 then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool pairs_sum_to_zero(long[] l)\n"
  },
  {
    "name": "HumanEval_10_make_palindrome",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring make_palindrome(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function make_palindrome(string)\n    if not string then\n        return ''\n    end\n\n    local beginning_of_suffix = 0\n\n    while string:sub(beginning_of_suffix+1) ~= string:sub(beginning_of_suffix+1):reverse() do\n        beginning_of_suffix = beginning_of_suffix + 1\n    end\n\n    return string .. string:sub(1, beginning_of_suffix):reverse()\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring make_palindrome(string string)\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong starts_one_ends(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function starts_one_ends(n)\n  if n == 1 then return 1 end\n  return 18 * (10 ^ (n - 2))\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong starts_one_ends(long n)\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_positive(long[] l)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function get_positive(l)\n  local res = {}\n  for _, e in ipairs(l) do\n    if e > 0 then\n      table.insert(res, e)\n    end\n  end\n  return res\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] get_positive(long[] l)\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring concatenate(string[] strings)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = concatenate;\n\n    assert(candidate([]) == \"\");\n    assert(candidate([\"x\", \"y\", \"z\"]) == \"xyz\");\n    assert(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function concatenate(strings)\n  return table.concat(strings)\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring concatenate(string[] strings)\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_nested(string string)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_nested;\n\n    assert(candidate(\"[[]]\") == true);\n    assert(candidate(\"[]]]]]]][[[[[]\") == false);\n    assert(candidate(\"[][]\") == false);\n    assert(candidate(\"[]\") == false);\n    assert(candidate(\"[[[[]]]]\") == true);\n    assert(candidate(\"[]]]]]]]]]]\") == false);\n    assert(candidate(\"[][][[]]\") == true);\n    assert(candidate(\"[[]\") == false);\n    assert(candidate(\"[]]\") == false);\n    assert(candidate(\"[[]][[\") == true);\n    assert(candidate(\"[[][]]\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"[[[[[[[[\") == false);\n    assert(candidate(\"]]]]]]]]\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function is_nested(string)\n    local opening_bracket_index = {}\n    local closing_bracket_index = {}\n    for i=1, #string do\n        if string:sub(i,i) == '[' then\n            table.insert(opening_bracket_index, i)\n        else\n            table.insert(closing_bracket_index, i)\n        end\n    end\n    table.sort(closing_bracket_index, function(a,b) return a>b end)\n    local cnt = 0\n    local i = 1\n    local l = #closing_bracket_index\n    for _, idx in ipairs(opening_bracket_index) do\n        if i <= l and idx < closing_bracket_index[i] then\n            cnt = cnt + 1\n            i = i + 1\n        end\n    end\n    return cnt >= 2\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_nested(string string)\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_palindrome(string text)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function is_palindrome(text)\n    for i=1, #text do\n        if text:sub(i, i) ~= text:sub(#text - i + 1, #text - i + 1) then\n            return false\n        end\n    end\n    return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_palindrome(string text)\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] factorize(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function factorize(n)\n    local fact = {}\n    local i = 2\n    while i <= math.sqrt(n) + 1 do\n        if n % i == 0 then\n            table.insert(fact, i)\n            n = n / i\n        else\n            i = i + 1\n        end\n    end\n    if n > 1 then\n        table.insert(fact, n)\n    end\n    return fact\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] factorize(long n)\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_prime_factor(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function largest_prime_factor(n)\n  local function is_prime(k)\n    if k < 2 then\n      return false\n    end\n    for i = 2, k - 1 do\n      if k % i == 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local largest = 1\n  for j = 2, n + 1 do\n    if n % j == 0 and is_prime(j) then\n      largest = math.max(largest, j)\n    end\n  end\n  return largest\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong largest_prime_factor(long n)\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong get_max_triples(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function get_max_triples(n)\n  local A = {}\n  for i=1,n do\n    A[i] = i*i - i + 1\n  end\n  local ans = {}\n  for i=1,n do\n    for j=i+1,n do\n      for k=j+1,n do\n        if (A[i]+A[j]+A[k])%3 == 0 then\n          table.insert(ans, {A[i],A[j],A[k]})\n        end\n      end\n    end\n  end\n  return #ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong get_max_triples(long n)\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring anti_shuffle(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function anti_shuffle(s)\n    local t = {}\n    for i in s:gmatch('%S+') do\n        local u = {}\n        for j = 1, #i do\n            u[j] = i:sub(j, j)\n        end\n        table.sort(u)\n        t[#t + 1] = table.concat(u)\n    end\n    return table.concat(t, ' ')\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring anti_shuffle(string s)\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] minPath(long[][] grid, long k)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = minPath;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L) == [1L, 2L, 1L]);\n    assert(candidate([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L) == [1L]);\n    assert(candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]], 4L) == [1L, 2L, 1L, 2L]);\n    assert(candidate([[6L, 4L, 13L, 10L], [5L, 7L, 12L, 1L], [3L, 16L, 11L, 15L], [8L, 14L, 9L, 2L]], 7L) == [1L, 10L, 1L, 10L, 1L, 10L, 1L]);\n    assert(candidate([[8L, 14L, 9L, 2L], [6L, 4L, 13L, 15L], [5L, 7L, 1L, 12L], [3L, 10L, 11L, 16L]], 5L) == [1L, 7L, 1L, 7L, 1L]);\n    assert(candidate([[11L, 8L, 7L, 2L], [5L, 16L, 14L, 4L], [9L, 3L, 15L, 6L], [12L, 13L, 10L, 1L]], 9L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L]);\n    assert(candidate([[12L, 13L, 10L, 1L], [9L, 3L, 15L, 6L], [5L, 16L, 14L, 4L], [11L, 8L, 7L, 2L]], 12L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L]);\n    assert(candidate([[2L, 7L, 4L], [3L, 1L, 5L], [6L, 8L, 9L]], 8L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n    assert(candidate([[6L, 1L, 5L], [3L, 8L, 9L], [2L, 7L, 4L]], 8L) == [1L, 5L, 1L, 5L, 1L, 5L, 1L, 5L]);\n    assert(candidate([[1L, 2L], [3L, 4L]], 10L) == [1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L]);\n    assert(candidate([[1L, 3L], [3L, 2L]], 10L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function minPath(grid, k)\n    local n = #grid\n    local val = n * n + 1\n    for i = 1, n do\n        for j = 1, n do\n            if grid[i][j] == 1 then\n                local temp = {}\n                if i ~= 1 then\n                    table.insert(temp, grid[i-1][j])\n                end\n\n                if j ~= 1 then\n                    table.insert(temp, grid[i][j-1])\n                end\n\n                if i ~= n then\n                    table.insert(temp, grid[i+1][j])\n                end\n\n                if j ~= n then\n                    table.insert(temp, grid[i][j+1])\n                end\n\n                val = math.min(table.unpack(temp))\n            end\n        end\n    end\n\n    local ans = {}\n    for i = 1, k do\n        if i % 2 == 1 then\n            table.insert(ans, 1)\n        else\n            table.insert(ans, val)\n        end\n    end\n    return ans\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] minPath(long[][] grid, long k)\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encrypt(string s)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function encrypt(s)\n    local d = 'abcdefghijklmnopqrstuvwxyz'\n    local out = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if d:find(c) then\n            out = out .. d:sub((d:find(c) + 2*2 - 1) % 26 + 1, (d:find(c) + 2*2 - 1) % 26 + 1)\n        else\n            out = out .. c\n        end\n    end\n    return out\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nstring encrypt(string s)\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] make_a_pile(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function make_a_pile(n)\n  local pile = {}\n  for i = 0, n-1 do\n    pile[i+1] = n + 2*i\n  end\n  return pile\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nlong[] make_a_pile(long n)\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "d",
    "prompt": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_prime(long n)\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
    "stop_tokens": [
      "\nvoid",
      "\nbool",
      "\nint",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in D.\n\n### Lua version\n\nmath = require('math')\nlocal function is_prime(n)\n    if n < 2 then\n        return false\n    end\n    for k=2, n-1 do\n        if n % k == 0 then\n            return false\n        end\n    end\n    return true\nend\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### D version\n\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.format;\nimport std.math;\nimport std.range;\nimport std.string;\nimport std.typecons;\nbool is_prime(long n)\n"
  }
]